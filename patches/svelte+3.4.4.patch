diff --git a/node_modules/svelte/CHANGELOG.md b/node_modules/svelte/CHANGELOG.md
index 4df3c6f..766a163 100644
--- a/node_modules/svelte/CHANGELOG.md
+++ b/node_modules/svelte/CHANGELOG.md
@@ -1,5 +1,449 @@
 # Svelte changelog
 
+## 3.4.4
+
+* Publish type declaration files ([#2874](https://github.com/sveltejs/svelte/issues/2874))
+* Don't trigger updates for unreferenced values ([#2865](https://github.com/sveltejs/svelte/pull/2865))
+* Omit readonly bindings from SSR output ([#2339](https://github.com/sveltejs/svelte/issues/2339))
+* Prevent outdated animation CSS ([#2871](https://github.com/sveltejs/svelte/issues/2871))
+* Repair dynamic `{@html ...}` in head ([#2880](https://github.com/sveltejs/svelte/pull/2880))
+* Don't create unknown prop warnings for internal props, or if component has `$$props` ([#2881](https://github.com/sveltejs/svelte/pull/2881))
+
+
+## 3.4.3
+
+* Add type declaration files for everything ([#2842](https://github.com/sveltejs/svelte/pull/2842))
+* Prevent `svelte/store` being bundled ([#2786](https://github.com/sveltejs/svelte/issues/2786))
+* Warn on unknown props in dev mode ([#2840](https://github.com/sveltejs/svelte/pull/2840))
+* Treat `requestAnimationFrame` as a no-op on the server ([#2856](https://github.com/sveltejs/svelte/pull/2856))
+* Add `raw` property to AST's `Text` nodes ([#2714](https://github.com/sveltejs/svelte/issues/2714))
+* Add `<details bind:open>` ([#2854](https://github.com/sveltejs/svelte/issues/2854))
+
+## 3.4.2
+
+* Use empty string for empty data attributes ([#2804](https://github.com/sveltejs/svelte/pull/2804))
+* Support `customElement: true` with no `<svelte:options>` ([#2821](https://github.com/sveltejs/svelte/issues/2821))
+* Add docstrings to `svelte/store` ([#2795](https://github.com/sveltejs/svelte/pull/2795))
+
+## 3.4.1
+
+* Handle non-falsy non-function return values from derivers ([#2780](https://github.com/sveltejs/svelte/issues/2780))
+* Allow `spring` to work server-side ([#2773](https://github.com/sveltejs/svelte/issues/2773))
+
+## 3.4.0
+
+* Allow custom element to be defined without a `tag` ([#2417](https://github.com/sveltejs/svelte/issues/2417))
+* Fix parsing of quote marks inside attribute values ([#2715](https://github.com/sveltejs/svelte/pull/2754))
+* Convert `svelte/store` to TypeScript ([#2733](https://github.com/sveltejs/svelte/pull/2733))
+* Allow `debug` tags to include hoisted values ([#2764](https://github.com/sveltejs/svelte/issues/2764))
+* Parse error if attribute name is missing `=` ([#1513](https://github.com/sveltejs/svelte/pull/2770))
+* Allow reactive declarations to depend on mutated `const` values ([#2728](https://github.com/sveltejs/svelte/issues/2728))
+
+## 3.3.0
+
+* Allow multiple event listeners on a single node ([#2688](https://github.com/sveltejs/svelte/issues/2688))
+* Allow derivers to return a cleanup function ([#2553](https://github.com/sveltejs/svelte/issues/2553))
+* Support namespaced components (`<Foo.Bar/>`) ([#2743](https://github.com/sveltejs/svelte/pull/2743))
+
+## 3.2.2
+
+* Add `window` and `document` to expected globals ([#2722](https://github.com/sveltejs/svelte/pull/2722))
+* Prevent hoisting of functions that depend on reactive state ([#2703](https://github.com/sveltejs/svelte/pull/2703))
+* Generate correct code when slot has no changes ([#2697](https://github.com/sveltejs/svelte/issues/2697))
+* Prevent `Object.prototype`-related bugs ([#2696](https://github.com/sveltejs/svelte/pull/2696))
+
+## 3.2.1
+
+* Use same comparison logic for `derived` as for other stores ([#2644](https://github.com/sveltejs/svelte/issues/2644))
+* Invalidate dependencies of reactive declarations ([#2444](https://github.com/sveltejs/svelte/issues/2444))
+* Fix instrumentation of auto-subscription self-assignments ([#2681](https://github.com/sveltejs/svelte/issues/2681))
+* Warn on non-top-level or module-context statements labeled with `$:` ([#2176](https://github.com/sveltejs/svelte/issues/2176))
+
+## 3.2.0
+
+* Improve `spring` animations, and add `hard`/`soft` options ([#2627](https://github.com/sveltejs/svelte/pull/2627))
+* Expose `parse` and `walk` functions ([#2661](https://github.com/sveltejs/svelte/issues/2661), [#2534](https://github.com/sveltejs/svelte/pull/2534))
+* Support array/object rest in `each` block destructuring patterns ([#2647](https://github.com/sveltejs/svelte/issues/2647), [#2658](https://github.com/sveltejs/svelte/pull/2658))
+* Use `setAttribute` to change `form` property on form elements ([#1742](https://github.com/sveltejs/svelte/issues/1742))
+* Fix a11y warning when `<figcaption>` is non-direct descendant of `<figure>` ([#2582](https://github.com/sveltejs/svelte/issues/2582))
+* Squelch erroneous 'empty block' warnings ([#1716](https://github.com/sveltejs/svelte/issues/1716))
+* Fix IE9/10 error with `insertBefore` ([#2573](https://github.com/sveltejs/svelte/issues/2573))
+* Prevent `$$scope` from being spread onto an element ([#2520](https://github.com/sveltejs/svelte/issues/2520))
+* Resubscribe to stores that are assigned to in `<script>` ([#2435](https://github.com/sveltejs/svelte/issues/2435))
+* Allow reactive declarations to depend on `const` variables ([#2285](https://github.com/sveltejs/svelte/issues/2285))
+* Trigger store changes on UpdateExpression ([#2625](https://github.com/sveltejs/svelte/issues/2625))
+* Squelch missing prop warning if variable is initialised ([#2635](https://github.com/sveltejs/svelte/issues/2635))
+* Add `alert`, `confirm` and `prompt` to known globals ([#2648](https://github.com/sveltejs/svelte/issues/2648))
+
+
+## 3.1.0
+
+* Allow store subscribe functions to return an object with an `unsubscribe` method, providing native RxJS support ([#2549](https://github.com/sveltejs/svelte/issues/2549))
+
+## 3.0.1
+
+* Prevent text input cursor jumping in Safari ([#2506](https://github.com/sveltejs/svelte/issues/2506))
+* Allow assignments to member expressions ([#2510](https://github.com/sveltejs/svelte/issues/2510))
+* Prevent mutually dependent functions causing an infinite during hoisting ([#2542](https://github.com/sveltejs/svelte/issues/2542))
+* Reuse scheduler promise instead of creating new one each time ([#2555](https://github.com/sveltejs/svelte/pull/2555))
+* Various site/docs fixes
+
+## 3.0.0
+
+* Everything
+
+## 2.15.4
+
+* IE `classList` fix ([#1868](https://github.com/sveltejs/svelte/pull/1868))
+
+## 2.15.3
+
+* Don't mutate AST
+
+## 2.15.2
+
+* Expose `stats.props` ([#1837](https://github.com/sveltejs/svelte/issues/1837))
+
+## 2.15.1
+
+* Don't throw missing store error when store is declared in component ([#1828](https://github.com/sveltejs/svelte/issues/1828))
+
+## 2.15.0
+
+* Event modifiers ([#1088](https://github.com/sveltejs/svelte/issues/1088))
+* Wheel and touch events are passive by default ([#1088](https://github.com/sveltejs/svelte/issues/1088))
+* Add `<svelte:document>` tag ([#1484](https://github.com/sveltejs/svelte/issues/1484))
+* Include binding values in server-rendered HTML ([#1205](https://github.com/sveltejs/svelte/issues/1205))
+* Remove attributes when value is undefined/null ([#1434](https://github.com/sveltejs/svelte/issues/1434))
+* Initialise window scroll from component data ([#938](https://github.com/sveltejs/svelte/issues/938))
+* Remove references to unused properties in generated code ([#1187](https://github.com/sveltejs/svelte/issues/1187))
+* Add TypeScript definitions for store ([#1207](https://github.com/sveltejs/svelte/issues/1207))
+* Better error for missing store ([#1807](https://github.com/sveltejs/svelte/issues/1807))
+
+## 2.14.3
+
+* Account for directive dependencies ([#1793](https://github.com/sveltejs/svelte/issues/1793))
+* Detach each block iterations in each blocks with no update method ([#1795](https://github.com/sveltejs/svelte/issues/1795))
+
+## 2.14.2
+
+* Fix issue with nested `{#if}` blocks ([#1780](https://github.com/sveltejs/svelte/issues/1780))
+
+## 2.14.1
+
+* Fix block insertion order regression ([#1778](https://github.com/sveltejs/svelte/issues/1778))
+* Fix blocks inside `<svelte:head>` ([#1774](https://github.com/sveltejs/svelte/issues/1774))
+* Better attribute parsing ([#1772](https://github.com/sveltejs/svelte/issues/1772))
+* Fix parse errors inside directives ([#1788](https://github.com/sveltejs/svelte/issues/1788))
+
+
+## 2.14.0
+
+* Refactor internals ([#1678](https://github.com/sveltejs/svelte/issues/1678))
+* Deprecate `onerror` option ([#1745](https://github.com/sveltejs/svelte/issues/1745))
+* Handle edge cases where `destroy` is called before `mount` ([#1653](https://github.com/sveltejs/svelte/pull/1653))
+* Make `scroll` binding more efficient ([#1579](https://github.com/sveltejs/svelte/pull/1770))
+* Make 'readonly property' store error more informative ([#1761](https://github.com/sveltejs/svelte/pull/1761))
+
+## 2.13.5
+
+* Fix missing dependencies in shorthand class directives ([#1739](https://github.com/sveltejs/svelte/issues/1739))
+
+## 2.13.4
+
+* Support dynamic `import()` in template expressions
+
+## 2.13.3
+
+* Fix bug with keyed each blocks and nested components ([#1706](https://github.com/sveltejs/svelte/issues/1706))
+
+## 2.13.2
+
+* Coalesce simultaneous store/component updates ([#1520](https://github.com/sveltejs/svelte/issues/1520))
+* Fix nested transitions preventing each block item removal ([#1617](https://github.com/sveltejs/svelte/issues/1617))
+* Add `class` directive shorthand and encapsulate styles ([#1695](https://github.com/sveltejs/svelte/pull/1695))
+* Prevent erroneous updates of bound inputs ([#1699](https://github.com/sveltejs/svelte/issues/1699))
+
+## 2.13.1
+
+* Coerce second argument to `toggleClass` ([#1685](https://github.com/sveltejs/svelte/issues/1685))
+
+## 2.13.0
+
+* Add `class` directive ([#890](https://github.com/sveltejs/svelte/issues/890))
+* Remove sourcemaps from npm package ([#1690](https://github.com/sveltejs/svelte/pull/1690))
+
+## 2.12.1
+
+* Allow actions to take any expression ([#1676](https://github.com/sveltejs/svelte/issues/1676))
+* Run transitions in component context ([#1675](https://github.com/sveltejs/svelte/issues/1675))
+* Correctly set select value on mount ([#1666](https://github.com/sveltejs/svelte/issues/1666))
+* Support `{@debug}` in SSR ([#1659](https://github.com/sveltejs/svelte/issues/1659))
+* Don't treat `&nbsp;` as empty whitespace ([#1658](https://github.com/sveltejs/svelte/issues/1658))
+* Fix outros for if blocks with no else ([#1688](https://github.com/sveltejs/svelte/pull/1688))
+* Set `style.cssText` in spread attributes ([#1684](https://github.com/sveltejs/svelte/pull/1684))
+
+
+## 2.12.0
+
+* Initialise actions on mount rather than hydrate ([#1653](https://github.com/sveltejs/svelte/pull/1653))
+* Allow non-existent components to be destroyed ([#1677](https://github.com/sveltejs/svelte/pull/1677))
+* Pass AMD ID from CLI correctly ([#1672](https://github.com/sveltejs/svelte/pull/1672))
+* Minor AST tweaks ([#1673](https://github.com/sveltejs/svelte/pull/1673), [#1674](https://github.com/sveltejs/svelte/pull/1674))
+* Reduce code duplication in component initialisation ([#1670](https://github.com/sveltejs/svelte/pull/1670))
+
+
+## 2.11.0
+
+* Add `--shared` CLI option ([#1649](https://github.com/sveltejs/svelte/pull/1649))
+* Run first `onstate` *before* fragment is rendered ([#1522](https://github.com/sveltejs/svelte/issues/1522))
+* Exclude current computed prop from state object ([#1544](https://github.com/sveltejs/svelte/issues/1544))
+
+
+## 2.10.1
+
+* Add sourcemaps to `{@debug}` tags ([#1647](https://github.com/sveltejs/svelte/pull/1647))
+
+## 2.10.0
+
+* Add a `{@debug}` tag, for inspecting values in templates in dev mode ([#1635](https://github.com/sveltejs/svelte/issues/1635))
+* Fix dimension bindings in iOS ([#1642](https://github.com/sveltejs/svelte/pull/1642))
+
+## 2.9.11
+
+* Pass props to custom elements rather than setting attributes, where appropriate ([#875](https://github.com/sveltejs/svelte/issues/875))
+* Handle whitespace in lists consistently between SSR and DOM renderers ([#1637](https://github.com/sveltejs/svelte/pull/1637))
+* Improve error for invalid `ref` names ([#1613](https://github.com/sveltejs/svelte/issues/1613))
+
+## 2.9.10
+
+* Handle `null` consistently in tags ([#1598](https://github.com/sveltejs/svelte/issues/1598))
+* Support object rest in computed properties ([#1540](https://github.com/sveltejs/svelte/issues/1540))
+* Always update dynamic components when expression changes ([#1621](https://github.com/sveltejs/svelte/issues/1621))
+* Encapsulate local styles inside global styles ([#1618](https://github.com/sveltejs/svelte/issues/1618))
+
+## 2.9.9
+
+* Fix attribute name regex ([#1623](https://github.com/sveltejs/svelte/pull/1623))
+
+## 2.9.8
+
+* Sanitize spread attributes in SSR — fixes vulnerability CVE-2018-6341 ([#1623](https://github.com/sveltejs/svelte/pull/1623))
+
+## 2.9.7
+
+* Allow `<input type=file bind:files>` ([#1608](https://github.com/sveltejs/svelte/issues/1608))
+* Ensure child window exists before removing listener in `addResizeHandler` ([#1600](https://github.com/sveltejs/svelte/issues/1600))
+* Handle transitions in `else` block ([#1589](https://github.com/sveltejs/svelte/issues/1589))
+
+## 2.9.6
+
+* Provide more useful error if SSR component attempts to render non-SSR component ([#1605](https://github.com/sveltejs/svelte/issues/1605))
+
+## 2.9.5
+
+* Null out refs to dynamic components ([#1596](https://github.com/sveltejs/svelte/issues/1596))
+
+## 2.9.4
+
+* Make identifier optional for `then` and `catch` blocks ([#1507](https://github.com/sveltejs/svelte/issues/1507))
+* Group outros correctly ([#1575](https://github.com/sveltejs/svelte/issues/1575))
+
+## 2.9.3
+
+* Fix bug when an each block contains transitions but its else branch does not ([#1559](https://github.com/sveltejs/svelte/issues/1559))
+* If an event handler throws an exception, don't block all future calls to that handler ([#1573](https://github.com/sveltejs/svelte/issues/1573))
+
+## 2.9.2
+
+* Fix conflict when using multiple if-else blocks, some of which use outros and some of which do not ([#1580](https://github.com/sveltejs/svelte/issues/1580))
+* Fix some cases where `.innerHTML` was being used to create child elements when it shouldn't ([#1581](https://github.com/sveltejs/svelte/issues/1581))
+
+## 2.9.1
+
+* Use `template.content` instead of `template` where appropriate ([#1571](https://github.com/sveltejs/svelte/issues/1571))
+
+## 2.9.0
+
+* Play outro transitions on `<svelte:component>` if `nestedTransitions` is true ([#1568](https://github.com/sveltejs/svelte/issues/1568))
+* Allow illegal identifiers to be component prop names, for e.g. spreading `data-foo` props ([#887](https://github.com/sveltejs/svelte/issues/887))
+* Abort transition when node is detached ([#1561](https://github.com/sveltejs/svelte/issues/1561))
+* Only include `transitionManager` when necessary ([#1514](https://github.com/sveltejs/svelte/issues/1514))
+
+## 2.8.1
+
+* Fix prefixed animation name replacement ([#1556](https://github.com/sveltejs/svelte/pull/1556))
+
+## 2.8.0
+
+* Correctly set store on nested components (to parent store, not root store) ([#1538](https://github.com/sveltejs/svelte/issues/1538))
+
+## 2.7.2
+
+* Prevent unnecessary remounts ([#1527](https://github.com/sveltejs/svelte/issues/1527))
+* Allow `refs.*` as callee ([#1526](https://github.com/sveltejs/svelte/pull/1526))
+* Handle empty lists when outroing ([#1532](https://github.com/sveltejs/svelte/issues/1532))
+
+## 2.7.1
+
+* Fix spread props with multiple dependencies ([#1515](https://github.com/sveltejs/svelte/issues/1515))
+
+## 2.7.0
+
+* Add `__svelte_meta` object to elements in dev mode, containing source info ([#1499](https://github.com/sveltejs/svelte/issues/1499))
+* Fix `bind:online` in dev mode ([#1502](https://github.com/sveltejs/svelte/issues/1502))
+* Update v1 warnings/errors ([#1508](https://github.com/sveltejs/svelte/pull/1508))
+* Transform prefixed keyframes ([#1504](https://github.com/sveltejs/svelte/issues/1504))
+
+## 2.6.6
+
+* Fix nested transition bug ([#1497](https://github.com/sveltejs/svelte/issues/1497))
+
+## 2.6.5
+
+* Handle cases where only some `if` block branches have outros ([#1492](https://github.com/sveltejs/svelte/issues/1492))
+
+## 2.6.4
+
+* Web worker support ([#1487](https://github.com/sveltejs/svelte/issues/1487))
+* Update dynamic component bindings when component changes ([#1489](https://github.com/sveltejs/svelte/issues/1489))
+
+## 2.6.3
+
+* Nested transitions respect `skipIntroByDefault` ([#1460](https://github.com/sveltejs/svelte/issues/1460))
+* Always create outro for top-level block ([#1470](https://github.com/sveltejs/svelte/issues/1470))
+
+## 2.6.2
+
+* Fix spread+bindings on dynamic components ([#1433](https://github.com/sveltejs/svelte/issues/1433))
+* Abort in-progress animations, if a new one starts ([#1458](https://github.com/sveltejs/svelte/issues/1458))
+* Allow animations to be parameterised ([#1462](https://github.com/sveltejs/svelte/issues/1462))
+
+## 2.6.1
+
+* Absolutely position outroing animated nodes ([#1457](https://github.com/sveltejs/svelte/pull/1457))
+
+## 2.6.0
+
+* Add `animate` directive ([#1454](https://github.com/sveltejs/svelte/pull/1454))
+* Add `skipIntroByDefault` compiler option and `intro: true` init option ([#1448](https://github.com/sveltejs/svelte/pull/1448))
+* Add `nestedTransitions` compiler option ([#1451](https://github.com/sveltejs/svelte/pull/1451))
+* Component outros, if `nestedTransitions` is true ([#1211](https://github.com/sveltejs/svelte/issues/1211))
+* Allow transition functions to return a function, for inter-transition coordination ([#1453](https://github.com/sveltejs/svelte/pull/1453))
+* Pass `1 - t` as second argument to transition functions ([#1452](https://github.com/sveltejs/svelte/pull/1452))
+
+## 2.5.1
+
+* Add new ARIA attributes ([#1436](https://github.com/sveltejs/svelte/pull/1436))
+* Add `Promise` to whitelisted globals ([#1441](https://github.com/sveltejs/svelte/issues/1441))
+* Allow spaces around reserved keyword attributes ([#1445](https://github.com/sveltejs/svelte/issues/1445))
+
+## 2.5.0
+
+* Support transitions in `await` blocks ([#956](https://github.com/sveltejs/svelte/issues/956))
+* Abort outros if block is recreated ([#1425](https://github.com/sveltejs/svelte/issues/1425))
+* Wait until transitions have completed before removing styles ([#648](https://github.com/sveltejs/svelte/issues/648))
+* Support event shorthand on dynamic components ([#1427](https://github.com/sveltejs/svelte/pull/1427))
+* Various codegen improvements ([#1419](https://github.com/sveltejs/svelte/pull/1419), [#1421](https://github.com/sveltejs/svelte/pull/1421), [#1422](https://github.com/sveltejs/svelte/pull/1422), [#1424](https://github.com/sveltejs/svelte/pull/1424))
+* Correctly handle `await` blocks with no dynamic content ([#1417](https://github.com/sveltejs/svelte/issues/1417))
+* Allow spread props on elements with static attribute tests ([#1429](https://github.com/sveltejs/svelte/pull/1429))
+
+
+## 2.4.4
+
+* Declare missing variable in Store ([#1415](https://github.com/sveltejs/svelte/issues/1415))
+* ALways declare spread levels ([#1413](https://github.com/sveltejs/svelte/issues/1413))
+
+## 2.4.3
+
+* `ref` directives prevent HTMLified content ([#1407](https://github.com/sveltejs/svelte/issues/1407))
+* Store computed properties update components immediately upon declaration ([#1327](https://github.com/sveltejs/svelte/issues/1327))
+
+## 2.4.2
+
+* Evaluate `each` key in child scope ([#1397](https://github.com/sveltejs/svelte/issues/1397))
+* Prevent false negatives and positives when detecting cyclical computed store properties ([#1399](https://github.com/sveltejs/svelte/issues/1399))
+* Only update dynamic component props ([#1394](https://github.com/sveltejs/svelte/issues/1394))
+
+## 2.4.1
+
+* Fix DOM event context ([#1390](https://github.com/sveltejs/svelte/issues/1390))
+
+## 2.4.0
+
+* Integrate CLI ([#1360](https://github.com/sveltejs/svelte/issues/1360))
+* Allow arbitrary destructuring for each block items, with binding ([#1385](https://github.com/sveltejs/svelte/pull/1385))
+* Each block keys can use arbitrary expressions ([#703](https://github.com/sveltejs/svelte/issues/703))
+* `bind:offsetWidth`, `bind:offsetHeight`, `bind:clientWidth` and `bind:clientHeight` ([#984](https://github.com/sveltejs/svelte/issues/984))
+* Leaner generated code for `each` blocks ([#1287](https://github.com/sveltejs/svelte/issues/1287))
+
+
+## 2.3.0
+
+* Allow computed properties to have entire state object as dependency ([#1303](https://github.com/sveltejs/svelte/issues/1303))
+* Fix `stats` when `options.generate` is `false` ([#1368](https://github.com/sveltejs/svelte/issues/1368))
+* Assign custom methods to custom elements ([#1369](https://github.com/sveltejs/svelte/issues/1369))
+* Fix `this` value in custom event handlers ([#1297](https://github.com/sveltejs/svelte/issues/1297))
+* Re-evaluate `each` values lazily ([#1286](https://github.com/sveltejs/svelte/issues/1286))
+* Preserve outer context in `await` blocks ([#1251](https://github.com/sveltejs/svelte/issues/1251))
+
+## 2.2.0
+
+* Internal refactoring ([#1367](https://github.com/sveltejs/svelte/pull/1367))
+
+## 2.1.1
+
+* Report initial `changed` based on state, not expected props ([#1356](https://github.com/sveltejs/svelte/issues/1356))
+* Set state to empty object, not null, on destroy ([#1354](https://github.com/sveltejs/svelte/issues/1354))
+* Prevent stale state in component event handlers ([#1353](https://github.com/sveltejs/svelte/issues/1353))
+
+## 2.1.0
+
+* Allow shorthand imports ([#1038](https://github.com/sveltejs/svelte/issues/1038))
+* Update spread props inside each blocks ([#1337](https://github.com/sveltejs/svelte/issues/1337))
+
+## 2.0.0
+
+*See [the blog post](https://svelte.dev/blog/version-2) for information on how to upgrade your apps*
+
+* New template syntax ([#1318](https://github.com/sveltejs/svelte/issues/1318))
+* Emit ES2015 code, not ES5 ([#1348](https://github.com/sveltejs/svelte/pull/1348))
+* Add `onstate` and `onupdate` hooks, remove `component.observe` method ([#1197](https://github.com/sveltejs/svelte/issues/1197))
+* Use destructuring syntax for computed properties ([#1069](https://github.com/sveltejs/svelte/issues/1069)
+* Change signature of `svelte.compile` ([#1298](https://github.com/sveltejs/svelte/pull/1298))
+* Remove `validate` and `Stylesheet` from public API ([#1348](https://github.com/sveltejs/svelte/pull/1348))
+* Don't typecast numeric attributes ([#657](https://github.com/sveltejs/svelte/issues/657))
+* Always compile with `Store` support, and cascading disabled ([#1348](https://github.com/sveltejs/svelte/pull/1348))
+* Remove unused `hash` property from AST ([#1348](https://github.com/sveltejs/svelte/pull/1348))
+* Rename `loc` property to `start` in warnings and errors ([#1348](https://github.com/sveltejs/svelte/pull/1348))
+
+## 1.64.1
+
+* Fix computed properties in SSR renderer ([#1349](https://github.com/sveltejs/svelte/issues/1349))
+
+## 1.64.0
+
+* Deprecate passing a string argument to `component.get` ([#1347](https://github.com/sveltejs/svelte/pull/1347))
+
+## 1.63.1
+
+* Allow `observe` method to be overwritten
+
+## 1.63.0
+
+* Add `onstate` and `onupdate` lifecycle hooks and deprecate `component.observe` ([#1197](https://github.com/sveltejs/svelte/issues/1197))
+* Add `on` and `fire` to `Store`, deprecate `onchange` and `observe` ([#1344](https://github.com/sveltejs/svelte/pull/1344))
+* Require computed properties to have destructured argument in v2 mode ([#1069](https://github.com/sveltejs/svelte/issues/1069))
+
+## 1.62.0
+
+* Add a `code` field to errors and warnings ([#474](https://github.com/sveltejs/svelte/issues/474))
+* When using v2 syntax, do not use interpolation in non-root `<style>` tags ([#1339](https://github.com/sveltejs/svelte/issues/1339))
+
+## 1.61.0
+
+* Support v2 syntax with `parser: 'v2'` option ([#1318](https://github.com/sveltejs/svelte/issues/1318))
+
 ## 1.60.3
 
 * Fix validation of `multiple` attributes on bound `<select>` elements ([#1331](https://github.com/sveltejs/svelte/issues/1331))
diff --git a/node_modules/svelte/LICENSE b/node_modules/svelte/LICENSE
index 939579e..b63fe48 100644
--- a/node_modules/svelte/LICENSE
+++ b/node_modules/svelte/LICENSE
@@ -1,4 +1,4 @@
-Copyright (c) 2016 [these people](https://github.com/sveltejs/svelte/graphs/contributors)
+Copyright (c) 2016-19 [these people](https://github.com/sveltejs/svelte/graphs/contributors)
 
 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 
diff --git a/node_modules/svelte/README.md b/node_modules/svelte/README.md
index 6a9c545..7d0af8a 100644
--- a/node_modules/svelte/README.md
+++ b/node_modules/svelte/README.md
@@ -1,141 +1,84 @@
-# Svelte
-
-The magical disappearing UI framework.
-
-* [Read the introductory blog post](https://svelte.technology/blog/frameworks-without-the-framework)
-* [Read the guide](https://svelte.technology/guide)
-* [Try it out](https://svelte.technology/repl)
-* [Chat on Gitter](https://gitter.im/sveltejs/svelte)
-
----
-
-This is the Svelte compiler, which is primarily intended for authors of tooling that integrates Svelte with different build systems. If you just want to write Svelte components and use them in your app, you probably want one of those tools:
-
-* [svelte-cli](https://github.com/sveltejs/svelte-cli) – Command line interface for compiling components
-* [rollup-plugin-svelte](https://github.com/rollup/rollup-plugin-svelte) – Rollup plugin
-* [sveltify](https://github.com/tehshrike/sveltify) - Browserify transform
-* [gulp-svelte](https://github.com/shinnn/gulp-svelte) - gulp plugin
-* [metalsmith-svelte](https://github.com/shinnn/metalsmith-svelte) - Metalsmith plugin
-* [system-svelte](https://github.com/CanopyTax/system-svelte) – System.js loader
-* [svelte-loader](https://github.com/sveltejs/svelte-loader) – Webpack loader
-* [svelte-hot-loader](https://github.com/ekhaled/svelte-hot-loader) – Webpack loader addon to support HMR
-* [meteor-svelte](https://github.com/klaussner/meteor-svelte) – Meteor build plugin
-* [sveltejs-brunch](https://github.com/StarpTech/sveltejs-brunch) – Brunch build plugin
-* [svelte-dev-store](https://github.com/GarethOates/svelte-dev-store) - Use Redux tools to visualise Svelte store
-* More to come!
-
-
-## Example usage
-
-```js
-import * as svelte from 'svelte';
-
-const { code, map } = svelte.compile( source, {
-	// the target module format – defaults to 'es' (ES2015 modules), can
-	// also be 'amd', 'cjs', 'umd', 'iife' or 'eval'
-	format: 'umd',
-
-	// the filename of the source file, used in e.g. generating sourcemaps
-	filename: 'MyComponent.html',
-
-	// the name of the constructor. Required for 'iife' and 'umd' output,
-	// but otherwise mostly useful for debugging. Defaults to 'SvelteComponent'
-	name: 'MyComponent',
-
-	// for 'amd' and 'umd' output, you can optionally specify an AMD module ID
-	amd: {
-		id: 'my-component'
-	},
-
-	// custom error/warning handlers. By default, errors will throw, and
-	// warnings will be printed to the console. Where applicable, the
-	// error/warning object will have `pos`, `loc` and `frame` properties
-	onerror: err => {
-		console.error( err.message );
-	},
-
-	onwarn: warning => {
-		console.warn( warning.message );
-	}
-});
+<p>
+  <a href="https://svelte.dev">
+	<img alt="Cybernetically enhanced web apps: Svelte" src="https://svelte-assets.surge.sh/banner.png">
+  </a>
+
+  <a href="https://www.npmjs.com/package/svelte">
+    <img src="https://img.shields.io/npm/v/svelte.svg" alt="npm version">
+  </a>
+
+  <a href="https://packagephobia.now.sh/result?p=svelte">
+    <img src="https://packagephobia.now.sh/badge?p=svelte" alt="install size">
+  </a>
+
+  <a href="https://travis-ci.org/sveltejs/svelte">
+    <img src="https://api.travis-ci.org/sveltejs/svelte.svg?branch=master"
+         alt="build status">
+  </a>
+
+  <a href="https://github.com/sveltejs/svelte/blob/master/LICENSE">
+    <img src="https://img.shields.io/npm/l/svelte.svg" alt="license">
+  </a>
+</p>
+
+
+## What is Svelte?
+
+Svelte is a new way to build web applications. It's a compiler that takes your declarative components and converts them into efficient JavaScript that surgically updates the DOM.
+
+Learn more at the [Svelte website](https://svelte.dev), or stop by the [Discord chatroom](https://svelte.dev/chat).
+
+
+## Development
+
+Pull requests are encouraged and always welcome. [Pick an issue](https://github.com/sveltejs/svelte/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc) and help us out!
+
+To install and work on Svelte locally:
+
+```bash
+git clone https://github.com/sveltejs/svelte.git
+cd svelte
+npm install
 ```
 
+To build the compiler, and all the other modules included in the package:
 
-## API
-
-The Svelte compiler exposes the following API:
-
-* `compile( source [, options ] ) => { code, map, ast, css }` - Compile the component with the given options (see below). Returns an object containing the compiled JavaScript, a sourcemap, an AST and transformed CSS.
-* `create( source [, options ] ) => function` - Compile the component and return the component itself.
-* `preprocess( source, options ) => Promise` — Preprocess a source file, e.g. to use PostCSS or CoffeeScript
-* `VERSION` - The version of this copy of the Svelte compiler as a string, `'x.x.x'`.
-
-### Compiler options
-
-The Svelte compiler optionally takes a second argument, an object of configuration options:
-
-| | **Values** | **Description** | **Default** |
-|---|---|---|---|
-| `generate` | `'dom'`, `'ssr'` | Whether to generate JavaScript code intended for use on the client (`'dom'`), or for use in server-side rendering (`'ssr'`). | `'dom'` |
-| `dev` | `true`, `false` | Whether to enable run-time checks in the compiled component. These are helpful during development, but slow your component down. | `false` |
-| `css` | `true`, `false` | Whether to include code to inject your component's styles into the DOM. | `true` |
-| `store` | `true`, `false` | Whether to support store integration on the compiled component. | `false` |
-| `hydratable` | `true`, `false` | Whether to support hydration on the compiled component. | `false` |
-| `customElement` | `true`, `false`, `{ tag, props }` | Whether to compile this component to a custom element. If `tag`/`props` are passed, compiles to a custom element and overrides the values exported by the component. | `false` |
-| `cascade` | `true`, `false` | Whether to cascade all of the component's styles to child components. If `false`, only selectors wrapped in `:global(...)` and keyframe IDs beginning with `-global-` are cascaded. | `true` |
-| `bind` | `boolean` | If `false`, disallows `bind:` directives | `true` |
-| | | |
-| `shared` | `true`, `false`, `string` | Whether to import various helpers from a shared external library. When you have a project with multiple components, this reduces the overall size of your JavaScript bundle, at the expense of having immediately-usable component. You can pass a string of the module path to use, or `true` will import from `'svelte/shared.js'`. | `false` |
-| `legacy` | `true`, `false` | Ensures compatibility with very old browsers, at the cost of some extra code. | `false` |
-| | | |
-| `format` | `'es'`, `'amd'`, `'cjs'`, `'umd'`, `'iife'`, `'eval'` | The format to output in the compiled component.<br>`'es'` - ES6/ES2015 module, suitable for consumption by a bundler<br>`'amd'` - AMD module<br>`'cjs'` - CommonJS module<br>`'umd'` - UMD module<br>`'iife'` - IIFE-wrapped function defining a global variable, suitable for use directly in browser<br>`'eval'` - standalone function, suitable for passing to `eval()` | `'es'` for `generate: 'dom'`<br>`'cjs'` for `generate: 'ssr'` |
-| `name` | `string` | The name of the constructor in the compiled component. | `'SvelteComponent'` |
-| `filename` | `string` | The filename to use in sourcemaps and compiler error and warning messages. | `'SvelteComponent.html'` |
-| `amd`.`id` | `string` | The AMD module ID to use for the `'amd'` and `'umd'` output formats. | `undefined` |
-| `globals` | `object`, `function` | When outputting to the `'umd'`, `'iife'` or `'eval'` formats, an object or function mapping the names of imported dependencies to the names of global variables. | `{}` |
-| `preserveComments` | `boolean` | Include comments in rendering.  Currently, only applies to SSR rendering | `false` |
-| | | |
-| `onerror` | `function` | Specify a callback for when Svelte encounters an error while compiling the component. Passed two arguments: the error object, and another function that is Svelte's default onerror handling. | (exception is thrown) |
-| `onwarn` | `function` | Specify a callback for when Svelte encounters a non-fatal warning while compiling the component. Passed two arguments: the warning object, and another function that is Svelte's default onwarn handling. | (warning is logged to console) |
-
-### Preprocessor options
-
-`svelte.preprocess` returns a Promise that resolves to an object with a `toString` method (other properties will be added in future). It takes an options object with `markup`, `style` or `script` properties:
-
-```js
-const processed = await svelte.preprocess(source, {
-	markup: ({ content }) => {
-		// `content` is the entire component string
-		return { code: '...', map: {...} };
-	},
-
-	style: ({ content, attributes }) => {
-		// `content` is what's inside the <style> element, if present
-		// `attributes` is a map of attributes on the element
-		if (attributes.type !== 'text/scss') return;
-		return { code: '...', map: {...} };
-	},
-
-	script: ({ content, attributes }) => {
-		// `content` is what's inside the <script> element, if present
-		// `attributes` is a map of attributes on the element
-		if (attributes.type !== 'text/coffeescript') return;
-		return { code: '...', map: {...} };
-	}
-});
+```bash
+npm run build
 ```
 
-The `style` and `script` preprocessors will run *after* the `markup` preprocessor. Each preprocessor can return a) nothing (in which case no transformation takes place), b) a `{ code, map }` object, or c) a Promise that resolves to a) or b). Note that sourcemaps are currently discarded, but will be used in future versions of Svelte.
+To watch for changes and continually rebuild the package (this is useful if you're using [npm link](https://docs.npmjs.com/cli/link.html) to test out changes in a project locally):
 
-## Example/starter repos
+```bash
+npm run dev
+```
+
+The compiler is written in [TypeScript](https://www.typescriptlang.org/), but don't let that put you off — it's basically just JavaScript with type annotations. You'll pick it up in no time. If you're using an editor other than [Visual Studio Code](https://code.visualstudio.com/) you may need to install a plugin in order to get syntax highlighting and code hints etc.
+
+
+### Running Tests
+
+```bash
+npm run test
+```
+
+To filter tests, use `-g` (aka `--grep`). For example, to only run tests involving transitions:
 
-* [charpeni/svelte-example](https://github.com/charpeni/svelte-example) - Some Svelte examples with configured Rollup, Babel, ESLint, directives, Two-Way binding, and nested components
-* [EmilTholin/svelte-test](https://github.com/EmilTholin/svelte-test)
-* [lukechinworth/codenames](https://github.com/lukechinworth/codenames/tree/svelte) – example integration with Redux
+```bash
+npm run test -- -g transition
+```
+
+
+## svelte.dev
+
+The source code for https://svelte.dev, including all the documentation, lives in the [site](site) directory. The site is built with [Sapper](https://sapper.svelte.dev). To develop locally:
+
+```bash
+cd site
+npm install && npm run update
+npm run dev
+```
 
-## BrowserStack
-<img src="https://cdn.worldvectorlogo.com/logos/browserstack.svg" height="80" width="80" align="left">
-<p>To keep Svelte's performance in check, we use BrowserStack to quickly run benchmarks for each PR that immediately give feedback to the contributor. You can see how we use BrowserStack in the <a href="https://github.com/sveltejs/svelte-bench">svelte-bench</a> project and check out BrowserStack's services on their <a href="https://www.browserstack.com/">website</a>.</p>
 
 ## License
 
diff --git a/node_modules/svelte/animate.d.ts b/node_modules/svelte/animate.d.ts
new file mode 100644
index 0000000..e0c5aeb
--- /dev/null
+++ b/node_modules/svelte/animate.d.ts
@@ -0,0 +1 @@
+export * from './types/animate';
diff --git a/node_modules/svelte/animate.js b/node_modules/svelte/animate.js
new file mode 100644
index 0000000..869f38c
--- /dev/null
+++ b/node_modules/svelte/animate.js
@@ -0,0 +1,23 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var easing = require('./easing');
+var internal = require('./internal');
+
+function flip(node, animation, params) {
+    const style = getComputedStyle(node);
+    const transform = style.transform === 'none' ? '' : style.transform;
+    const dx = animation.from.left - animation.to.left;
+    const dy = animation.from.top - animation.to.top;
+    const d = Math.sqrt(dx * dx + dy * dy);
+    const { delay = 0, duration = d => Math.sqrt(d) * 120, easing: easing$$1 = easing.cubicOut } = params;
+    return {
+        delay,
+        duration: internal.is_function(duration) ? duration(d) : duration,
+        easing: easing$$1,
+        css: (t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
+    };
+}
+
+exports.flip = flip;
diff --git a/node_modules/svelte/animate.mjs b/node_modules/svelte/animate.mjs
new file mode 100644
index 0000000..82cd30d
--- /dev/null
+++ b/node_modules/svelte/animate.mjs
@@ -0,0 +1,19 @@
+import { cubicOut } from './easing';
+import { is_function } from './internal';
+
+function flip(node, animation, params) {
+    const style = getComputedStyle(node);
+    const transform = style.transform === 'none' ? '' : style.transform;
+    const dx = animation.from.left - animation.to.left;
+    const dy = animation.from.top - animation.to.top;
+    const d = Math.sqrt(dx * dx + dy * dy);
+    const { delay = 0, duration = d => Math.sqrt(d) * 120, easing = cubicOut } = params;
+    return {
+        delay,
+        duration: is_function(duration) ? duration(d) : duration,
+        easing,
+        css: (t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
+    };
+}
+
+export { flip };
diff --git a/node_modules/svelte/compiler.js b/node_modules/svelte/compiler.js
new file mode 100644
index 0000000..f1d858e
--- /dev/null
+++ b/node_modules/svelte/compiler.js
@@ -0,0 +1,23951 @@
+(function (global, factory) {
+	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
+	typeof define === 'function' && define.amd ? define(['exports'], factory) :
+	(global = global || self, factory(global.svelte = {}));
+}(this, function (exports) { 'use strict';
+
+	function assign(tar, src) {
+	    for (const k in src)
+	        tar[k] = src[k];
+	    return tar;
+	}
+
+	const now$1 = (typeof process !== 'undefined' && process.hrtime)
+	    ? () => {
+	        const t = process.hrtime();
+	        return t[0] * 1e3 + t[1] / 1e6;
+	    }
+	    : () => self.performance.now();
+	function collapse_timings(timings) {
+	    const result = {};
+	    timings.forEach(timing => {
+	        result[timing.label] = Object.assign({
+	            total: timing.end - timing.start
+	        }, timing.children && collapse_timings(timing.children));
+	    });
+	    return result;
+	}
+	class Stats {
+	    constructor() {
+	        this.start_time = now$1();
+	        this.stack = [];
+	        this.current_children = this.timings = [];
+	    }
+	    start(label) {
+	        const timing = {
+	            label,
+	            start: now$1(),
+	            end: null,
+	            children: []
+	        };
+	        this.current_children.push(timing);
+	        this.stack.push(timing);
+	        this.current_timing = timing;
+	        this.current_children = timing.children;
+	    }
+	    stop(label) {
+	        if (label !== this.current_timing.label) {
+	            throw new Error(`Mismatched timing labels (expected ${this.current_timing.label}, got ${label})`);
+	        }
+	        this.current_timing.end = now$1();
+	        this.stack.pop();
+	        this.current_timing = this.stack[this.stack.length - 1];
+	        this.current_children = this.current_timing ? this.current_timing.children : this.timings;
+	    }
+	    render() {
+	        const timings = Object.assign({
+	            total: now$1() - this.start_time
+	        }, collapse_timings(this.timings));
+	        return {
+	            timings
+	        };
+	    }
+	}
+
+	// Reserved word lists for various dialects of the language
+
+	var reservedWords = {
+	  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
+	  5: "class enum extends super const export import",
+	  6: "enum",
+	  strict: "implements interface let package private protected public static yield",
+	  strictBind: "eval arguments"
+	};
+
+	// And the keywords
+
+	var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
+
+	var keywords = {
+	  5: ecma5AndLessKeywords,
+	  6: ecma5AndLessKeywords + " const class extends export import super"
+	};
+
+	var keywordRelationalOperator = /^in(stanceof)?$/;
+
+	// ## Character categories
+
+	// Big ugly regular expressions that match characters in the
+	// whitespace, identifier, and identifier-start categories. These
+	// are only applied when a character is found to actually have a
+	// code point above 128.
+	// Generated by `bin/generate-identifier-regex.js`.
+
+	var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fef\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7b9\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
+	var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
+
+	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
+	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
+
+	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
+
+	// These are a run-length and offset encoded representation of the
+	// >0xffff code points that are a valid part of identifiers. The
+	// offset starts at 0x10000, and each pair of numbers represents an
+	// offset to the next range, and then a size of the range. They were
+	// generated by bin/generate-identifier-regex.js
+
+	// eslint-disable-next-line comma-spacing
+	var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,190,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,26,230,43,117,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,68,12,0,67,12,65,1,31,6129,15,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];
+
+	// eslint-disable-next-line comma-spacing
+	var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];
+
+	// This has a complexity linear to the value of the code. The
+	// assumption is that looking up astral identifier characters is
+	// rare.
+	function isInAstralSet(code, set) {
+	  var pos = 0x10000;
+	  for (var i = 0; i < set.length; i += 2) {
+	    pos += set[i];
+	    if (pos > code) { return false }
+	    pos += set[i + 1];
+	    if (pos >= code) { return true }
+	  }
+	}
+
+	// Test whether a given character code starts an identifier.
+
+	function isIdentifierStart(code, astral) {
+	  if (code < 65) { return code === 36 }
+	  if (code < 91) { return true }
+	  if (code < 97) { return code === 95 }
+	  if (code < 123) { return true }
+	  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }
+	  if (astral === false) { return false }
+	  return isInAstralSet(code, astralIdentifierStartCodes)
+	}
+
+	// Test whether a given character is part of an identifier.
+
+	function isIdentifierChar(code, astral) {
+	  if (code < 48) { return code === 36 }
+	  if (code < 58) { return true }
+	  if (code < 65) { return false }
+	  if (code < 91) { return true }
+	  if (code < 97) { return code === 95 }
+	  if (code < 123) { return true }
+	  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }
+	  if (astral === false) { return false }
+	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
+	}
+
+	// ## Token types
+
+	// The assignment of fine-grained, information-carrying type objects
+	// allows the tokenizer to store the information it has about a
+	// token in a way that is very cheap for the parser to look up.
+
+	// All token type variables start with an underscore, to make them
+	// easy to recognize.
+
+	// The `beforeExpr` property is used to disambiguate between regular
+	// expressions and divisions. It is set on all token types that can
+	// be followed by an expression (thus, a slash after them would be a
+	// regular expression).
+	//
+	// The `startsExpr` property is used to check if the token ends a
+	// `yield` expression. It is set on all token types that either can
+	// directly start an expression (like a quotation mark) or can
+	// continue an expression (like the body of a string).
+	//
+	// `isLoop` marks a keyword as starting a loop, which is important
+	// to know when parsing a label, in order to allow or disallow
+	// continue jumps to that label.
+
+	var TokenType = function TokenType(label, conf) {
+	  if ( conf === void 0 ) conf = {};
+
+	  this.label = label;
+	  this.keyword = conf.keyword;
+	  this.beforeExpr = !!conf.beforeExpr;
+	  this.startsExpr = !!conf.startsExpr;
+	  this.isLoop = !!conf.isLoop;
+	  this.isAssign = !!conf.isAssign;
+	  this.prefix = !!conf.prefix;
+	  this.postfix = !!conf.postfix;
+	  this.binop = conf.binop || null;
+	  this.updateContext = null;
+	};
+
+	function binop(name, prec) {
+	  return new TokenType(name, {beforeExpr: true, binop: prec})
+	}
+	var beforeExpr = {beforeExpr: true};
+	var startsExpr = {startsExpr: true};
+
+	// Map keyword names to token types.
+
+	var keywords$1 = {};
+
+	// Succinct definitions of keyword token types
+	function kw(name, options) {
+	  if ( options === void 0 ) options = {};
+
+	  options.keyword = name;
+	  return keywords$1[name] = new TokenType(name, options)
+	}
+
+	var types = {
+	  num: new TokenType("num", startsExpr),
+	  regexp: new TokenType("regexp", startsExpr),
+	  string: new TokenType("string", startsExpr),
+	  name: new TokenType("name", startsExpr),
+	  eof: new TokenType("eof"),
+
+	  // Punctuation token types.
+	  bracketL: new TokenType("[", {beforeExpr: true, startsExpr: true}),
+	  bracketR: new TokenType("]"),
+	  braceL: new TokenType("{", {beforeExpr: true, startsExpr: true}),
+	  braceR: new TokenType("}"),
+	  parenL: new TokenType("(", {beforeExpr: true, startsExpr: true}),
+	  parenR: new TokenType(")"),
+	  comma: new TokenType(",", beforeExpr),
+	  semi: new TokenType(";", beforeExpr),
+	  colon: new TokenType(":", beforeExpr),
+	  dot: new TokenType("."),
+	  question: new TokenType("?", beforeExpr),
+	  arrow: new TokenType("=>", beforeExpr),
+	  template: new TokenType("template"),
+	  invalidTemplate: new TokenType("invalidTemplate"),
+	  ellipsis: new TokenType("...", beforeExpr),
+	  backQuote: new TokenType("`", startsExpr),
+	  dollarBraceL: new TokenType("${", {beforeExpr: true, startsExpr: true}),
+
+	  // Operators. These carry several kinds of properties to help the
+	  // parser use them properly (the presence of these properties is
+	  // what categorizes them as operators).
+	  //
+	  // `binop`, when present, specifies that this operator is a binary
+	  // operator, and will refer to its precedence.
+	  //
+	  // `prefix` and `postfix` mark the operator as a prefix or postfix
+	  // unary operator.
+	  //
+	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
+	  // binary operators with a very low precedence, that should result
+	  // in AssignmentExpression nodes.
+
+	  eq: new TokenType("=", {beforeExpr: true, isAssign: true}),
+	  assign: new TokenType("_=", {beforeExpr: true, isAssign: true}),
+	  incDec: new TokenType("++/--", {prefix: true, postfix: true, startsExpr: true}),
+	  prefix: new TokenType("!/~", {beforeExpr: true, prefix: true, startsExpr: true}),
+	  logicalOR: binop("||", 1),
+	  logicalAND: binop("&&", 2),
+	  bitwiseOR: binop("|", 3),
+	  bitwiseXOR: binop("^", 4),
+	  bitwiseAND: binop("&", 5),
+	  equality: binop("==/!=/===/!==", 6),
+	  relational: binop("</>/<=/>=", 7),
+	  bitShift: binop("<</>>/>>>", 8),
+	  plusMin: new TokenType("+/-", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),
+	  modulo: binop("%", 10),
+	  star: binop("*", 10),
+	  slash: binop("/", 10),
+	  starstar: new TokenType("**", {beforeExpr: true}),
+
+	  // Keyword token types.
+	  _break: kw("break"),
+	  _case: kw("case", beforeExpr),
+	  _catch: kw("catch"),
+	  _continue: kw("continue"),
+	  _debugger: kw("debugger"),
+	  _default: kw("default", beforeExpr),
+	  _do: kw("do", {isLoop: true, beforeExpr: true}),
+	  _else: kw("else", beforeExpr),
+	  _finally: kw("finally"),
+	  _for: kw("for", {isLoop: true}),
+	  _function: kw("function", startsExpr),
+	  _if: kw("if"),
+	  _return: kw("return", beforeExpr),
+	  _switch: kw("switch"),
+	  _throw: kw("throw", beforeExpr),
+	  _try: kw("try"),
+	  _var: kw("var"),
+	  _const: kw("const"),
+	  _while: kw("while", {isLoop: true}),
+	  _with: kw("with"),
+	  _new: kw("new", {beforeExpr: true, startsExpr: true}),
+	  _this: kw("this", startsExpr),
+	  _super: kw("super", startsExpr),
+	  _class: kw("class", startsExpr),
+	  _extends: kw("extends", beforeExpr),
+	  _export: kw("export"),
+	  _import: kw("import"),
+	  _null: kw("null", startsExpr),
+	  _true: kw("true", startsExpr),
+	  _false: kw("false", startsExpr),
+	  _in: kw("in", {beforeExpr: true, binop: 7}),
+	  _instanceof: kw("instanceof", {beforeExpr: true, binop: 7}),
+	  _typeof: kw("typeof", {beforeExpr: true, prefix: true, startsExpr: true}),
+	  _void: kw("void", {beforeExpr: true, prefix: true, startsExpr: true}),
+	  _delete: kw("delete", {beforeExpr: true, prefix: true, startsExpr: true})
+	};
+
+	// Matches a whole line break (where CRLF is considered a single
+	// line break). Used to count lines.
+
+	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
+	var lineBreakG = new RegExp(lineBreak.source, "g");
+
+	function isNewLine(code, ecma2019String) {
+	  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))
+	}
+
+	var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
+
+	var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
+
+	var ref = Object.prototype;
+	var hasOwnProperty = ref.hasOwnProperty;
+	var toString = ref.toString;
+
+	// Checks if an object has a property.
+
+	function has(obj, propName) {
+	  return hasOwnProperty.call(obj, propName)
+	}
+
+	var isArray = Array.isArray || (function (obj) { return (
+	  toString.call(obj) === "[object Array]"
+	); });
+
+	function wordsRegexp(words) {
+	  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")
+	}
+
+	// These are used when `options.locations` is on, for the
+	// `startLoc` and `endLoc` properties.
+
+	var Position = function Position(line, col) {
+	  this.line = line;
+	  this.column = col;
+	};
+
+	Position.prototype.offset = function offset (n) {
+	  return new Position(this.line, this.column + n)
+	};
+
+	var SourceLocation = function SourceLocation(p, start, end) {
+	  this.start = start;
+	  this.end = end;
+	  if (p.sourceFile !== null) { this.source = p.sourceFile; }
+	};
+
+	// The `getLineInfo` function is mostly useful when the
+	// `locations` option is off (for performance reasons) and you
+	// want to find the line/column position for a given character
+	// offset. `input` should be the code string that the offset refers
+	// into.
+
+	function getLineInfo(input, offset) {
+	  for (var line = 1, cur = 0;;) {
+	    lineBreakG.lastIndex = cur;
+	    var match = lineBreakG.exec(input);
+	    if (match && match.index < offset) {
+	      ++line;
+	      cur = match.index + match[0].length;
+	    } else {
+	      return new Position(line, offset - cur)
+	    }
+	  }
+	}
+
+	// A second optional argument can be given to further configure
+	// the parser process. These options are recognized:
+
+	var defaultOptions = {
+	  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
+	  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10
+	  // (2019). This influences support for strict mode, the set of
+	  // reserved words, and support for new syntax features. The default
+	  // is 9.
+	  ecmaVersion: 9,
+	  // `sourceType` indicates the mode the code should be parsed in.
+	  // Can be either `"script"` or `"module"`. This influences global
+	  // strict mode and parsing of `import` and `export` declarations.
+	  sourceType: "script",
+	  // `onInsertedSemicolon` can be a callback that will be called
+	  // when a semicolon is automatically inserted. It will be passed
+	  // the position of the comma as an offset, and if `locations` is
+	  // enabled, it is given the location as a `{line, column}` object
+	  // as second argument.
+	  onInsertedSemicolon: null,
+	  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
+	  // trailing commas.
+	  onTrailingComma: null,
+	  // By default, reserved words are only enforced if ecmaVersion >= 5.
+	  // Set `allowReserved` to a boolean value to explicitly turn this on
+	  // an off. When this option has the value "never", reserved words
+	  // and keywords can also not be used as property names.
+	  allowReserved: null,
+	  // When enabled, a return at the top level is not considered an
+	  // error.
+	  allowReturnOutsideFunction: false,
+	  // When enabled, import/export statements are not constrained to
+	  // appearing at the top of the program.
+	  allowImportExportEverywhere: false,
+	  // When enabled, await identifiers are allowed to appear at the top-level scope,
+	  // but they are still not allowed in non-async functions.
+	  allowAwaitOutsideFunction: false,
+	  // When enabled, hashbang directive in the beginning of file
+	  // is allowed and treated as a line comment.
+	  allowHashBang: false,
+	  // When `locations` is on, `loc` properties holding objects with
+	  // `start` and `end` properties in `{line, column}` form (with
+	  // line being 1-based and column 0-based) will be attached to the
+	  // nodes.
+	  locations: false,
+	  // A function can be passed as `onToken` option, which will
+	  // cause Acorn to call that function with object in the same
+	  // format as tokens returned from `tokenizer().getToken()`. Note
+	  // that you are not allowed to call the parser from the
+	  // callback—that will corrupt its internal state.
+	  onToken: null,
+	  // A function can be passed as `onComment` option, which will
+	  // cause Acorn to call that function with `(block, text, start,
+	  // end)` parameters whenever a comment is skipped. `block` is a
+	  // boolean indicating whether this is a block (`/* */`) comment,
+	  // `text` is the content of the comment, and `start` and `end` are
+	  // character offsets that denote the start and end of the comment.
+	  // When the `locations` option is on, two more parameters are
+	  // passed, the full `{line, column}` locations of the start and
+	  // end of the comments. Note that you are not allowed to call the
+	  // parser from the callback—that will corrupt its internal state.
+	  onComment: null,
+	  // Nodes have their start and end characters offsets recorded in
+	  // `start` and `end` properties (directly on the node, rather than
+	  // the `loc` object, which holds line/column data. To also add a
+	  // [semi-standardized][range] `range` property holding a `[start,
+	  // end]` array with the same numbers, set the `ranges` option to
+	  // `true`.
+	  //
+	  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
+	  ranges: false,
+	  // It is possible to parse multiple files into a single AST by
+	  // passing the tree produced by parsing the first file as
+	  // `program` option in subsequent parses. This will add the
+	  // toplevel forms of the parsed file to the `Program` (top) node
+	  // of an existing parse tree.
+	  program: null,
+	  // When `locations` is on, you can pass this to record the source
+	  // file in every node's `loc` object.
+	  sourceFile: null,
+	  // This value, if given, is stored in every node, whether
+	  // `locations` is on or off.
+	  directSourceFile: null,
+	  // When enabled, parenthesized expressions are represented by
+	  // (non-standard) ParenthesizedExpression nodes
+	  preserveParens: false
+	};
+
+	// Interpret and default an options object
+
+	function getOptions(opts) {
+	  var options = {};
+
+	  for (var opt in defaultOptions)
+	    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }
+
+	  if (options.ecmaVersion >= 2015)
+	    { options.ecmaVersion -= 2009; }
+
+	  if (options.allowReserved == null)
+	    { options.allowReserved = options.ecmaVersion < 5; }
+
+	  if (isArray(options.onToken)) {
+	    var tokens = options.onToken;
+	    options.onToken = function (token) { return tokens.push(token); };
+	  }
+	  if (isArray(options.onComment))
+	    { options.onComment = pushComment(options, options.onComment); }
+
+	  return options
+	}
+
+	function pushComment(options, array) {
+	  return function(block, text, start, end, startLoc, endLoc) {
+	    var comment = {
+	      type: block ? "Block" : "Line",
+	      value: text,
+	      start: start,
+	      end: end
+	    };
+	    if (options.locations)
+	      { comment.loc = new SourceLocation(this, startLoc, endLoc); }
+	    if (options.ranges)
+	      { comment.range = [start, end]; }
+	    array.push(comment);
+	  }
+	}
+
+	// Each scope gets a bitset that may contain these flags
+	var SCOPE_TOP = 1;
+	var SCOPE_FUNCTION = 2;
+	var SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION;
+	var SCOPE_ASYNC = 4;
+	var SCOPE_GENERATOR = 8;
+	var SCOPE_ARROW = 16;
+	var SCOPE_SIMPLE_CATCH = 32;
+	var SCOPE_SUPER = 64;
+	var SCOPE_DIRECT_SUPER = 128;
+
+	function functionFlags(async, generator) {
+	  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)
+	}
+
+	// Used in checkLVal and declareName to determine the type of a binding
+	var BIND_NONE = 0;
+	var BIND_VAR = 1;
+	var BIND_LEXICAL = 2;
+	var BIND_FUNCTION = 3;
+	var BIND_SIMPLE_CATCH = 4;
+	var BIND_OUTSIDE = 5; // Special case for function names as bound inside the function
+
+	var Parser = function Parser(options, input, startPos) {
+	  this.options = options = getOptions(options);
+	  this.sourceFile = options.sourceFile;
+	  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);
+	  var reserved = "";
+	  if (!options.allowReserved) {
+	    for (var v = options.ecmaVersion;; v--)
+	      { if (reserved = reservedWords[v]) { break } }
+	    if (options.sourceType === "module") { reserved += " await"; }
+	  }
+	  this.reservedWords = wordsRegexp(reserved);
+	  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
+	  this.reservedWordsStrict = wordsRegexp(reservedStrict);
+	  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
+	  this.input = String(input);
+
+	  // Used to signal to callers of `readWord1` whether the word
+	  // contained any escape sequences. This is needed because words with
+	  // escape sequences must not be interpreted as keywords.
+	  this.containsEsc = false;
+
+	  // Set up token state
+
+	  // The current position of the tokenizer in the input.
+	  if (startPos) {
+	    this.pos = startPos;
+	    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
+	    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
+	  } else {
+	    this.pos = this.lineStart = 0;
+	    this.curLine = 1;
+	  }
+
+	  // Properties of the current token:
+	  // Its type
+	  this.type = types.eof;
+	  // For tokens that include more information than their type, the value
+	  this.value = null;
+	  // Its start and end offset
+	  this.start = this.end = this.pos;
+	  // And, if locations are used, the {line, column} object
+	  // corresponding to those offsets
+	  this.startLoc = this.endLoc = this.curPosition();
+
+	  // Position information for the previous token
+	  this.lastTokEndLoc = this.lastTokStartLoc = null;
+	  this.lastTokStart = this.lastTokEnd = this.pos;
+
+	  // The context stack is used to superficially track syntactic
+	  // context to predict whether a regular expression is allowed in a
+	  // given position.
+	  this.context = this.initialContext();
+	  this.exprAllowed = true;
+
+	  // Figure out if it's a module code.
+	  this.inModule = options.sourceType === "module";
+	  this.strict = this.inModule || this.strictDirective(this.pos);
+
+	  // Used to signify the start of a potential arrow function
+	  this.potentialArrowAt = -1;
+
+	  // Positions to delayed-check that yield/await does not exist in default parameters.
+	  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
+	  // Labels in scope.
+	  this.labels = [];
+	  // Thus-far undefined exports.
+	  this.undefinedExports = {};
+
+	  // If enabled, skip leading hashbang line.
+	  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!")
+	    { this.skipLineComment(2); }
+
+	  // Scope tracking for duplicate variable names (see scope.js)
+	  this.scopeStack = [];
+	  this.enterScope(SCOPE_TOP);
+
+	  // For RegExp validation
+	  this.regexpState = null;
+	};
+
+	var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };
+
+	Parser.prototype.parse = function parse () {
+	  var node = this.options.program || this.startNode();
+	  this.nextToken();
+	  return this.parseTopLevel(node)
+	};
+
+	prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };
+	prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };
+	prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };
+	prototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };
+	prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };
+	prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };
+
+	// Switch to a getter for 7.0.0.
+	Parser.prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };
+
+	Parser.extend = function extend () {
+	    var plugins = [], len = arguments.length;
+	    while ( len-- ) plugins[ len ] = arguments[ len ];
+
+	  var cls = this;
+	  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }
+	  return cls
+	};
+
+	Parser.parse = function parse (input, options) {
+	  return new this(options, input).parse()
+	};
+
+	Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {
+	  var parser = new this(options, input, pos);
+	  parser.nextToken();
+	  return parser.parseExpression()
+	};
+
+	Parser.tokenizer = function tokenizer (input, options) {
+	  return new this(options, input)
+	};
+
+	Object.defineProperties( Parser.prototype, prototypeAccessors );
+
+	var pp = Parser.prototype;
+
+	// ## Parser utilities
+
+	var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;
+	pp.strictDirective = function(start) {
+	  var this$1 = this;
+
+	  for (;;) {
+	    // Try to find string literal.
+	    skipWhiteSpace.lastIndex = start;
+	    start += skipWhiteSpace.exec(this$1.input)[0].length;
+	    var match = literal.exec(this$1.input.slice(start));
+	    if (!match) { return false }
+	    if ((match[1] || match[2]) === "use strict") { return true }
+	    start += match[0].length;
+
+	    // Skip semicolon, if any.
+	    skipWhiteSpace.lastIndex = start;
+	    start += skipWhiteSpace.exec(this$1.input)[0].length;
+	    if (this$1.input[start] === ";")
+	      { start++; }
+	  }
+	};
+
+	// Predicate that tests whether the next token is of the given
+	// type, and if yes, consumes it as a side effect.
+
+	pp.eat = function(type) {
+	  if (this.type === type) {
+	    this.next();
+	    return true
+	  } else {
+	    return false
+	  }
+	};
+
+	// Tests whether parsed token is a contextual keyword.
+
+	pp.isContextual = function(name) {
+	  return this.type === types.name && this.value === name && !this.containsEsc
+	};
+
+	// Consumes contextual keyword if possible.
+
+	pp.eatContextual = function(name) {
+	  if (!this.isContextual(name)) { return false }
+	  this.next();
+	  return true
+	};
+
+	// Asserts that following token is given contextual keyword.
+
+	pp.expectContextual = function(name) {
+	  if (!this.eatContextual(name)) { this.unexpected(); }
+	};
+
+	// Test whether a semicolon can be inserted at the current position.
+
+	pp.canInsertSemicolon = function() {
+	  return this.type === types.eof ||
+	    this.type === types.braceR ||
+	    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
+	};
+
+	pp.insertSemicolon = function() {
+	  if (this.canInsertSemicolon()) {
+	    if (this.options.onInsertedSemicolon)
+	      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }
+	    return true
+	  }
+	};
+
+	// Consume a semicolon, or, failing that, see if we are allowed to
+	// pretend that there is a semicolon at this position.
+
+	pp.semicolon = function() {
+	  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }
+	};
+
+	pp.afterTrailingComma = function(tokType, notNext) {
+	  if (this.type === tokType) {
+	    if (this.options.onTrailingComma)
+	      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }
+	    if (!notNext)
+	      { this.next(); }
+	    return true
+	  }
+	};
+
+	// Expect a token of a given type. If found, consume it, otherwise,
+	// raise an unexpected token error.
+
+	pp.expect = function(type) {
+	  this.eat(type) || this.unexpected();
+	};
+
+	// Raise an unexpected token error.
+
+	pp.unexpected = function(pos) {
+	  this.raise(pos != null ? pos : this.start, "Unexpected token");
+	};
+
+	function DestructuringErrors() {
+	  this.shorthandAssign =
+	  this.trailingComma =
+	  this.parenthesizedAssign =
+	  this.parenthesizedBind =
+	  this.doubleProto =
+	    -1;
+	}
+
+	pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {
+	  if (!refDestructuringErrors) { return }
+	  if (refDestructuringErrors.trailingComma > -1)
+	    { this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element"); }
+	  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
+	  if (parens > -1) { this.raiseRecoverable(parens, "Parenthesized pattern"); }
+	};
+
+	pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
+	  if (!refDestructuringErrors) { return false }
+	  var shorthandAssign = refDestructuringErrors.shorthandAssign;
+	  var doubleProto = refDestructuringErrors.doubleProto;
+	  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }
+	  if (shorthandAssign >= 0)
+	    { this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"); }
+	  if (doubleProto >= 0)
+	    { this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property"); }
+	};
+
+	pp.checkYieldAwaitInDefaultParams = function() {
+	  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))
+	    { this.raise(this.yieldPos, "Yield expression cannot be a default value"); }
+	  if (this.awaitPos)
+	    { this.raise(this.awaitPos, "Await expression cannot be a default value"); }
+	};
+
+	pp.isSimpleAssignTarget = function(expr) {
+	  if (expr.type === "ParenthesizedExpression")
+	    { return this.isSimpleAssignTarget(expr.expression) }
+	  return expr.type === "Identifier" || expr.type === "MemberExpression"
+	};
+
+	var pp$1 = Parser.prototype;
+
+	// ### Statement parsing
+
+	// Parse a program. Initializes the parser, reads any number of
+	// statements, and wraps them in a Program node.  Optionally takes a
+	// `program` argument.  If present, the statements will be appended
+	// to its body instead of creating a new node.
+
+	pp$1.parseTopLevel = function(node) {
+	  var this$1 = this;
+
+	  var exports = {};
+	  if (!node.body) { node.body = []; }
+	  while (this.type !== types.eof) {
+	    var stmt = this$1.parseStatement(null, true, exports);
+	    node.body.push(stmt);
+	  }
+	  if (this.inModule)
+	    { for (var i = 0, list = Object.keys(this$1.undefinedExports); i < list.length; i += 1)
+	      {
+	        var name = list[i];
+
+	        this$1.raiseRecoverable(this$1.undefinedExports[name].start, ("Export '" + name + "' is not defined"));
+	      } }
+	  this.adaptDirectivePrologue(node.body);
+	  this.next();
+	  if (this.options.ecmaVersion >= 6) {
+	    node.sourceType = this.options.sourceType;
+	  }
+	  return this.finishNode(node, "Program")
+	};
+
+	var loopLabel = {kind: "loop"};
+	var switchLabel = {kind: "switch"};
+
+	pp$1.isLet = function(context) {
+	  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) { return false }
+	  skipWhiteSpace.lastIndex = this.pos;
+	  var skip = skipWhiteSpace.exec(this.input);
+	  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
+	  // For ambiguous cases, determine if a LexicalDeclaration (or only a
+	  // Statement) is allowed here. If context is not empty then only a Statement
+	  // is allowed. However, `let [` is an explicit negative lookahead for
+	  // ExpressionStatement, so special-case it first.
+	  if (nextCh === 91) { return true } // '['
+	  if (context) { return false }
+
+	  if (nextCh === 123) { return true } // '{'
+	  if (isIdentifierStart(nextCh, true)) {
+	    var pos = next + 1;
+	    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }
+	    var ident = this.input.slice(next, pos);
+	    if (!keywordRelationalOperator.test(ident)) { return true }
+	  }
+	  return false
+	};
+
+	// check 'async [no LineTerminator here] function'
+	// - 'async /*foo*/ function' is OK.
+	// - 'async /*\n*/ function' is invalid.
+	pp$1.isAsyncFunction = function() {
+	  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
+	    { return false }
+
+	  skipWhiteSpace.lastIndex = this.pos;
+	  var skip = skipWhiteSpace.exec(this.input);
+	  var next = this.pos + skip[0].length;
+	  return !lineBreak.test(this.input.slice(this.pos, next)) &&
+	    this.input.slice(next, next + 8) === "function" &&
+	    (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))
+	};
+
+	// Parse a single statement.
+	//
+	// If expecting a statement and finding a slash operator, parse a
+	// regular expression literal. This is to handle cases like
+	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
+	// does not help.
+
+	pp$1.parseStatement = function(context, topLevel, exports) {
+	  var starttype = this.type, node = this.startNode(), kind;
+
+	  if (this.isLet(context)) {
+	    starttype = types._var;
+	    kind = "let";
+	  }
+
+	  // Most types of statements are recognized by the keyword they
+	  // start with. Many are trivial to parse, some require a bit of
+	  // complexity.
+
+	  switch (starttype) {
+	  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
+	  case types._debugger: return this.parseDebuggerStatement(node)
+	  case types._do: return this.parseDoStatement(node)
+	  case types._for: return this.parseForStatement(node)
+	  case types._function:
+	    // Function as sole body of either an if statement or a labeled statement
+	    // works, but not when it is part of a labeled statement that is the sole
+	    // body of an if statement.
+	    if ((context && (this.strict || context !== "if" && context !== "label")) && this.options.ecmaVersion >= 6) { this.unexpected(); }
+	    return this.parseFunctionStatement(node, false, !context)
+	  case types._class:
+	    if (context) { this.unexpected(); }
+	    return this.parseClass(node, true)
+	  case types._if: return this.parseIfStatement(node)
+	  case types._return: return this.parseReturnStatement(node)
+	  case types._switch: return this.parseSwitchStatement(node)
+	  case types._throw: return this.parseThrowStatement(node)
+	  case types._try: return this.parseTryStatement(node)
+	  case types._const: case types._var:
+	    kind = kind || this.value;
+	    if (context && kind !== "var") { this.unexpected(); }
+	    return this.parseVarStatement(node, kind)
+	  case types._while: return this.parseWhileStatement(node)
+	  case types._with: return this.parseWithStatement(node)
+	  case types.braceL: return this.parseBlock(true, node)
+	  case types.semi: return this.parseEmptyStatement(node)
+	  case types._export:
+	  case types._import:
+	    if (!this.options.allowImportExportEverywhere) {
+	      if (!topLevel)
+	        { this.raise(this.start, "'import' and 'export' may only appear at the top level"); }
+	      if (!this.inModule)
+	        { this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'"); }
+	    }
+	    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)
+
+	    // If the statement does not start with a statement keyword or a
+	    // brace, it's an ExpressionStatement or LabeledStatement. We
+	    // simply start parsing an expression, and afterwards, if the
+	    // next token is a colon and the expression was a simple
+	    // Identifier node, we switch to interpreting it as a label.
+	  default:
+	    if (this.isAsyncFunction()) {
+	      if (context) { this.unexpected(); }
+	      this.next();
+	      return this.parseFunctionStatement(node, true, !context)
+	    }
+
+	    var maybeName = this.value, expr = this.parseExpression();
+	    if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon))
+	      { return this.parseLabeledStatement(node, maybeName, expr, context) }
+	    else { return this.parseExpressionStatement(node, expr) }
+	  }
+	};
+
+	pp$1.parseBreakContinueStatement = function(node, keyword) {
+	  var this$1 = this;
+
+	  var isBreak = keyword === "break";
+	  this.next();
+	  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }
+	  else if (this.type !== types.name) { this.unexpected(); }
+	  else {
+	    node.label = this.parseIdent();
+	    this.semicolon();
+	  }
+
+	  // Verify that there is an actual destination to break or
+	  // continue to.
+	  var i = 0;
+	  for (; i < this.labels.length; ++i) {
+	    var lab = this$1.labels[i];
+	    if (node.label == null || lab.name === node.label.name) {
+	      if (lab.kind != null && (isBreak || lab.kind === "loop")) { break }
+	      if (node.label && isBreak) { break }
+	    }
+	  }
+	  if (i === this.labels.length) { this.raise(node.start, "Unsyntactic " + keyword); }
+	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
+	};
+
+	pp$1.parseDebuggerStatement = function(node) {
+	  this.next();
+	  this.semicolon();
+	  return this.finishNode(node, "DebuggerStatement")
+	};
+
+	pp$1.parseDoStatement = function(node) {
+	  this.next();
+	  this.labels.push(loopLabel);
+	  node.body = this.parseStatement("do");
+	  this.labels.pop();
+	  this.expect(types._while);
+	  node.test = this.parseParenExpression();
+	  if (this.options.ecmaVersion >= 6)
+	    { this.eat(types.semi); }
+	  else
+	    { this.semicolon(); }
+	  return this.finishNode(node, "DoWhileStatement")
+	};
+
+	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
+	// loop is non-trivial. Basically, we have to parse the init `var`
+	// statement or expression, disallowing the `in` operator (see
+	// the second parameter to `parseExpression`), and then check
+	// whether the next token is `in` or `of`. When there is no init
+	// part (semicolon immediately after the opening parenthesis), it
+	// is a regular `for` loop.
+
+	pp$1.parseForStatement = function(node) {
+	  this.next();
+	  var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual("await")) ? this.lastTokStart : -1;
+	  this.labels.push(loopLabel);
+	  this.enterScope(0);
+	  this.expect(types.parenL);
+	  if (this.type === types.semi) {
+	    if (awaitAt > -1) { this.unexpected(awaitAt); }
+	    return this.parseFor(node, null)
+	  }
+	  var isLet = this.isLet();
+	  if (this.type === types._var || this.type === types._const || isLet) {
+	    var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
+	    this.next();
+	    this.parseVar(init$1, true, kind);
+	    this.finishNode(init$1, "VariableDeclaration");
+	    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1 &&
+	        !(kind !== "var" && init$1.declarations[0].init)) {
+	      if (this.options.ecmaVersion >= 9) {
+	        if (this.type === types._in) {
+	          if (awaitAt > -1) { this.unexpected(awaitAt); }
+	        } else { node.await = awaitAt > -1; }
+	      }
+	      return this.parseForIn(node, init$1)
+	    }
+	    if (awaitAt > -1) { this.unexpected(awaitAt); }
+	    return this.parseFor(node, init$1)
+	  }
+	  var refDestructuringErrors = new DestructuringErrors;
+	  var init = this.parseExpression(true, refDestructuringErrors);
+	  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
+	    if (this.options.ecmaVersion >= 9) {
+	      if (this.type === types._in) {
+	        if (awaitAt > -1) { this.unexpected(awaitAt); }
+	      } else { node.await = awaitAt > -1; }
+	    }
+	    this.toAssignable(init, false, refDestructuringErrors);
+	    this.checkLVal(init);
+	    return this.parseForIn(node, init)
+	  } else {
+	    this.checkExpressionErrors(refDestructuringErrors, true);
+	  }
+	  if (awaitAt > -1) { this.unexpected(awaitAt); }
+	  return this.parseFor(node, init)
+	};
+
+	pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {
+	  this.next();
+	  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)
+	};
+
+	pp$1.parseIfStatement = function(node) {
+	  this.next();
+	  node.test = this.parseParenExpression();
+	  // allow function declarations in branches, but only in non-strict mode
+	  node.consequent = this.parseStatement("if");
+	  node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
+	  return this.finishNode(node, "IfStatement")
+	};
+
+	pp$1.parseReturnStatement = function(node) {
+	  if (!this.inFunction && !this.options.allowReturnOutsideFunction)
+	    { this.raise(this.start, "'return' outside of function"); }
+	  this.next();
+
+	  // In `return` (and `break`/`continue`), the keywords with
+	  // optional arguments, we eagerly look for a semicolon or the
+	  // possibility to insert one.
+
+	  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }
+	  else { node.argument = this.parseExpression(); this.semicolon(); }
+	  return this.finishNode(node, "ReturnStatement")
+	};
+
+	pp$1.parseSwitchStatement = function(node) {
+	  var this$1 = this;
+
+	  this.next();
+	  node.discriminant = this.parseParenExpression();
+	  node.cases = [];
+	  this.expect(types.braceL);
+	  this.labels.push(switchLabel);
+	  this.enterScope(0);
+
+	  // Statements under must be grouped (by label) in SwitchCase
+	  // nodes. `cur` is used to keep the node that we are currently
+	  // adding statements to.
+
+	  var cur;
+	  for (var sawDefault = false; this.type !== types.braceR;) {
+	    if (this$1.type === types._case || this$1.type === types._default) {
+	      var isCase = this$1.type === types._case;
+	      if (cur) { this$1.finishNode(cur, "SwitchCase"); }
+	      node.cases.push(cur = this$1.startNode());
+	      cur.consequent = [];
+	      this$1.next();
+	      if (isCase) {
+	        cur.test = this$1.parseExpression();
+	      } else {
+	        if (sawDefault) { this$1.raiseRecoverable(this$1.lastTokStart, "Multiple default clauses"); }
+	        sawDefault = true;
+	        cur.test = null;
+	      }
+	      this$1.expect(types.colon);
+	    } else {
+	      if (!cur) { this$1.unexpected(); }
+	      cur.consequent.push(this$1.parseStatement(null));
+	    }
+	  }
+	  this.exitScope();
+	  if (cur) { this.finishNode(cur, "SwitchCase"); }
+	  this.next(); // Closing brace
+	  this.labels.pop();
+	  return this.finishNode(node, "SwitchStatement")
+	};
+
+	pp$1.parseThrowStatement = function(node) {
+	  this.next();
+	  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
+	    { this.raise(this.lastTokEnd, "Illegal newline after throw"); }
+	  node.argument = this.parseExpression();
+	  this.semicolon();
+	  return this.finishNode(node, "ThrowStatement")
+	};
+
+	// Reused empty array added for node fields that are always empty.
+
+	var empty$1 = [];
+
+	pp$1.parseTryStatement = function(node) {
+	  this.next();
+	  node.block = this.parseBlock();
+	  node.handler = null;
+	  if (this.type === types._catch) {
+	    var clause = this.startNode();
+	    this.next();
+	    if (this.eat(types.parenL)) {
+	      clause.param = this.parseBindingAtom();
+	      var simple = clause.param.type === "Identifier";
+	      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
+	      this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
+	      this.expect(types.parenR);
+	    } else {
+	      if (this.options.ecmaVersion < 10) { this.unexpected(); }
+	      clause.param = null;
+	      this.enterScope(0);
+	    }
+	    clause.body = this.parseBlock(false);
+	    this.exitScope();
+	    node.handler = this.finishNode(clause, "CatchClause");
+	  }
+	  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
+	  if (!node.handler && !node.finalizer)
+	    { this.raise(node.start, "Missing catch or finally clause"); }
+	  return this.finishNode(node, "TryStatement")
+	};
+
+	pp$1.parseVarStatement = function(node, kind) {
+	  this.next();
+	  this.parseVar(node, false, kind);
+	  this.semicolon();
+	  return this.finishNode(node, "VariableDeclaration")
+	};
+
+	pp$1.parseWhileStatement = function(node) {
+	  this.next();
+	  node.test = this.parseParenExpression();
+	  this.labels.push(loopLabel);
+	  node.body = this.parseStatement("while");
+	  this.labels.pop();
+	  return this.finishNode(node, "WhileStatement")
+	};
+
+	pp$1.parseWithStatement = function(node) {
+	  if (this.strict) { this.raise(this.start, "'with' in strict mode"); }
+	  this.next();
+	  node.object = this.parseParenExpression();
+	  node.body = this.parseStatement("with");
+	  return this.finishNode(node, "WithStatement")
+	};
+
+	pp$1.parseEmptyStatement = function(node) {
+	  this.next();
+	  return this.finishNode(node, "EmptyStatement")
+	};
+
+	pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {
+	  var this$1 = this;
+
+	  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1)
+	    {
+	    var label = list[i$1];
+
+	    if (label.name === maybeName)
+	      { this$1.raise(expr.start, "Label '" + maybeName + "' is already declared");
+	  } }
+	  var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
+	  for (var i = this.labels.length - 1; i >= 0; i--) {
+	    var label$1 = this$1.labels[i];
+	    if (label$1.statementStart === node.start) {
+	      // Update information about previous labels on this node
+	      label$1.statementStart = this$1.start;
+	      label$1.kind = kind;
+	    } else { break }
+	  }
+	  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});
+	  node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
+	  this.labels.pop();
+	  node.label = expr;
+	  return this.finishNode(node, "LabeledStatement")
+	};
+
+	pp$1.parseExpressionStatement = function(node, expr) {
+	  node.expression = expr;
+	  this.semicolon();
+	  return this.finishNode(node, "ExpressionStatement")
+	};
+
+	// Parse a semicolon-enclosed block of statements, handling `"use
+	// strict"` declarations when `allowStrict` is true (used for
+	// function bodies).
+
+	pp$1.parseBlock = function(createNewLexicalScope, node) {
+	  var this$1 = this;
+	  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;
+	  if ( node === void 0 ) node = this.startNode();
+
+	  node.body = [];
+	  this.expect(types.braceL);
+	  if (createNewLexicalScope) { this.enterScope(0); }
+	  while (!this.eat(types.braceR)) {
+	    var stmt = this$1.parseStatement(null);
+	    node.body.push(stmt);
+	  }
+	  if (createNewLexicalScope) { this.exitScope(); }
+	  return this.finishNode(node, "BlockStatement")
+	};
+
+	// Parse a regular `for` loop. The disambiguation code in
+	// `parseStatement` will already have parsed the init statement or
+	// expression.
+
+	pp$1.parseFor = function(node, init) {
+	  node.init = init;
+	  this.expect(types.semi);
+	  node.test = this.type === types.semi ? null : this.parseExpression();
+	  this.expect(types.semi);
+	  node.update = this.type === types.parenR ? null : this.parseExpression();
+	  this.expect(types.parenR);
+	  node.body = this.parseStatement("for");
+	  this.exitScope();
+	  this.labels.pop();
+	  return this.finishNode(node, "ForStatement")
+	};
+
+	// Parse a `for`/`in` and `for`/`of` loop, which are almost
+	// same from parser's perspective.
+
+	pp$1.parseForIn = function(node, init) {
+	  var type = this.type === types._in ? "ForInStatement" : "ForOfStatement";
+	  this.next();
+	  if (type === "ForInStatement") {
+	    if (init.type === "AssignmentPattern" ||
+	      (init.type === "VariableDeclaration" && init.declarations[0].init != null &&
+	       (this.strict || init.declarations[0].id.type !== "Identifier")))
+	      { this.raise(init.start, "Invalid assignment in for-in loop head"); }
+	  }
+	  node.left = init;
+	  node.right = type === "ForInStatement" ? this.parseExpression() : this.parseMaybeAssign();
+	  this.expect(types.parenR);
+	  node.body = this.parseStatement("for");
+	  this.exitScope();
+	  this.labels.pop();
+	  return this.finishNode(node, type)
+	};
+
+	// Parse a list of variable declarations.
+
+	pp$1.parseVar = function(node, isFor, kind) {
+	  var this$1 = this;
+
+	  node.declarations = [];
+	  node.kind = kind;
+	  for (;;) {
+	    var decl = this$1.startNode();
+	    this$1.parseVarId(decl, kind);
+	    if (this$1.eat(types.eq)) {
+	      decl.init = this$1.parseMaybeAssign(isFor);
+	    } else if (kind === "const" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual("of")))) {
+	      this$1.unexpected();
+	    } else if (decl.id.type !== "Identifier" && !(isFor && (this$1.type === types._in || this$1.isContextual("of")))) {
+	      this$1.raise(this$1.lastTokEnd, "Complex binding patterns require an initialization value");
+	    } else {
+	      decl.init = null;
+	    }
+	    node.declarations.push(this$1.finishNode(decl, "VariableDeclarator"));
+	    if (!this$1.eat(types.comma)) { break }
+	  }
+	  return node
+	};
+
+	pp$1.parseVarId = function(decl, kind) {
+	  if ((kind === "const" || kind === "let") && this.isContextual("let")) {
+	    this.raiseRecoverable(this.start, "let is disallowed as a lexically bound name");
+	  }
+	  decl.id = this.parseBindingAtom();
+	  this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
+	};
+
+	var FUNC_STATEMENT = 1;
+	var FUNC_HANGING_STATEMENT = 2;
+	var FUNC_NULLABLE_ID = 4;
+
+	// Parse a function declaration or literal (depending on the
+	// `statement & FUNC_STATEMENT`).
+
+	// Remove `allowExpressionBody` for 7.0.0, as it is only called with false
+	pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {
+	  this.initFunction(node);
+	  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
+	    if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))
+	      { this.unexpected(); }
+	    node.generator = this.eat(types.star);
+	  }
+	  if (this.options.ecmaVersion >= 8)
+	    { node.async = !!isAsync; }
+
+	  if (statement & FUNC_STATEMENT) {
+	    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();
+	    if (node.id && !(statement & FUNC_HANGING_STATEMENT))
+	      // If it is a regular function declaration in sloppy mode, then it is
+	      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
+	      // mode depends on properties of the current scope (see
+	      // treatFunctionsAsVar).
+	      { this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }
+	  }
+
+	  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
+	  this.yieldPos = 0;
+	  this.awaitPos = 0;
+	  this.awaitIdentPos = 0;
+	  this.enterScope(functionFlags(node.async, node.generator));
+
+	  if (!(statement & FUNC_STATEMENT))
+	    { node.id = this.type === types.name ? this.parseIdent() : null; }
+
+	  this.parseFunctionParams(node);
+	  this.parseFunctionBody(node, allowExpressionBody, false);
+
+	  this.yieldPos = oldYieldPos;
+	  this.awaitPos = oldAwaitPos;
+	  this.awaitIdentPos = oldAwaitIdentPos;
+	  return this.finishNode(node, (statement & FUNC_STATEMENT) ? "FunctionDeclaration" : "FunctionExpression")
+	};
+
+	pp$1.parseFunctionParams = function(node) {
+	  this.expect(types.parenL);
+	  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
+	  this.checkYieldAwaitInDefaultParams();
+	};
+
+	// Parse a class declaration or literal (depending on the
+	// `isStatement` parameter).
+
+	pp$1.parseClass = function(node, isStatement) {
+	  var this$1 = this;
+
+	  this.next();
+
+	  // ecma-262 14.6 Class Definitions
+	  // A class definition is always strict mode code.
+	  var oldStrict = this.strict;
+	  this.strict = true;
+
+	  this.parseClassId(node, isStatement);
+	  this.parseClassSuper(node);
+	  var classBody = this.startNode();
+	  var hadConstructor = false;
+	  classBody.body = [];
+	  this.expect(types.braceL);
+	  while (!this.eat(types.braceR)) {
+	    var element = this$1.parseClassElement(node.superClass !== null);
+	    if (element) {
+	      classBody.body.push(element);
+	      if (element.type === "MethodDefinition" && element.kind === "constructor") {
+	        if (hadConstructor) { this$1.raise(element.start, "Duplicate constructor in the same class"); }
+	        hadConstructor = true;
+	      }
+	    }
+	  }
+	  node.body = this.finishNode(classBody, "ClassBody");
+	  this.strict = oldStrict;
+	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
+	};
+
+	pp$1.parseClassElement = function(constructorAllowsSuper) {
+	  var this$1 = this;
+
+	  if (this.eat(types.semi)) { return null }
+
+	  var method = this.startNode();
+	  var tryContextual = function (k, noLineBreak) {
+	    if ( noLineBreak === void 0 ) noLineBreak = false;
+
+	    var start = this$1.start, startLoc = this$1.startLoc;
+	    if (!this$1.eatContextual(k)) { return false }
+	    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }
+	    if (method.key) { this$1.unexpected(); }
+	    method.computed = false;
+	    method.key = this$1.startNodeAt(start, startLoc);
+	    method.key.name = k;
+	    this$1.finishNode(method.key, "Identifier");
+	    return false
+	  };
+
+	  method.kind = "method";
+	  method.static = tryContextual("static");
+	  var isGenerator = this.eat(types.star);
+	  var isAsync = false;
+	  if (!isGenerator) {
+	    if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
+	      isAsync = true;
+	      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
+	    } else if (tryContextual("get")) {
+	      method.kind = "get";
+	    } else if (tryContextual("set")) {
+	      method.kind = "set";
+	    }
+	  }
+	  if (!method.key) { this.parsePropertyName(method); }
+	  var key = method.key;
+	  var allowsDirectSuper = false;
+	  if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" ||
+	      key.type === "Literal" && key.value === "constructor")) {
+	    if (method.kind !== "method") { this.raise(key.start, "Constructor can't have get/set modifier"); }
+	    if (isGenerator) { this.raise(key.start, "Constructor can't be a generator"); }
+	    if (isAsync) { this.raise(key.start, "Constructor can't be an async method"); }
+	    method.kind = "constructor";
+	    allowsDirectSuper = constructorAllowsSuper;
+	  } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
+	    this.raise(key.start, "Classes may not have a static property named prototype");
+	  }
+	  this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);
+	  if (method.kind === "get" && method.value.params.length !== 0)
+	    { this.raiseRecoverable(method.value.start, "getter should have no params"); }
+	  if (method.kind === "set" && method.value.params.length !== 1)
+	    { this.raiseRecoverable(method.value.start, "setter should have exactly one param"); }
+	  if (method.kind === "set" && method.value.params[0].type === "RestElement")
+	    { this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params"); }
+	  return method
+	};
+
+	pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
+	  method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
+	  return this.finishNode(method, "MethodDefinition")
+	};
+
+	pp$1.parseClassId = function(node, isStatement) {
+	  if (this.type === types.name) {
+	    node.id = this.parseIdent();
+	    if (isStatement)
+	      { this.checkLVal(node.id, BIND_LEXICAL, false); }
+	  } else {
+	    if (isStatement === true)
+	      { this.unexpected(); }
+	    node.id = null;
+	  }
+	};
+
+	pp$1.parseClassSuper = function(node) {
+	  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
+	};
+
+	// Parses module export declaration.
+
+	pp$1.parseExport = function(node, exports) {
+	  var this$1 = this;
+
+	  this.next();
+	  // export * from '...'
+	  if (this.eat(types.star)) {
+	    this.expectContextual("from");
+	    if (this.type !== types.string) { this.unexpected(); }
+	    node.source = this.parseExprAtom();
+	    this.semicolon();
+	    return this.finishNode(node, "ExportAllDeclaration")
+	  }
+	  if (this.eat(types._default)) { // export default ...
+	    this.checkExport(exports, "default", this.lastTokStart);
+	    var isAsync;
+	    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
+	      var fNode = this.startNode();
+	      this.next();
+	      if (isAsync) { this.next(); }
+	      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
+	    } else if (this.type === types._class) {
+	      var cNode = this.startNode();
+	      node.declaration = this.parseClass(cNode, "nullableID");
+	    } else {
+	      node.declaration = this.parseMaybeAssign();
+	      this.semicolon();
+	    }
+	    return this.finishNode(node, "ExportDefaultDeclaration")
+	  }
+	  // export var|const|let|function|class ...
+	  if (this.shouldParseExportStatement()) {
+	    node.declaration = this.parseStatement(null);
+	    if (node.declaration.type === "VariableDeclaration")
+	      { this.checkVariableExport(exports, node.declaration.declarations); }
+	    else
+	      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }
+	    node.specifiers = [];
+	    node.source = null;
+	  } else { // export { x, y as z } [from '...']
+	    node.declaration = null;
+	    node.specifiers = this.parseExportSpecifiers(exports);
+	    if (this.eatContextual("from")) {
+	      if (this.type !== types.string) { this.unexpected(); }
+	      node.source = this.parseExprAtom();
+	    } else {
+	      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
+	        // check for keywords used as local names
+	        var spec = list[i];
+
+	        this$1.checkUnreserved(spec.local);
+	        // check if export is defined
+	        this$1.checkLocalExport(spec.local);
+	      }
+
+	      node.source = null;
+	    }
+	    this.semicolon();
+	  }
+	  return this.finishNode(node, "ExportNamedDeclaration")
+	};
+
+	pp$1.checkExport = function(exports, name, pos) {
+	  if (!exports) { return }
+	  if (has(exports, name))
+	    { this.raiseRecoverable(pos, "Duplicate export '" + name + "'"); }
+	  exports[name] = true;
+	};
+
+	pp$1.checkPatternExport = function(exports, pat) {
+	  var this$1 = this;
+
+	  var type = pat.type;
+	  if (type === "Identifier")
+	    { this.checkExport(exports, pat.name, pat.start); }
+	  else if (type === "ObjectPattern")
+	    { for (var i = 0, list = pat.properties; i < list.length; i += 1)
+	      {
+	        var prop = list[i];
+
+	        this$1.checkPatternExport(exports, prop);
+	      } }
+	  else if (type === "ArrayPattern")
+	    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
+	      var elt = list$1[i$1];
+
+	        if (elt) { this$1.checkPatternExport(exports, elt); }
+	    } }
+	  else if (type === "Property")
+	    { this.checkPatternExport(exports, pat.value); }
+	  else if (type === "AssignmentPattern")
+	    { this.checkPatternExport(exports, pat.left); }
+	  else if (type === "RestElement")
+	    { this.checkPatternExport(exports, pat.argument); }
+	  else if (type === "ParenthesizedExpression")
+	    { this.checkPatternExport(exports, pat.expression); }
+	};
+
+	pp$1.checkVariableExport = function(exports, decls) {
+	  var this$1 = this;
+
+	  if (!exports) { return }
+	  for (var i = 0, list = decls; i < list.length; i += 1)
+	    {
+	    var decl = list[i];
+
+	    this$1.checkPatternExport(exports, decl.id);
+	  }
+	};
+
+	pp$1.shouldParseExportStatement = function() {
+	  return this.type.keyword === "var" ||
+	    this.type.keyword === "const" ||
+	    this.type.keyword === "class" ||
+	    this.type.keyword === "function" ||
+	    this.isLet() ||
+	    this.isAsyncFunction()
+	};
+
+	// Parses a comma-separated list of module exports.
+
+	pp$1.parseExportSpecifiers = function(exports) {
+	  var this$1 = this;
+
+	  var nodes = [], first = true;
+	  // export { x, y as z } [from '...']
+	  this.expect(types.braceL);
+	  while (!this.eat(types.braceR)) {
+	    if (!first) {
+	      this$1.expect(types.comma);
+	      if (this$1.afterTrailingComma(types.braceR)) { break }
+	    } else { first = false; }
+
+	    var node = this$1.startNode();
+	    node.local = this$1.parseIdent(true);
+	    node.exported = this$1.eatContextual("as") ? this$1.parseIdent(true) : node.local;
+	    this$1.checkExport(exports, node.exported.name, node.exported.start);
+	    nodes.push(this$1.finishNode(node, "ExportSpecifier"));
+	  }
+	  return nodes
+	};
+
+	// Parses import declaration.
+
+	pp$1.parseImport = function(node) {
+	  this.next();
+	  // import '...'
+	  if (this.type === types.string) {
+	    node.specifiers = empty$1;
+	    node.source = this.parseExprAtom();
+	  } else {
+	    node.specifiers = this.parseImportSpecifiers();
+	    this.expectContextual("from");
+	    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
+	  }
+	  this.semicolon();
+	  return this.finishNode(node, "ImportDeclaration")
+	};
+
+	// Parses a comma-separated list of module imports.
+
+	pp$1.parseImportSpecifiers = function() {
+	  var this$1 = this;
+
+	  var nodes = [], first = true;
+	  if (this.type === types.name) {
+	    // import defaultObj, { x, y as z } from '...'
+	    var node = this.startNode();
+	    node.local = this.parseIdent();
+	    this.checkLVal(node.local, BIND_LEXICAL);
+	    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
+	    if (!this.eat(types.comma)) { return nodes }
+	  }
+	  if (this.type === types.star) {
+	    var node$1 = this.startNode();
+	    this.next();
+	    this.expectContextual("as");
+	    node$1.local = this.parseIdent();
+	    this.checkLVal(node$1.local, BIND_LEXICAL);
+	    nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
+	    return nodes
+	  }
+	  this.expect(types.braceL);
+	  while (!this.eat(types.braceR)) {
+	    if (!first) {
+	      this$1.expect(types.comma);
+	      if (this$1.afterTrailingComma(types.braceR)) { break }
+	    } else { first = false; }
+
+	    var node$2 = this$1.startNode();
+	    node$2.imported = this$1.parseIdent(true);
+	    if (this$1.eatContextual("as")) {
+	      node$2.local = this$1.parseIdent();
+	    } else {
+	      this$1.checkUnreserved(node$2.imported);
+	      node$2.local = node$2.imported;
+	    }
+	    this$1.checkLVal(node$2.local, BIND_LEXICAL);
+	    nodes.push(this$1.finishNode(node$2, "ImportSpecifier"));
+	  }
+	  return nodes
+	};
+
+	// Set `ExpressionStatement#directive` property for directive prologues.
+	pp$1.adaptDirectivePrologue = function(statements) {
+	  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
+	    statements[i].directive = statements[i].expression.raw.slice(1, -1);
+	  }
+	};
+	pp$1.isDirectiveCandidate = function(statement) {
+	  return (
+	    statement.type === "ExpressionStatement" &&
+	    statement.expression.type === "Literal" &&
+	    typeof statement.expression.value === "string" &&
+	    // Reject parenthesized strings.
+	    (this.input[statement.start] === "\"" || this.input[statement.start] === "'")
+	  )
+	};
+
+	var pp$2 = Parser.prototype;
+
+	// Convert existing expression atom to assignable pattern
+	// if possible.
+
+	pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {
+	  var this$1 = this;
+
+	  if (this.options.ecmaVersion >= 6 && node) {
+	    switch (node.type) {
+	    case "Identifier":
+	      if (this.inAsync && node.name === "await")
+	        { this.raise(node.start, "Cannot use 'await' as identifier inside an async function"); }
+	      break
+
+	    case "ObjectPattern":
+	    case "ArrayPattern":
+	    case "RestElement":
+	      break
+
+	    case "ObjectExpression":
+	      node.type = "ObjectPattern";
+	      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
+	      for (var i = 0, list = node.properties; i < list.length; i += 1) {
+	        var prop = list[i];
+
+	      this$1.toAssignable(prop, isBinding);
+	        // Early error:
+	        //   AssignmentRestProperty[Yield, Await] :
+	        //     `...` DestructuringAssignmentTarget[Yield, Await]
+	        //
+	        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
+	        if (
+	          prop.type === "RestElement" &&
+	          (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")
+	        ) {
+	          this$1.raise(prop.argument.start, "Unexpected token");
+	        }
+	      }
+	      break
+
+	    case "Property":
+	      // AssignmentProperty has type === "Property"
+	      if (node.kind !== "init") { this.raise(node.key.start, "Object pattern can't contain getter or setter"); }
+	      this.toAssignable(node.value, isBinding);
+	      break
+
+	    case "ArrayExpression":
+	      node.type = "ArrayPattern";
+	      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
+	      this.toAssignableList(node.elements, isBinding);
+	      break
+
+	    case "SpreadElement":
+	      node.type = "RestElement";
+	      this.toAssignable(node.argument, isBinding);
+	      if (node.argument.type === "AssignmentPattern")
+	        { this.raise(node.argument.start, "Rest elements cannot have a default value"); }
+	      break
+
+	    case "AssignmentExpression":
+	      if (node.operator !== "=") { this.raise(node.left.end, "Only '=' operator can be used for specifying default value."); }
+	      node.type = "AssignmentPattern";
+	      delete node.operator;
+	      this.toAssignable(node.left, isBinding);
+	      // falls through to AssignmentPattern
+
+	    case "AssignmentPattern":
+	      break
+
+	    case "ParenthesizedExpression":
+	      this.toAssignable(node.expression, isBinding, refDestructuringErrors);
+	      break
+
+	    case "MemberExpression":
+	      if (!isBinding) { break }
+
+	    default:
+	      this.raise(node.start, "Assigning to rvalue");
+	    }
+	  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
+	  return node
+	};
+
+	// Convert list of expression atoms to binding list.
+
+	pp$2.toAssignableList = function(exprList, isBinding) {
+	  var this$1 = this;
+
+	  var end = exprList.length;
+	  for (var i = 0; i < end; i++) {
+	    var elt = exprList[i];
+	    if (elt) { this$1.toAssignable(elt, isBinding); }
+	  }
+	  if (end) {
+	    var last = exprList[end - 1];
+	    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
+	      { this.unexpected(last.argument.start); }
+	  }
+	  return exprList
+	};
+
+	// Parses spread element.
+
+	pp$2.parseSpread = function(refDestructuringErrors) {
+	  var node = this.startNode();
+	  this.next();
+	  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
+	  return this.finishNode(node, "SpreadElement")
+	};
+
+	pp$2.parseRestBinding = function() {
+	  var node = this.startNode();
+	  this.next();
+
+	  // RestElement inside of a function parameter must be an identifier
+	  if (this.options.ecmaVersion === 6 && this.type !== types.name)
+	    { this.unexpected(); }
+
+	  node.argument = this.parseBindingAtom();
+
+	  return this.finishNode(node, "RestElement")
+	};
+
+	// Parses lvalue (assignable) atom.
+
+	pp$2.parseBindingAtom = function() {
+	  if (this.options.ecmaVersion >= 6) {
+	    switch (this.type) {
+	    case types.bracketL:
+	      var node = this.startNode();
+	      this.next();
+	      node.elements = this.parseBindingList(types.bracketR, true, true);
+	      return this.finishNode(node, "ArrayPattern")
+
+	    case types.braceL:
+	      return this.parseObj(true)
+	    }
+	  }
+	  return this.parseIdent()
+	};
+
+	pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
+	  var this$1 = this;
+
+	  var elts = [], first = true;
+	  while (!this.eat(close)) {
+	    if (first) { first = false; }
+	    else { this$1.expect(types.comma); }
+	    if (allowEmpty && this$1.type === types.comma) {
+	      elts.push(null);
+	    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {
+	      break
+	    } else if (this$1.type === types.ellipsis) {
+	      var rest = this$1.parseRestBinding();
+	      this$1.parseBindingListItem(rest);
+	      elts.push(rest);
+	      if (this$1.type === types.comma) { this$1.raise(this$1.start, "Comma is not permitted after the rest element"); }
+	      this$1.expect(close);
+	      break
+	    } else {
+	      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);
+	      this$1.parseBindingListItem(elem);
+	      elts.push(elem);
+	    }
+	  }
+	  return elts
+	};
+
+	pp$2.parseBindingListItem = function(param) {
+	  return param
+	};
+
+	// Parses assignment pattern around given atom if possible.
+
+	pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
+	  left = left || this.parseBindingAtom();
+	  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }
+	  var node = this.startNodeAt(startPos, startLoc);
+	  node.left = left;
+	  node.right = this.parseMaybeAssign();
+	  return this.finishNode(node, "AssignmentPattern")
+	};
+
+	// Verify that a node is an lval — something that can be assigned
+	// to.
+	// bindingType can be either:
+	// 'var' indicating that the lval creates a 'var' binding
+	// 'let' indicating that the lval creates a lexical ('let' or 'const') binding
+	// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references
+
+	pp$2.checkLVal = function(expr, bindingType, checkClashes) {
+	  var this$1 = this;
+	  if ( bindingType === void 0 ) bindingType = BIND_NONE;
+
+	  switch (expr.type) {
+	  case "Identifier":
+	    if (this.strict && this.reservedWordsStrictBind.test(expr.name))
+	      { this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode"); }
+	    if (checkClashes) {
+	      if (has(checkClashes, expr.name))
+	        { this.raiseRecoverable(expr.start, "Argument name clash"); }
+	      checkClashes[expr.name] = true;
+	    }
+	    if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }
+	    break
+
+	  case "MemberExpression":
+	    if (bindingType) { this.raiseRecoverable(expr.start, "Binding member expression"); }
+	    break
+
+	  case "ObjectPattern":
+	    for (var i = 0, list = expr.properties; i < list.length; i += 1)
+	      {
+	    var prop = list[i];
+
+	    this$1.checkLVal(prop, bindingType, checkClashes);
+	  }
+	    break
+
+	  case "Property":
+	    // AssignmentProperty has type === "Property"
+	    this.checkLVal(expr.value, bindingType, checkClashes);
+	    break
+
+	  case "ArrayPattern":
+	    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
+	      var elem = list$1[i$1];
+
+	    if (elem) { this$1.checkLVal(elem, bindingType, checkClashes); }
+	    }
+	    break
+
+	  case "AssignmentPattern":
+	    this.checkLVal(expr.left, bindingType, checkClashes);
+	    break
+
+	  case "RestElement":
+	    this.checkLVal(expr.argument, bindingType, checkClashes);
+	    break
+
+	  case "ParenthesizedExpression":
+	    this.checkLVal(expr.expression, bindingType, checkClashes);
+	    break
+
+	  default:
+	    this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
+	  }
+	};
+
+	// A recursive descent parser operates by defining functions for all
+	// syntactic elements, and recursively calling those, each function
+	// advancing the input stream and returning an AST node. Precedence
+	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
+	// instead of `(!x)[1]` is handled by the fact that the parser
+	// function that parses unary prefix operators is called first, and
+	// in turn calls the function that parses `[]` subscripts — that
+	// way, it'll receive the node for `x[1]` already parsed, and wraps
+	// *that* in the unary operator node.
+	//
+	// Acorn uses an [operator precedence parser][opp] to handle binary
+	// operator precedence, because it is much more compact than using
+	// the technique outlined above, which uses different, nesting
+	// functions to specify precedence, for all of the ten binary
+	// precedence levels that JavaScript defines.
+	//
+	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser
+
+	var pp$3 = Parser.prototype;
+
+	// Check if property name clashes with already added.
+	// Object/class getters and setters are not allowed to clash —
+	// either with each other or with an init property — and in
+	// strict mode, init properties are also not allowed to be repeated.
+
+	pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {
+	  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement")
+	    { return }
+	  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
+	    { return }
+	  var key = prop.key;
+	  var name;
+	  switch (key.type) {
+	  case "Identifier": name = key.name; break
+	  case "Literal": name = String(key.value); break
+	  default: return
+	  }
+	  var kind = prop.kind;
+	  if (this.options.ecmaVersion >= 6) {
+	    if (name === "__proto__" && kind === "init") {
+	      if (propHash.proto) {
+	        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }
+	        // Backwards-compat kludge. Can be removed in version 6.0
+	        else { this.raiseRecoverable(key.start, "Redefinition of __proto__ property"); }
+	      }
+	      propHash.proto = true;
+	    }
+	    return
+	  }
+	  name = "$" + name;
+	  var other = propHash[name];
+	  if (other) {
+	    var redefinition;
+	    if (kind === "init") {
+	      redefinition = this.strict && other.init || other.get || other.set;
+	    } else {
+	      redefinition = other.init || other[kind];
+	    }
+	    if (redefinition)
+	      { this.raiseRecoverable(key.start, "Redefinition of property"); }
+	  } else {
+	    other = propHash[name] = {
+	      init: false,
+	      get: false,
+	      set: false
+	    };
+	  }
+	  other[kind] = true;
+	};
+
+	// ### Expression parsing
+
+	// These nest, from the most general expression type at the top to
+	// 'atomic', nondivisible expression types at the bottom. Most of
+	// the functions will simply let the function(s) below them parse,
+	// and, *if* the syntactic construct they handle is present, wrap
+	// the AST node that the inner parser gave them in another node.
+
+	// Parse a full expression. The optional arguments are used to
+	// forbid the `in` operator (in for loops initalization expressions)
+	// and provide reference for storing '=' operator inside shorthand
+	// property assignment in contexts where both object expression
+	// and object pattern might appear (so it's possible to raise
+	// delayed syntax error at correct position).
+
+	pp$3.parseExpression = function(noIn, refDestructuringErrors) {
+	  var this$1 = this;
+
+	  var startPos = this.start, startLoc = this.startLoc;
+	  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
+	  if (this.type === types.comma) {
+	    var node = this.startNodeAt(startPos, startLoc);
+	    node.expressions = [expr];
+	    while (this.eat(types.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors)); }
+	    return this.finishNode(node, "SequenceExpression")
+	  }
+	  return expr
+	};
+
+	// Parse an assignment expression. This includes applications of
+	// operators like `+=`.
+
+	pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {
+	  if (this.isContextual("yield")) {
+	    if (this.inGenerator) { return this.parseYield(noIn) }
+	    // The tokenizer will assume an expression is allowed after
+	    // `yield`, but this isn't that kind of yield
+	    else { this.exprAllowed = false; }
+	  }
+
+	  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldShorthandAssign = -1;
+	  if (refDestructuringErrors) {
+	    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
+	    oldTrailingComma = refDestructuringErrors.trailingComma;
+	    oldShorthandAssign = refDestructuringErrors.shorthandAssign;
+	    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;
+	  } else {
+	    refDestructuringErrors = new DestructuringErrors;
+	    ownDestructuringErrors = true;
+	  }
+
+	  var startPos = this.start, startLoc = this.startLoc;
+	  if (this.type === types.parenL || this.type === types.name)
+	    { this.potentialArrowAt = this.start; }
+	  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
+	  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }
+	  if (this.type.isAssign) {
+	    var node = this.startNodeAt(startPos, startLoc);
+	    node.operator = this.value;
+	    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
+	    if (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }
+	    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly
+	    this.checkLVal(left);
+	    this.next();
+	    node.right = this.parseMaybeAssign(noIn);
+	    return this.finishNode(node, "AssignmentExpression")
+	  } else {
+	    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }
+	  }
+	  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }
+	  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }
+	  if (oldShorthandAssign > -1) { refDestructuringErrors.shorthandAssign = oldShorthandAssign; }
+	  return left
+	};
+
+	// Parse a ternary conditional (`?:`) operator.
+
+	pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {
+	  var startPos = this.start, startLoc = this.startLoc;
+	  var expr = this.parseExprOps(noIn, refDestructuringErrors);
+	  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
+	  if (this.eat(types.question)) {
+	    var node = this.startNodeAt(startPos, startLoc);
+	    node.test = expr;
+	    node.consequent = this.parseMaybeAssign();
+	    this.expect(types.colon);
+	    node.alternate = this.parseMaybeAssign(noIn);
+	    return this.finishNode(node, "ConditionalExpression")
+	  }
+	  return expr
+	};
+
+	// Start the precedence parser.
+
+	pp$3.parseExprOps = function(noIn, refDestructuringErrors) {
+	  var startPos = this.start, startLoc = this.startLoc;
+	  var expr = this.parseMaybeUnary(refDestructuringErrors, false);
+	  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
+	  return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)
+	};
+
+	// Parse binary operators with the operator precedence parsing
+	// algorithm. `left` is the left-hand side of the operator.
+	// `minPrec` provides context that allows the function to stop and
+	// defer further parser to one of its callers when it encounters an
+	// operator that has a lower precedence than the set it is parsing.
+
+	pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
+	  var prec = this.type.binop;
+	  if (prec != null && (!noIn || this.type !== types._in)) {
+	    if (prec > minPrec) {
+	      var logical = this.type === types.logicalOR || this.type === types.logicalAND;
+	      var op = this.value;
+	      this.next();
+	      var startPos = this.start, startLoc = this.startLoc;
+	      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
+	      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
+	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)
+	    }
+	  }
+	  return left
+	};
+
+	pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
+	  var node = this.startNodeAt(startPos, startLoc);
+	  node.left = left;
+	  node.operator = op;
+	  node.right = right;
+	  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
+	};
+
+	// Parse unary operators, both prefix and postfix.
+
+	pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {
+	  var this$1 = this;
+
+	  var startPos = this.start, startLoc = this.startLoc, expr;
+	  if (this.isContextual("await") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {
+	    expr = this.parseAwait();
+	    sawUnary = true;
+	  } else if (this.type.prefix) {
+	    var node = this.startNode(), update = this.type === types.incDec;
+	    node.operator = this.value;
+	    node.prefix = true;
+	    this.next();
+	    node.argument = this.parseMaybeUnary(null, true);
+	    this.checkExpressionErrors(refDestructuringErrors, true);
+	    if (update) { this.checkLVal(node.argument); }
+	    else if (this.strict && node.operator === "delete" &&
+	             node.argument.type === "Identifier")
+	      { this.raiseRecoverable(node.start, "Deleting local variable in strict mode"); }
+	    else { sawUnary = true; }
+	    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
+	  } else {
+	    expr = this.parseExprSubscripts(refDestructuringErrors);
+	    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
+	    while (this.type.postfix && !this.canInsertSemicolon()) {
+	      var node$1 = this$1.startNodeAt(startPos, startLoc);
+	      node$1.operator = this$1.value;
+	      node$1.prefix = false;
+	      node$1.argument = expr;
+	      this$1.checkLVal(expr);
+	      this$1.next();
+	      expr = this$1.finishNode(node$1, "UpdateExpression");
+	    }
+	  }
+
+	  if (!sawUnary && this.eat(types.starstar))
+	    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false) }
+	  else
+	    { return expr }
+	};
+
+	// Parse call, dot, and `[]`-subscript expressions.
+
+	pp$3.parseExprSubscripts = function(refDestructuringErrors) {
+	  var startPos = this.start, startLoc = this.startLoc;
+	  var expr = this.parseExprAtom(refDestructuringErrors);
+	  var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
+	  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }
+	  var result = this.parseSubscripts(expr, startPos, startLoc);
+	  if (refDestructuringErrors && result.type === "MemberExpression") {
+	    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }
+	    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }
+	  }
+	  return result
+	};
+
+	pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {
+	  var this$1 = this;
+
+	  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&
+	      this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === "async";
+	  while (true) {
+	    var element = this$1.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);
+	    if (element === base || element.type === "ArrowFunctionExpression") { return element }
+	    base = element;
+	  }
+	};
+
+	pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow) {
+	  var computed = this.eat(types.bracketL);
+	  if (computed || this.eat(types.dot)) {
+	    var node = this.startNodeAt(startPos, startLoc);
+	    node.object = base;
+	    node.property = computed ? this.parseExpression() : this.parseIdent(true);
+	    node.computed = !!computed;
+	    if (computed) { this.expect(types.bracketR); }
+	    base = this.finishNode(node, "MemberExpression");
+	  } else if (!noCalls && this.eat(types.parenL)) {
+	    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
+	    this.yieldPos = 0;
+	    this.awaitPos = 0;
+	    this.awaitIdentPos = 0;
+	    var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
+	    if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
+	      this.checkPatternErrors(refDestructuringErrors, false);
+	      this.checkYieldAwaitInDefaultParams();
+	      if (this.awaitIdentPos > 0)
+	        { this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"); }
+	      this.yieldPos = oldYieldPos;
+	      this.awaitPos = oldAwaitPos;
+	      this.awaitIdentPos = oldAwaitIdentPos;
+	      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)
+	    }
+	    this.checkExpressionErrors(refDestructuringErrors, true);
+	    this.yieldPos = oldYieldPos || this.yieldPos;
+	    this.awaitPos = oldAwaitPos || this.awaitPos;
+	    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
+	    var node$1 = this.startNodeAt(startPos, startLoc);
+	    node$1.callee = base;
+	    node$1.arguments = exprList;
+	    base = this.finishNode(node$1, "CallExpression");
+	  } else if (this.type === types.backQuote) {
+	    var node$2 = this.startNodeAt(startPos, startLoc);
+	    node$2.tag = base;
+	    node$2.quasi = this.parseTemplate({isTagged: true});
+	    base = this.finishNode(node$2, "TaggedTemplateExpression");
+	  }
+	  return base
+	};
+
+	// Parse an atomic expression — either a single token that is an
+	// expression, an expression started by a keyword like `function` or
+	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
+	// or `{}`.
+
+	pp$3.parseExprAtom = function(refDestructuringErrors) {
+	  // If a division operator appears in an expression position, the
+	  // tokenizer got confused, and we force it to read a regexp instead.
+	  if (this.type === types.slash) { this.readRegexp(); }
+
+	  var node, canBeArrow = this.potentialArrowAt === this.start;
+	  switch (this.type) {
+	  case types._super:
+	    if (!this.allowSuper)
+	      { this.raise(this.start, "'super' keyword outside a method"); }
+	    node = this.startNode();
+	    this.next();
+	    if (this.type === types.parenL && !this.allowDirectSuper)
+	      { this.raise(node.start, "super() call outside constructor of a subclass"); }
+	    // The `super` keyword can appear at below:
+	    // SuperProperty:
+	    //     super [ Expression ]
+	    //     super . IdentifierName
+	    // SuperCall:
+	    //     super Arguments
+	    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)
+	      { this.unexpected(); }
+	    return this.finishNode(node, "Super")
+
+	  case types._this:
+	    node = this.startNode();
+	    this.next();
+	    return this.finishNode(node, "ThisExpression")
+
+	  case types.name:
+	    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
+	    var id = this.parseIdent(false);
+	    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function))
+	      { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }
+	    if (canBeArrow && !this.canInsertSemicolon()) {
+	      if (this.eat(types.arrow))
+	        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }
+	      if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
+	        id = this.parseIdent(false);
+	        if (this.canInsertSemicolon() || !this.eat(types.arrow))
+	          { this.unexpected(); }
+	        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)
+	      }
+	    }
+	    return id
+
+	  case types.regexp:
+	    var value = this.value;
+	    node = this.parseLiteral(value.value);
+	    node.regex = {pattern: value.pattern, flags: value.flags};
+	    return node
+
+	  case types.num: case types.string:
+	    return this.parseLiteral(this.value)
+
+	  case types._null: case types._true: case types._false:
+	    node = this.startNode();
+	    node.value = this.type === types._null ? null : this.type === types._true;
+	    node.raw = this.type.keyword;
+	    this.next();
+	    return this.finishNode(node, "Literal")
+
+	  case types.parenL:
+	    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
+	    if (refDestructuringErrors) {
+	      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))
+	        { refDestructuringErrors.parenthesizedAssign = start; }
+	      if (refDestructuringErrors.parenthesizedBind < 0)
+	        { refDestructuringErrors.parenthesizedBind = start; }
+	    }
+	    return expr
+
+	  case types.bracketL:
+	    node = this.startNode();
+	    this.next();
+	    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
+	    return this.finishNode(node, "ArrayExpression")
+
+	  case types.braceL:
+	    return this.parseObj(false, refDestructuringErrors)
+
+	  case types._function:
+	    node = this.startNode();
+	    this.next();
+	    return this.parseFunction(node, 0)
+
+	  case types._class:
+	    return this.parseClass(this.startNode(), false)
+
+	  case types._new:
+	    return this.parseNew()
+
+	  case types.backQuote:
+	    return this.parseTemplate()
+
+	  default:
+	    this.unexpected();
+	  }
+	};
+
+	pp$3.parseLiteral = function(value) {
+	  var node = this.startNode();
+	  node.value = value;
+	  node.raw = this.input.slice(this.start, this.end);
+	  this.next();
+	  return this.finishNode(node, "Literal")
+	};
+
+	pp$3.parseParenExpression = function() {
+	  this.expect(types.parenL);
+	  var val = this.parseExpression();
+	  this.expect(types.parenR);
+	  return val
+	};
+
+	pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
+	  var this$1 = this;
+
+	  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
+	  if (this.options.ecmaVersion >= 6) {
+	    this.next();
+
+	    var innerStartPos = this.start, innerStartLoc = this.startLoc;
+	    var exprList = [], first = true, lastIsComma = false;
+	    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
+	    this.yieldPos = 0;
+	    this.awaitPos = 0;
+	    // Do not save awaitIdentPos to allow checking awaits nested in parameters
+	    while (this.type !== types.parenR) {
+	      first ? first = false : this$1.expect(types.comma);
+	      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {
+	        lastIsComma = true;
+	        break
+	      } else if (this$1.type === types.ellipsis) {
+	        spreadStart = this$1.start;
+	        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));
+	        if (this$1.type === types.comma) { this$1.raise(this$1.start, "Comma is not permitted after the rest element"); }
+	        break
+	      } else {
+	        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));
+	      }
+	    }
+	    var innerEndPos = this.start, innerEndLoc = this.startLoc;
+	    this.expect(types.parenR);
+
+	    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
+	      this.checkPatternErrors(refDestructuringErrors, false);
+	      this.checkYieldAwaitInDefaultParams();
+	      this.yieldPos = oldYieldPos;
+	      this.awaitPos = oldAwaitPos;
+	      return this.parseParenArrowList(startPos, startLoc, exprList)
+	    }
+
+	    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }
+	    if (spreadStart) { this.unexpected(spreadStart); }
+	    this.checkExpressionErrors(refDestructuringErrors, true);
+	    this.yieldPos = oldYieldPos || this.yieldPos;
+	    this.awaitPos = oldAwaitPos || this.awaitPos;
+
+	    if (exprList.length > 1) {
+	      val = this.startNodeAt(innerStartPos, innerStartLoc);
+	      val.expressions = exprList;
+	      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
+	    } else {
+	      val = exprList[0];
+	    }
+	  } else {
+	    val = this.parseParenExpression();
+	  }
+
+	  if (this.options.preserveParens) {
+	    var par = this.startNodeAt(startPos, startLoc);
+	    par.expression = val;
+	    return this.finishNode(par, "ParenthesizedExpression")
+	  } else {
+	    return val
+	  }
+	};
+
+	pp$3.parseParenItem = function(item) {
+	  return item
+	};
+
+	pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
+	  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)
+	};
+
+	// New's precedence is slightly tricky. It must allow its argument to
+	// be a `[]` or dot subscript expression, but not a call — at least,
+	// not without wrapping it in parentheses. Thus, it uses the noCalls
+	// argument to parseSubscripts to prevent it from consuming the
+	// argument list.
+
+	var empty$1$1 = [];
+
+	pp$3.parseNew = function() {
+	  var node = this.startNode();
+	  var meta = this.parseIdent(true);
+	  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
+	    node.meta = meta;
+	    var containsEsc = this.containsEsc;
+	    node.property = this.parseIdent(true);
+	    if (node.property.name !== "target" || containsEsc)
+	      { this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target"); }
+	    if (!this.inNonArrowFunction())
+	      { this.raiseRecoverable(node.start, "new.target can only be used in functions"); }
+	    return this.finishNode(node, "MetaProperty")
+	  }
+	  var startPos = this.start, startLoc = this.startLoc;
+	  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
+	  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }
+	  else { node.arguments = empty$1$1; }
+	  return this.finishNode(node, "NewExpression")
+	};
+
+	// Parse template expression.
+
+	pp$3.parseTemplateElement = function(ref) {
+	  var isTagged = ref.isTagged;
+
+	  var elem = this.startNode();
+	  if (this.type === types.invalidTemplate) {
+	    if (!isTagged) {
+	      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
+	    }
+	    elem.value = {
+	      raw: this.value,
+	      cooked: null
+	    };
+	  } else {
+	    elem.value = {
+	      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
+	      cooked: this.value
+	    };
+	  }
+	  this.next();
+	  elem.tail = this.type === types.backQuote;
+	  return this.finishNode(elem, "TemplateElement")
+	};
+
+	pp$3.parseTemplate = function(ref) {
+	  var this$1 = this;
+	  if ( ref === void 0 ) ref = {};
+	  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;
+
+	  var node = this.startNode();
+	  this.next();
+	  node.expressions = [];
+	  var curElt = this.parseTemplateElement({isTagged: isTagged});
+	  node.quasis = [curElt];
+	  while (!curElt.tail) {
+	    if (this$1.type === types.eof) { this$1.raise(this$1.pos, "Unterminated template literal"); }
+	    this$1.expect(types.dollarBraceL);
+	    node.expressions.push(this$1.parseExpression());
+	    this$1.expect(types.braceR);
+	    node.quasis.push(curElt = this$1.parseTemplateElement({isTagged: isTagged}));
+	  }
+	  this.next();
+	  return this.finishNode(node, "TemplateLiteral")
+	};
+
+	pp$3.isAsyncProp = function(prop) {
+	  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" &&
+	    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&
+	    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
+	};
+
+	// Parse an object literal or binding pattern.
+
+	pp$3.parseObj = function(isPattern, refDestructuringErrors) {
+	  var this$1 = this;
+
+	  var node = this.startNode(), first = true, propHash = {};
+	  node.properties = [];
+	  this.next();
+	  while (!this.eat(types.braceR)) {
+	    if (!first) {
+	      this$1.expect(types.comma);
+	      if (this$1.afterTrailingComma(types.braceR)) { break }
+	    } else { first = false; }
+
+	    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);
+	    if (!isPattern) { this$1.checkPropClash(prop, propHash, refDestructuringErrors); }
+	    node.properties.push(prop);
+	  }
+	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
+	};
+
+	pp$3.parseProperty = function(isPattern, refDestructuringErrors) {
+	  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
+	  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
+	    if (isPattern) {
+	      prop.argument = this.parseIdent(false);
+	      if (this.type === types.comma) {
+	        this.raise(this.start, "Comma is not permitted after the rest element");
+	      }
+	      return this.finishNode(prop, "RestElement")
+	    }
+	    // To disallow parenthesized identifier via `this.toAssignable()`.
+	    if (this.type === types.parenL && refDestructuringErrors) {
+	      if (refDestructuringErrors.parenthesizedAssign < 0) {
+	        refDestructuringErrors.parenthesizedAssign = this.start;
+	      }
+	      if (refDestructuringErrors.parenthesizedBind < 0) {
+	        refDestructuringErrors.parenthesizedBind = this.start;
+	      }
+	    }
+	    // Parse argument.
+	    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
+	    // To disallow trailing comma via `this.toAssignable()`.
+	    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
+	      refDestructuringErrors.trailingComma = this.start;
+	    }
+	    // Finish
+	    return this.finishNode(prop, "SpreadElement")
+	  }
+	  if (this.options.ecmaVersion >= 6) {
+	    prop.method = false;
+	    prop.shorthand = false;
+	    if (isPattern || refDestructuringErrors) {
+	      startPos = this.start;
+	      startLoc = this.startLoc;
+	    }
+	    if (!isPattern)
+	      { isGenerator = this.eat(types.star); }
+	  }
+	  var containsEsc = this.containsEsc;
+	  this.parsePropertyName(prop);
+	  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
+	    isAsync = true;
+	    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
+	    this.parsePropertyName(prop, refDestructuringErrors);
+	  } else {
+	    isAsync = false;
+	  }
+	  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
+	  return this.finishNode(prop, "Property")
+	};
+
+	pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
+	  if ((isGenerator || isAsync) && this.type === types.colon)
+	    { this.unexpected(); }
+
+	  if (this.eat(types.colon)) {
+	    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
+	    prop.kind = "init";
+	  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
+	    if (isPattern) { this.unexpected(); }
+	    prop.kind = "init";
+	    prop.method = true;
+	    prop.value = this.parseMethod(isGenerator, isAsync);
+	  } else if (!isPattern && !containsEsc &&
+	             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
+	             (prop.key.name === "get" || prop.key.name === "set") &&
+	             (this.type !== types.comma && this.type !== types.braceR)) {
+	    if (isGenerator || isAsync) { this.unexpected(); }
+	    prop.kind = prop.key.name;
+	    this.parsePropertyName(prop);
+	    prop.value = this.parseMethod(false);
+	    var paramCount = prop.kind === "get" ? 0 : 1;
+	    if (prop.value.params.length !== paramCount) {
+	      var start = prop.value.start;
+	      if (prop.kind === "get")
+	        { this.raiseRecoverable(start, "getter should have no params"); }
+	      else
+	        { this.raiseRecoverable(start, "setter should have exactly one param"); }
+	    } else {
+	      if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
+	        { this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params"); }
+	    }
+	  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
+	    if (isGenerator || isAsync) { this.unexpected(); }
+	    this.checkUnreserved(prop.key);
+	    if (prop.key.name === "await" && !this.awaitIdentPos)
+	      { this.awaitIdentPos = startPos; }
+	    prop.kind = "init";
+	    if (isPattern) {
+	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
+	    } else if (this.type === types.eq && refDestructuringErrors) {
+	      if (refDestructuringErrors.shorthandAssign < 0)
+	        { refDestructuringErrors.shorthandAssign = this.start; }
+	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
+	    } else {
+	      prop.value = prop.key;
+	    }
+	    prop.shorthand = true;
+	  } else { this.unexpected(); }
+	};
+
+	pp$3.parsePropertyName = function(prop) {
+	  if (this.options.ecmaVersion >= 6) {
+	    if (this.eat(types.bracketL)) {
+	      prop.computed = true;
+	      prop.key = this.parseMaybeAssign();
+	      this.expect(types.bracketR);
+	      return prop.key
+	    } else {
+	      prop.computed = false;
+	    }
+	  }
+	  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)
+	};
+
+	// Initialize empty function node.
+
+	pp$3.initFunction = function(node) {
+	  node.id = null;
+	  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }
+	  if (this.options.ecmaVersion >= 8) { node.async = false; }
+	};
+
+	// Parse object or class method.
+
+	pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
+	  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
+
+	  this.initFunction(node);
+	  if (this.options.ecmaVersion >= 6)
+	    { node.generator = isGenerator; }
+	  if (this.options.ecmaVersion >= 8)
+	    { node.async = !!isAsync; }
+
+	  this.yieldPos = 0;
+	  this.awaitPos = 0;
+	  this.awaitIdentPos = 0;
+	  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
+
+	  this.expect(types.parenL);
+	  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
+	  this.checkYieldAwaitInDefaultParams();
+	  this.parseFunctionBody(node, false, true);
+
+	  this.yieldPos = oldYieldPos;
+	  this.awaitPos = oldAwaitPos;
+	  this.awaitIdentPos = oldAwaitIdentPos;
+	  return this.finishNode(node, "FunctionExpression")
+	};
+
+	// Parse arrow function expression with given parameters.
+
+	pp$3.parseArrowExpression = function(node, params, isAsync) {
+	  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
+
+	  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
+	  this.initFunction(node);
+	  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }
+
+	  this.yieldPos = 0;
+	  this.awaitPos = 0;
+	  this.awaitIdentPos = 0;
+
+	  node.params = this.toAssignableList(params, true);
+	  this.parseFunctionBody(node, true, false);
+
+	  this.yieldPos = oldYieldPos;
+	  this.awaitPos = oldAwaitPos;
+	  this.awaitIdentPos = oldAwaitIdentPos;
+	  return this.finishNode(node, "ArrowFunctionExpression")
+	};
+
+	// Parse function body and check parameters.
+
+	pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {
+	  var isExpression = isArrowFunction && this.type !== types.braceL;
+	  var oldStrict = this.strict, useStrict = false;
+
+	  if (isExpression) {
+	    node.body = this.parseMaybeAssign();
+	    node.expression = true;
+	    this.checkParams(node, false);
+	  } else {
+	    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
+	    if (!oldStrict || nonSimple) {
+	      useStrict = this.strictDirective(this.end);
+	      // If this is a strict mode function, verify that argument names
+	      // are not repeated, and it does not try to bind the words `eval`
+	      // or `arguments`.
+	      if (useStrict && nonSimple)
+	        { this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list"); }
+	    }
+	    // Start a new scope with regard to labels and the `inFunction`
+	    // flag (restore them to their old value afterwards).
+	    var oldLabels = this.labels;
+	    this.labels = [];
+	    if (useStrict) { this.strict = true; }
+
+	    // Add the params to varDeclaredNames to ensure that an error is thrown
+	    // if a let/const declaration in the function clashes with one of the params.
+	    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
+	    node.body = this.parseBlock(false);
+	    node.expression = false;
+	    this.adaptDirectivePrologue(node.body.body);
+	    this.labels = oldLabels;
+	  }
+	  this.exitScope();
+
+	  // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
+	  if (this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }
+	  this.strict = oldStrict;
+	};
+
+	pp$3.isSimpleParamList = function(params) {
+	  for (var i = 0, list = params; i < list.length; i += 1)
+	    {
+	    var param = list[i];
+
+	    if (param.type !== "Identifier") { return false
+	  } }
+	  return true
+	};
+
+	// Checks function params for various disallowed patterns such as using "eval"
+	// or "arguments" and duplicate parameters.
+
+	pp$3.checkParams = function(node, allowDuplicates) {
+	  var this$1 = this;
+
+	  var nameHash = {};
+	  for (var i = 0, list = node.params; i < list.length; i += 1)
+	    {
+	    var param = list[i];
+
+	    this$1.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
+	  }
+	};
+
+	// Parses a comma-separated list of expressions, and returns them as
+	// an array. `close` is the token type that ends the list, and
+	// `allowEmpty` can be turned on to allow subsequent commas with
+	// nothing in between them to be parsed as `null` (which is needed
+	// for array literals).
+
+	pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
+	  var this$1 = this;
+
+	  var elts = [], first = true;
+	  while (!this.eat(close)) {
+	    if (!first) {
+	      this$1.expect(types.comma);
+	      if (allowTrailingComma && this$1.afterTrailingComma(close)) { break }
+	    } else { first = false; }
+
+	    var elt = (void 0);
+	    if (allowEmpty && this$1.type === types.comma)
+	      { elt = null; }
+	    else if (this$1.type === types.ellipsis) {
+	      elt = this$1.parseSpread(refDestructuringErrors);
+	      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0)
+	        { refDestructuringErrors.trailingComma = this$1.start; }
+	    } else {
+	      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);
+	    }
+	    elts.push(elt);
+	  }
+	  return elts
+	};
+
+	pp$3.checkUnreserved = function(ref) {
+	  var start = ref.start;
+	  var end = ref.end;
+	  var name = ref.name;
+
+	  if (this.inGenerator && name === "yield")
+	    { this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"); }
+	  if (this.inAsync && name === "await")
+	    { this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"); }
+	  if (this.keywords.test(name))
+	    { this.raise(start, ("Unexpected keyword '" + name + "'")); }
+	  if (this.options.ecmaVersion < 6 &&
+	    this.input.slice(start, end).indexOf("\\") !== -1) { return }
+	  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
+	  if (re.test(name)) {
+	    if (!this.inAsync && name === "await")
+	      { this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"); }
+	    this.raiseRecoverable(start, ("The keyword '" + name + "' is reserved"));
+	  }
+	};
+
+	// Parse the next token as an identifier. If `liberal` is true (used
+	// when parsing properties), it will also convert keywords into
+	// identifiers.
+
+	pp$3.parseIdent = function(liberal, isBinding) {
+	  var node = this.startNode();
+	  if (liberal && this.options.allowReserved === "never") { liberal = false; }
+	  if (this.type === types.name) {
+	    node.name = this.value;
+	  } else if (this.type.keyword) {
+	    node.name = this.type.keyword;
+
+	    // To fix https://github.com/acornjs/acorn/issues/575
+	    // `class` and `function` keywords push new context into this.context.
+	    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
+	    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
+	    if ((node.name === "class" || node.name === "function") &&
+	        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
+	      this.context.pop();
+	    }
+	  } else {
+	    this.unexpected();
+	  }
+	  this.next();
+	  this.finishNode(node, "Identifier");
+	  if (!liberal) {
+	    this.checkUnreserved(node);
+	    if (node.name === "await" && !this.awaitIdentPos)
+	      { this.awaitIdentPos = node.start; }
+	  }
+	  return node
+	};
+
+	// Parses yield expression inside generator.
+
+	pp$3.parseYield = function(noIn) {
+	  if (!this.yieldPos) { this.yieldPos = this.start; }
+
+	  var node = this.startNode();
+	  this.next();
+	  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {
+	    node.delegate = false;
+	    node.argument = null;
+	  } else {
+	    node.delegate = this.eat(types.star);
+	    node.argument = this.parseMaybeAssign(noIn);
+	  }
+	  return this.finishNode(node, "YieldExpression")
+	};
+
+	pp$3.parseAwait = function() {
+	  if (!this.awaitPos) { this.awaitPos = this.start; }
+
+	  var node = this.startNode();
+	  this.next();
+	  node.argument = this.parseMaybeUnary(null, true);
+	  return this.finishNode(node, "AwaitExpression")
+	};
+
+	var pp$4 = Parser.prototype;
+
+	// This function is used to raise exceptions on parse errors. It
+	// takes an offset integer (into the current `input`) to indicate
+	// the location of the error, attaches the position to the end
+	// of the error message, and then raises a `SyntaxError` with that
+	// message.
+
+	pp$4.raise = function(pos, message) {
+	  var loc = getLineInfo(this.input, pos);
+	  message += " (" + loc.line + ":" + loc.column + ")";
+	  var err = new SyntaxError(message);
+	  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;
+	  throw err
+	};
+
+	pp$4.raiseRecoverable = pp$4.raise;
+
+	pp$4.curPosition = function() {
+	  if (this.options.locations) {
+	    return new Position(this.curLine, this.pos - this.lineStart)
+	  }
+	};
+
+	var pp$5 = Parser.prototype;
+
+	var Scope = function Scope(flags) {
+	  this.flags = flags;
+	  // A list of var-declared names in the current lexical scope
+	  this.var = [];
+	  // A list of lexically-declared names in the current lexical scope
+	  this.lexical = [];
+	  // A list of lexically-declared FunctionDeclaration names in the current lexical scope
+	  this.functions = [];
+	};
+
+	// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.
+
+	pp$5.enterScope = function(flags) {
+	  this.scopeStack.push(new Scope(flags));
+	};
+
+	pp$5.exitScope = function() {
+	  this.scopeStack.pop();
+	};
+
+	// The spec says:
+	// > At the top level of a function, or script, function declarations are
+	// > treated like var declarations rather than like lexical declarations.
+	pp$5.treatFunctionsAsVarInScope = function(scope) {
+	  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)
+	};
+
+	pp$5.declareName = function(name, bindingType, pos) {
+	  var this$1 = this;
+
+	  var redeclared = false;
+	  if (bindingType === BIND_LEXICAL) {
+	    var scope = this.currentScope();
+	    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
+	    scope.lexical.push(name);
+	    if (this.inModule && (scope.flags & SCOPE_TOP))
+	      { delete this.undefinedExports[name]; }
+	  } else if (bindingType === BIND_SIMPLE_CATCH) {
+	    var scope$1 = this.currentScope();
+	    scope$1.lexical.push(name);
+	  } else if (bindingType === BIND_FUNCTION) {
+	    var scope$2 = this.currentScope();
+	    if (this.treatFunctionsAsVar)
+	      { redeclared = scope$2.lexical.indexOf(name) > -1; }
+	    else
+	      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }
+	    scope$2.functions.push(name);
+	  } else {
+	    for (var i = this.scopeStack.length - 1; i >= 0; --i) {
+	      var scope$3 = this$1.scopeStack[i];
+	      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||
+	          !this$1.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
+	        redeclared = true;
+	        break
+	      }
+	      scope$3.var.push(name);
+	      if (this$1.inModule && (scope$3.flags & SCOPE_TOP))
+	        { delete this$1.undefinedExports[name]; }
+	      if (scope$3.flags & SCOPE_VAR) { break }
+	    }
+	  }
+	  if (redeclared) { this.raiseRecoverable(pos, ("Identifier '" + name + "' has already been declared")); }
+	};
+
+	pp$5.checkLocalExport = function(id) {
+	  // scope.functions must be empty as Module code is always strict.
+	  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&
+	      this.scopeStack[0].var.indexOf(id.name) === -1) {
+	    this.undefinedExports[id.name] = id;
+	  }
+	};
+
+	pp$5.currentScope = function() {
+	  return this.scopeStack[this.scopeStack.length - 1]
+	};
+
+	pp$5.currentVarScope = function() {
+	  var this$1 = this;
+
+	  for (var i = this.scopeStack.length - 1;; i--) {
+	    var scope = this$1.scopeStack[i];
+	    if (scope.flags & SCOPE_VAR) { return scope }
+	  }
+	};
+
+	// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.
+	pp$5.currentThisScope = function() {
+	  var this$1 = this;
+
+	  for (var i = this.scopeStack.length - 1;; i--) {
+	    var scope = this$1.scopeStack[i];
+	    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }
+	  }
+	};
+
+	var Node = function Node(parser, pos, loc) {
+	  this.type = "";
+	  this.start = pos;
+	  this.end = 0;
+	  if (parser.options.locations)
+	    { this.loc = new SourceLocation(parser, loc); }
+	  if (parser.options.directSourceFile)
+	    { this.sourceFile = parser.options.directSourceFile; }
+	  if (parser.options.ranges)
+	    { this.range = [pos, 0]; }
+	};
+
+	// Start an AST node, attaching a start offset.
+
+	var pp$6 = Parser.prototype;
+
+	pp$6.startNode = function() {
+	  return new Node(this, this.start, this.startLoc)
+	};
+
+	pp$6.startNodeAt = function(pos, loc) {
+	  return new Node(this, pos, loc)
+	};
+
+	// Finish an AST node, adding `type` and `end` properties.
+
+	function finishNodeAt(node, type, pos, loc) {
+	  node.type = type;
+	  node.end = pos;
+	  if (this.options.locations)
+	    { node.loc.end = loc; }
+	  if (this.options.ranges)
+	    { node.range[1] = pos; }
+	  return node
+	}
+
+	pp$6.finishNode = function(node, type) {
+	  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
+	};
+
+	// Finish node at given position
+
+	pp$6.finishNodeAt = function(node, type, pos, loc) {
+	  return finishNodeAt.call(this, node, type, pos, loc)
+	};
+
+	// The algorithm used to determine whether a regexp can appear at a
+	// given point in the program is loosely based on sweet.js' approach.
+	// See https://github.com/mozilla/sweet.js/wiki/design
+
+	var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
+	  this.token = token;
+	  this.isExpr = !!isExpr;
+	  this.preserveSpace = !!preserveSpace;
+	  this.override = override;
+	  this.generator = !!generator;
+	};
+
+	var types$1 = {
+	  b_stat: new TokContext("{", false),
+	  b_expr: new TokContext("{", true),
+	  b_tmpl: new TokContext("${", false),
+	  p_stat: new TokContext("(", false),
+	  p_expr: new TokContext("(", true),
+	  q_tmpl: new TokContext("`", true, true, function (p) { return p.tryReadTemplateToken(); }),
+	  f_stat: new TokContext("function", false),
+	  f_expr: new TokContext("function", true),
+	  f_expr_gen: new TokContext("function", true, false, null, true),
+	  f_gen: new TokContext("function", false, false, null, true)
+	};
+
+	var pp$7 = Parser.prototype;
+
+	pp$7.initialContext = function() {
+	  return [types$1.b_stat]
+	};
+
+	pp$7.braceIsBlock = function(prevType) {
+	  var parent = this.curContext();
+	  if (parent === types$1.f_expr || parent === types$1.f_stat)
+	    { return true }
+	  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))
+	    { return !parent.isExpr }
+
+	  // The check for `tt.name && exprAllowed` detects whether we are
+	  // after a `yield` or `of` construct. See the `updateContext` for
+	  // `tt.name`.
+	  if (prevType === types._return || prevType === types.name && this.exprAllowed)
+	    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }
+	  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)
+	    { return true }
+	  if (prevType === types.braceL)
+	    { return parent === types$1.b_stat }
+	  if (prevType === types._var || prevType === types._const || prevType === types.name)
+	    { return false }
+	  return !this.exprAllowed
+	};
+
+	pp$7.inGeneratorContext = function() {
+	  var this$1 = this;
+
+	  for (var i = this.context.length - 1; i >= 1; i--) {
+	    var context = this$1.context[i];
+	    if (context.token === "function")
+	      { return context.generator }
+	  }
+	  return false
+	};
+
+	pp$7.updateContext = function(prevType) {
+	  var update, type = this.type;
+	  if (type.keyword && prevType === types.dot)
+	    { this.exprAllowed = false; }
+	  else if (update = type.updateContext)
+	    { update.call(this, prevType); }
+	  else
+	    { this.exprAllowed = type.beforeExpr; }
+	};
+
+	// Token-specific context update code
+
+	types.parenR.updateContext = types.braceR.updateContext = function() {
+	  if (this.context.length === 1) {
+	    this.exprAllowed = true;
+	    return
+	  }
+	  var out = this.context.pop();
+	  if (out === types$1.b_stat && this.curContext().token === "function") {
+	    out = this.context.pop();
+	  }
+	  this.exprAllowed = !out.isExpr;
+	};
+
+	types.braceL.updateContext = function(prevType) {
+	  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
+	  this.exprAllowed = true;
+	};
+
+	types.dollarBraceL.updateContext = function() {
+	  this.context.push(types$1.b_tmpl);
+	  this.exprAllowed = true;
+	};
+
+	types.parenL.updateContext = function(prevType) {
+	  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
+	  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
+	  this.exprAllowed = true;
+	};
+
+	types.incDec.updateContext = function() {
+	  // tokExprAllowed stays unchanged
+	};
+
+	types._function.updateContext = types._class.updateContext = function(prevType) {
+	  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&
+	      !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&
+	      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))
+	    { this.context.push(types$1.f_expr); }
+	  else
+	    { this.context.push(types$1.f_stat); }
+	  this.exprAllowed = false;
+	};
+
+	types.backQuote.updateContext = function() {
+	  if (this.curContext() === types$1.q_tmpl)
+	    { this.context.pop(); }
+	  else
+	    { this.context.push(types$1.q_tmpl); }
+	  this.exprAllowed = false;
+	};
+
+	types.star.updateContext = function(prevType) {
+	  if (prevType === types._function) {
+	    var index = this.context.length - 1;
+	    if (this.context[index] === types$1.f_expr)
+	      { this.context[index] = types$1.f_expr_gen; }
+	    else
+	      { this.context[index] = types$1.f_gen; }
+	  }
+	  this.exprAllowed = true;
+	};
+
+	types.name.updateContext = function(prevType) {
+	  var allowed = false;
+	  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
+	    if (this.value === "of" && !this.exprAllowed ||
+	        this.value === "yield" && this.inGeneratorContext())
+	      { allowed = true; }
+	  }
+	  this.exprAllowed = allowed;
+	};
+
+	// This file contains Unicode properties extracted from the ECMAScript
+	// specification. The lists are extracted like so:
+	// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)
+
+	// #table-binary-unicode-properties
+	var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
+	var unicodeBinaryProperties = {
+	  9: ecma9BinaryProperties,
+	  10: ecma9BinaryProperties + " Extended_Pictographic"
+	};
+
+	// #table-unicode-general-category-values
+	var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
+
+	// #table-unicode-script-values
+	var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
+	var unicodeScriptValues = {
+	  9: ecma9ScriptValues,
+	  10: ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd"
+	};
+
+	var data = {};
+	function buildUnicodeData(ecmaVersion) {
+	  var d = data[ecmaVersion] = {
+	    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
+	    nonBinary: {
+	      General_Category: wordsRegexp(unicodeGeneralCategoryValues),
+	      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
+	    }
+	  };
+	  d.nonBinary.Script_Extensions = d.nonBinary.Script;
+
+	  d.nonBinary.gc = d.nonBinary.General_Category;
+	  d.nonBinary.sc = d.nonBinary.Script;
+	  d.nonBinary.scx = d.nonBinary.Script_Extensions;
+	}
+	buildUnicodeData(9);
+	buildUnicodeData(10);
+
+	var pp$9 = Parser.prototype;
+
+	var RegExpValidationState = function RegExpValidationState(parser) {
+	  this.parser = parser;
+	  this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
+	  this.unicodeProperties = data[parser.options.ecmaVersion >= 10 ? 10 : parser.options.ecmaVersion];
+	  this.source = "";
+	  this.flags = "";
+	  this.start = 0;
+	  this.switchU = false;
+	  this.switchN = false;
+	  this.pos = 0;
+	  this.lastIntValue = 0;
+	  this.lastStringValue = "";
+	  this.lastAssertionIsQuantifiable = false;
+	  this.numCapturingParens = 0;
+	  this.maxBackReference = 0;
+	  this.groupNames = [];
+	  this.backReferenceNames = [];
+	};
+
+	RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {
+	  var unicode = flags.indexOf("u") !== -1;
+	  this.start = start | 0;
+	  this.source = pattern + "";
+	  this.flags = flags;
+	  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
+	  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
+	};
+
+	RegExpValidationState.prototype.raise = function raise (message) {
+	  this.parser.raiseRecoverable(this.start, ("Invalid regular expression: /" + (this.source) + "/: " + message));
+	};
+
+	// If u flag is given, this returns the code point at the index (it combines a surrogate pair).
+	// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
+	RegExpValidationState.prototype.at = function at (i) {
+	  var s = this.source;
+	  var l = s.length;
+	  if (i >= l) {
+	    return -1
+	  }
+	  var c = s.charCodeAt(i);
+	  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
+	    return c
+	  }
+	  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00
+	};
+
+	RegExpValidationState.prototype.nextIndex = function nextIndex (i) {
+	  var s = this.source;
+	  var l = s.length;
+	  if (i >= l) {
+	    return l
+	  }
+	  var c = s.charCodeAt(i);
+	  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
+	    return i + 1
+	  }
+	  return i + 2
+	};
+
+	RegExpValidationState.prototype.current = function current () {
+	  return this.at(this.pos)
+	};
+
+	RegExpValidationState.prototype.lookahead = function lookahead () {
+	  return this.at(this.nextIndex(this.pos))
+	};
+
+	RegExpValidationState.prototype.advance = function advance () {
+	  this.pos = this.nextIndex(this.pos);
+	};
+
+	RegExpValidationState.prototype.eat = function eat (ch) {
+	  if (this.current() === ch) {
+	    this.advance();
+	    return true
+	  }
+	  return false
+	};
+
+	function codePointToString$1(ch) {
+	  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }
+	  ch -= 0x10000;
+	  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)
+	}
+
+	/**
+	 * Validate the flags part of a given RegExpLiteral.
+	 *
+	 * @param {RegExpValidationState} state The state to validate RegExp.
+	 * @returns {void}
+	 */
+	pp$9.validateRegExpFlags = function(state) {
+	  var this$1 = this;
+
+	  var validFlags = state.validFlags;
+	  var flags = state.flags;
+
+	  for (var i = 0; i < flags.length; i++) {
+	    var flag = flags.charAt(i);
+	    if (validFlags.indexOf(flag) === -1) {
+	      this$1.raise(state.start, "Invalid regular expression flag");
+	    }
+	    if (flags.indexOf(flag, i + 1) > -1) {
+	      this$1.raise(state.start, "Duplicate regular expression flag");
+	    }
+	  }
+	};
+
+	/**
+	 * Validate the pattern part of a given RegExpLiteral.
+	 *
+	 * @param {RegExpValidationState} state The state to validate RegExp.
+	 * @returns {void}
+	 */
+	pp$9.validateRegExpPattern = function(state) {
+	  this.regexp_pattern(state);
+
+	  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
+	  // parsing contains a |GroupName|, reparse with the goal symbol
+	  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
+	  // exception if _P_ did not conform to the grammar, if any elements of _P_
+	  // were not matched by the parse, or if any Early Error conditions exist.
+	  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
+	    state.switchN = true;
+	    this.regexp_pattern(state);
+	  }
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern
+	pp$9.regexp_pattern = function(state) {
+	  state.pos = 0;
+	  state.lastIntValue = 0;
+	  state.lastStringValue = "";
+	  state.lastAssertionIsQuantifiable = false;
+	  state.numCapturingParens = 0;
+	  state.maxBackReference = 0;
+	  state.groupNames.length = 0;
+	  state.backReferenceNames.length = 0;
+
+	  this.regexp_disjunction(state);
+
+	  if (state.pos !== state.source.length) {
+	    // Make the same messages as V8.
+	    if (state.eat(0x29 /* ) */)) {
+	      state.raise("Unmatched ')'");
+	    }
+	    if (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {
+	      state.raise("Lone quantifier brackets");
+	    }
+	  }
+	  if (state.maxBackReference > state.numCapturingParens) {
+	    state.raise("Invalid escape");
+	  }
+	  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
+	    var name = list[i];
+
+	    if (state.groupNames.indexOf(name) === -1) {
+	      state.raise("Invalid named capture referenced");
+	    }
+	  }
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction
+	pp$9.regexp_disjunction = function(state) {
+	  var this$1 = this;
+
+	  this.regexp_alternative(state);
+	  while (state.eat(0x7C /* | */)) {
+	    this$1.regexp_alternative(state);
+	  }
+
+	  // Make the same message as V8.
+	  if (this.regexp_eatQuantifier(state, true)) {
+	    state.raise("Nothing to repeat");
+	  }
+	  if (state.eat(0x7B /* { */)) {
+	    state.raise("Lone quantifier brackets");
+	  }
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative
+	pp$9.regexp_alternative = function(state) {
+	  while (state.pos < state.source.length && this.regexp_eatTerm(state))
+	    {  }
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term
+	pp$9.regexp_eatTerm = function(state) {
+	  if (this.regexp_eatAssertion(state)) {
+	    // Handle `QuantifiableAssertion Quantifier` alternative.
+	    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
+	    // is a QuantifiableAssertion.
+	    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
+	      // Make the same message as V8.
+	      if (state.switchU) {
+	        state.raise("Invalid quantifier");
+	      }
+	    }
+	    return true
+	  }
+
+	  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
+	    this.regexp_eatQuantifier(state);
+	    return true
+	  }
+
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion
+	pp$9.regexp_eatAssertion = function(state) {
+	  var start = state.pos;
+	  state.lastAssertionIsQuantifiable = false;
+
+	  // ^, $
+	  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {
+	    return true
+	  }
+
+	  // \b \B
+	  if (state.eat(0x5C /* \ */)) {
+	    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {
+	      return true
+	    }
+	    state.pos = start;
+	  }
+
+	  // Lookahead / Lookbehind
+	  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {
+	    var lookbehind = false;
+	    if (this.options.ecmaVersion >= 9) {
+	      lookbehind = state.eat(0x3C /* < */);
+	    }
+	    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {
+	      this.regexp_disjunction(state);
+	      if (!state.eat(0x29 /* ) */)) {
+	        state.raise("Unterminated group");
+	      }
+	      state.lastAssertionIsQuantifiable = !lookbehind;
+	      return true
+	    }
+	  }
+
+	  state.pos = start;
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier
+	pp$9.regexp_eatQuantifier = function(state, noError) {
+	  if ( noError === void 0 ) noError = false;
+
+	  if (this.regexp_eatQuantifierPrefix(state, noError)) {
+	    state.eat(0x3F /* ? */);
+	    return true
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix
+	pp$9.regexp_eatQuantifierPrefix = function(state, noError) {
+	  return (
+	    state.eat(0x2A /* * */) ||
+	    state.eat(0x2B /* + */) ||
+	    state.eat(0x3F /* ? */) ||
+	    this.regexp_eatBracedQuantifier(state, noError)
+	  )
+	};
+	pp$9.regexp_eatBracedQuantifier = function(state, noError) {
+	  var start = state.pos;
+	  if (state.eat(0x7B /* { */)) {
+	    var min = 0, max = -1;
+	    if (this.regexp_eatDecimalDigits(state)) {
+	      min = state.lastIntValue;
+	      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {
+	        max = state.lastIntValue;
+	      }
+	      if (state.eat(0x7D /* } */)) {
+	        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
+	        if (max !== -1 && max < min && !noError) {
+	          state.raise("numbers out of order in {} quantifier");
+	        }
+	        return true
+	      }
+	    }
+	    if (state.switchU && !noError) {
+	      state.raise("Incomplete quantifier");
+	    }
+	    state.pos = start;
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom
+	pp$9.regexp_eatAtom = function(state) {
+	  return (
+	    this.regexp_eatPatternCharacters(state) ||
+	    state.eat(0x2E /* . */) ||
+	    this.regexp_eatReverseSolidusAtomEscape(state) ||
+	    this.regexp_eatCharacterClass(state) ||
+	    this.regexp_eatUncapturingGroup(state) ||
+	    this.regexp_eatCapturingGroup(state)
+	  )
+	};
+	pp$9.regexp_eatReverseSolidusAtomEscape = function(state) {
+	  var start = state.pos;
+	  if (state.eat(0x5C /* \ */)) {
+	    if (this.regexp_eatAtomEscape(state)) {
+	      return true
+	    }
+	    state.pos = start;
+	  }
+	  return false
+	};
+	pp$9.regexp_eatUncapturingGroup = function(state) {
+	  var start = state.pos;
+	  if (state.eat(0x28 /* ( */)) {
+	    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {
+	      this.regexp_disjunction(state);
+	      if (state.eat(0x29 /* ) */)) {
+	        return true
+	      }
+	      state.raise("Unterminated group");
+	    }
+	    state.pos = start;
+	  }
+	  return false
+	};
+	pp$9.regexp_eatCapturingGroup = function(state) {
+	  if (state.eat(0x28 /* ( */)) {
+	    if (this.options.ecmaVersion >= 9) {
+	      this.regexp_groupSpecifier(state);
+	    } else if (state.current() === 0x3F /* ? */) {
+	      state.raise("Invalid group");
+	    }
+	    this.regexp_disjunction(state);
+	    if (state.eat(0x29 /* ) */)) {
+	      state.numCapturingParens += 1;
+	      return true
+	    }
+	    state.raise("Unterminated group");
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom
+	pp$9.regexp_eatExtendedAtom = function(state) {
+	  return (
+	    state.eat(0x2E /* . */) ||
+	    this.regexp_eatReverseSolidusAtomEscape(state) ||
+	    this.regexp_eatCharacterClass(state) ||
+	    this.regexp_eatUncapturingGroup(state) ||
+	    this.regexp_eatCapturingGroup(state) ||
+	    this.regexp_eatInvalidBracedQuantifier(state) ||
+	    this.regexp_eatExtendedPatternCharacter(state)
+	  )
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier
+	pp$9.regexp_eatInvalidBracedQuantifier = function(state) {
+	  if (this.regexp_eatBracedQuantifier(state, true)) {
+	    state.raise("Nothing to repeat");
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter
+	pp$9.regexp_eatSyntaxCharacter = function(state) {
+	  var ch = state.current();
+	  if (isSyntaxCharacter(ch)) {
+	    state.lastIntValue = ch;
+	    state.advance();
+	    return true
+	  }
+	  return false
+	};
+	function isSyntaxCharacter(ch) {
+	  return (
+	    ch === 0x24 /* $ */ ||
+	    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||
+	    ch === 0x2E /* . */ ||
+	    ch === 0x3F /* ? */ ||
+	    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||
+	    ch >= 0x7B /* { */ && ch <= 0x7D /* } */
+	  )
+	}
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
+	// But eat eager.
+	pp$9.regexp_eatPatternCharacters = function(state) {
+	  var start = state.pos;
+	  var ch = 0;
+	  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
+	    state.advance();
+	  }
+	  return state.pos !== start
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter
+	pp$9.regexp_eatExtendedPatternCharacter = function(state) {
+	  var ch = state.current();
+	  if (
+	    ch !== -1 &&
+	    ch !== 0x24 /* $ */ &&
+	    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&
+	    ch !== 0x2E /* . */ &&
+	    ch !== 0x3F /* ? */ &&
+	    ch !== 0x5B /* [ */ &&
+	    ch !== 0x5E /* ^ */ &&
+	    ch !== 0x7C /* | */
+	  ) {
+	    state.advance();
+	    return true
+	  }
+	  return false
+	};
+
+	// GroupSpecifier[U] ::
+	//   [empty]
+	//   `?` GroupName[?U]
+	pp$9.regexp_groupSpecifier = function(state) {
+	  if (state.eat(0x3F /* ? */)) {
+	    if (this.regexp_eatGroupName(state)) {
+	      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
+	        state.raise("Duplicate capture group name");
+	      }
+	      state.groupNames.push(state.lastStringValue);
+	      return
+	    }
+	    state.raise("Invalid group");
+	  }
+	};
+
+	// GroupName[U] ::
+	//   `<` RegExpIdentifierName[?U] `>`
+	// Note: this updates `state.lastStringValue` property with the eaten name.
+	pp$9.regexp_eatGroupName = function(state) {
+	  state.lastStringValue = "";
+	  if (state.eat(0x3C /* < */)) {
+	    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {
+	      return true
+	    }
+	    state.raise("Invalid capture group name");
+	  }
+	  return false
+	};
+
+	// RegExpIdentifierName[U] ::
+	//   RegExpIdentifierStart[?U]
+	//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]
+	// Note: this updates `state.lastStringValue` property with the eaten name.
+	pp$9.regexp_eatRegExpIdentifierName = function(state) {
+	  state.lastStringValue = "";
+	  if (this.regexp_eatRegExpIdentifierStart(state)) {
+	    state.lastStringValue += codePointToString$1(state.lastIntValue);
+	    while (this.regexp_eatRegExpIdentifierPart(state)) {
+	      state.lastStringValue += codePointToString$1(state.lastIntValue);
+	    }
+	    return true
+	  }
+	  return false
+	};
+
+	// RegExpIdentifierStart[U] ::
+	//   UnicodeIDStart
+	//   `$`
+	//   `_`
+	//   `\` RegExpUnicodeEscapeSequence[?U]
+	pp$9.regexp_eatRegExpIdentifierStart = function(state) {
+	  var start = state.pos;
+	  var ch = state.current();
+	  state.advance();
+
+	  if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
+	    ch = state.lastIntValue;
+	  }
+	  if (isRegExpIdentifierStart(ch)) {
+	    state.lastIntValue = ch;
+	    return true
+	  }
+
+	  state.pos = start;
+	  return false
+	};
+	function isRegExpIdentifierStart(ch) {
+	  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */
+	}
+
+	// RegExpIdentifierPart[U] ::
+	//   UnicodeIDContinue
+	//   `$`
+	//   `_`
+	//   `\` RegExpUnicodeEscapeSequence[?U]
+	//   <ZWNJ>
+	//   <ZWJ>
+	pp$9.regexp_eatRegExpIdentifierPart = function(state) {
+	  var start = state.pos;
+	  var ch = state.current();
+	  state.advance();
+
+	  if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
+	    ch = state.lastIntValue;
+	  }
+	  if (isRegExpIdentifierPart(ch)) {
+	    state.lastIntValue = ch;
+	    return true
+	  }
+
+	  state.pos = start;
+	  return false
+	};
+	function isRegExpIdentifierPart(ch) {
+	  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */
+	}
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape
+	pp$9.regexp_eatAtomEscape = function(state) {
+	  if (
+	    this.regexp_eatBackReference(state) ||
+	    this.regexp_eatCharacterClassEscape(state) ||
+	    this.regexp_eatCharacterEscape(state) ||
+	    (state.switchN && this.regexp_eatKGroupName(state))
+	  ) {
+	    return true
+	  }
+	  if (state.switchU) {
+	    // Make the same message as V8.
+	    if (state.current() === 0x63 /* c */) {
+	      state.raise("Invalid unicode escape");
+	    }
+	    state.raise("Invalid escape");
+	  }
+	  return false
+	};
+	pp$9.regexp_eatBackReference = function(state) {
+	  var start = state.pos;
+	  if (this.regexp_eatDecimalEscape(state)) {
+	    var n = state.lastIntValue;
+	    if (state.switchU) {
+	      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
+	      if (n > state.maxBackReference) {
+	        state.maxBackReference = n;
+	      }
+	      return true
+	    }
+	    if (n <= state.numCapturingParens) {
+	      return true
+	    }
+	    state.pos = start;
+	  }
+	  return false
+	};
+	pp$9.regexp_eatKGroupName = function(state) {
+	  if (state.eat(0x6B /* k */)) {
+	    if (this.regexp_eatGroupName(state)) {
+	      state.backReferenceNames.push(state.lastStringValue);
+	      return true
+	    }
+	    state.raise("Invalid named reference");
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape
+	pp$9.regexp_eatCharacterEscape = function(state) {
+	  return (
+	    this.regexp_eatControlEscape(state) ||
+	    this.regexp_eatCControlLetter(state) ||
+	    this.regexp_eatZero(state) ||
+	    this.regexp_eatHexEscapeSequence(state) ||
+	    this.regexp_eatRegExpUnicodeEscapeSequence(state) ||
+	    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||
+	    this.regexp_eatIdentityEscape(state)
+	  )
+	};
+	pp$9.regexp_eatCControlLetter = function(state) {
+	  var start = state.pos;
+	  if (state.eat(0x63 /* c */)) {
+	    if (this.regexp_eatControlLetter(state)) {
+	      return true
+	    }
+	    state.pos = start;
+	  }
+	  return false
+	};
+	pp$9.regexp_eatZero = function(state) {
+	  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {
+	    state.lastIntValue = 0;
+	    state.advance();
+	    return true
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape
+	pp$9.regexp_eatControlEscape = function(state) {
+	  var ch = state.current();
+	  if (ch === 0x74 /* t */) {
+	    state.lastIntValue = 0x09; /* \t */
+	    state.advance();
+	    return true
+	  }
+	  if (ch === 0x6E /* n */) {
+	    state.lastIntValue = 0x0A; /* \n */
+	    state.advance();
+	    return true
+	  }
+	  if (ch === 0x76 /* v */) {
+	    state.lastIntValue = 0x0B; /* \v */
+	    state.advance();
+	    return true
+	  }
+	  if (ch === 0x66 /* f */) {
+	    state.lastIntValue = 0x0C; /* \f */
+	    state.advance();
+	    return true
+	  }
+	  if (ch === 0x72 /* r */) {
+	    state.lastIntValue = 0x0D; /* \r */
+	    state.advance();
+	    return true
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter
+	pp$9.regexp_eatControlLetter = function(state) {
+	  var ch = state.current();
+	  if (isControlLetter(ch)) {
+	    state.lastIntValue = ch % 0x20;
+	    state.advance();
+	    return true
+	  }
+	  return false
+	};
+	function isControlLetter(ch) {
+	  return (
+	    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||
+	    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)
+	  )
+	}
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence
+	pp$9.regexp_eatRegExpUnicodeEscapeSequence = function(state) {
+	  var start = state.pos;
+
+	  if (state.eat(0x75 /* u */)) {
+	    if (this.regexp_eatFixedHexDigits(state, 4)) {
+	      var lead = state.lastIntValue;
+	      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {
+	        var leadSurrogateEnd = state.pos;
+	        if (state.eat(0x5C /* \ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {
+	          var trail = state.lastIntValue;
+	          if (trail >= 0xDC00 && trail <= 0xDFFF) {
+	            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
+	            return true
+	          }
+	        }
+	        state.pos = leadSurrogateEnd;
+	        state.lastIntValue = lead;
+	      }
+	      return true
+	    }
+	    if (
+	      state.switchU &&
+	      state.eat(0x7B /* { */) &&
+	      this.regexp_eatHexDigits(state) &&
+	      state.eat(0x7D /* } */) &&
+	      isValidUnicode(state.lastIntValue)
+	    ) {
+	      return true
+	    }
+	    if (state.switchU) {
+	      state.raise("Invalid unicode escape");
+	    }
+	    state.pos = start;
+	  }
+
+	  return false
+	};
+	function isValidUnicode(ch) {
+	  return ch >= 0 && ch <= 0x10FFFF
+	}
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape
+	pp$9.regexp_eatIdentityEscape = function(state) {
+	  if (state.switchU) {
+	    if (this.regexp_eatSyntaxCharacter(state)) {
+	      return true
+	    }
+	    if (state.eat(0x2F /* / */)) {
+	      state.lastIntValue = 0x2F; /* / */
+	      return true
+	    }
+	    return false
+	  }
+
+	  var ch = state.current();
+	  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {
+	    state.lastIntValue = ch;
+	    state.advance();
+	    return true
+	  }
+
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape
+	pp$9.regexp_eatDecimalEscape = function(state) {
+	  state.lastIntValue = 0;
+	  var ch = state.current();
+	  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {
+	    do {
+	      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
+	      state.advance();
+	    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)
+	    return true
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape
+	pp$9.regexp_eatCharacterClassEscape = function(state) {
+	  var ch = state.current();
+
+	  if (isCharacterClassEscape(ch)) {
+	    state.lastIntValue = -1;
+	    state.advance();
+	    return true
+	  }
+
+	  if (
+	    state.switchU &&
+	    this.options.ecmaVersion >= 9 &&
+	    (ch === 0x50 /* P */ || ch === 0x70 /* p */)
+	  ) {
+	    state.lastIntValue = -1;
+	    state.advance();
+	    if (
+	      state.eat(0x7B /* { */) &&
+	      this.regexp_eatUnicodePropertyValueExpression(state) &&
+	      state.eat(0x7D /* } */)
+	    ) {
+	      return true
+	    }
+	    state.raise("Invalid property name");
+	  }
+
+	  return false
+	};
+	function isCharacterClassEscape(ch) {
+	  return (
+	    ch === 0x64 /* d */ ||
+	    ch === 0x44 /* D */ ||
+	    ch === 0x73 /* s */ ||
+	    ch === 0x53 /* S */ ||
+	    ch === 0x77 /* w */ ||
+	    ch === 0x57 /* W */
+	  )
+	}
+
+	// UnicodePropertyValueExpression ::
+	//   UnicodePropertyName `=` UnicodePropertyValue
+	//   LoneUnicodePropertyNameOrValue
+	pp$9.regexp_eatUnicodePropertyValueExpression = function(state) {
+	  var start = state.pos;
+
+	  // UnicodePropertyName `=` UnicodePropertyValue
+	  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {
+	    var name = state.lastStringValue;
+	    if (this.regexp_eatUnicodePropertyValue(state)) {
+	      var value = state.lastStringValue;
+	      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
+	      return true
+	    }
+	  }
+	  state.pos = start;
+
+	  // LoneUnicodePropertyNameOrValue
+	  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
+	    var nameOrValue = state.lastStringValue;
+	    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
+	    return true
+	  }
+	  return false
+	};
+	pp$9.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
+	  if (!has(state.unicodeProperties.nonBinary, name))
+	    { state.raise("Invalid property name"); }
+	  if (!state.unicodeProperties.nonBinary[name].test(value))
+	    { state.raise("Invalid property value"); }
+	};
+	pp$9.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
+	  if (!state.unicodeProperties.binary.test(nameOrValue))
+	    { state.raise("Invalid property name"); }
+	};
+
+	// UnicodePropertyName ::
+	//   UnicodePropertyNameCharacters
+	pp$9.regexp_eatUnicodePropertyName = function(state) {
+	  var ch = 0;
+	  state.lastStringValue = "";
+	  while (isUnicodePropertyNameCharacter(ch = state.current())) {
+	    state.lastStringValue += codePointToString$1(ch);
+	    state.advance();
+	  }
+	  return state.lastStringValue !== ""
+	};
+	function isUnicodePropertyNameCharacter(ch) {
+	  return isControlLetter(ch) || ch === 0x5F /* _ */
+	}
+
+	// UnicodePropertyValue ::
+	//   UnicodePropertyValueCharacters
+	pp$9.regexp_eatUnicodePropertyValue = function(state) {
+	  var ch = 0;
+	  state.lastStringValue = "";
+	  while (isUnicodePropertyValueCharacter(ch = state.current())) {
+	    state.lastStringValue += codePointToString$1(ch);
+	    state.advance();
+	  }
+	  return state.lastStringValue !== ""
+	};
+	function isUnicodePropertyValueCharacter(ch) {
+	  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)
+	}
+
+	// LoneUnicodePropertyNameOrValue ::
+	//   UnicodePropertyValueCharacters
+	pp$9.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
+	  return this.regexp_eatUnicodePropertyValue(state)
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass
+	pp$9.regexp_eatCharacterClass = function(state) {
+	  if (state.eat(0x5B /* [ */)) {
+	    state.eat(0x5E /* ^ */);
+	    this.regexp_classRanges(state);
+	    if (state.eat(0x5D /* [ */)) {
+	      return true
+	    }
+	    // Unreachable since it threw "unterminated regular expression" error before.
+	    state.raise("Unterminated character class");
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash
+	pp$9.regexp_classRanges = function(state) {
+	  var this$1 = this;
+
+	  while (this.regexp_eatClassAtom(state)) {
+	    var left = state.lastIntValue;
+	    if (state.eat(0x2D /* - */) && this$1.regexp_eatClassAtom(state)) {
+	      var right = state.lastIntValue;
+	      if (state.switchU && (left === -1 || right === -1)) {
+	        state.raise("Invalid character class");
+	      }
+	      if (left !== -1 && right !== -1 && left > right) {
+	        state.raise("Range out of order in character class");
+	      }
+	    }
+	  }
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash
+	pp$9.regexp_eatClassAtom = function(state) {
+	  var start = state.pos;
+
+	  if (state.eat(0x5C /* \ */)) {
+	    if (this.regexp_eatClassEscape(state)) {
+	      return true
+	    }
+	    if (state.switchU) {
+	      // Make the same message as V8.
+	      var ch$1 = state.current();
+	      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {
+	        state.raise("Invalid class escape");
+	      }
+	      state.raise("Invalid escape");
+	    }
+	    state.pos = start;
+	  }
+
+	  var ch = state.current();
+	  if (ch !== 0x5D /* [ */) {
+	    state.lastIntValue = ch;
+	    state.advance();
+	    return true
+	  }
+
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape
+	pp$9.regexp_eatClassEscape = function(state) {
+	  var start = state.pos;
+
+	  if (state.eat(0x62 /* b */)) {
+	    state.lastIntValue = 0x08; /* <BS> */
+	    return true
+	  }
+
+	  if (state.switchU && state.eat(0x2D /* - */)) {
+	    state.lastIntValue = 0x2D; /* - */
+	    return true
+	  }
+
+	  if (!state.switchU && state.eat(0x63 /* c */)) {
+	    if (this.regexp_eatClassControlLetter(state)) {
+	      return true
+	    }
+	    state.pos = start;
+	  }
+
+	  return (
+	    this.regexp_eatCharacterClassEscape(state) ||
+	    this.regexp_eatCharacterEscape(state)
+	  )
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter
+	pp$9.regexp_eatClassControlLetter = function(state) {
+	  var ch = state.current();
+	  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {
+	    state.lastIntValue = ch % 0x20;
+	    state.advance();
+	    return true
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
+	pp$9.regexp_eatHexEscapeSequence = function(state) {
+	  var start = state.pos;
+	  if (state.eat(0x78 /* x */)) {
+	    if (this.regexp_eatFixedHexDigits(state, 2)) {
+	      return true
+	    }
+	    if (state.switchU) {
+	      state.raise("Invalid escape");
+	    }
+	    state.pos = start;
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits
+	pp$9.regexp_eatDecimalDigits = function(state) {
+	  var start = state.pos;
+	  var ch = 0;
+	  state.lastIntValue = 0;
+	  while (isDecimalDigit(ch = state.current())) {
+	    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
+	    state.advance();
+	  }
+	  return state.pos !== start
+	};
+	function isDecimalDigit(ch) {
+	  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */
+	}
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits
+	pp$9.regexp_eatHexDigits = function(state) {
+	  var start = state.pos;
+	  var ch = 0;
+	  state.lastIntValue = 0;
+	  while (isHexDigit(ch = state.current())) {
+	    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
+	    state.advance();
+	  }
+	  return state.pos !== start
+	};
+	function isHexDigit(ch) {
+	  return (
+	    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||
+	    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||
+	    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)
+	  )
+	}
+	function hexToInt(ch) {
+	  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {
+	    return 10 + (ch - 0x41 /* A */)
+	  }
+	  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {
+	    return 10 + (ch - 0x61 /* a */)
+	  }
+	  return ch - 0x30 /* 0 */
+	}
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
+	// Allows only 0-377(octal) i.e. 0-255(decimal).
+	pp$9.regexp_eatLegacyOctalEscapeSequence = function(state) {
+	  if (this.regexp_eatOctalDigit(state)) {
+	    var n1 = state.lastIntValue;
+	    if (this.regexp_eatOctalDigit(state)) {
+	      var n2 = state.lastIntValue;
+	      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
+	        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
+	      } else {
+	        state.lastIntValue = n1 * 8 + n2;
+	      }
+	    } else {
+	      state.lastIntValue = n1;
+	    }
+	    return true
+	  }
+	  return false
+	};
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit
+	pp$9.regexp_eatOctalDigit = function(state) {
+	  var ch = state.current();
+	  if (isOctalDigit(ch)) {
+	    state.lastIntValue = ch - 0x30; /* 0 */
+	    state.advance();
+	    return true
+	  }
+	  state.lastIntValue = 0;
+	  return false
+	};
+	function isOctalDigit(ch) {
+	  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */
+	}
+
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
+	// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
+	// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
+	pp$9.regexp_eatFixedHexDigits = function(state, length) {
+	  var start = state.pos;
+	  state.lastIntValue = 0;
+	  for (var i = 0; i < length; ++i) {
+	    var ch = state.current();
+	    if (!isHexDigit(ch)) {
+	      state.pos = start;
+	      return false
+	    }
+	    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
+	    state.advance();
+	  }
+	  return true
+	};
+
+	// Object type used to represent tokens. Note that normally, tokens
+	// simply exist as properties on the parser object. This is only
+	// used for the onToken callback and the external tokenizer.
+
+	var Token = function Token(p) {
+	  this.type = p.type;
+	  this.value = p.value;
+	  this.start = p.start;
+	  this.end = p.end;
+	  if (p.options.locations)
+	    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }
+	  if (p.options.ranges)
+	    { this.range = [p.start, p.end]; }
+	};
+
+	// ## Tokenizer
+
+	var pp$8 = Parser.prototype;
+
+	// Move to the next token
+
+	pp$8.next = function() {
+	  if (this.options.onToken)
+	    { this.options.onToken(new Token(this)); }
+
+	  this.lastTokEnd = this.end;
+	  this.lastTokStart = this.start;
+	  this.lastTokEndLoc = this.endLoc;
+	  this.lastTokStartLoc = this.startLoc;
+	  this.nextToken();
+	};
+
+	pp$8.getToken = function() {
+	  this.next();
+	  return new Token(this)
+	};
+
+	// If we're in an ES6 environment, make parsers iterable
+	if (typeof Symbol !== "undefined")
+	  { pp$8[Symbol.iterator] = function() {
+	    var this$1 = this;
+
+	    return {
+	      next: function () {
+	        var token = this$1.getToken();
+	        return {
+	          done: token.type === types.eof,
+	          value: token
+	        }
+	      }
+	    }
+	  }; }
+
+	// Toggle strict mode. Re-reads the next number or string to please
+	// pedantic tests (`"use strict"; 010;` should fail).
+
+	pp$8.curContext = function() {
+	  return this.context[this.context.length - 1]
+	};
+
+	// Read a single token, updating the parser object's token-related
+	// properties.
+
+	pp$8.nextToken = function() {
+	  var curContext = this.curContext();
+	  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }
+
+	  this.start = this.pos;
+	  if (this.options.locations) { this.startLoc = this.curPosition(); }
+	  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }
+
+	  if (curContext.override) { return curContext.override(this) }
+	  else { this.readToken(this.fullCharCodeAtPos()); }
+	};
+
+	pp$8.readToken = function(code) {
+	  // Identifier or keyword. '\uXXXX' sequences are allowed in
+	  // identifiers, so '\' also dispatches to that.
+	  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
+	    { return this.readWord() }
+
+	  return this.getTokenFromCode(code)
+	};
+
+	pp$8.fullCharCodeAtPos = function() {
+	  var code = this.input.charCodeAt(this.pos);
+	  if (code <= 0xd7ff || code >= 0xe000) { return code }
+	  var next = this.input.charCodeAt(this.pos + 1);
+	  return (code << 10) + next - 0x35fdc00
+	};
+
+	pp$8.skipBlockComment = function() {
+	  var this$1 = this;
+
+	  var startLoc = this.options.onComment && this.curPosition();
+	  var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
+	  if (end === -1) { this.raise(this.pos - 2, "Unterminated comment"); }
+	  this.pos = end + 2;
+	  if (this.options.locations) {
+	    lineBreakG.lastIndex = start;
+	    var match;
+	    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
+	      ++this$1.curLine;
+	      this$1.lineStart = match.index + match[0].length;
+	    }
+	  }
+	  if (this.options.onComment)
+	    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
+	                           startLoc, this.curPosition()); }
+	};
+
+	pp$8.skipLineComment = function(startSkip) {
+	  var this$1 = this;
+
+	  var start = this.pos;
+	  var startLoc = this.options.onComment && this.curPosition();
+	  var ch = this.input.charCodeAt(this.pos += startSkip);
+	  while (this.pos < this.input.length && !isNewLine(ch)) {
+	    ch = this$1.input.charCodeAt(++this$1.pos);
+	  }
+	  if (this.options.onComment)
+	    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
+	                           startLoc, this.curPosition()); }
+	};
+
+	// Called at the start of the parse and after every token. Skips
+	// whitespace and comments, and.
+
+	pp$8.skipSpace = function() {
+	  var this$1 = this;
+
+	  loop: while (this.pos < this.input.length) {
+	    var ch = this$1.input.charCodeAt(this$1.pos);
+	    switch (ch) {
+	    case 32: case 160: // ' '
+	      ++this$1.pos;
+	      break
+	    case 13:
+	      if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {
+	        ++this$1.pos;
+	      }
+	    case 10: case 8232: case 8233:
+	      ++this$1.pos;
+	      if (this$1.options.locations) {
+	        ++this$1.curLine;
+	        this$1.lineStart = this$1.pos;
+	      }
+	      break
+	    case 47: // '/'
+	      switch (this$1.input.charCodeAt(this$1.pos + 1)) {
+	      case 42: // '*'
+	        this$1.skipBlockComment();
+	        break
+	      case 47:
+	        this$1.skipLineComment(2);
+	        break
+	      default:
+	        break loop
+	      }
+	      break
+	    default:
+	      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
+	        ++this$1.pos;
+	      } else {
+	        break loop
+	      }
+	    }
+	  }
+	};
+
+	// Called at the end of every token. Sets `end`, `val`, and
+	// maintains `context` and `exprAllowed`, and skips the space after
+	// the token, so that the next one's `start` will point at the
+	// right position.
+
+	pp$8.finishToken = function(type, val) {
+	  this.end = this.pos;
+	  if (this.options.locations) { this.endLoc = this.curPosition(); }
+	  var prevType = this.type;
+	  this.type = type;
+	  this.value = val;
+
+	  this.updateContext(prevType);
+	};
+
+	// ### Token reading
+
+	// This is the function that is called to fetch the next token. It
+	// is somewhat obscure, because it works in character codes rather
+	// than characters, and because operator parsing has been inlined
+	// into it.
+	//
+	// All in the name of speed.
+	//
+	pp$8.readToken_dot = function() {
+	  var next = this.input.charCodeAt(this.pos + 1);
+	  if (next >= 48 && next <= 57) { return this.readNumber(true) }
+	  var next2 = this.input.charCodeAt(this.pos + 2);
+	  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
+	    this.pos += 3;
+	    return this.finishToken(types.ellipsis)
+	  } else {
+	    ++this.pos;
+	    return this.finishToken(types.dot)
+	  }
+	};
+
+	pp$8.readToken_slash = function() { // '/'
+	  var next = this.input.charCodeAt(this.pos + 1);
+	  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }
+	  if (next === 61) { return this.finishOp(types.assign, 2) }
+	  return this.finishOp(types.slash, 1)
+	};
+
+	pp$8.readToken_mult_modulo_exp = function(code) { // '%*'
+	  var next = this.input.charCodeAt(this.pos + 1);
+	  var size = 1;
+	  var tokentype = code === 42 ? types.star : types.modulo;
+
+	  // exponentiation operator ** and **=
+	  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
+	    ++size;
+	    tokentype = types.starstar;
+	    next = this.input.charCodeAt(this.pos + 2);
+	  }
+
+	  if (next === 61) { return this.finishOp(types.assign, size + 1) }
+	  return this.finishOp(tokentype, size)
+	};
+
+	pp$8.readToken_pipe_amp = function(code) { // '|&'
+	  var next = this.input.charCodeAt(this.pos + 1);
+	  if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }
+	  if (next === 61) { return this.finishOp(types.assign, 2) }
+	  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)
+	};
+
+	pp$8.readToken_caret = function() { // '^'
+	  var next = this.input.charCodeAt(this.pos + 1);
+	  if (next === 61) { return this.finishOp(types.assign, 2) }
+	  return this.finishOp(types.bitwiseXOR, 1)
+	};
+
+	pp$8.readToken_plus_min = function(code) { // '+-'
+	  var next = this.input.charCodeAt(this.pos + 1);
+	  if (next === code) {
+	    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&
+	        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
+	      // A `-->` line comment
+	      this.skipLineComment(3);
+	      this.skipSpace();
+	      return this.nextToken()
+	    }
+	    return this.finishOp(types.incDec, 2)
+	  }
+	  if (next === 61) { return this.finishOp(types.assign, 2) }
+	  return this.finishOp(types.plusMin, 1)
+	};
+
+	pp$8.readToken_lt_gt = function(code) { // '<>'
+	  var next = this.input.charCodeAt(this.pos + 1);
+	  var size = 1;
+	  if (next === code) {
+	    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
+	    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }
+	    return this.finishOp(types.bitShift, size)
+	  }
+	  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&
+	      this.input.charCodeAt(this.pos + 3) === 45) {
+	    // `<!--`, an XML-style comment that should be interpreted as a line comment
+	    this.skipLineComment(4);
+	    this.skipSpace();
+	    return this.nextToken()
+	  }
+	  if (next === 61) { size = 2; }
+	  return this.finishOp(types.relational, size)
+	};
+
+	pp$8.readToken_eq_excl = function(code) { // '=!'
+	  var next = this.input.charCodeAt(this.pos + 1);
+	  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }
+	  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'
+	    this.pos += 2;
+	    return this.finishToken(types.arrow)
+	  }
+	  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)
+	};
+
+	pp$8.getTokenFromCode = function(code) {
+	  switch (code) {
+	  // The interpretation of a dot depends on whether it is followed
+	  // by a digit or another two dots.
+	  case 46: // '.'
+	    return this.readToken_dot()
+
+	  // Punctuation tokens.
+	  case 40: ++this.pos; return this.finishToken(types.parenL)
+	  case 41: ++this.pos; return this.finishToken(types.parenR)
+	  case 59: ++this.pos; return this.finishToken(types.semi)
+	  case 44: ++this.pos; return this.finishToken(types.comma)
+	  case 91: ++this.pos; return this.finishToken(types.bracketL)
+	  case 93: ++this.pos; return this.finishToken(types.bracketR)
+	  case 123: ++this.pos; return this.finishToken(types.braceL)
+	  case 125: ++this.pos; return this.finishToken(types.braceR)
+	  case 58: ++this.pos; return this.finishToken(types.colon)
+	  case 63: ++this.pos; return this.finishToken(types.question)
+
+	  case 96: // '`'
+	    if (this.options.ecmaVersion < 6) { break }
+	    ++this.pos;
+	    return this.finishToken(types.backQuote)
+
+	  case 48: // '0'
+	    var next = this.input.charCodeAt(this.pos + 1);
+	    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number
+	    if (this.options.ecmaVersion >= 6) {
+	      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number
+	      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number
+	    }
+
+	  // Anything else beginning with a digit is an integer, octal
+	  // number, or float.
+	  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
+	    return this.readNumber(false)
+
+	  // Quotes produce strings.
+	  case 34: case 39: // '"', "'"
+	    return this.readString(code)
+
+	  // Operators are parsed inline in tiny state machines. '=' (61) is
+	  // often referred to. `finishOp` simply skips the amount of
+	  // characters it is given as second argument, and returns a token
+	  // of the type given by its first argument.
+
+	  case 47: // '/'
+	    return this.readToken_slash()
+
+	  case 37: case 42: // '%*'
+	    return this.readToken_mult_modulo_exp(code)
+
+	  case 124: case 38: // '|&'
+	    return this.readToken_pipe_amp(code)
+
+	  case 94: // '^'
+	    return this.readToken_caret()
+
+	  case 43: case 45: // '+-'
+	    return this.readToken_plus_min(code)
+
+	  case 60: case 62: // '<>'
+	    return this.readToken_lt_gt(code)
+
+	  case 61: case 33: // '=!'
+	    return this.readToken_eq_excl(code)
+
+	  case 126: // '~'
+	    return this.finishOp(types.prefix, 1)
+	  }
+
+	  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
+	};
+
+	pp$8.finishOp = function(type, size) {
+	  var str = this.input.slice(this.pos, this.pos + size);
+	  this.pos += size;
+	  return this.finishToken(type, str)
+	};
+
+	pp$8.readRegexp = function() {
+	  var this$1 = this;
+
+	  var escaped, inClass, start = this.pos;
+	  for (;;) {
+	    if (this$1.pos >= this$1.input.length) { this$1.raise(start, "Unterminated regular expression"); }
+	    var ch = this$1.input.charAt(this$1.pos);
+	    if (lineBreak.test(ch)) { this$1.raise(start, "Unterminated regular expression"); }
+	    if (!escaped) {
+	      if (ch === "[") { inClass = true; }
+	      else if (ch === "]" && inClass) { inClass = false; }
+	      else if (ch === "/" && !inClass) { break }
+	      escaped = ch === "\\";
+	    } else { escaped = false; }
+	    ++this$1.pos;
+	  }
+	  var pattern = this.input.slice(start, this.pos);
+	  ++this.pos;
+	  var flagsStart = this.pos;
+	  var flags = this.readWord1();
+	  if (this.containsEsc) { this.unexpected(flagsStart); }
+
+	  // Validate pattern
+	  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
+	  state.reset(start, pattern, flags);
+	  this.validateRegExpFlags(state);
+	  this.validateRegExpPattern(state);
+
+	  // Create Literal#value property value.
+	  var value = null;
+	  try {
+	    value = new RegExp(pattern, flags);
+	  } catch (e) {
+	    // ESTree requires null if it failed to instantiate RegExp object.
+	    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
+	  }
+
+	  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})
+	};
+
+	// Read an integer in the given radix. Return null if zero digits
+	// were read, the integer value otherwise. When `len` is given, this
+	// will return `null` unless the integer has exactly `len` digits.
+
+	pp$8.readInt = function(radix, len) {
+	  var this$1 = this;
+
+	  var start = this.pos, total = 0;
+	  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
+	    var code = this$1.input.charCodeAt(this$1.pos), val = (void 0);
+	    if (code >= 97) { val = code - 97 + 10; } // a
+	    else if (code >= 65) { val = code - 65 + 10; } // A
+	    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9
+	    else { val = Infinity; }
+	    if (val >= radix) { break }
+	    ++this$1.pos;
+	    total = total * radix + val;
+	  }
+	  if (this.pos === start || len != null && this.pos - start !== len) { return null }
+
+	  return total
+	};
+
+	pp$8.readRadixNumber = function(radix) {
+	  this.pos += 2; // 0x
+	  var val = this.readInt(radix);
+	  if (val == null) { this.raise(this.start + 2, "Expected number in radix " + radix); }
+	  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
+	  return this.finishToken(types.num, val)
+	};
+
+	// Read an integer, octal integer, or floating-point number.
+
+	pp$8.readNumber = function(startsWithDot) {
+	  var start = this.pos;
+	  if (!startsWithDot && this.readInt(10) === null) { this.raise(start, "Invalid number"); }
+	  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
+	  if (octal && this.strict) { this.raise(start, "Invalid number"); }
+	  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }
+	  var next = this.input.charCodeAt(this.pos);
+	  if (next === 46 && !octal) { // '.'
+	    ++this.pos;
+	    this.readInt(10);
+	    next = this.input.charCodeAt(this.pos);
+	  }
+	  if ((next === 69 || next === 101) && !octal) { // 'eE'
+	    next = this.input.charCodeAt(++this.pos);
+	    if (next === 43 || next === 45) { ++this.pos; } // '+-'
+	    if (this.readInt(10) === null) { this.raise(start, "Invalid number"); }
+	  }
+	  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
+
+	  var str = this.input.slice(start, this.pos);
+	  var val = octal ? parseInt(str, 8) : parseFloat(str);
+	  return this.finishToken(types.num, val)
+	};
+
+	// Read a string value, interpreting backslash-escapes.
+
+	pp$8.readCodePoint = function() {
+	  var ch = this.input.charCodeAt(this.pos), code;
+
+	  if (ch === 123) { // '{'
+	    if (this.options.ecmaVersion < 6) { this.unexpected(); }
+	    var codePos = ++this.pos;
+	    code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
+	    ++this.pos;
+	    if (code > 0x10FFFF) { this.invalidStringToken(codePos, "Code point out of bounds"); }
+	  } else {
+	    code = this.readHexChar(4);
+	  }
+	  return code
+	};
+
+	function codePointToString(code) {
+	  // UTF-16 Decoding
+	  if (code <= 0xFFFF) { return String.fromCharCode(code) }
+	  code -= 0x10000;
+	  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
+	}
+
+	pp$8.readString = function(quote) {
+	  var this$1 = this;
+
+	  var out = "", chunkStart = ++this.pos;
+	  for (;;) {
+	    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, "Unterminated string constant"); }
+	    var ch = this$1.input.charCodeAt(this$1.pos);
+	    if (ch === quote) { break }
+	    if (ch === 92) { // '\'
+	      out += this$1.input.slice(chunkStart, this$1.pos);
+	      out += this$1.readEscapedChar(false);
+	      chunkStart = this$1.pos;
+	    } else {
+	      if (isNewLine(ch, this$1.options.ecmaVersion >= 10)) { this$1.raise(this$1.start, "Unterminated string constant"); }
+	      ++this$1.pos;
+	    }
+	  }
+	  out += this.input.slice(chunkStart, this.pos++);
+	  return this.finishToken(types.string, out)
+	};
+
+	// Reads template string tokens.
+
+	var INVALID_TEMPLATE_ESCAPE_ERROR = {};
+
+	pp$8.tryReadTemplateToken = function() {
+	  this.inTemplateElement = true;
+	  try {
+	    this.readTmplToken();
+	  } catch (err) {
+	    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
+	      this.readInvalidTemplateToken();
+	    } else {
+	      throw err
+	    }
+	  }
+
+	  this.inTemplateElement = false;
+	};
+
+	pp$8.invalidStringToken = function(position, message) {
+	  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
+	    throw INVALID_TEMPLATE_ESCAPE_ERROR
+	  } else {
+	    this.raise(position, message);
+	  }
+	};
+
+	pp$8.readTmplToken = function() {
+	  var this$1 = this;
+
+	  var out = "", chunkStart = this.pos;
+	  for (;;) {
+	    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, "Unterminated template"); }
+	    var ch = this$1.input.charCodeAt(this$1.pos);
+	    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'
+	      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {
+	        if (ch === 36) {
+	          this$1.pos += 2;
+	          return this$1.finishToken(types.dollarBraceL)
+	        } else {
+	          ++this$1.pos;
+	          return this$1.finishToken(types.backQuote)
+	        }
+	      }
+	      out += this$1.input.slice(chunkStart, this$1.pos);
+	      return this$1.finishToken(types.template, out)
+	    }
+	    if (ch === 92) { // '\'
+	      out += this$1.input.slice(chunkStart, this$1.pos);
+	      out += this$1.readEscapedChar(true);
+	      chunkStart = this$1.pos;
+	    } else if (isNewLine(ch)) {
+	      out += this$1.input.slice(chunkStart, this$1.pos);
+	      ++this$1.pos;
+	      switch (ch) {
+	      case 13:
+	        if (this$1.input.charCodeAt(this$1.pos) === 10) { ++this$1.pos; }
+	      case 10:
+	        out += "\n";
+	        break
+	      default:
+	        out += String.fromCharCode(ch);
+	        break
+	      }
+	      if (this$1.options.locations) {
+	        ++this$1.curLine;
+	        this$1.lineStart = this$1.pos;
+	      }
+	      chunkStart = this$1.pos;
+	    } else {
+	      ++this$1.pos;
+	    }
+	  }
+	};
+
+	// Reads a template token to search for the end, without validating any escape sequences
+	pp$8.readInvalidTemplateToken = function() {
+	  var this$1 = this;
+
+	  for (; this.pos < this.input.length; this.pos++) {
+	    switch (this$1.input[this$1.pos]) {
+	    case "\\":
+	      ++this$1.pos;
+	      break
+
+	    case "$":
+	      if (this$1.input[this$1.pos + 1] !== "{") {
+	        break
+	      }
+	    // falls through
+
+	    case "`":
+	      return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos))
+
+	    // no default
+	    }
+	  }
+	  this.raise(this.start, "Unterminated template");
+	};
+
+	// Used to read escaped characters
+
+	pp$8.readEscapedChar = function(inTemplate) {
+	  var ch = this.input.charCodeAt(++this.pos);
+	  ++this.pos;
+	  switch (ch) {
+	  case 110: return "\n" // 'n' -> '\n'
+	  case 114: return "\r" // 'r' -> '\r'
+	  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
+	  case 117: return codePointToString(this.readCodePoint()) // 'u'
+	  case 116: return "\t" // 't' -> '\t'
+	  case 98: return "\b" // 'b' -> '\b'
+	  case 118: return "\u000b" // 'v' -> '\u000b'
+	  case 102: return "\f" // 'f' -> '\f'
+	  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\r\n'
+	  case 10: // ' \n'
+	    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }
+	    return ""
+	  default:
+	    if (ch >= 48 && ch <= 55) {
+	      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
+	      var octal = parseInt(octalStr, 8);
+	      if (octal > 255) {
+	        octalStr = octalStr.slice(0, -1);
+	        octal = parseInt(octalStr, 8);
+	      }
+	      this.pos += octalStr.length - 1;
+	      ch = this.input.charCodeAt(this.pos);
+	      if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
+	        this.invalidStringToken(
+	          this.pos - 1 - octalStr.length,
+	          inTemplate
+	            ? "Octal literal in template string"
+	            : "Octal literal in strict mode"
+	        );
+	      }
+	      return String.fromCharCode(octal)
+	    }
+	    if (isNewLine(ch)) {
+	      // Unicode new line characters after \ get removed from output in both
+	      // template literals and strings
+	      return ""
+	    }
+	    return String.fromCharCode(ch)
+	  }
+	};
+
+	// Used to read character escape sequences ('\x', '\u', '\U').
+
+	pp$8.readHexChar = function(len) {
+	  var codePos = this.pos;
+	  var n = this.readInt(16, len);
+	  if (n === null) { this.invalidStringToken(codePos, "Bad character escape sequence"); }
+	  return n
+	};
+
+	// Read an identifier, and return it as a string. Sets `this.containsEsc`
+	// to whether the word contained a '\u' escape.
+	//
+	// Incrementally adds only escaped chars, adding other chunks as-is
+	// as a micro-optimization.
+
+	pp$8.readWord1 = function() {
+	  var this$1 = this;
+
+	  this.containsEsc = false;
+	  var word = "", first = true, chunkStart = this.pos;
+	  var astral = this.options.ecmaVersion >= 6;
+	  while (this.pos < this.input.length) {
+	    var ch = this$1.fullCharCodeAtPos();
+	    if (isIdentifierChar(ch, astral)) {
+	      this$1.pos += ch <= 0xffff ? 1 : 2;
+	    } else if (ch === 92) { // "\"
+	      this$1.containsEsc = true;
+	      word += this$1.input.slice(chunkStart, this$1.pos);
+	      var escStart = this$1.pos;
+	      if (this$1.input.charCodeAt(++this$1.pos) !== 117) // "u"
+	        { this$1.invalidStringToken(this$1.pos, "Expecting Unicode escape sequence \\uXXXX"); }
+	      ++this$1.pos;
+	      var esc = this$1.readCodePoint();
+	      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
+	        { this$1.invalidStringToken(escStart, "Invalid Unicode escape"); }
+	      word += codePointToString(esc);
+	      chunkStart = this$1.pos;
+	    } else {
+	      break
+	    }
+	    first = false;
+	  }
+	  return word + this.input.slice(chunkStart, this.pos)
+	};
+
+	// Read an identifier or keyword token. Will check for reserved
+	// words when necessary.
+
+	pp$8.readWord = function() {
+	  var word = this.readWord1();
+	  var type = types.name;
+	  if (this.keywords.test(word)) {
+	    if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword " + word); }
+	    type = keywords$1[word];
+	  }
+	  return this.finishToken(type, word)
+	};
+
+	// Acorn is a tiny, fast JavaScript parser written in JavaScript.
+	//
+	// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and
+	// various contributors and released under an MIT license.
+	//
+	// Git repositories for Acorn are available at
+	//
+	//     http://marijnhaverbeke.nl/git/acorn
+	//     https://github.com/acornjs/acorn.git
+	//
+	// Please use the [github bug tracker][ghbt] to report issues.
+	//
+	// [ghbt]: https://github.com/acornjs/acorn/issues
+	//
+	// [walk]: util/walk.js
+
+	var version = "6.1.1";
+
+	// The main exported interface (under `self.acorn` when in the
+	// browser) is a `parse` function that takes a code string and
+	// returns an abstract syntax tree as specified by [Mozilla parser
+	// API][api].
+	//
+	// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API
+
+	function parse(input, options) {
+	  return Parser.parse(input, options)
+	}
+
+	// This function tries to parse a single expression at a given
+	// offset in a string. Useful for parsing mixed-language formats
+	// that embed JavaScript expressions.
+
+	function parseExpressionAt(input, pos, options) {
+	  return Parser.parseExpressionAt(input, pos, options)
+	}
+
+	// Acorn is organized as a tokenizer and a recursive-descent parser.
+	// The `tokenizer` export provides an interface to the tokenizer.
+
+	function tokenizer(input, options) {
+	  return Parser.tokenizer(input, options)
+	}
+
+	var acorn = /*#__PURE__*/Object.freeze({
+		version: version,
+		parse: parse,
+		parseExpressionAt: parseExpressionAt,
+		tokenizer: tokenizer,
+		Parser: Parser,
+		defaultOptions: defaultOptions,
+		Position: Position,
+		SourceLocation: SourceLocation,
+		getLineInfo: getLineInfo,
+		Node: Node,
+		TokenType: TokenType,
+		tokTypes: types,
+		keywordTypes: keywords$1,
+		TokContext: TokContext,
+		tokContexts: types$1,
+		isIdentifierChar: isIdentifierChar,
+		isIdentifierStart: isIdentifierStart,
+		Token: Token,
+		isNewLine: isNewLine,
+		lineBreak: lineBreak,
+		lineBreakG: lineBreakG,
+		nonASCIIwhitespace: nonASCIIwhitespace
+	});
+
+	function unwrapExports (x) {
+		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
+	}
+
+	function createCommonjsModule(fn, module) {
+		return module = { exports: {} }, fn(module, module.exports), module.exports;
+	}
+
+	function getCjsExportFromNamespace (n) {
+		return n && n.default || n;
+	}
+
+	var _acorn = getCjsExportFromNamespace(acorn);
+
+	var lib = createCommonjsModule(function (module, exports) {
+
+	Object.defineProperty(exports, "__esModule", {
+	  value: true
+	});
+	exports.DynamicImportKey = undefined;
+
+	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
+
+	var _get = function () {
+	  function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } }
+
+	  return get;
+	}();
+
+	exports['default'] = dynamicImport;
+
+
+
+	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
+
+	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
+
+	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-underscore-dangle */
+
+
+	var DynamicImportKey = exports.DynamicImportKey = 'Import';
+
+	// NOTE: This allows `yield import()` to parse correctly.
+	_acorn.tokTypes._import.startsExpr = true;
+
+	function parseDynamicImport() {
+	  var node = this.startNode();
+	  this.next();
+	  if (this.type !== _acorn.tokTypes.parenL) {
+	    this.unexpected();
+	  }
+	  return this.finishNode(node, DynamicImportKey);
+	}
+
+	function parenAfter() {
+	  return (/^(\s|\/\/.*|\/\*[^]*?\*\/)*\(/.test(this.input.slice(this.pos))
+	  );
+	}
+
+	function dynamicImport(Parser) {
+	  return function (_Parser) {
+	    _inherits(_class, _Parser);
+
+	    function _class() {
+	      _classCallCheck(this, _class);
+
+	      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
+	    }
+
+	    _createClass(_class, [{
+	      key: 'parseStatement',
+	      value: function () {
+	        function parseStatement(context, topLevel, exports) {
+	          if (this.type === _acorn.tokTypes._import && parenAfter.call(this)) {
+	            return this.parseExpressionStatement(this.startNode(), this.parseExpression());
+	          }
+	          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'parseStatement', this).call(this, context, topLevel, exports);
+	        }
+
+	        return parseStatement;
+	      }()
+	    }, {
+	      key: 'parseExprAtom',
+	      value: function () {
+	        function parseExprAtom(refDestructuringErrors) {
+	          if (this.type === _acorn.tokTypes._import) {
+	            return parseDynamicImport.call(this);
+	          }
+	          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'parseExprAtom', this).call(this, refDestructuringErrors);
+	        }
+
+	        return parseExprAtom;
+	      }()
+	    }]);
+
+	    return _class;
+	  }(Parser);
+	}
+	});
+
+	var dynamicImport = unwrapExports(lib);
+	var lib_1 = lib.DynamicImportKey;
+
+	const Parser$1 = Parser.extend(dynamicImport);
+	const parse$1 = (source) => Parser$1.parse(source, {
+	    sourceType: 'module',
+	    ecmaVersion: 9,
+	    preserveParens: true
+	});
+	const parse_expression_at = (source, index) => Parser$1.parseExpressionAt(source, index, {
+	    ecmaVersion: 9,
+	    preserveParens: true
+	});
+
+	const literals = new Map([['true', true], ['false', false], ['null', null]]);
+	function read_expression(parser) {
+	    const start = parser.index;
+	    const name = parser.read_until(/\s*}/);
+	    if (name && /^[a-z]+$/.test(name)) {
+	        const end = start + name.length;
+	        if (literals.has(name)) {
+	            return {
+	                type: 'Literal',
+	                start,
+	                end,
+	                value: literals.get(name),
+	                raw: name,
+	            };
+	        }
+	        return {
+	            type: 'Identifier',
+	            start,
+	            end: start + name.length,
+	            name,
+	        };
+	    }
+	    parser.index = start;
+	    try {
+	        const node = parse_expression_at(parser.template, parser.index);
+	        parser.index = node.end;
+	        return node;
+	    }
+	    catch (err) {
+	        parser.acorn_error(err);
+	    }
+	}
+
+	function repeat(str, i) {
+	    let result = '';
+	    while (i--)
+	        result += str;
+	    return result;
+	}
+
+	const script_closing_tag = '</script>';
+	function get_context(parser, attributes, start) {
+	    const context = attributes.find(attribute => attribute.name === 'context');
+	    if (!context)
+	        return 'default';
+	    if (context.value.length !== 1 || context.value[0].type !== 'Text') {
+	        parser.error({
+	            code: 'invalid-script',
+	            message: `context attribute must be static`
+	        }, start);
+	    }
+	    const value = context.value[0].data;
+	    if (value !== 'module') {
+	        parser.error({
+	            code: `invalid-script`,
+	            message: `If the context attribute is supplied, its value must be "module"`
+	        }, context.start);
+	    }
+	    return value;
+	}
+	function read_script(parser, start, attributes) {
+	    const script_start = parser.index;
+	    const script_end = parser.template.indexOf(script_closing_tag, script_start);
+	    if (script_end === -1)
+	        parser.error({
+	            code: `unclosed-script`,
+	            message: `<script> must have a closing tag`
+	        });
+	    const source = repeat(' ', script_start) + parser.template.slice(script_start, script_end);
+	    parser.index = script_end + script_closing_tag.length;
+	    let ast;
+	    try {
+	        ast = parse$1(source);
+	    }
+	    catch (err) {
+	        parser.acorn_error(err);
+	    }
+	    ast.start = script_start;
+	    return {
+	        start,
+	        end: parser.index,
+	        context: get_context(parser, attributes, start),
+	        content: ast,
+	    };
+	}
+
+	var MAX_LINE_LENGTH = 100;
+	var OFFSET_CORRECTION = 60;
+	var TAB_REPLACEMENT = '    ';
+
+	function sourceFragment(error, extraLines) {
+	    function processLines(start, end) {
+	        return lines.slice(start, end).map(function(line, idx) {
+	            var num = String(start + idx + 1);
+
+	            while (num.length < maxNumLength) {
+	                num = ' ' + num;
+	            }
+
+	            return num + ' |' + line;
+	        }).join('\n');
+	    }
+
+	    var lines = error.source.split(/\n|\r\n?|\f/);
+	    var line = error.line;
+	    var column = error.column;
+	    var startLine = Math.max(1, line - extraLines) - 1;
+	    var endLine = Math.min(line + extraLines, lines.length + 1);
+	    var maxNumLength = Math.max(4, String(endLine).length) + 1;
+	    var cutLeft = 0;
+
+	    // correct column according to replaced tab before column
+	    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\t/g) || []).length;
+
+	    if (column > MAX_LINE_LENGTH) {
+	        cutLeft = column - OFFSET_CORRECTION + 3;
+	        column = OFFSET_CORRECTION - 2;
+	    }
+
+	    for (var i = startLine; i <= endLine; i++) {
+	        if (i >= 0 && i < lines.length) {
+	            lines[i] = lines[i].replace(/\t/g, TAB_REPLACEMENT);
+	            lines[i] =
+	                (cutLeft > 0 && lines[i].length > cutLeft ? '\u2026' : '') +
+	                lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +
+	                (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\u2026' : '');
+	        }
+	    }
+
+	    return [
+	        processLines(startLine, line),
+	        new Array(column + maxNumLength + 2).join('-') + '^',
+	        processLines(line, endLine)
+	    ].join('\n');
+	}
+
+	var CssSyntaxError = function(message, source, offset, line, column) {
+	    // some VMs prevent setting line/column otherwise (iOS Safari 10 even throw an exception)
+	    var error = Object.create(SyntaxError.prototype);
+
+	    error.name = 'CssSyntaxError';
+	    error.message = message;
+	    error.stack = (new Error().stack || '').replace(/^.+\n/, error.name + ': ' + error.message + '\n');
+	    error.source = source;
+	    error.offset = offset;
+	    error.line = line;
+	    error.column = column;
+
+	    error.sourceFragment = function(extraLines) {
+	        return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);
+	    };
+	    Object.defineProperty(error, 'formattedMessage', {
+	        get: function() {
+	            return (
+	                'Parse error: ' + error.message + '\n' +
+	                sourceFragment(error, 2)
+	            );
+	        }
+	    });
+
+	    // for backward capability
+	    error.parseError = {
+	        offset: offset,
+	        line: line,
+	        column: column
+	    };
+
+	    return error;
+	};
+
+	var error = CssSyntaxError;
+
+	// token types (note: value shouldn't intersect with used char codes)
+	var WHITESPACE = 1;
+	var IDENTIFIER = 2;
+	var NUMBER = 3;
+	var STRING = 4;
+	var COMMENT = 5;
+	var PUNCTUATOR = 6;
+	var CDO = 7;
+	var CDC = 8;
+	var ATRULE = 14;
+	var FUNCTION = 15;
+	var URL = 16;
+	var RAW = 17;
+
+	var TAB = 9;
+	var N = 10;
+	var F = 12;
+	var R = 13;
+	var SPACE = 32;
+
+	var TYPE = {
+	    WhiteSpace:   WHITESPACE,
+	    Identifier:   IDENTIFIER,
+	    Number:           NUMBER,
+	    String:           STRING,
+	    Comment:         COMMENT,
+	    Punctuator:   PUNCTUATOR,
+	    CDO:                 CDO,
+	    CDC:                 CDC,
+	    Atrule:           ATRULE,
+	    Function:       FUNCTION,
+	    Url:                 URL,
+	    Raw:                 RAW,
+
+	    ExclamationMark:      33,  // !
+	    QuotationMark:        34,  // "
+	    NumberSign:           35,  // #
+	    DollarSign:           36,  // $
+	    PercentSign:          37,  // %
+	    Ampersand:            38,  // &
+	    Apostrophe:           39,  // '
+	    LeftParenthesis:      40,  // (
+	    RightParenthesis:     41,  // )
+	    Asterisk:             42,  // *
+	    PlusSign:             43,  // +
+	    Comma:                44,  // ,
+	    HyphenMinus:          45,  // -
+	    FullStop:             46,  // .
+	    Solidus:              47,  // /
+	    Colon:                58,  // :
+	    Semicolon:            59,  // ;
+	    LessThanSign:         60,  // <
+	    EqualsSign:           61,  // =
+	    GreaterThanSign:      62,  // >
+	    QuestionMark:         63,  // ?
+	    CommercialAt:         64,  // @
+	    LeftSquareBracket:    91,  // [
+	    Backslash:            92,  // \
+	    RightSquareBracket:   93,  // ]
+	    CircumflexAccent:     94,  // ^
+	    LowLine:              95,  // _
+	    GraveAccent:          96,  // `
+	    LeftCurlyBracket:    123,  // {
+	    VerticalLine:        124,  // |
+	    RightCurlyBracket:   125,  // }
+	    Tilde:               126   // ~
+	};
+
+	var NAME = Object.keys(TYPE).reduce(function(result, key) {
+	    result[TYPE[key]] = key;
+	    return result;
+	}, {});
+
+	// https://drafts.csswg.org/css-syntax/#tokenizer-definitions
+	// > non-ASCII code point
+	// >   A code point with a value equal to or greater than U+0080 <control>
+	// > name-start code point
+	// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).
+	// > name code point
+	// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)
+	// That means only ASCII code points has a special meaning and we a maps for 0..127 codes only
+	var SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported
+	var SYMBOL_TYPE = new SafeUint32Array(0x80);
+	var PUNCTUATION = new SafeUint32Array(0x80);
+	var STOP_URL_RAW = new SafeUint32Array(0x80);
+
+	for (var i = 0; i < SYMBOL_TYPE.length; i++) {
+	    SYMBOL_TYPE[i] = IDENTIFIER;
+	}
+
+	// fill categories
+	[
+	    TYPE.ExclamationMark,    // !
+	    TYPE.QuotationMark,      // "
+	    TYPE.NumberSign,         // #
+	    TYPE.DollarSign,         // $
+	    TYPE.PercentSign,        // %
+	    TYPE.Ampersand,          // &
+	    TYPE.Apostrophe,         // '
+	    TYPE.LeftParenthesis,    // (
+	    TYPE.RightParenthesis,   // )
+	    TYPE.Asterisk,           // *
+	    TYPE.PlusSign,           // +
+	    TYPE.Comma,              // ,
+	    TYPE.HyphenMinus,        // -
+	    TYPE.FullStop,           // .
+	    TYPE.Solidus,            // /
+	    TYPE.Colon,              // :
+	    TYPE.Semicolon,          // ;
+	    TYPE.LessThanSign,       // <
+	    TYPE.EqualsSign,         // =
+	    TYPE.GreaterThanSign,    // >
+	    TYPE.QuestionMark,       // ?
+	    TYPE.CommercialAt,       // @
+	    TYPE.LeftSquareBracket,  // [
+	    // TYPE.Backslash,          // \
+	    TYPE.RightSquareBracket, // ]
+	    TYPE.CircumflexAccent,   // ^
+	    // TYPE.LowLine,            // _
+	    TYPE.GraveAccent,        // `
+	    TYPE.LeftCurlyBracket,   // {
+	    TYPE.VerticalLine,       // |
+	    TYPE.RightCurlyBracket,  // }
+	    TYPE.Tilde               // ~
+	].forEach(function(key) {
+	    SYMBOL_TYPE[Number(key)] = PUNCTUATOR;
+	    PUNCTUATION[Number(key)] = PUNCTUATOR;
+	});
+
+	for (var i = 48; i <= 57; i++) {
+	    SYMBOL_TYPE[i] = NUMBER;
+	}
+
+	SYMBOL_TYPE[SPACE] = WHITESPACE;
+	SYMBOL_TYPE[TAB] = WHITESPACE;
+	SYMBOL_TYPE[N] = WHITESPACE;
+	SYMBOL_TYPE[R] = WHITESPACE;
+	SYMBOL_TYPE[F] = WHITESPACE;
+
+	SYMBOL_TYPE[TYPE.Apostrophe] = STRING;
+	SYMBOL_TYPE[TYPE.QuotationMark] = STRING;
+
+	STOP_URL_RAW[SPACE] = 1;
+	STOP_URL_RAW[TAB] = 1;
+	STOP_URL_RAW[N] = 1;
+	STOP_URL_RAW[R] = 1;
+	STOP_URL_RAW[F] = 1;
+	STOP_URL_RAW[TYPE.Apostrophe] = 1;
+	STOP_URL_RAW[TYPE.QuotationMark] = 1;
+	STOP_URL_RAW[TYPE.LeftParenthesis] = 1;
+	STOP_URL_RAW[TYPE.RightParenthesis] = 1;
+
+	// whitespace is punctuation ...
+	PUNCTUATION[SPACE] = PUNCTUATOR;
+	PUNCTUATION[TAB] = PUNCTUATOR;
+	PUNCTUATION[N] = PUNCTUATOR;
+	PUNCTUATION[R] = PUNCTUATOR;
+	PUNCTUATION[F] = PUNCTUATOR;
+	// ... hyper minus is not
+	PUNCTUATION[TYPE.HyphenMinus] = 0;
+
+	var _const = {
+	    TYPE: TYPE,
+	    NAME: NAME,
+
+	    SYMBOL_TYPE: SYMBOL_TYPE,
+	    PUNCTUATION: PUNCTUATION,
+	    STOP_URL_RAW: STOP_URL_RAW
+	};
+
+	var PUNCTUATION$1 = _const.PUNCTUATION;
+	var STOP_URL_RAW$1 = _const.STOP_URL_RAW;
+	var TYPE$1 = _const.TYPE;
+	var FULLSTOP = TYPE$1.FullStop;
+	var PLUSSIGN = TYPE$1.PlusSign;
+	var HYPHENMINUS = TYPE$1.HyphenMinus;
+	var PUNCTUATOR$1 = TYPE$1.Punctuator;
+	var TAB$1 = 9;
+	var N$1 = 10;
+	var F$1 = 12;
+	var R$1 = 13;
+	var SPACE$1 = 32;
+	var BACK_SLASH = 92;
+	var E = 101; // 'e'.charCodeAt(0)
+
+	function firstCharOffset(source) {
+	    // detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)
+	    if (source.charCodeAt(0) === 0xFEFF ||  // UTF-16BE
+	        source.charCodeAt(0) === 0xFFFE) {  // UTF-16LE
+	        return 1;
+	    }
+
+	    return 0;
+	}
+
+	function isHex(code) {
+	    return (code >= 48 && code <= 57) || // 0 .. 9
+	           (code >= 65 && code <= 70) || // A .. F
+	           (code >= 97 && code <= 102);  // a .. f
+	}
+
+	function isNumber(code) {
+	    return code >= 48 && code <= 57;
+	}
+
+	function isNewline(source, offset, code) {
+	    if (code === N$1 || code === F$1 || code === R$1) {
+	        if (code === R$1 && offset + 1 < source.length && source.charCodeAt(offset + 1) === N$1) {
+	            return 2;
+	        }
+
+	        return 1;
+	    }
+
+	    return 0;
+	}
+
+	function cmpChar(testStr, offset, referenceCode) {
+	    var code = testStr.charCodeAt(offset);
+
+	    // code.toLowerCase()
+	    if (code >= 65 && code <= 90) {
+	        code = code | 32;
+	    }
+
+	    return code === referenceCode;
+	}
+
+	function cmpStr(testStr, start, end, referenceStr) {
+	    if (end - start !== referenceStr.length) {
+	        return false;
+	    }
+
+	    if (start < 0 || end > testStr.length) {
+	        return false;
+	    }
+
+	    for (var i = start; i < end; i++) {
+	        var testCode = testStr.charCodeAt(i);
+	        var refCode = referenceStr.charCodeAt(i - start);
+
+	        // testStr[i].toLowerCase()
+	        if (testCode >= 65 && testCode <= 90) {
+	            testCode = testCode | 32;
+	        }
+
+	        if (testCode !== refCode) {
+	            return false;
+	        }
+	    }
+
+	    return true;
+	}
+
+	function endsWith(testStr, referenceStr) {
+	    return cmpStr(testStr, testStr.length - referenceStr.length, testStr.length, referenceStr);
+	}
+
+	function findLastNonSpaceLocation(scanner) {
+	    for (var i = scanner.source.length - 1; i >= 0; i--) {
+	        var code = scanner.source.charCodeAt(i);
+
+	        if (code !== SPACE$1 && code !== TAB$1 && code !== R$1 && code !== N$1 && code !== F$1) {
+	            break;
+	        }
+	    }
+
+	    return scanner.getLocation(i + 1);
+	}
+
+	function findWhiteSpaceEnd(source, offset) {
+	    for (; offset < source.length; offset++) {
+	        var code = source.charCodeAt(offset);
+
+	        if (code !== SPACE$1 && code !== TAB$1 && code !== R$1 && code !== N$1 && code !== F$1) {
+	            break;
+	        }
+	    }
+
+	    return offset;
+	}
+
+	function findCommentEnd(source, offset) {
+	    var commentEnd = source.indexOf('*/', offset);
+
+	    if (commentEnd === -1) {
+	        return source.length;
+	    }
+
+	    return commentEnd + 2;
+	}
+
+	function findStringEnd(source, offset, quote) {
+	    for (; offset < source.length; offset++) {
+	        var code = source.charCodeAt(offset);
+
+	        // TODO: bad string
+	        if (code === BACK_SLASH) {
+	            offset++;
+	        } else if (code === quote) {
+	            offset++;
+	            break;
+	        }
+	    }
+
+	    return offset;
+	}
+
+	function findDecimalNumberEnd(source, offset) {
+	    for (; offset < source.length; offset++) {
+	        var code = source.charCodeAt(offset);
+
+	        if (code < 48 || code > 57) {  // not a 0 .. 9
+	            break;
+	        }
+	    }
+
+	    return offset;
+	}
+
+	function findNumberEnd(source, offset, allowFraction) {
+	    var code;
+
+	    offset = findDecimalNumberEnd(source, offset);
+
+	    // fraction: .\d+
+	    if (allowFraction && offset + 1 < source.length && source.charCodeAt(offset) === FULLSTOP) {
+	        code = source.charCodeAt(offset + 1);
+
+	        if (isNumber(code)) {
+	            offset = findDecimalNumberEnd(source, offset + 1);
+	        }
+	    }
+
+	    // exponent: e[+-]\d+
+	    if (offset + 1 < source.length) {
+	        if ((source.charCodeAt(offset) | 32) === E) { // case insensitive check for `e`
+	            code = source.charCodeAt(offset + 1);
+
+	            if (code === PLUSSIGN || code === HYPHENMINUS) {
+	                if (offset + 2 < source.length) {
+	                    code = source.charCodeAt(offset + 2);
+	                }
+	            }
+
+	            if (isNumber(code)) {
+	                offset = findDecimalNumberEnd(source, offset + 2);
+	            }
+	        }
+	    }
+
+	    return offset;
+	}
+
+	// skip escaped unicode sequence that can ends with space
+	// [0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?
+	function findEscaseEnd(source, offset) {
+	    for (var i = 0; i < 7 && offset + i < source.length; i++) {
+	        var code = source.charCodeAt(offset + i);
+
+	        if (i !== 6 && isHex(code)) {
+	            continue;
+	        }
+
+	        if (i > 0) {
+	            offset += i - 1 + isNewline(source, offset + i, code);
+	            if (code === SPACE$1 || code === TAB$1) {
+	                offset++;
+	            }
+	        }
+
+	        break;
+	    }
+
+	    return offset;
+	}
+
+	function findIdentifierEnd(source, offset) {
+	    for (; offset < source.length; offset++) {
+	        var code = source.charCodeAt(offset);
+
+	        if (code === BACK_SLASH) {
+	            offset = findEscaseEnd(source, offset + 1);
+	        } else if (code < 0x80 && PUNCTUATION$1[code] === PUNCTUATOR$1) {
+	            break;
+	        }
+	    }
+
+	    return offset;
+	}
+
+	function findUrlRawEnd(source, offset) {
+	    for (; offset < source.length; offset++) {
+	        var code = source.charCodeAt(offset);
+
+	        if (code === BACK_SLASH) {
+	            offset = findEscaseEnd(source, offset + 1);
+	        } else if (code < 0x80 && STOP_URL_RAW$1[code] === 1) {
+	            break;
+	        }
+	    }
+
+	    return offset;
+	}
+
+	var utils = {
+	    firstCharOffset: firstCharOffset,
+
+	    isHex: isHex,
+	    isNumber: isNumber,
+	    isNewline: isNewline,
+
+	    cmpChar: cmpChar,
+	    cmpStr: cmpStr,
+	    endsWith: endsWith,
+
+	    findLastNonSpaceLocation: findLastNonSpaceLocation,
+	    findWhiteSpaceEnd: findWhiteSpaceEnd,
+	    findCommentEnd: findCommentEnd,
+	    findStringEnd: findStringEnd,
+	    findDecimalNumberEnd: findDecimalNumberEnd,
+	    findNumberEnd: findNumberEnd,
+	    findEscaseEnd: findEscaseEnd,
+	    findIdentifierEnd: findIdentifierEnd,
+	    findUrlRawEnd: findUrlRawEnd
+	};
+
+	var TYPE$2 = _const.TYPE;
+	var NAME$1 = _const.NAME;
+	var SYMBOL_TYPE$1 = _const.SYMBOL_TYPE;
+
+
+	var firstCharOffset$1 = utils.firstCharOffset;
+	var cmpStr$1 = utils.cmpStr;
+	var isNumber$1 = utils.isNumber;
+	var findLastNonSpaceLocation$1 = utils.findLastNonSpaceLocation;
+	var findWhiteSpaceEnd$1 = utils.findWhiteSpaceEnd;
+	var findCommentEnd$1 = utils.findCommentEnd;
+	var findStringEnd$1 = utils.findStringEnd;
+	var findNumberEnd$1 = utils.findNumberEnd;
+	var findIdentifierEnd$1 = utils.findIdentifierEnd;
+	var findUrlRawEnd$1 = utils.findUrlRawEnd;
+
+	var NULL = 0;
+	var WHITESPACE$1 = TYPE$2.WhiteSpace;
+	var IDENTIFIER$1 = TYPE$2.Identifier;
+	var NUMBER$1 = TYPE$2.Number;
+	var STRING$1 = TYPE$2.String;
+	var COMMENT$1 = TYPE$2.Comment;
+	var PUNCTUATOR$2 = TYPE$2.Punctuator;
+	var CDO$1 = TYPE$2.CDO;
+	var CDC$1 = TYPE$2.CDC;
+	var ATRULE$1 = TYPE$2.Atrule;
+	var FUNCTION$1 = TYPE$2.Function;
+	var URL$1 = TYPE$2.Url;
+	var RAW$1 = TYPE$2.Raw;
+
+	var N$2 = 10;
+	var F$2 = 12;
+	var R$2 = 13;
+	var STAR = TYPE$2.Asterisk;
+	var SLASH = TYPE$2.Solidus;
+	var FULLSTOP$1 = TYPE$2.FullStop;
+	var PLUSSIGN$1 = TYPE$2.PlusSign;
+	var HYPHENMINUS$1 = TYPE$2.HyphenMinus;
+	var GREATERTHANSIGN = TYPE$2.GreaterThanSign;
+	var LESSTHANSIGN = TYPE$2.LessThanSign;
+	var EXCLAMATIONMARK = TYPE$2.ExclamationMark;
+	var COMMERCIALAT = TYPE$2.CommercialAt;
+	var QUOTATIONMARK = TYPE$2.QuotationMark;
+	var APOSTROPHE = TYPE$2.Apostrophe;
+	var LEFTPARENTHESIS = TYPE$2.LeftParenthesis;
+	var RIGHTPARENTHESIS = TYPE$2.RightParenthesis;
+	var LEFTCURLYBRACKET = TYPE$2.LeftCurlyBracket;
+	var RIGHTCURLYBRACKET = TYPE$2.RightCurlyBracket;
+	var LEFTSQUAREBRACKET = TYPE$2.LeftSquareBracket;
+	var RIGHTSQUAREBRACKET = TYPE$2.RightSquareBracket;
+
+	var MIN_BUFFER_SIZE = 16 * 1024;
+	var OFFSET_MASK = 0x00FFFFFF;
+	var TYPE_SHIFT = 24;
+	var SafeUint32Array$1 = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported
+
+	function computeLinesAndColumns(tokenizer, source) {
+	    var sourceLength = source.length;
+	    var start = firstCharOffset$1(source);
+	    var lines = tokenizer.lines;
+	    var line = tokenizer.startLine;
+	    var columns = tokenizer.columns;
+	    var column = tokenizer.startColumn;
+
+	    if (lines === null || lines.length < sourceLength + 1) {
+	        lines = new SafeUint32Array$1(Math.max(sourceLength + 1024, MIN_BUFFER_SIZE));
+	        columns = new SafeUint32Array$1(lines.length);
+	    }
+
+	    for (var i = start; i < sourceLength; i++) {
+	        var code = source.charCodeAt(i);
+
+	        lines[i] = line;
+	        columns[i] = column++;
+
+	        if (code === N$2 || code === R$2 || code === F$2) {
+	            if (code === R$2 && i + 1 < sourceLength && source.charCodeAt(i + 1) === N$2) {
+	                i++;
+	                lines[i] = line;
+	                columns[i] = column;
+	            }
+
+	            line++;
+	            column = 1;
+	        }
+	    }
+
+	    lines[i] = line;
+	    columns[i] = column;
+
+	    tokenizer.linesAnsColumnsComputed = true;
+	    tokenizer.lines = lines;
+	    tokenizer.columns = columns;
+	}
+
+	function tokenLayout(tokenizer, source, startPos) {
+	    var sourceLength = source.length;
+	    var offsetAndType = tokenizer.offsetAndType;
+	    var balance = tokenizer.balance;
+	    var tokenCount = 0;
+	    var prevType = 0;
+	    var offset = startPos;
+	    var anchor = 0;
+	    var balanceCloseCode = 0;
+	    var balanceStart = 0;
+	    var balancePrev = 0;
+
+	    if (offsetAndType === null || offsetAndType.length < sourceLength + 1) {
+	        offsetAndType = new SafeUint32Array$1(sourceLength + 1024);
+	        balance = new SafeUint32Array$1(sourceLength + 1024);
+	    }
+
+	    while (offset < sourceLength) {
+	        var code = source.charCodeAt(offset);
+	        var type = code < 0x80 ? SYMBOL_TYPE$1[code] : IDENTIFIER$1;
+
+	        balance[tokenCount] = sourceLength;
+
+	        switch (type) {
+	            case WHITESPACE$1:
+	                offset = findWhiteSpaceEnd$1(source, offset + 1);
+	                break;
+
+	            case PUNCTUATOR$2:
+	                switch (code) {
+	                    case balanceCloseCode:
+	                        balancePrev = balanceStart & OFFSET_MASK;
+	                        balanceStart = balance[balancePrev];
+	                        balanceCloseCode = balanceStart >> TYPE_SHIFT;
+	                        balance[tokenCount] = balancePrev;
+	                        balance[balancePrev++] = tokenCount;
+	                        for (; balancePrev < tokenCount; balancePrev++) {
+	                            if (balance[balancePrev] === sourceLength) {
+	                                balance[balancePrev] = tokenCount;
+	                            }
+	                        }
+	                        break;
+
+	                    case LEFTSQUAREBRACKET:
+	                        balance[tokenCount] = balanceStart;
+	                        balanceCloseCode = RIGHTSQUAREBRACKET;
+	                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;
+	                        break;
+
+	                    case LEFTCURLYBRACKET:
+	                        balance[tokenCount] = balanceStart;
+	                        balanceCloseCode = RIGHTCURLYBRACKET;
+	                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;
+	                        break;
+
+	                    case LEFTPARENTHESIS:
+	                        balance[tokenCount] = balanceStart;
+	                        balanceCloseCode = RIGHTPARENTHESIS;
+	                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;
+	                        break;
+	                }
+
+	                // /*
+	                if (code === STAR && prevType === SLASH) {
+	                    type = COMMENT$1;
+	                    offset = findCommentEnd$1(source, offset + 1);
+	                    tokenCount--; // rewrite prev token
+	                    break;
+	                }
+
+	                // edge case for -.123 and +.123
+	                if (code === FULLSTOP$1 && (prevType === PLUSSIGN$1 || prevType === HYPHENMINUS$1)) {
+	                    if (offset + 1 < sourceLength && isNumber$1(source.charCodeAt(offset + 1))) {
+	                        type = NUMBER$1;
+	                        offset = findNumberEnd$1(source, offset + 2, false);
+	                        tokenCount--; // rewrite prev token
+	                        break;
+	                    }
+	                }
+
+	                // <!--
+	                if (code === EXCLAMATIONMARK && prevType === LESSTHANSIGN) {
+	                    if (offset + 2 < sourceLength &&
+	                        source.charCodeAt(offset + 1) === HYPHENMINUS$1 &&
+	                        source.charCodeAt(offset + 2) === HYPHENMINUS$1) {
+	                        type = CDO$1;
+	                        offset = offset + 3;
+	                        tokenCount--; // rewrite prev token
+	                        break;
+	                    }
+	                }
+
+	                // -->
+	                if (code === HYPHENMINUS$1 && prevType === HYPHENMINUS$1) {
+	                    if (offset + 1 < sourceLength && source.charCodeAt(offset + 1) === GREATERTHANSIGN) {
+	                        type = CDC$1;
+	                        offset = offset + 2;
+	                        tokenCount--; // rewrite prev token
+	                        break;
+	                    }
+	                }
+
+	                // ident(
+	                if (code === LEFTPARENTHESIS && prevType === IDENTIFIER$1) {
+	                    offset = offset + 1;
+	                    tokenCount--; // rewrite prev token
+	                    balance[tokenCount] = balance[tokenCount + 1];
+	                    balanceStart--;
+
+	                    // 4 char length identifier and equal to `url(` (case insensitive)
+	                    if (offset - anchor === 4 && cmpStr$1(source, anchor, offset, 'url(')) {
+	                        // special case for url() because it can contain any symbols sequence with few exceptions
+	                        anchor = findWhiteSpaceEnd$1(source, offset);
+	                        code = source.charCodeAt(anchor);
+	                        if (code !== LEFTPARENTHESIS &&
+	                            code !== RIGHTPARENTHESIS &&
+	                            code !== QUOTATIONMARK &&
+	                            code !== APOSTROPHE) {
+	                            // url(
+	                            offsetAndType[tokenCount++] = (URL$1 << TYPE_SHIFT) | offset;
+	                            balance[tokenCount] = sourceLength;
+
+	                            // ws*
+	                            if (anchor !== offset) {
+	                                offsetAndType[tokenCount++] = (WHITESPACE$1 << TYPE_SHIFT) | anchor;
+	                                balance[tokenCount] = sourceLength;
+	                            }
+
+	                            // raw
+	                            type = RAW$1;
+	                            offset = findUrlRawEnd$1(source, anchor);
+	                        } else {
+	                            type = URL$1;
+	                        }
+	                    } else {
+	                        type = FUNCTION$1;
+	                    }
+	                    break;
+	                }
+
+	                type = code;
+	                offset = offset + 1;
+	                break;
+
+	            case NUMBER$1:
+	                offset = findNumberEnd$1(source, offset + 1, prevType !== FULLSTOP$1);
+
+	                // merge number with a preceding dot, dash or plus
+	                if (prevType === FULLSTOP$1 ||
+	                    prevType === HYPHENMINUS$1 ||
+	                    prevType === PLUSSIGN$1) {
+	                    tokenCount--; // rewrite prev token
+	                }
+
+	                break;
+
+	            case STRING$1:
+	                offset = findStringEnd$1(source, offset + 1, code);
+	                break;
+
+	            default:
+	                anchor = offset;
+	                offset = findIdentifierEnd$1(source, offset);
+
+	                // merge identifier with a preceding dash
+	                if (prevType === HYPHENMINUS$1) {
+	                    // rewrite prev token
+	                    tokenCount--;
+	                    // restore prev prev token type
+	                    // for case @-prefix-ident
+	                    prevType = tokenCount === 0 ? 0 : offsetAndType[tokenCount - 1] >> TYPE_SHIFT;
+	                }
+
+	                if (prevType === COMMERCIALAT) {
+	                    // rewrite prev token and change type to <at-keyword-token>
+	                    tokenCount--;
+	                    type = ATRULE$1;
+	                }
+	        }
+
+	        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | offset;
+	        prevType = type;
+	    }
+
+	    // finalize arrays
+	    offsetAndType[tokenCount] = offset;
+	    balance[tokenCount] = sourceLength;
+	    while (balanceStart !== 0) {
+	        balancePrev = balanceStart & OFFSET_MASK;
+	        balanceStart = balance[balancePrev];
+	        balance[balancePrev] = sourceLength;
+	    }
+
+	    tokenizer.offsetAndType = offsetAndType;
+	    tokenizer.tokenCount = tokenCount;
+	    tokenizer.balance = balance;
+	}
+
+	//
+	// tokenizer
+	//
+
+	var Tokenizer = function(source, startOffset, startLine, startColumn) {
+	    this.offsetAndType = null;
+	    this.balance = null;
+	    this.lines = null;
+	    this.columns = null;
+
+	    this.setSource(source, startOffset, startLine, startColumn);
+	};
+
+	Tokenizer.prototype = {
+	    setSource: function(source, startOffset, startLine, startColumn) {
+	        var safeSource = String(source || '');
+	        var start = firstCharOffset$1(safeSource);
+
+	        this.source = safeSource;
+	        this.firstCharOffset = start;
+	        this.startOffset = typeof startOffset === 'undefined' ? 0 : startOffset;
+	        this.startLine = typeof startLine === 'undefined' ? 1 : startLine;
+	        this.startColumn = typeof startColumn === 'undefined' ? 1 : startColumn;
+	        this.linesAnsColumnsComputed = false;
+
+	        this.eof = false;
+	        this.currentToken = -1;
+	        this.tokenType = 0;
+	        this.tokenStart = start;
+	        this.tokenEnd = start;
+
+	        tokenLayout(this, safeSource, start);
+	        this.next();
+	    },
+
+	    lookupType: function(offset) {
+	        offset += this.currentToken;
+
+	        if (offset < this.tokenCount) {
+	            return this.offsetAndType[offset] >> TYPE_SHIFT;
+	        }
+
+	        return NULL;
+	    },
+	    lookupNonWSType: function(offset) {
+	        offset += this.currentToken;
+
+	        for (var type; offset < this.tokenCount; offset++) {
+	            type = this.offsetAndType[offset] >> TYPE_SHIFT;
+
+	            if (type !== WHITESPACE$1) {
+	                return type;
+	            }
+	        }
+
+	        return NULL;
+	    },
+	    lookupValue: function(offset, referenceStr) {
+	        offset += this.currentToken;
+
+	        if (offset < this.tokenCount) {
+	            return cmpStr$1(
+	                this.source,
+	                this.offsetAndType[offset - 1] & OFFSET_MASK,
+	                this.offsetAndType[offset] & OFFSET_MASK,
+	                referenceStr
+	            );
+	        }
+
+	        return false;
+	    },
+	    getTokenStart: function(tokenNum) {
+	        if (tokenNum === this.currentToken) {
+	            return this.tokenStart;
+	        }
+
+	        if (tokenNum > 0) {
+	            return tokenNum < this.tokenCount
+	                ? this.offsetAndType[tokenNum - 1] & OFFSET_MASK
+	                : this.offsetAndType[this.tokenCount] & OFFSET_MASK;
+	        }
+
+	        return this.firstCharOffset;
+	    },
+	    getOffsetExcludeWS: function() {
+	        if (this.currentToken > 0) {
+	            if ((this.offsetAndType[this.currentToken - 1] >> TYPE_SHIFT) === WHITESPACE$1) {
+	                return this.currentToken > 1
+	                    ? this.offsetAndType[this.currentToken - 2] & OFFSET_MASK
+	                    : this.firstCharOffset;
+	            }
+	        }
+	        return this.tokenStart;
+	    },
+	    getRawLength: function(startToken, endTokenType1, endTokenType2, includeTokenType2) {
+	        var cursor = startToken;
+	        var balanceEnd;
+
+	        loop:
+	        for (; cursor < this.tokenCount; cursor++) {
+	            balanceEnd = this.balance[cursor];
+
+	            // belance end points to offset before start
+	            if (balanceEnd < startToken) {
+	                break loop;
+	            }
+
+	            // check token is stop type
+	            switch (this.offsetAndType[cursor] >> TYPE_SHIFT) {
+	                case endTokenType1:
+	                    break loop;
+
+	                case endTokenType2:
+	                    if (includeTokenType2) {
+	                        cursor++;
+	                    }
+	                    break loop;
+
+	                default:
+	                    // fast forward to the end of balanced block
+	                    if (this.balance[balanceEnd] === cursor) {
+	                        cursor = balanceEnd;
+	                    }
+	            }
+
+	        }
+
+	        return cursor - this.currentToken;
+	    },
+
+	    getTokenValue: function() {
+	        return this.source.substring(this.tokenStart, this.tokenEnd);
+	    },
+	    substrToCursor: function(start) {
+	        return this.source.substring(start, this.tokenStart);
+	    },
+
+	    skipWS: function() {
+	        for (var i = this.currentToken, skipTokenCount = 0; i < this.tokenCount; i++, skipTokenCount++) {
+	            if ((this.offsetAndType[i] >> TYPE_SHIFT) !== WHITESPACE$1) {
+	                break;
+	            }
+	        }
+
+	        if (skipTokenCount > 0) {
+	            this.skip(skipTokenCount);
+	        }
+	    },
+	    skipSC: function() {
+	        while (this.tokenType === WHITESPACE$1 || this.tokenType === COMMENT$1) {
+	            this.next();
+	        }
+	    },
+	    skip: function(tokenCount) {
+	        var next = this.currentToken + tokenCount;
+
+	        if (next < this.tokenCount) {
+	            this.currentToken = next;
+	            this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;
+	            next = this.offsetAndType[next];
+	            this.tokenType = next >> TYPE_SHIFT;
+	            this.tokenEnd = next & OFFSET_MASK;
+	        } else {
+	            this.currentToken = this.tokenCount;
+	            this.next();
+	        }
+	    },
+	    next: function() {
+	        var next = this.currentToken + 1;
+
+	        if (next < this.tokenCount) {
+	            this.currentToken = next;
+	            this.tokenStart = this.tokenEnd;
+	            next = this.offsetAndType[next];
+	            this.tokenType = next >> TYPE_SHIFT;
+	            this.tokenEnd = next & OFFSET_MASK;
+	        } else {
+	            this.currentToken = this.tokenCount;
+	            this.eof = true;
+	            this.tokenType = NULL;
+	            this.tokenStart = this.tokenEnd = this.source.length;
+	        }
+	    },
+
+	    eat: function(tokenType) {
+	        if (this.tokenType !== tokenType) {
+	            var offset = this.tokenStart;
+	            var message = NAME$1[tokenType] + ' is expected';
+
+	            // tweak message and offset
+	            if (tokenType === IDENTIFIER$1) {
+	                // when identifier is expected but there is a function or url
+	                if (this.tokenType === FUNCTION$1 || this.tokenType === URL$1) {
+	                    offset = this.tokenEnd - 1;
+	                    message += ' but function found';
+	                }
+	            } else {
+	                // when test type is part of another token show error for current position + 1
+	                // e.g. eat(HYPHENMINUS) will fail on "-foo", but pointing on "-" is odd
+	                if (this.source.charCodeAt(this.tokenStart) === tokenType) {
+	                    offset = offset + 1;
+	                }
+	            }
+
+	            this.error(message, offset);
+	        }
+
+	        this.next();
+	    },
+	    eatNonWS: function(tokenType) {
+	        this.skipWS();
+	        this.eat(tokenType);
+	    },
+
+	    consume: function(tokenType) {
+	        var value = this.getTokenValue();
+
+	        this.eat(tokenType);
+
+	        return value;
+	    },
+	    consumeFunctionName: function() {
+	        var name = this.source.substring(this.tokenStart, this.tokenEnd - 1);
+
+	        this.eat(FUNCTION$1);
+
+	        return name;
+	    },
+	    consumeNonWS: function(tokenType) {
+	        this.skipWS();
+
+	        return this.consume(tokenType);
+	    },
+
+	    expectIdentifier: function(name) {
+	        if (this.tokenType !== IDENTIFIER$1 || cmpStr$1(this.source, this.tokenStart, this.tokenEnd, name) === false) {
+	            this.error('Identifier `' + name + '` is expected');
+	        }
+
+	        this.next();
+	    },
+
+	    getLocation: function(offset, filename) {
+	        if (!this.linesAnsColumnsComputed) {
+	            computeLinesAndColumns(this, this.source);
+	        }
+
+	        return {
+	            source: filename,
+	            offset: this.startOffset + offset,
+	            line: this.lines[offset],
+	            column: this.columns[offset]
+	        };
+	    },
+
+	    getLocationRange: function(start, end, filename) {
+	        if (!this.linesAnsColumnsComputed) {
+	            computeLinesAndColumns(this, this.source);
+	        }
+
+	        return {
+	            source: filename,
+	            start: {
+	                offset: this.startOffset + start,
+	                line: this.lines[start],
+	                column: this.columns[start]
+	            },
+	            end: {
+	                offset: this.startOffset + end,
+	                line: this.lines[end],
+	                column: this.columns[end]
+	            }
+	        };
+	    },
+
+	    error: function(message, offset) {
+	        var location = typeof offset !== 'undefined' && offset < this.source.length
+	            ? this.getLocation(offset)
+	            : this.eof
+	                ? findLastNonSpaceLocation$1(this)
+	                : this.getLocation(this.tokenStart);
+
+	        throw new error(
+	            message || 'Unexpected input',
+	            this.source,
+	            location.offset,
+	            location.line,
+	            location.column
+	        );
+	    },
+
+	    dump: function() {
+	        var offset = 0;
+
+	        return Array.prototype.slice.call(this.offsetAndType, 0, this.tokenCount).map(function(item, idx) {
+	            var start = offset;
+	            var end = item & OFFSET_MASK;
+
+	            offset = end;
+
+	            return {
+	                idx: idx,
+	                type: NAME$1[item >> TYPE_SHIFT],
+	                chunk: this.source.substring(start, end),
+	                balance: this.balance[idx]
+	            };
+	        }, this);
+	    }
+	};
+
+	// extend with error class
+	Tokenizer.CssSyntaxError = error;
+
+	// extend tokenizer with constants
+	Object.keys(_const).forEach(function(key) {
+	    Tokenizer[key] = _const[key];
+	});
+
+	// extend tokenizer with static methods from utils
+	Object.keys(utils).forEach(function(key) {
+	    Tokenizer[key] = utils[key];
+	});
+
+	// warm up tokenizer to elimitate code branches that never execute
+	// fix soft deoptimizations (insufficient type feedback)
+	new Tokenizer('\n\r\r\n\f<!---->//""\'\'/*\r\n\f*/1a;.\\31\t\+2{url(a);func();+1.2e3 -.4e-5 .6e+7}').getLocation();
+
+	var Tokenizer_1 = Tokenizer;
+
+	var tokenizer$1 = Tokenizer_1;
+
+	//
+	//            item        item        item        item
+	//          /------\    /------\    /------\    /------\
+	//          | data |    | data |    | data |    | data |
+	//  null <--+-prev |<---+-prev |<---+-prev |<---+-prev |
+	//          | next-+--->| next-+--->| next-+--->| next-+--> null
+	//          \------/    \------/    \------/    \------/
+	//             ^                                    ^
+	//             |                list                |
+	//             |              /------\              |
+	//             \--------------+-head |              |
+	//                            | tail-+--------------/
+	//                            \------/
+	//
+
+	function createItem(data) {
+	    return {
+	        prev: null,
+	        next: null,
+	        data: data
+	    };
+	}
+
+	var cursors = null;
+	var List = function() {
+	    this.cursor = null;
+	    this.head = null;
+	    this.tail = null;
+	};
+
+	List.createItem = createItem;
+	List.prototype.createItem = createItem;
+
+	List.prototype.getSize = function() {
+	    var size = 0;
+	    var cursor = this.head;
+
+	    while (cursor) {
+	        size++;
+	        cursor = cursor.next;
+	    }
+
+	    return size;
+	};
+
+	List.prototype.fromArray = function(array) {
+	    var cursor = null;
+
+	    this.head = null;
+
+	    for (var i = 0; i < array.length; i++) {
+	        var item = createItem(array[i]);
+
+	        if (cursor !== null) {
+	            cursor.next = item;
+	        } else {
+	            this.head = item;
+	        }
+
+	        item.prev = cursor;
+	        cursor = item;
+	    }
+
+	    this.tail = cursor;
+
+	    return this;
+	};
+
+	List.prototype.toArray = function() {
+	    var cursor = this.head;
+	    var result = [];
+
+	    while (cursor) {
+	        result.push(cursor.data);
+	        cursor = cursor.next;
+	    }
+
+	    return result;
+	};
+
+	List.prototype.toJSON = List.prototype.toArray;
+
+	List.prototype.isEmpty = function() {
+	    return this.head === null;
+	};
+
+	List.prototype.first = function() {
+	    return this.head && this.head.data;
+	};
+
+	List.prototype.last = function() {
+	    return this.tail && this.tail.data;
+	};
+
+	function allocateCursor(node, prev, next) {
+	    var cursor;
+
+	    if (cursors !== null) {
+	        cursor = cursors;
+	        cursors = cursors.cursor;
+	        cursor.prev = prev;
+	        cursor.next = next;
+	        cursor.cursor = node.cursor;
+	    } else {
+	        cursor = {
+	            prev: prev,
+	            next: next,
+	            cursor: node.cursor
+	        };
+	    }
+
+	    node.cursor = cursor;
+
+	    return cursor;
+	}
+
+	function releaseCursor(node) {
+	    var cursor = node.cursor;
+
+	    node.cursor = cursor.cursor;
+	    cursor.prev = null;
+	    cursor.next = null;
+	    cursor.cursor = cursors;
+	    cursors = cursor;
+	}
+
+	List.prototype.each = function(fn, context) {
+	    var item;
+
+	    if (context === undefined) {
+	        context = this;
+	    }
+
+	    // push cursor
+	    var cursor = allocateCursor(this, null, this.head);
+
+	    while (cursor.next !== null) {
+	        item = cursor.next;
+	        cursor.next = item.next;
+
+	        fn.call(context, item.data, item, this);
+	    }
+
+	    // pop cursor
+	    releaseCursor(this);
+	};
+
+	List.prototype.eachRight = function(fn, context) {
+	    var item;
+
+	    if (context === undefined) {
+	        context = this;
+	    }
+
+	    // push cursor
+	    var cursor = allocateCursor(this, this.tail, null);
+
+	    while (cursor.prev !== null) {
+	        item = cursor.prev;
+	        cursor.prev = item.prev;
+
+	        fn.call(context, item.data, item, this);
+	    }
+
+	    // pop cursor
+	    releaseCursor(this);
+	};
+
+	List.prototype.nextUntil = function(start, fn, context) {
+	    if (start === null) {
+	        return;
+	    }
+
+	    var item;
+
+	    if (context === undefined) {
+	        context = this;
+	    }
+
+	    // push cursor
+	    var cursor = allocateCursor(this, null, start);
+
+	    while (cursor.next !== null) {
+	        item = cursor.next;
+	        cursor.next = item.next;
+
+	        if (fn.call(context, item.data, item, this)) {
+	            break;
+	        }
+	    }
+
+	    // pop cursor
+	    releaseCursor(this);
+	};
+
+	List.prototype.prevUntil = function(start, fn, context) {
+	    if (start === null) {
+	        return;
+	    }
+
+	    var item;
+
+	    if (context === undefined) {
+	        context = this;
+	    }
+
+	    // push cursor
+	    var cursor = allocateCursor(this, start, null);
+
+	    while (cursor.prev !== null) {
+	        item = cursor.prev;
+	        cursor.prev = item.prev;
+
+	        if (fn.call(context, item.data, item, this)) {
+	            break;
+	        }
+	    }
+
+	    // pop cursor
+	    releaseCursor(this);
+	};
+
+	List.prototype.some = function(fn, context) {
+	    var cursor = this.head;
+
+	    if (context === undefined) {
+	        context = this;
+	    }
+
+	    while (cursor !== null) {
+	        if (fn.call(context, cursor.data, cursor, this)) {
+	            return true;
+	        }
+
+	        cursor = cursor.next;
+	    }
+
+	    return false;
+	};
+
+	List.prototype.map = function(fn, context) {
+	    var result = [];
+	    var cursor = this.head;
+
+	    if (context === undefined) {
+	        context = this;
+	    }
+
+	    while (cursor !== null) {
+	        result.push(fn.call(context, cursor.data, cursor, this));
+	        cursor = cursor.next;
+	    }
+
+	    return result;
+	};
+
+	List.prototype.clear = function() {
+	    this.head = null;
+	    this.tail = null;
+	};
+
+	List.prototype.copy = function() {
+	    var result = new List();
+	    var cursor = this.head;
+
+	    while (cursor !== null) {
+	        result.insert(createItem(cursor.data));
+	        cursor = cursor.next;
+	    }
+
+	    return result;
+	};
+
+	List.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {
+	    var cursor = this.cursor;
+
+	    while (cursor !== null) {
+	        if (cursor.prev === prevOld) {
+	            cursor.prev = prevNew;
+	        }
+
+	        if (cursor.next === nextOld) {
+	            cursor.next = nextNew;
+	        }
+
+	        cursor = cursor.cursor;
+	    }
+	};
+
+	List.prototype.prepend = function(item) {
+	    //      head
+	    //    ^
+	    // item
+	    this.updateCursors(null, item, this.head, item);
+
+	    // insert to the beginning of the list
+	    if (this.head !== null) {
+	        // new item <- first item
+	        this.head.prev = item;
+
+	        // new item -> first item
+	        item.next = this.head;
+	    } else {
+	        // if list has no head, then it also has no tail
+	        // in this case tail points to the new item
+	        this.tail = item;
+	    }
+
+	    // head always points to new item
+	    this.head = item;
+
+	    return this;
+	};
+
+	List.prototype.prependData = function(data) {
+	    return this.prepend(createItem(data));
+	};
+
+	List.prototype.append = function(item) {
+	    // tail
+	    //      ^
+	    //      item
+	    this.updateCursors(this.tail, item, null, item);
+
+	    // insert to the ending of the list
+	    if (this.tail !== null) {
+	        // last item -> new item
+	        this.tail.next = item;
+
+	        // last item <- new item
+	        item.prev = this.tail;
+	    } else {
+	        // if list has no tail, then it also has no head
+	        // in this case head points to new item
+	        this.head = item;
+	    }
+
+	    // tail always points to new item
+	    this.tail = item;
+
+	    return this;
+	};
+
+	List.prototype.appendData = function(data) {
+	    return this.append(createItem(data));
+	};
+
+	List.prototype.insert = function(item, before) {
+	    if (before !== undefined && before !== null) {
+	        // prev   before
+	        //      ^
+	        //     item
+	        this.updateCursors(before.prev, item, before, item);
+
+	        if (before.prev === null) {
+	            // insert to the beginning of list
+	            if (this.head !== before) {
+	                throw new Error('before doesn\'t belong to list');
+	            }
+
+	            // since head points to before therefore list doesn't empty
+	            // no need to check tail
+	            this.head = item;
+	            before.prev = item;
+	            item.next = before;
+
+	            this.updateCursors(null, item);
+	        } else {
+
+	            // insert between two items
+	            before.prev.next = item;
+	            item.prev = before.prev;
+
+	            before.prev = item;
+	            item.next = before;
+	        }
+	    } else {
+	        this.append(item);
+	    }
+	};
+
+	List.prototype.insertData = function(data, before) {
+	    this.insert(createItem(data), before);
+	};
+
+	List.prototype.remove = function(item) {
+	    //      item
+	    //       ^
+	    // prev     next
+	    this.updateCursors(item, item.prev, item, item.next);
+
+	    if (item.prev !== null) {
+	        item.prev.next = item.next;
+	    } else {
+	        if (this.head !== item) {
+	            throw new Error('item doesn\'t belong to list');
+	        }
+
+	        this.head = item.next;
+	    }
+
+	    if (item.next !== null) {
+	        item.next.prev = item.prev;
+	    } else {
+	        if (this.tail !== item) {
+	            throw new Error('item doesn\'t belong to list');
+	        }
+
+	        this.tail = item.prev;
+	    }
+
+	    item.prev = null;
+	    item.next = null;
+
+	    return item;
+	};
+
+	List.prototype.appendList = function(list) {
+	    // ignore empty lists
+	    if (list.head === null) {
+	        return;
+	    }
+
+	    this.updateCursors(this.tail, list.tail, null, list.head);
+
+	    // insert to end of the list
+	    if (this.tail !== null) {
+	        // if destination list has a tail, then it also has a head,
+	        // but head doesn't change
+
+	        // dest tail -> source head
+	        this.tail.next = list.head;
+
+	        // dest tail <- source head
+	        list.head.prev = this.tail;
+	    } else {
+	        // if list has no a tail, then it also has no a head
+	        // in this case points head to new item
+	        this.head = list.head;
+	    }
+
+	    // tail always start point to new item
+	    this.tail = list.tail;
+
+	    list.head = null;
+	    list.tail = null;
+	};
+
+	List.prototype.insertList = function(list, before) {
+	    if (before !== undefined && before !== null) {
+	        // ignore empty lists
+	        if (list.head === null) {
+	            return;
+	        }
+
+	        this.updateCursors(before.prev, list.tail, before, list.head);
+
+	        // insert in the middle of dist list
+	        if (before.prev !== null) {
+	            // before.prev <-> list.head
+	            before.prev.next = list.head;
+	            list.head.prev = before.prev;
+	        } else {
+	            this.head = list.head;
+	        }
+
+	        before.prev = list.tail;
+	        list.tail.next = before;
+
+	        list.head = null;
+	        list.tail = null;
+	    } else {
+	        this.appendList(list);
+	    }
+	};
+
+	List.prototype.replace = function(oldItem, newItemOrList) {
+	    if ('head' in newItemOrList) {
+	        this.insertList(newItemOrList, oldItem);
+	    } else {
+	        this.insert(newItemOrList, oldItem);
+	    }
+	    this.remove(oldItem);
+	};
+
+	var list = List;
+
+	var TYPE$3 = tokenizer$1.TYPE;
+	var WHITESPACE$2 = TYPE$3.WhiteSpace;
+	var COMMENT$2 = TYPE$3.Comment;
+
+	var sequence = function readSequence(recognizer) {
+	    var children = new list();
+	    var child = null;
+	    var context = {
+	        recognizer: recognizer,
+	        space: null,
+	        ignoreWS: false,
+	        ignoreWSAfter: false
+	    };
+
+	    this.scanner.skipSC();
+
+	    while (!this.scanner.eof) {
+	        switch (this.scanner.tokenType) {
+	            case COMMENT$2:
+	                this.scanner.next();
+	                continue;
+
+	            case WHITESPACE$2:
+	                if (context.ignoreWS) {
+	                    this.scanner.next();
+	                } else {
+	                    context.space = this.WhiteSpace();
+	                }
+	                continue;
+	        }
+
+	        child = recognizer.getNode.call(this, context);
+
+	        if (child === undefined) {
+	            break;
+	        }
+
+	        if (context.space !== null) {
+	            children.appendData(context.space);
+	            context.space = null;
+	        }
+
+	        children.appendData(child);
+
+	        if (context.ignoreWSAfter) {
+	            context.ignoreWSAfter = false;
+	            context.ignoreWS = true;
+	        } else {
+	            context.ignoreWS = false;
+	        }
+	    }
+
+	    return children;
+	};
+
+	var noop$1 = function() {};
+
+	function createParseContext(name) {
+	    return function() {
+	        return this[name]();
+	    };
+	}
+
+	function processConfig(config) {
+	    var parserConfig = {
+	        context: {},
+	        scope: {},
+	        atrule: {},
+	        pseudo: {}
+	    };
+
+	    if (config.parseContext) {
+	        for (var name in config.parseContext) {
+	            switch (typeof config.parseContext[name]) {
+	                case 'function':
+	                    parserConfig.context[name] = config.parseContext[name];
+	                    break;
+
+	                case 'string':
+	                    parserConfig.context[name] = createParseContext(config.parseContext[name]);
+	                    break;
+	            }
+	        }
+	    }
+
+	    if (config.scope) {
+	        for (var name in config.scope) {
+	            parserConfig.scope[name] = config.scope[name];
+	        }
+	    }
+
+	    if (config.atrule) {
+	        for (var name in config.atrule) {
+	            var atrule = config.atrule[name];
+
+	            if (atrule.parse) {
+	                parserConfig.atrule[name] = atrule.parse;
+	            }
+	        }
+	    }
+
+	    if (config.pseudo) {
+	        for (var name in config.pseudo) {
+	            var pseudo = config.pseudo[name];
+
+	            if (pseudo.parse) {
+	                parserConfig.pseudo[name] = pseudo.parse;
+	            }
+	        }
+	    }
+
+	    if (config.node) {
+	        for (var name in config.node) {
+	            parserConfig[name] = config.node[name].parse;
+	        }
+	    }
+
+	    return parserConfig;
+	}
+
+	var create = function createParser(config) {
+	    var parser = {
+	        scanner: new tokenizer$1(),
+	        filename: '<unknown>',
+	        needPositions: false,
+	        tolerant: false,
+	        onParseError: noop$1,
+	        parseAtruleExpression: true,
+	        parseSelector: true,
+	        parseValue: true,
+	        parseCustomProperty: false,
+
+	        readSequence: sequence,
+
+	        tolerantParse: function(consumer, fallback) {
+	            if (this.tolerant) {
+	                var start = this.scanner.currentToken;
+
+	                try {
+	                    return consumer.call(this);
+	                } catch (e) {
+	                    this.onParseError(e);
+	                    return fallback.call(this, start);
+	                }
+	            } else {
+	                return consumer.call(this);
+	            }
+	        },
+
+	        getLocation: function(start, end) {
+	            if (this.needPositions) {
+	                return this.scanner.getLocationRange(
+	                    start,
+	                    end,
+	                    this.filename
+	                );
+	            }
+
+	            return null;
+	        },
+	        getLocationFromList: function(list) {
+	            if (this.needPositions) {
+	                return this.scanner.getLocationRange(
+	                    list.head !== null ? list.first().loc.start.offset - this.scanner.startOffset : this.scanner.tokenStart,
+	                    list.head !== null ? list.last().loc.end.offset - this.scanner.startOffset : this.scanner.tokenStart,
+	                    this.filename
+	                );
+	            }
+
+	            return null;
+	        }
+	    };
+
+	    config = processConfig(config || {});
+	    for (var key in config) {
+	        parser[key] = config[key];
+	    }
+
+	    return function(source, options) {
+	        options = options || {};
+
+	        var context = options.context || 'default';
+	        var ast;
+
+	        parser.scanner.setSource(source, options.offset, options.line, options.column);
+	        parser.filename = options.filename || '<unknown>';
+	        parser.needPositions = Boolean(options.positions);
+	        parser.tolerant = Boolean(options.tolerant);
+	        parser.onParseError = typeof options.onParseError === 'function' ? options.onParseError : noop$1;
+	        parser.parseAtruleExpression = 'parseAtruleExpression' in options ? Boolean(options.parseAtruleExpression) : true;
+	        parser.parseSelector = 'parseSelector' in options ? Boolean(options.parseSelector) : true;
+	        parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;
+	        parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;
+
+	        if (!parser.context.hasOwnProperty(context)) {
+	            throw new Error('Unknown context `' + context + '`');
+	        }
+
+	        ast = parser.context[context].call(parser, options);
+
+	        if (!parser.scanner.eof) {
+	            parser.scanner.error();
+	        }
+
+	        // console.log(JSON.stringify(ast, null, 4));
+	        return ast;
+	    };
+	};
+
+	var cmpChar$1 = tokenizer$1.cmpChar;
+	var TYPE$4 = tokenizer$1.TYPE;
+
+	var IDENTIFIER$2 = TYPE$4.Identifier;
+	var STRING$2 = TYPE$4.String;
+	var NUMBER$2 = TYPE$4.Number;
+	var FUNCTION$2 = TYPE$4.Function;
+	var URL$2 = TYPE$4.Url;
+	var NUMBERSIGN = TYPE$4.NumberSign;
+	var LEFTPARENTHESIS$1 = TYPE$4.LeftParenthesis;
+	var LEFTSQUAREBRACKET$1 = TYPE$4.LeftSquareBracket;
+	var PLUSSIGN$2 = TYPE$4.PlusSign;
+	var HYPHENMINUS$2 = TYPE$4.HyphenMinus;
+	var COMMA = TYPE$4.Comma;
+	var SOLIDUS = TYPE$4.Solidus;
+	var ASTERISK = TYPE$4.Asterisk;
+	var PERCENTSIGN = TYPE$4.PercentSign;
+	var BACKSLASH = TYPE$4.Backslash;
+	var U = 117; // 'u'.charCodeAt(0)
+
+	var _default = function defaultRecognizer(context) {
+	    switch (this.scanner.tokenType) {
+	        case NUMBERSIGN:
+	            return this.HexColor();
+
+	        case COMMA:
+	            context.space = null;
+	            context.ignoreWSAfter = true;
+	            return this.Operator();
+
+	        case SOLIDUS:
+	        case ASTERISK:
+	        case PLUSSIGN$2:
+	        case HYPHENMINUS$2:
+	            return this.Operator();
+
+	        case LEFTPARENTHESIS$1:
+	            return this.Parentheses(this.readSequence, context.recognizer);
+
+	        case LEFTSQUAREBRACKET$1:
+	            return this.Brackets(this.readSequence, context.recognizer);
+
+	        case STRING$2:
+	            return this.String();
+
+	        case NUMBER$2:
+	            switch (this.scanner.lookupType(1)) {
+	                case PERCENTSIGN:
+	                    return this.Percentage();
+
+	                case IDENTIFIER$2:
+	                    // edge case: number with folowing \0 and \9 hack shouldn't to be a Dimension
+	                    if (cmpChar$1(this.scanner.source, this.scanner.tokenEnd, BACKSLASH)) {
+	                        return this.Number();
+	                    } else {
+	                        return this.Dimension();
+	                    }
+
+	                default:
+	                    return this.Number();
+	            }
+
+	        case FUNCTION$2:
+	            return this.Function(this.readSequence, context.recognizer);
+
+	        case URL$2:
+	            return this.Url();
+
+	        case IDENTIFIER$2:
+	            // check for unicode range, it should start with u+ or U+
+	            if (cmpChar$1(this.scanner.source, this.scanner.tokenStart, U) &&
+	                cmpChar$1(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN$2)) {
+	                return this.UnicodeRange();
+	            } else {
+	                return this.Identifier();
+	            }
+	    }
+	};
+
+	var atruleExpression = {
+	    getNode: _default
+	};
+
+	var TYPE$5 = tokenizer$1.TYPE;
+
+	var IDENTIFIER$3 = TYPE$5.Identifier;
+	var NUMBER$3 = TYPE$5.Number;
+	var NUMBERSIGN$1 = TYPE$5.NumberSign;
+	var LEFTSQUAREBRACKET$2 = TYPE$5.LeftSquareBracket;
+	var PLUSSIGN$3 = TYPE$5.PlusSign;
+	var SOLIDUS$1 = TYPE$5.Solidus;
+	var ASTERISK$1 = TYPE$5.Asterisk;
+	var FULLSTOP$2 = TYPE$5.FullStop;
+	var COLON = TYPE$5.Colon;
+	var GREATERTHANSIGN$1 = TYPE$5.GreaterThanSign;
+	var VERTICALLINE = TYPE$5.VerticalLine;
+	var TILDE = TYPE$5.Tilde;
+
+	function getNode(context) {
+	    switch (this.scanner.tokenType) {
+	        case PLUSSIGN$3:
+	        case GREATERTHANSIGN$1:
+	        case TILDE:
+	            context.space = null;
+	            context.ignoreWSAfter = true;
+	            return this.Combinator();
+
+	        case SOLIDUS$1:  // /deep/
+	            return this.Combinator();
+
+	        case FULLSTOP$2:
+	            return this.ClassSelector();
+
+	        case LEFTSQUAREBRACKET$2:
+	            return this.AttributeSelector();
+
+	        case NUMBERSIGN$1:
+	            return this.IdSelector();
+
+	        case COLON:
+	            if (this.scanner.lookupType(1) === COLON) {
+	                return this.PseudoElementSelector();
+	            } else {
+	                return this.PseudoClassSelector();
+	            }
+
+	        case IDENTIFIER$3:
+	        case ASTERISK$1:
+	        case VERTICALLINE:
+	            return this.TypeSelector();
+
+	        case NUMBER$3:
+	            return this.Percentage();
+	    }
+	}
+	var selector = {
+	    getNode: getNode
+	};
+
+	// https://drafts.csswg.org/css-images-4/#element-notation
+	// https://developer.mozilla.org/en-US/docs/Web/CSS/element
+	var element$1 = function() {
+	    this.scanner.skipSC();
+
+	    var id = this.IdSelector();
+
+	    this.scanner.skipSC();
+
+	    return new list().appendData(
+	        id
+	    );
+	};
+
+	// legacy IE function
+	// expression '(' raw ')'
+	var expression = function() {
+	    return new list().appendData(
+	        this.Raw(this.scanner.currentToken, 0, 0, false, false)
+	    );
+	};
+
+	var TYPE$6 = tokenizer$1.TYPE;
+
+	var IDENTIFIER$4 = TYPE$6.Identifier;
+	var COMMA$1 = TYPE$6.Comma;
+	var SEMICOLON = TYPE$6.Semicolon;
+	var HYPHENMINUS$3 = TYPE$6.HyphenMinus;
+	var EXCLAMATIONMARK$1 = TYPE$6.ExclamationMark;
+
+	// var '(' ident (',' <value>? )? ')'
+	var _var = function() {
+	    var children = new list();
+
+	    this.scanner.skipSC();
+
+	    var identStart = this.scanner.tokenStart;
+
+	    this.scanner.eat(HYPHENMINUS$3);
+	    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== HYPHENMINUS$3) {
+	        this.scanner.error('HyphenMinus is expected');
+	    }
+	    this.scanner.eat(IDENTIFIER$4);
+
+	    children.appendData({
+	        type: 'Identifier',
+	        loc: this.getLocation(identStart, this.scanner.tokenStart),
+	        name: this.scanner.substrToCursor(identStart)
+	    });
+
+	    this.scanner.skipSC();
+
+	    if (this.scanner.tokenType === COMMA$1) {
+	        children.appendData(this.Operator());
+	        children.appendData(this.parseCustomProperty
+	            ? this.Value(null)
+	            : this.Raw(this.scanner.currentToken, EXCLAMATIONMARK$1, SEMICOLON, false, false)
+	        );
+	    }
+
+	    return children;
+	};
+
+	var value = {
+	    getNode: _default,
+	    '-moz-element': element$1,
+	    'element': element$1,
+	    'expression': expression,
+	    'var': _var
+	};
+
+	var scope = {
+	    AtruleExpression: atruleExpression,
+	    Selector: selector,
+	    Value: value
+	};
+
+	var fontFace = {
+	    parse: {
+	        expression: null,
+	        block: function() {
+	            return this.Block(this.Declaration);
+	        }
+	    }
+	};
+
+	var TYPE$7 = tokenizer$1.TYPE;
+
+	var STRING$3 = TYPE$7.String;
+	var IDENTIFIER$5 = TYPE$7.Identifier;
+	var URL$3 = TYPE$7.Url;
+	var LEFTPARENTHESIS$2 = TYPE$7.LeftParenthesis;
+
+	var _import = {
+	    parse: {
+	        expression: function() {
+	            var children = new list();
+
+	            this.scanner.skipSC();
+
+	            switch (this.scanner.tokenType) {
+	                case STRING$3:
+	                    children.appendData(this.String());
+	                    break;
+
+	                case URL$3:
+	                    children.appendData(this.Url());
+	                    break;
+
+	                default:
+	                    this.scanner.error('String or url() is expected');
+	            }
+
+	            if (this.scanner.lookupNonWSType(0) === IDENTIFIER$5 ||
+	                this.scanner.lookupNonWSType(0) === LEFTPARENTHESIS$2) {
+	                children.appendData(this.WhiteSpace());
+	                children.appendData(this.MediaQueryList());
+	            }
+
+	            return children;
+	        },
+	        block: null
+	    }
+	};
+
+	var media = {
+	    parse: {
+	        expression: function() {
+	            return new list().appendData(
+	                this.MediaQueryList()
+	            );
+	        },
+	        block: function() {
+	            return this.Block(this.Rule);
+	        }
+	    }
+	};
+
+	var TYPE$8 = tokenizer$1.TYPE;
+	var LEFTCURLYBRACKET$1 = TYPE$8.LeftCurlyBracket;
+
+	var page = {
+	    parse: {
+	        expression: function() {
+	            if (this.scanner.lookupNonWSType(0) === LEFTCURLYBRACKET$1) {
+	                return null;
+	            }
+
+	            return new list().appendData(
+	                this.SelectorList()
+	            );
+	        },
+	        block: function() {
+	            return this.Block(this.Declaration);
+	        }
+	    }
+	};
+
+	var TYPE$9 = tokenizer$1.TYPE;
+
+	var WHITESPACE$3 = TYPE$9.WhiteSpace;
+	var COMMENT$3 = TYPE$9.Comment;
+	var IDENTIFIER$6 = TYPE$9.Identifier;
+	var FUNCTION$3 = TYPE$9.Function;
+	var LEFTPARENTHESIS$3 = TYPE$9.LeftParenthesis;
+	var HYPHENMINUS$4 = TYPE$9.HyphenMinus;
+	var COLON$1 = TYPE$9.Colon;
+
+	function consumeRaw() {
+	    return new list().appendData(
+	        this.Raw(this.scanner.currentToken, 0, 0, false, false)
+	    );
+	}
+
+	function parentheses() {
+	    var index = 0;
+
+	    this.scanner.skipSC();
+
+	    // TODO: make it simplier
+	    if (this.scanner.tokenType === IDENTIFIER$6) {
+	        index = 1;
+	    } else if (this.scanner.tokenType === HYPHENMINUS$4 &&
+	               this.scanner.lookupType(1) === IDENTIFIER$6) {
+	        index = 2;
+	    }
+
+	    if (index !== 0 && this.scanner.lookupNonWSType(index) === COLON$1) {
+	        return new list().appendData(
+	            this.Declaration()
+	        );
+	    }
+
+	    return readSequence.call(this);
+	}
+
+	function readSequence() {
+	    var children = new list();
+	    var space = null;
+	    var child;
+
+	    this.scanner.skipSC();
+
+	    scan:
+	    while (!this.scanner.eof) {
+	        switch (this.scanner.tokenType) {
+	            case WHITESPACE$3:
+	                space = this.WhiteSpace();
+	                continue;
+
+	            case COMMENT$3:
+	                this.scanner.next();
+	                continue;
+
+	            case FUNCTION$3:
+	                child = this.Function(consumeRaw, this.scope.AtruleExpression);
+	                break;
+
+	            case IDENTIFIER$6:
+	                child = this.Identifier();
+	                break;
+
+	            case LEFTPARENTHESIS$3:
+	                child = this.Parentheses(parentheses, this.scope.AtruleExpression);
+	                break;
+
+	            default:
+	                break scan;
+	        }
+
+	        if (space !== null) {
+	            children.appendData(space);
+	            space = null;
+	        }
+
+	        children.appendData(child);
+	    }
+
+	    return children;
+	}
+
+	var supports = {
+	    parse: {
+	        expression: function() {
+	            var children = readSequence.call(this);
+
+	            if (children.isEmpty()) {
+	                this.scanner.error('Condition is expected');
+	            }
+
+	            return children;
+	        },
+	        block: function() {
+	            return this.Block(this.Rule);
+	        }
+	    }
+	};
+
+	var atrule = {
+	    'font-face': fontFace,
+	    'import': _import,
+	    'media': media,
+	    'page': page,
+	    'supports': supports
+	};
+
+	var dir = {
+	    parse: function() {
+	        return new list().appendData(
+	            this.Identifier()
+	        );
+	    }
+	};
+
+	var has$1 = {
+	    parse: function() {
+	        return new list().appendData(
+	            this.SelectorList()
+	        );
+	    }
+	};
+
+	var lang = {
+	    parse: function() {
+	        return new list().appendData(
+	            this.Identifier()
+	        );
+	    }
+	};
+
+	var selectorList = {
+	    parse: function selectorList() {
+	        return new list().appendData(
+	            this.SelectorList()
+	        );
+	    }
+	};
+
+	var matches = selectorList;
+
+	var not = selectorList;
+
+	var ALLOW_OF_CLAUSE = true;
+
+	var nthWithOfClause = {
+	    parse: function() {
+	        return new list().appendData(
+	            this.Nth(ALLOW_OF_CLAUSE)
+	        );
+	    }
+	};
+
+	var nthChild = nthWithOfClause;
+
+	var nthLastChild = nthWithOfClause;
+
+	var DISALLOW_OF_CLAUSE = false;
+
+	var nth = {
+	    parse: function nth() {
+	        return new list().appendData(
+	            this.Nth(DISALLOW_OF_CLAUSE)
+	        );
+	    }
+	};
+
+	var nthLastOfType = nth;
+
+	var nthOfType = nth;
+
+	var slotted = {
+	    parse: function compoundSelector() {
+	        return new list().appendData(
+	            this.Selector()
+	        );
+	    }
+	};
+
+	var pseudo = {
+	    'dir': dir,
+	    'has': has$1,
+	    'lang': lang,
+	    'matches': matches,
+	    'not': not,
+	    'nth-child': nthChild,
+	    'nth-last-child': nthLastChild,
+	    'nth-last-of-type': nthLastOfType,
+	    'nth-of-type': nthOfType,
+	    'slotted': slotted
+	};
+
+	var cmpChar$2 = tokenizer$1.cmpChar;
+	var isNumber$2 = tokenizer$1.isNumber;
+	var TYPE$a = tokenizer$1.TYPE;
+
+	var IDENTIFIER$7 = TYPE$a.Identifier;
+	var NUMBER$4 = TYPE$a.Number;
+	var PLUSSIGN$4 = TYPE$a.PlusSign;
+	var HYPHENMINUS$5 = TYPE$a.HyphenMinus;
+	var N$3 = 110; // 'n'.charCodeAt(0)
+	var DISALLOW_SIGN = true;
+	var ALLOW_SIGN = false;
+
+	function checkTokenIsInteger(scanner, disallowSign) {
+	    var pos = scanner.tokenStart;
+
+	    if (scanner.source.charCodeAt(pos) === PLUSSIGN$4 ||
+	        scanner.source.charCodeAt(pos) === HYPHENMINUS$5) {
+	        if (disallowSign) {
+	            scanner.error();
+	        }
+	        pos++;
+	    }
+
+	    for (; pos < scanner.tokenEnd; pos++) {
+	        if (!isNumber$2(scanner.source.charCodeAt(pos))) {
+	            scanner.error('Unexpected input', pos);
+	        }
+	    }
+	}
+
+	// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb
+	var AnPlusB = {
+	    name: 'AnPlusB',
+	    structure: {
+	        a: [String, null],
+	        b: [String, null]
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var end = start;
+	        var prefix = '';
+	        var a = null;
+	        var b = null;
+
+	        if (this.scanner.tokenType === NUMBER$4 ||
+	            this.scanner.tokenType === PLUSSIGN$4) {
+	            checkTokenIsInteger(this.scanner, ALLOW_SIGN);
+	            prefix = this.scanner.getTokenValue();
+	            this.scanner.next();
+	            end = this.scanner.tokenStart;
+	        }
+
+	        if (this.scanner.tokenType === IDENTIFIER$7) {
+	            var bStart = this.scanner.tokenStart;
+
+	            if (cmpChar$2(this.scanner.source, bStart, HYPHENMINUS$5)) {
+	                if (prefix === '') {
+	                    prefix = '-';
+	                    bStart++;
+	                } else {
+	                    this.scanner.error('Unexpected hyphen minus');
+	                }
+	            }
+
+	            if (!cmpChar$2(this.scanner.source, bStart, N$3)) {
+	                this.scanner.error();
+	            }
+
+	            a = prefix === ''  ? '1'  :
+	                prefix === '+' ? '+1' :
+	                prefix === '-' ? '-1' :
+	                prefix;
+
+	            var len = this.scanner.tokenEnd - bStart;
+	            if (len > 1) {
+	                // ..n-..
+	                if (this.scanner.source.charCodeAt(bStart + 1) !== HYPHENMINUS$5) {
+	                    this.scanner.error('Unexpected input', bStart + 1);
+	                }
+
+	                if (len > 2) {
+	                    // ..n-{number}..
+	                    this.scanner.tokenStart = bStart + 2;
+	                } else {
+	                    // ..n- {number}
+	                    this.scanner.next();
+	                    this.scanner.skipSC();
+	                }
+
+	                checkTokenIsInteger(this.scanner, DISALLOW_SIGN);
+	                b = '-' + this.scanner.getTokenValue();
+	                this.scanner.next();
+	                end = this.scanner.tokenStart;
+	            } else {
+	                prefix = '';
+	                this.scanner.next();
+	                end = this.scanner.tokenStart;
+	                this.scanner.skipSC();
+
+	                if (this.scanner.tokenType === HYPHENMINUS$5 ||
+	                    this.scanner.tokenType === PLUSSIGN$4) {
+	                    prefix = this.scanner.getTokenValue();
+	                    this.scanner.next();
+	                    this.scanner.skipSC();
+	                }
+
+	                if (this.scanner.tokenType === NUMBER$4) {
+	                    checkTokenIsInteger(this.scanner, prefix !== '');
+
+	                    if (!isNumber$2(this.scanner.source.charCodeAt(this.scanner.tokenStart))) {
+	                        prefix = this.scanner.source.charAt(this.scanner.tokenStart);
+	                        this.scanner.tokenStart++;
+	                    }
+
+	                    if (prefix === '') {
+	                        // should be an operator before number
+	                        this.scanner.error();
+	                    } else if (prefix === '+') {
+	                        // plus is using by default
+	                        prefix = '';
+	                    }
+
+	                    b = prefix + this.scanner.getTokenValue();
+
+	                    this.scanner.next();
+	                    end = this.scanner.tokenStart;
+	                } else {
+	                    if (prefix) {
+	                        this.scanner.eat(NUMBER$4);
+	                    }
+	                }
+	            }
+	        } else {
+	            if (prefix === '' || prefix === '+') { // no number
+	                this.scanner.error(
+	                    'Number or identifier is expected',
+	                    this.scanner.tokenStart + (
+	                        this.scanner.tokenType === PLUSSIGN$4 ||
+	                        this.scanner.tokenType === HYPHENMINUS$5
+	                    )
+	                );
+	            }
+
+	            b = prefix;
+	        }
+
+	        return {
+	            type: 'AnPlusB',
+	            loc: this.getLocation(start, end),
+	            a: a,
+	            b: b
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        var a = node.a !== null && node.a !== undefined;
+	        var b = node.b !== null && node.b !== undefined;
+
+	        if (a) {
+	            processChunk(
+	                node.a === '+1' ? '+n' :
+	                node.a ===  '1' ?  'n' :
+	                node.a === '-1' ? '-n' :
+	                node.a + 'n'
+	            );
+
+	            if (b) {
+	                b = String(node.b);
+	                if (b.charAt(0) === '-' || b.charAt(0) === '+') {
+	                    processChunk(b.charAt(0));
+	                    processChunk(b.substr(1));
+	                } else {
+	                    processChunk('+');
+	                    processChunk(b);
+	                }
+	            }
+	        } else {
+	            processChunk(String(node.b));
+	        }
+	    }
+	};
+
+	var TYPE$b = tokenizer$1.TYPE;
+
+	var ATRULE$2 = TYPE$b.Atrule;
+	var SEMICOLON$1 = TYPE$b.Semicolon;
+	var LEFTCURLYBRACKET$2 = TYPE$b.LeftCurlyBracket;
+	var RIGHTCURLYBRACKET$1 = TYPE$b.RightCurlyBracket;
+
+	function isBlockAtrule() {
+	    for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {
+	        if (type === RIGHTCURLYBRACKET$1) {
+	            return true;
+	        }
+
+	        if (type === LEFTCURLYBRACKET$2 ||
+	            type === ATRULE$2) {
+	            return false;
+	        }
+	    }
+
+	    this.scanner.skip(offset);
+	    this.scanner.eat(RIGHTCURLYBRACKET$1);
+	}
+
+	var Atrule = {
+	    name: 'Atrule',
+	    structure: {
+	        name: String,
+	        expression: ['AtruleExpression', null],
+	        block: ['Block', null]
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var name;
+	        var nameLowerCase;
+	        var expression = null;
+	        var block = null;
+
+	        this.scanner.eat(ATRULE$2);
+
+	        name = this.scanner.substrToCursor(start + 1);
+	        nameLowerCase = name.toLowerCase();
+	        this.scanner.skipSC();
+
+	        expression = this.AtruleExpression(name);
+
+	        // turn empty AtruleExpression into null
+	        if (expression.children.head === null) {
+	            expression = null;
+	        }
+
+	        this.scanner.skipSC();
+
+	        if (this.atrule.hasOwnProperty(nameLowerCase)) {
+	            if (typeof this.atrule[nameLowerCase].block === 'function') {
+	                if (this.scanner.tokenType !== LEFTCURLYBRACKET$2) {
+	                    // FIXME: make tolerant
+	                    this.scanner.error('Curly bracket is expected');
+	                }
+
+	                block = this.atrule[nameLowerCase].block.call(this);
+	            } else {
+	                if (!this.tolerant || !this.scanner.eof) {
+	                    this.scanner.eat(SEMICOLON$1);
+	                }
+	            }
+	        } else {
+	            switch (this.scanner.tokenType) {
+	                case SEMICOLON$1:
+	                    this.scanner.next();
+	                    break;
+
+	                case LEFTCURLYBRACKET$2:
+	                    // TODO: should consume block content as Raw?
+	                    block = this.Block(isBlockAtrule.call(this) ? this.Declaration : this.Rule);
+	                    break;
+
+	                default:
+	                    if (!this.tolerant) {
+	                        this.scanner.error('Semicolon or block is expected');
+	                    }
+	            }
+	        }
+
+	        return {
+	            type: 'Atrule',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            name: name,
+	            expression: expression,
+	            block: block
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('@');
+	        processChunk(node.name);
+
+	        if (node.expression !== null) {
+	            processChunk(' ');
+	            this.generate(processChunk, node.expression);
+	        }
+
+	        if (node.block) {
+	            this.generate(processChunk, node.block);
+	        } else {
+	            processChunk(';');
+	        }
+	    },
+	    walkContext: 'atrule'
+	};
+
+	var TYPE$c = tokenizer$1.TYPE;
+	var SEMICOLON$2 = TYPE$c.Semicolon;
+	var LEFTCURLYBRACKET$3 = TYPE$c.LeftCurlyBracket;
+
+	function consumeRaw$1(startToken) {
+	    return new list().appendData(
+	        this.Raw(startToken, SEMICOLON$2, LEFTCURLYBRACKET$3, false, true)
+	    );
+	}
+
+	function consumeDefaultSequence() {
+	    return this.readSequence(this.scope.AtruleExpression);
+	}
+
+	var AtruleExpression = {
+	    name: 'AtruleExpression',
+	    structure: {
+	        children: [[]]
+	    },
+	    parse: function(name) {
+	        var children = null;
+	        var startToken = this.scanner.currentToken;
+
+	        if (name !== null) {
+	            name = name.toLowerCase();
+	        }
+
+	        if (this.parseAtruleExpression) {
+	            // custom consumer
+	            if (this.atrule.hasOwnProperty(name)) {
+	                if (typeof this.atrule[name].expression === 'function') {
+	                    children = this.tolerantParse(this.atrule[name].expression, consumeRaw$1);
+	                }
+	            } else {
+	                // default consumer
+	                this.scanner.skipSC();
+	                children = this.tolerantParse(consumeDefaultSequence, consumeRaw$1);
+	            }
+
+	            if (this.tolerant) {
+	                if (this.scanner.eof || (this.scanner.tokenType !== SEMICOLON$2 && this.scanner.tokenType !== LEFTCURLYBRACKET$3)) {
+	                    children = consumeRaw$1.call(this, startToken);
+	                }
+	            }
+	        } else {
+	            children = consumeRaw$1.call(this, startToken);
+	        }
+
+	        if (children === null) {
+	            children = new list();
+	        }
+
+	        return {
+	            type: 'AtruleExpression',
+	            loc: this.getLocationFromList(children),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.each(processChunk, node);
+	    },
+	    walkContext: 'atruleExpression'
+	};
+
+	var TYPE$d = tokenizer$1.TYPE;
+
+	var IDENTIFIER$8 = TYPE$d.Identifier;
+	var STRING$4 = TYPE$d.String;
+	var DOLLARSIGN = TYPE$d.DollarSign;
+	var ASTERISK$2 = TYPE$d.Asterisk;
+	var COLON$2 = TYPE$d.Colon;
+	var EQUALSSIGN = TYPE$d.EqualsSign;
+	var LEFTSQUAREBRACKET$3 = TYPE$d.LeftSquareBracket;
+	var RIGHTSQUAREBRACKET$1 = TYPE$d.RightSquareBracket;
+	var CIRCUMFLEXACCENT = TYPE$d.CircumflexAccent;
+	var VERTICALLINE$1 = TYPE$d.VerticalLine;
+	var TILDE$1 = TYPE$d.Tilde;
+
+	function getAttributeName() {
+	    if (this.scanner.eof) {
+	        this.scanner.error('Unexpected end of input');
+	    }
+
+	    var start = this.scanner.tokenStart;
+	    var expectIdentifier = false;
+	    var checkColon = true;
+
+	    if (this.scanner.tokenType === ASTERISK$2) {
+	        expectIdentifier = true;
+	        checkColon = false;
+	        this.scanner.next();
+	    } else if (this.scanner.tokenType !== VERTICALLINE$1) {
+	        this.scanner.eat(IDENTIFIER$8);
+	    }
+
+	    if (this.scanner.tokenType === VERTICALLINE$1) {
+	        if (this.scanner.lookupType(1) !== EQUALSSIGN) {
+	            this.scanner.next();
+	            this.scanner.eat(IDENTIFIER$8);
+	        } else if (expectIdentifier) {
+	            this.scanner.error('Identifier is expected', this.scanner.tokenEnd);
+	        }
+	    } else if (expectIdentifier) {
+	        this.scanner.error('Vertical line is expected');
+	    }
+
+	    if (checkColon && this.scanner.tokenType === COLON$2) {
+	        this.scanner.next();
+	        this.scanner.eat(IDENTIFIER$8);
+	    }
+
+	    return {
+	        type: 'Identifier',
+	        loc: this.getLocation(start, this.scanner.tokenStart),
+	        name: this.scanner.substrToCursor(start)
+	    };
+	}
+
+	function getOperator() {
+	    var start = this.scanner.tokenStart;
+	    var tokenType = this.scanner.tokenType;
+
+	    if (tokenType !== EQUALSSIGN &&        // =
+	        tokenType !== TILDE$1 &&             // ~=
+	        tokenType !== CIRCUMFLEXACCENT &&  // ^=
+	        tokenType !== DOLLARSIGN &&        // $=
+	        tokenType !== ASTERISK$2 &&          // *=
+	        tokenType !== VERTICALLINE$1         // |=
+	    ) {
+	        this.scanner.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');
+	    }
+
+	    if (tokenType === EQUALSSIGN) {
+	        this.scanner.next();
+	    } else {
+	        this.scanner.next();
+	        this.scanner.eat(EQUALSSIGN);
+	    }
+
+	    return this.scanner.substrToCursor(start);
+	}
+
+	// '[' S* attrib_name ']'
+	// '[' S* attrib_name S* attrib_matcher S* [ IDENT | STRING ] S* attrib_flags? S* ']'
+	var AttributeSelector = {
+	    name: 'AttributeSelector',
+	    structure: {
+	        name: 'Identifier',
+	        matcher: [String, null],
+	        value: ['String', 'Identifier', null],
+	        flags: [String, null]
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var name;
+	        var matcher = null;
+	        var value = null;
+	        var flags = null;
+
+	        this.scanner.eat(LEFTSQUAREBRACKET$3);
+	        this.scanner.skipSC();
+
+	        name = getAttributeName.call(this);
+	        this.scanner.skipSC();
+
+	        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET$1) {
+	            // avoid case `[name i]`
+	            if (this.scanner.tokenType !== IDENTIFIER$8) {
+	                matcher = getOperator.call(this);
+
+	                this.scanner.skipSC();
+
+	                value = this.scanner.tokenType === STRING$4
+	                    ? this.String()
+	                    : this.Identifier();
+
+	                this.scanner.skipSC();
+	            }
+
+	            // attribute flags
+	            if (this.scanner.tokenType === IDENTIFIER$8) {
+	                flags = this.scanner.getTokenValue();
+	                this.scanner.next();
+
+	                this.scanner.skipSC();
+	            }
+	        }
+
+	        this.scanner.eat(RIGHTSQUAREBRACKET$1);
+
+	        return {
+	            type: 'AttributeSelector',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            name: name,
+	            matcher: matcher,
+	            value: value,
+	            flags: flags
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        var flagsPrefix = ' ';
+
+	        processChunk('[');
+	        this.generate(processChunk, node.name);
+
+	        if (node.matcher !== null) {
+	            processChunk(node.matcher);
+
+	            if (node.value !== null) {
+	                this.generate(processChunk, node.value);
+
+	                // space between string and flags is not required
+	                if (node.value.type === 'String') {
+	                    flagsPrefix = '';
+	                }
+	            }
+	        }
+
+	        if (node.flags !== null) {
+	            processChunk(flagsPrefix);
+	            processChunk(node.flags);
+	        }
+
+	        processChunk(']');
+	    }
+	};
+
+	var TYPE$e = tokenizer$1.TYPE;
+
+	var WHITESPACE$4 = TYPE$e.WhiteSpace;
+	var COMMENT$4 = TYPE$e.Comment;
+	var SEMICOLON$3 = TYPE$e.Semicolon;
+	var ATRULE$3 = TYPE$e.Atrule;
+	var LEFTCURLYBRACKET$4 = TYPE$e.LeftCurlyBracket;
+	var RIGHTCURLYBRACKET$2 = TYPE$e.RightCurlyBracket;
+
+	function consumeRaw$2(startToken) {
+	    return this.Raw(startToken, 0, SEMICOLON$3, true, true);
+	}
+
+	var Block = {
+	    name: 'Block',
+	    structure: {
+	        children: [['Atrule', 'Rule', 'Declaration']]
+	    },
+	    parse: function(defaultConsumer) {
+	        if (!defaultConsumer) {
+	            defaultConsumer = this.Declaration;
+	        }
+
+	        var start = this.scanner.tokenStart;
+	        var children = new list();
+
+	        this.scanner.eat(LEFTCURLYBRACKET$4);
+
+	        scan:
+	        while (!this.scanner.eof) {
+	            switch (this.scanner.tokenType) {
+	                case RIGHTCURLYBRACKET$2:
+	                    break scan;
+
+	                case WHITESPACE$4:
+	                case COMMENT$4:
+	                case SEMICOLON$3:
+	                    this.scanner.next();
+	                    break;
+
+	                case ATRULE$3:
+	                    children.appendData(this.tolerantParse(this.Atrule, consumeRaw$2));
+	                    break;
+
+	                default:
+	                    children.appendData(this.tolerantParse(defaultConsumer, consumeRaw$2));
+	            }
+	        }
+
+	        if (!this.tolerant || !this.scanner.eof) {
+	            this.scanner.eat(RIGHTCURLYBRACKET$2);
+	        }
+
+	        return {
+	            type: 'Block',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('{');
+	        this.each(processChunk, node);
+	        processChunk('}');
+	    },
+	    walkContext: 'block'
+	};
+
+	var TYPE$f = tokenizer$1.TYPE;
+	var LEFTSQUAREBRACKET$4 = TYPE$f.LeftSquareBracket;
+	var RIGHTSQUAREBRACKET$2 = TYPE$f.RightSquareBracket;
+
+	// currently only Grid Layout uses square brackets, but left it universal
+	// https://drafts.csswg.org/css-grid/#track-sizing
+	// [ ident* ]
+	var Brackets = {
+	    name: 'Brackets',
+	    structure: {
+	        children: [[]]
+	    },
+	    parse: function(readSequence, recognizer) {
+	        var start = this.scanner.tokenStart;
+	        var children = null;
+
+	        this.scanner.eat(LEFTSQUAREBRACKET$4);
+	        children = readSequence.call(this, recognizer);
+	        this.scanner.eat(RIGHTSQUAREBRACKET$2);
+
+	        return {
+	            type: 'Brackets',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('[');
+	        this.each(processChunk, node);
+	        processChunk(']');
+	    }
+	};
+
+	var CDC$2 = tokenizer$1.TYPE.CDC;
+
+	var CDC_1 = {
+	    name: 'CDC',
+	    structure: [],
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+
+	        this.scanner.eat(CDC$2); // -->
+
+	        return {
+	            type: 'CDC',
+	            loc: this.getLocation(start, this.scanner.tokenStart)
+	        };
+	    },
+	    generate: function(processChunk) {
+	        processChunk('-->');
+	    }
+	};
+
+	var CDO$2 = tokenizer$1.TYPE.CDO;
+
+	var CDO_1 = {
+	    name: 'CDO',
+	    structure: [],
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+
+	        this.scanner.eat(CDO$2); // <!--
+
+	        return {
+	            type: 'CDO',
+	            loc: this.getLocation(start, this.scanner.tokenStart)
+	        };
+	    },
+	    generate: function(processChunk) {
+	        processChunk('<!--');
+	    }
+	};
+
+	var TYPE$g = tokenizer$1.TYPE;
+	var IDENTIFIER$9 = TYPE$g.Identifier;
+	var FULLSTOP$3 = TYPE$g.FullStop;
+
+	// '.' ident
+	var ClassSelector = {
+	    name: 'ClassSelector',
+	    structure: {
+	        name: String
+	    },
+	    parse: function() {
+	        this.scanner.eat(FULLSTOP$3);
+
+	        return {
+	            type: 'ClassSelector',
+	            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),
+	            name: this.scanner.consume(IDENTIFIER$9)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('.');
+	        processChunk(node.name);
+	    }
+	};
+
+	var TYPE$h = tokenizer$1.TYPE;
+
+	var PLUSSIGN$5 = TYPE$h.PlusSign;
+	var SOLIDUS$2 = TYPE$h.Solidus;
+	var GREATERTHANSIGN$2 = TYPE$h.GreaterThanSign;
+	var TILDE$2 = TYPE$h.Tilde;
+
+	// + | > | ~ | /deep/
+	var Combinator = {
+	    name: 'Combinator',
+	    structure: {
+	        name: String
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+
+	        switch (this.scanner.tokenType) {
+	            case GREATERTHANSIGN$2:
+	            case PLUSSIGN$5:
+	            case TILDE$2:
+	                this.scanner.next();
+	                break;
+
+	            case SOLIDUS$2:
+	                this.scanner.next();
+	                this.scanner.expectIdentifier('deep');
+	                this.scanner.eat(SOLIDUS$2);
+	                break;
+
+	            default:
+	                this.scanner.error('Combinator is expected');
+	        }
+
+	        return {
+	            type: 'Combinator',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            name: this.scanner.substrToCursor(start)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.name);
+	    }
+	};
+
+	var TYPE$i = tokenizer$1.TYPE;
+
+	var ASTERISK$3 = TYPE$i.Asterisk;
+	var SOLIDUS$3 = TYPE$i.Solidus;
+
+	// '/*' .* '*/'
+	var Comment = {
+	    name: 'Comment',
+	    structure: {
+	        value: String
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var end = this.scanner.tokenEnd;
+
+	        if ((end - start + 2) >= 2 &&
+	            this.scanner.source.charCodeAt(end - 2) === ASTERISK$3 &&
+	            this.scanner.source.charCodeAt(end - 1) === SOLIDUS$3) {
+	            end -= 2;
+	        }
+
+	        this.scanner.next();
+
+	        return {
+	            type: 'Comment',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            value: this.scanner.source.substring(start + 2, end)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('/*');
+	        processChunk(node.value);
+	        processChunk('*/');
+	    }
+	};
+
+	var TYPE$j = tokenizer$1.TYPE;
+
+	var IDENTIFIER$a = TYPE$j.Identifier;
+	var COLON$3 = TYPE$j.Colon;
+	var EXCLAMATIONMARK$2 = TYPE$j.ExclamationMark;
+	var SOLIDUS$4 = TYPE$j.Solidus;
+	var ASTERISK$4 = TYPE$j.Asterisk;
+	var DOLLARSIGN$1 = TYPE$j.DollarSign;
+	var HYPHENMINUS$6 = TYPE$j.HyphenMinus;
+	var SEMICOLON$4 = TYPE$j.Semicolon;
+	var RIGHTCURLYBRACKET$3 = TYPE$j.RightCurlyBracket;
+	var RIGHTPARENTHESIS$1 = TYPE$j.RightParenthesis;
+	var PLUSSIGN$6 = TYPE$j.PlusSign;
+	var NUMBERSIGN$2 = TYPE$j.NumberSign;
+
+	var Declaration = {
+	    name: 'Declaration',
+	    structure: {
+	        important: [Boolean, String],
+	        property: String,
+	        value: ['Value', 'Raw']
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var property = readProperty.call(this);
+	        var important = false;
+	        var value;
+
+	        this.scanner.skipSC();
+	        this.scanner.eat(COLON$3);
+
+	        if (isCustomProperty(property) ? this.parseCustomProperty : this.parseValue) {
+	            value = this.Value(property);
+	        } else {
+	            value = this.Raw(this.scanner.currentToken, EXCLAMATIONMARK$2, SEMICOLON$4, false, false);
+	        }
+
+	        if (this.scanner.tokenType === EXCLAMATIONMARK$2) {
+	            important = getImportant(this.scanner);
+	            this.scanner.skipSC();
+	        }
+
+	        // TODO: include or not to include semicolon to range?
+	        // if (this.scanner.tokenType === SEMICOLON) {
+	        //     this.scanner.next();
+	        // }
+
+	        if (!this.scanner.eof &&
+	            this.scanner.tokenType !== SEMICOLON$4 &&
+	            this.scanner.tokenType !== RIGHTPARENTHESIS$1 &&
+	            this.scanner.tokenType !== RIGHTCURLYBRACKET$3) {
+	            this.scanner.error();
+	        }
+
+	        return {
+	            type: 'Declaration',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            important: important,
+	            property: property,
+	            value: value
+	        };
+	    },
+	    generate: function(processChunk, node, item) {
+	        processChunk(node.property);
+	        processChunk(':');
+	        this.generate(processChunk, node.value);
+
+	        if (node.important) {
+	            processChunk(node.important === true ? '!important' : '!' + node.important);
+	        }
+
+	        if (item && item.next) {
+	            processChunk(';');
+	        }
+	    },
+	    walkContext: 'declaration'
+	};
+
+	function isCustomProperty(name) {
+	    return name.length >= 2 &&
+	           name.charCodeAt(0) === HYPHENMINUS$6 &&
+	           name.charCodeAt(1) === HYPHENMINUS$6;
+	}
+
+	function readProperty() {
+	    var start = this.scanner.tokenStart;
+	    var prefix = 0;
+
+	    // hacks
+	    switch (this.scanner.tokenType) {
+	        case ASTERISK$4:
+	        case DOLLARSIGN$1:
+	        case PLUSSIGN$6:
+	        case NUMBERSIGN$2:
+	            prefix = 1;
+	            break;
+
+	        // TODO: not sure we should support this hack
+	        case SOLIDUS$4:
+	            prefix = this.scanner.lookupType(1) === SOLIDUS$4 ? 2 : 1;
+	            break;
+	    }
+
+	    if (this.scanner.lookupType(prefix) === HYPHENMINUS$6) {
+	        prefix++;
+	    }
+
+	    if (prefix) {
+	        this.scanner.skip(prefix);
+	    }
+
+	    this.scanner.eat(IDENTIFIER$a);
+
+	    return this.scanner.substrToCursor(start);
+	}
+
+	// ! ws* important
+	function getImportant(scanner) {
+	    scanner.eat(EXCLAMATIONMARK$2);
+	    scanner.skipSC();
+
+	    var important = scanner.consume(IDENTIFIER$a);
+
+	    // store original value in case it differ from `important`
+	    // for better original source restoring and hacks like `!ie` support
+	    return important === 'important' ? true : important;
+	}
+
+	var TYPE$k = tokenizer$1.TYPE;
+
+	var WHITESPACE$5 = TYPE$k.WhiteSpace;
+	var COMMENT$5 = TYPE$k.Comment;
+	var SEMICOLON$5 = TYPE$k.Semicolon;
+
+	function consumeRaw$3(startToken) {
+	    return this.Raw(startToken, 0, SEMICOLON$5, true, true);
+	}
+
+	var DeclarationList = {
+	    name: 'DeclarationList',
+	    structure: {
+	        children: [['Declaration']]
+	    },
+	    parse: function() {
+	        var children = new list();
+
+	        scan:
+	        while (!this.scanner.eof) {
+	            switch (this.scanner.tokenType) {
+	                case WHITESPACE$5:
+	                case COMMENT$5:
+	                case SEMICOLON$5:
+	                    this.scanner.next();
+	                    break;
+
+	                default:
+	                    children.appendData(this.tolerantParse(this.Declaration, consumeRaw$3));
+	            }
+	        }
+
+	        return {
+	            type: 'DeclarationList',
+	            loc: this.getLocationFromList(children),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.each(processChunk, node);
+	    }
+	};
+
+	var NUMBER$5 = tokenizer$1.TYPE.Number;
+
+	// special reader for units to avoid adjoined IE hacks (i.e. '1px\9')
+	function readUnit(scanner) {
+	    var unit = scanner.getTokenValue();
+	    var backSlashPos = unit.indexOf('\\');
+
+	    if (backSlashPos > 0) {
+	        // patch token offset
+	        scanner.tokenStart += backSlashPos;
+
+	        // return part before backslash
+	        return unit.substring(0, backSlashPos);
+	    }
+
+	    // no backslash in unit name
+	    scanner.next();
+
+	    return unit;
+	}
+
+	// number ident
+	var Dimension = {
+	    name: 'Dimension',
+	    structure: {
+	        value: String,
+	        unit: String
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var value = this.scanner.consume(NUMBER$5);
+	        var unit = readUnit(this.scanner);
+
+	        return {
+	            type: 'Dimension',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            value: value,
+	            unit: unit
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.value);
+	        processChunk(node.unit);
+	    }
+	};
+
+	var TYPE$l = tokenizer$1.TYPE;
+	var RIGHTPARENTHESIS$2 = TYPE$l.RightParenthesis;
+
+	// <function-token> <sequence> ')'
+	var _Function = {
+	    name: 'Function',
+	    structure: {
+	        name: String,
+	        children: [[]]
+	    },
+	    parse: function(readSequence, recognizer) {
+	        var start = this.scanner.tokenStart;
+	        var name = this.scanner.consumeFunctionName();
+	        var nameLowerCase = name.toLowerCase();
+	        var children;
+
+	        children = recognizer.hasOwnProperty(nameLowerCase)
+	            ? recognizer[nameLowerCase].call(this, recognizer)
+	            : readSequence.call(this, recognizer);
+
+	        this.scanner.eat(RIGHTPARENTHESIS$2);
+
+	        return {
+	            type: 'Function',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            name: name,
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.name);
+	        processChunk('(');
+	        this.each(processChunk, node);
+	        processChunk(')');
+	    },
+	    walkContext: 'function'
+	};
+
+	var isHex$1 = tokenizer$1.isHex;
+	var TYPE$m = tokenizer$1.TYPE;
+
+	var IDENTIFIER$b = TYPE$m.Identifier;
+	var NUMBER$6 = TYPE$m.Number;
+	var NUMBERSIGN$3 = TYPE$m.NumberSign;
+
+	function consumeHexSequence(scanner, required) {
+	    if (!isHex$1(scanner.source.charCodeAt(scanner.tokenStart))) {
+	        if (required) {
+	            scanner.error('Unexpected input', scanner.tokenStart);
+	        } else {
+	            return;
+	        }
+	    }
+
+	    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {
+	        var code = scanner.source.charCodeAt(pos);
+
+	        // break on non-hex char
+	        if (!isHex$1(code)) {
+	            // break token, exclude symbol
+	            scanner.tokenStart = pos;
+	            return;
+	        }
+	    }
+
+	    // token is full hex sequence, go to next token
+	    scanner.next();
+	}
+
+	// # ident
+	var HexColor = {
+	    name: 'HexColor',
+	    structure: {
+	        value: String
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+
+	        this.scanner.eat(NUMBERSIGN$3);
+
+	        scan:
+	        switch (this.scanner.tokenType) {
+	            case NUMBER$6:
+	                consumeHexSequence(this.scanner, true);
+
+	                // if token is identifier then number consists of hex only,
+	                // try to add identifier to result
+	                if (this.scanner.tokenType === IDENTIFIER$b) {
+	                    consumeHexSequence(this.scanner, false);
+	                }
+
+	                break;
+
+	            case IDENTIFIER$b:
+	                consumeHexSequence(this.scanner, true);
+	                break;
+
+	            default:
+	                this.scanner.error('Number or identifier is expected');
+	        }
+
+	        return {
+	            type: 'HexColor',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            value: this.scanner.substrToCursor(start + 1) // skip #
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('#');
+	        processChunk(node.value);
+	    }
+	};
+
+	var TYPE$n = tokenizer$1.TYPE;
+	var IDENTIFIER$c = TYPE$n.Identifier;
+
+	var Identifier = {
+	    name: 'Identifier',
+	    structure: {
+	        name: String
+	    },
+	    parse: function() {
+	        return {
+	            type: 'Identifier',
+	            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
+	            name: this.scanner.consume(IDENTIFIER$c)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.name);
+	    }
+	};
+
+	var TYPE$o = tokenizer$1.TYPE;
+	var IDENTIFIER$d = TYPE$o.Identifier;
+	var NUMBERSIGN$4 = TYPE$o.NumberSign;
+
+	// '#' ident
+	var IdSelector = {
+	    name: 'IdSelector',
+	    structure: {
+	        name: String
+	    },
+	    parse: function() {
+	        this.scanner.eat(NUMBERSIGN$4);
+
+	        return {
+	            type: 'IdSelector',
+	            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),
+	            name: this.scanner.consume(IDENTIFIER$d)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('#');
+	        processChunk(node.name);
+	    }
+	};
+
+	var TYPE$p = tokenizer$1.TYPE;
+
+	var IDENTIFIER$e = TYPE$p.Identifier;
+	var NUMBER$7 = TYPE$p.Number;
+	var LEFTPARENTHESIS$4 = TYPE$p.LeftParenthesis;
+	var RIGHTPARENTHESIS$3 = TYPE$p.RightParenthesis;
+	var COLON$4 = TYPE$p.Colon;
+	var SOLIDUS$5 = TYPE$p.Solidus;
+
+	var MediaFeature = {
+	    name: 'MediaFeature',
+	    structure: {
+	        name: String,
+	        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var name;
+	        var value = null;
+
+	        this.scanner.eat(LEFTPARENTHESIS$4);
+	        this.scanner.skipSC();
+
+	        name = this.scanner.consume(IDENTIFIER$e);
+	        this.scanner.skipSC();
+
+	        if (this.scanner.tokenType !== RIGHTPARENTHESIS$3) {
+	            this.scanner.eat(COLON$4);
+	            this.scanner.skipSC();
+
+	            switch (this.scanner.tokenType) {
+	                case NUMBER$7:
+	                    if (this.scanner.lookupType(1) === IDENTIFIER$e) {
+	                        value = this.Dimension();
+	                    } else if (this.scanner.lookupNonWSType(1) === SOLIDUS$5) {
+	                        value = this.Ratio();
+	                    } else {
+	                        value = this.Number();
+	                    }
+
+	                    break;
+
+	                case IDENTIFIER$e:
+	                    value = this.Identifier();
+
+	                    break;
+
+	                default:
+	                    this.scanner.error('Number, dimension, ratio or identifier is expected');
+	            }
+
+	            this.scanner.skipSC();
+	        }
+
+	        this.scanner.eat(RIGHTPARENTHESIS$3);
+
+	        return {
+	            type: 'MediaFeature',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            name: name,
+	            value: value
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('(');
+	        processChunk(node.name);
+	        if (node.value !== null) {
+	            processChunk(':');
+	            this.generate(processChunk, node.value);
+	        }
+	        processChunk(')');
+	    }
+	};
+
+	var TYPE$q = tokenizer$1.TYPE;
+
+	var WHITESPACE$6 = TYPE$q.WhiteSpace;
+	var COMMENT$6 = TYPE$q.Comment;
+	var IDENTIFIER$f = TYPE$q.Identifier;
+	var LEFTPARENTHESIS$5 = TYPE$q.LeftParenthesis;
+
+	var MediaQuery = {
+	    name: 'MediaQuery',
+	    structure: {
+	        children: [['Identifier', 'MediaFeature', 'WhiteSpace']]
+	    },
+	    parse: function() {
+	        this.scanner.skipSC();
+
+	        var children = new list();
+	        var child = null;
+	        var space = null;
+
+	        scan:
+	        while (!this.scanner.eof) {
+	            switch (this.scanner.tokenType) {
+	                case COMMENT$6:
+	                    this.scanner.next();
+	                    continue;
+
+	                case WHITESPACE$6:
+	                    space = this.WhiteSpace();
+	                    continue;
+
+	                case IDENTIFIER$f:
+	                    child = this.Identifier();
+	                    break;
+
+	                case LEFTPARENTHESIS$5:
+	                    child = this.MediaFeature();
+	                    break;
+
+	                default:
+	                    break scan;
+	            }
+
+	            if (space !== null) {
+	                children.appendData(space);
+	                space = null;
+	            }
+
+	            children.appendData(child);
+	        }
+
+	        if (child === null) {
+	            this.scanner.error('Identifier or parenthesis is expected');
+	        }
+
+	        return {
+	            type: 'MediaQuery',
+	            loc: this.getLocationFromList(children),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.each(processChunk, node);
+	    }
+	};
+
+	var COMMA$2 = tokenizer$1.TYPE.Comma;
+
+	var MediaQueryList = {
+	    name: 'MediaQueryList',
+	    structure: {
+	        children: [['MediaQuery']]
+	    },
+	    parse: function(relative) {
+	        var children = new list();
+
+	        this.scanner.skipSC();
+
+	        while (!this.scanner.eof) {
+	            children.appendData(this.MediaQuery(relative));
+
+	            if (this.scanner.tokenType !== COMMA$2) {
+	                break;
+	            }
+
+	            this.scanner.next();
+	        }
+
+	        return {
+	            type: 'MediaQueryList',
+	            loc: this.getLocationFromList(children),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.eachComma(processChunk, node);
+	    }
+	};
+
+	// https://drafts.csswg.org/css-syntax-3/#the-anb-type
+	var Nth = {
+	    name: 'Nth',
+	    structure: {
+	        nth: ['AnPlusB', 'Identifier'],
+	        selector: ['SelectorList', null]
+	    },
+	    parse: function(allowOfClause) {
+	        this.scanner.skipSC();
+
+	        var start = this.scanner.tokenStart;
+	        var end = start;
+	        var selector = null;
+	        var query;
+
+	        if (this.scanner.lookupValue(0, 'odd') || this.scanner.lookupValue(0, 'even')) {
+	            query = this.Identifier();
+	        } else {
+	            query = this.AnPlusB();
+	        }
+
+	        this.scanner.skipSC();
+
+	        if (allowOfClause && this.scanner.lookupValue(0, 'of')) {
+	            this.scanner.next();
+
+	            selector = this.SelectorList();
+
+	            if (this.needPositions) {
+	                end = selector.children.last().loc.end.offset;
+	            }
+	        } else {
+	            if (this.needPositions) {
+	                end = query.loc.end.offset;
+	            }
+	        }
+
+	        return {
+	            type: 'Nth',
+	            loc: this.getLocation(start, end),
+	            nth: query,
+	            selector: selector
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.generate(processChunk, node.nth);
+	        if (node.selector !== null) {
+	            processChunk(' of ');
+	            this.generate(processChunk, node.selector);
+	        }
+	    }
+	};
+
+	var NUMBER$8 = tokenizer$1.TYPE.Number;
+
+	var _Number = {
+	    name: 'Number',
+	    structure: {
+	        value: String
+	    },
+	    parse: function() {
+	        return {
+	            type: 'Number',
+	            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
+	            value: this.scanner.consume(NUMBER$8)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.value);
+	    }
+	};
+
+	// '/' | '*' | ',' | ':' | '+' | '-'
+	var Operator = {
+	    name: 'Operator',
+	    structure: {
+	        value: String
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+
+	        this.scanner.next();
+
+	        return {
+	            type: 'Operator',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            value: this.scanner.substrToCursor(start)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.value);
+	    }
+	};
+
+	var TYPE$r = tokenizer$1.TYPE;
+	var LEFTPARENTHESIS$6 = TYPE$r.LeftParenthesis;
+	var RIGHTPARENTHESIS$4 = TYPE$r.RightParenthesis;
+
+	var Parentheses = {
+	    name: 'Parentheses',
+	    structure: {
+	        children: [[]]
+	    },
+	    parse: function(readSequence, recognizer) {
+	        var start = this.scanner.tokenStart;
+	        var children = null;
+
+	        this.scanner.eat(LEFTPARENTHESIS$6);
+	        children = readSequence.call(this, recognizer);
+	        this.scanner.eat(RIGHTPARENTHESIS$4);
+
+	        return {
+	            type: 'Parentheses',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('(');
+	        this.each(processChunk, node);
+	        processChunk(')');
+	    }
+	};
+
+	var TYPE$s = tokenizer$1.TYPE;
+
+	var NUMBER$9 = TYPE$s.Number;
+	var PERCENTSIGN$1 = TYPE$s.PercentSign;
+
+	var Percentage = {
+	    name: 'Percentage',
+	    structure: {
+	        value: String
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var number = this.scanner.consume(NUMBER$9);
+
+	        this.scanner.eat(PERCENTSIGN$1);
+
+	        return {
+	            type: 'Percentage',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            value: number
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.value);
+	        processChunk('%');
+	    }
+	};
+
+	var TYPE$t = tokenizer$1.TYPE;
+
+	var IDENTIFIER$g = TYPE$t.Identifier;
+	var FUNCTION$4 = TYPE$t.Function;
+	var COLON$5 = TYPE$t.Colon;
+	var RIGHTPARENTHESIS$5 = TYPE$t.RightParenthesis;
+
+	// : ident [ '(' .. ')' ]?
+	var PseudoClassSelector = {
+	    name: 'PseudoClassSelector',
+	    structure: {
+	        name: String,
+	        children: [['Raw'], null]
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var children = null;
+	        var name;
+	        var nameLowerCase;
+
+	        this.scanner.eat(COLON$5);
+
+	        if (this.scanner.tokenType === FUNCTION$4) {
+	            name = this.scanner.consumeFunctionName();
+	            nameLowerCase = name.toLowerCase();
+
+	            if (this.pseudo.hasOwnProperty(nameLowerCase)) {
+	                this.scanner.skipSC();
+	                children = this.pseudo[nameLowerCase].call(this);
+	                this.scanner.skipSC();
+	            } else {
+	                children = new list().appendData(
+	                    this.Raw(this.scanner.currentToken, 0, 0, false, false)
+	                );
+	            }
+
+	            this.scanner.eat(RIGHTPARENTHESIS$5);
+	        } else {
+	            name = this.scanner.consume(IDENTIFIER$g);
+	        }
+
+	        return {
+	            type: 'PseudoClassSelector',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            name: name,
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(':');
+	        processChunk(node.name);
+
+	        if (node.children !== null) {
+	            processChunk('(');
+	            this.each(processChunk, node);
+	            processChunk(')');
+	        }
+	    },
+	    walkContext: 'function'
+	};
+
+	var TYPE$u = tokenizer$1.TYPE;
+
+	var IDENTIFIER$h = TYPE$u.Identifier;
+	var FUNCTION$5 = TYPE$u.Function;
+	var COLON$6 = TYPE$u.Colon;
+	var RIGHTPARENTHESIS$6 = TYPE$u.RightParenthesis;
+
+	// :: ident [ '(' .. ')' ]?
+	var PseudoElementSelector = {
+	    name: 'PseudoElementSelector',
+	    structure: {
+	        name: String,
+	        children: [['Raw'], null]
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var children = null;
+	        var name;
+	        var nameLowerCase;
+
+	        this.scanner.eat(COLON$6);
+	        this.scanner.eat(COLON$6);
+
+	        if (this.scanner.tokenType === FUNCTION$5) {
+	            name = this.scanner.consumeFunctionName();
+	            nameLowerCase = name.toLowerCase();
+
+	            if (this.pseudo.hasOwnProperty(nameLowerCase)) {
+	                this.scanner.skipSC();
+	                children = this.pseudo[nameLowerCase].call(this);
+	                this.scanner.skipSC();
+	            } else {
+	                children = new list().appendData(
+	                    this.Raw(this.scanner.currentToken, 0, 0, false, false)
+	                );
+	            }
+
+	            this.scanner.eat(RIGHTPARENTHESIS$6);
+	        } else {
+	            name = this.scanner.consume(IDENTIFIER$h);
+	        }
+
+	        return {
+	            type: 'PseudoElementSelector',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            name: name,
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('::');
+	        processChunk(node.name);
+
+	        if (node.children !== null) {
+	            processChunk('(');
+	            this.each(processChunk, node);
+	            processChunk(')');
+	        }
+	    },
+	    walkContext: 'function'
+	};
+
+	var isNumber$3 = tokenizer$1.isNumber;
+	var TYPE$v = tokenizer$1.TYPE;
+	var NUMBER$a = TYPE$v.Number;
+	var SOLIDUS$6 = TYPE$v.Solidus;
+	var FULLSTOP$4 = TYPE$v.FullStop;
+
+	// Terms of <ratio> should to be a positive number (not zero or negative)
+	// (see https://drafts.csswg.org/mediaqueries-3/#values)
+	// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term
+	// and this is using by various sites. Therefore we relax checking on parse
+	// to test a term is unsigned number without exponent part.
+	// Additional checks may to be applied on lexer validation.
+	function consumeNumber(scanner) {
+	    var value = scanner.consumeNonWS(NUMBER$a);
+
+	    for (var i = 0; i < value.length; i++) {
+	        var code = value.charCodeAt(i);
+	        if (!isNumber$3(code) && code !== FULLSTOP$4) {
+	            scanner.error('Unsigned number is expected', scanner.tokenStart - value.length + i);
+	        }
+	    }
+
+	    if (Number(value) === 0) {
+	        scanner.error('Zero number is not allowed', scanner.tokenStart - value.length);
+	    }
+
+	    return value;
+	}
+
+	// <positive-integer> S* '/' S* <positive-integer>
+	var Ratio = {
+	    name: 'Ratio',
+	    structure: {
+	        left: String,
+	        right: String
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var left = consumeNumber(this.scanner);
+	        var right;
+
+	        this.scanner.eatNonWS(SOLIDUS$6);
+	        right = consumeNumber(this.scanner);
+
+	        return {
+	            type: 'Ratio',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            left: left,
+	            right: right
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.left);
+	        processChunk('/');
+	        processChunk(node.right);
+	    }
+	};
+
+	var Raw = {
+	    name: 'Raw',
+	    structure: {
+	        value: String
+	    },
+	    parse: function(startToken, endTokenType1, endTokenType2, includeTokenType2, excludeWhiteSpace) {
+	        var startOffset = this.scanner.getTokenStart(startToken);
+	        var endOffset;
+
+	        this.scanner.skip(
+	            this.scanner.getRawLength(
+	                startToken,
+	                endTokenType1,
+	                endTokenType2,
+	                includeTokenType2
+	            )
+	        );
+
+	        if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {
+	            endOffset = this.scanner.getOffsetExcludeWS();
+	        } else {
+	            endOffset = this.scanner.tokenStart;
+	        }
+
+	        return {
+	            type: 'Raw',
+	            loc: this.getLocation(startOffset, endOffset),
+	            value: this.scanner.source.substring(startOffset, endOffset)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.value);
+	    }
+	};
+
+	var TYPE$w = tokenizer$1.TYPE;
+
+	var LEFTCURLYBRACKET$5 = TYPE$w.LeftCurlyBracket;
+
+	function consumeRaw$4(startToken) {
+	    return this.Raw(startToken, LEFTCURLYBRACKET$5, 0, false, true);
+	}
+
+	var Rule = {
+	    name: 'Rule',
+	    structure: {
+	        selector: ['SelectorList', 'Raw'],
+	        block: ['Block']
+	    },
+	    parse: function() {
+	        var startToken = this.scanner.currentToken;
+	        var startOffset = this.scanner.tokenStart;
+	        var selector = this.parseSelector
+	            ? this.tolerantParse(this.SelectorList, consumeRaw$4)
+	            : consumeRaw$4.call(this, startToken);
+	        var block = this.Block(this.Declaration);
+
+	        return {
+	            type: 'Rule',
+	            loc: this.getLocation(startOffset, this.scanner.tokenStart),
+	            selector: selector,
+	            block: block
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.generate(processChunk, node.selector);
+	        this.generate(processChunk, node.block);
+	    },
+	    walkContext: 'rule'
+	};
+
+	var Selector = {
+	    name: 'Selector',
+	    structure: {
+	        children: [[
+	            'TypeSelector',
+	            'IdSelector',
+	            'ClassSelector',
+	            'AttributeSelector',
+	            'PseudoClassSelector',
+	            'PseudoElementSelector',
+	            'Combinator',
+	            'WhiteSpace'
+	        ]]
+	    },
+	    parse: function() {
+	        var children = this.readSequence(this.scope.Selector);
+
+	        // nothing were consumed
+	        if (children.isEmpty()) {
+	            this.scanner.error('Selector is expected');
+	        }
+
+	        return {
+	            type: 'Selector',
+	            loc: this.getLocationFromList(children),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.each(processChunk, node);
+	    }
+	};
+
+	var TYPE$x = tokenizer$1.TYPE;
+
+	var COMMA$3 = TYPE$x.Comma;
+	var LEFTCURLYBRACKET$6 = TYPE$x.LeftCurlyBracket;
+
+	var SelectorList = {
+	    name: 'SelectorList',
+	    structure: {
+	        children: [['Selector', 'Raw']]
+	    },
+	    parse: function() {
+	        var children = new list();
+
+	        while (!this.scanner.eof) {
+	            children.appendData(this.parseSelector
+	                ? this.Selector()
+	                : this.Raw(this.scanner.currentToken, COMMA$3, LEFTCURLYBRACKET$6, false, false)
+	            );
+
+	            if (this.scanner.tokenType === COMMA$3) {
+	                this.scanner.next();
+	                continue;
+	            }
+
+	            break;
+	        }
+
+	        return {
+	            type: 'SelectorList',
+	            loc: this.getLocationFromList(children),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.eachComma(processChunk, node);
+	    },
+	    walkContext: 'selector'
+	};
+
+	var STRING$5 = tokenizer$1.TYPE.String;
+
+	var _String = {
+	    name: 'String',
+	    structure: {
+	        value: String
+	    },
+	    parse: function() {
+	        return {
+	            type: 'String',
+	            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
+	            value: this.scanner.consume(STRING$5)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.value);
+	    }
+	};
+
+	var TYPE$y = tokenizer$1.TYPE;
+
+	var WHITESPACE$7 = TYPE$y.WhiteSpace;
+	var COMMENT$7 = TYPE$y.Comment;
+	var EXCLAMATIONMARK$3 = TYPE$y.ExclamationMark;
+	var ATRULE$4 = TYPE$y.Atrule;
+	var CDO$3 = TYPE$y.CDO;
+	var CDC$3 = TYPE$y.CDC;
+
+	function consumeRaw$5(startToken) {
+	    return this.Raw(startToken, 0, 0, false, false);
+	}
+
+	var StyleSheet = {
+	    name: 'StyleSheet',
+	    structure: {
+	        children: [['Comment', 'Atrule', 'Rule', 'Raw']]
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var children = new list();
+	        var child;
+
+	        scan:
+	        while (!this.scanner.eof) {
+	            switch (this.scanner.tokenType) {
+	                case WHITESPACE$7:
+	                    this.scanner.next();
+	                    continue;
+
+	                case COMMENT$7:
+	                    // ignore comments except exclamation comments (i.e. /*! .. */) on top level
+	                    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK$3) {
+	                        this.scanner.next();
+	                        continue;
+	                    }
+
+	                    child = this.Comment();
+	                    break;
+
+	                case CDO$3: // <!--
+	                    child = this.CDO();
+	                    break;
+
+	                case CDC$3: // -->
+	                    child = this.CDC();
+	                    break;
+
+	                // CSS Syntax Module Level 3
+	                // §2.2 Error handling
+	                // At the "top level" of a stylesheet, an <at-keyword-token> starts an at-rule.
+	                case ATRULE$4:
+	                    child = this.Atrule();
+	                    break;
+
+	                // Anything else starts a qualified rule ...
+	                default:
+	                    child = this.tolerantParse(this.Rule, consumeRaw$5);
+	            }
+
+	            children.appendData(child);
+	        }
+
+	        return {
+	            type: 'StyleSheet',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.each(processChunk, node);
+	    },
+	    walkContext: 'stylesheet'
+	};
+
+	var TYPE$z = tokenizer$1.TYPE;
+
+	var IDENTIFIER$i = TYPE$z.Identifier;
+	var ASTERISK$5 = TYPE$z.Asterisk;
+	var VERTICALLINE$2 = TYPE$z.VerticalLine;
+
+	function eatIdentifierOrAsterisk() {
+	    if (this.scanner.tokenType !== IDENTIFIER$i &&
+	        this.scanner.tokenType !== ASTERISK$5) {
+	        this.scanner.error('Identifier or asterisk is expected');
+	    }
+
+	    this.scanner.next();
+	}
+
+	// ident
+	// ident|ident
+	// ident|*
+	// *
+	// *|ident
+	// *|*
+	// |ident
+	// |*
+	var TypeSelector = {
+	    name: 'TypeSelector',
+	    structure: {
+	        name: String
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+
+	        if (this.scanner.tokenType === VERTICALLINE$2) {
+	            this.scanner.next();
+	            eatIdentifierOrAsterisk.call(this);
+	        } else {
+	            eatIdentifierOrAsterisk.call(this);
+
+	            if (this.scanner.tokenType === VERTICALLINE$2) {
+	                this.scanner.next();
+	                eatIdentifierOrAsterisk.call(this);
+	            }
+	        }
+
+	        return {
+	            type: 'TypeSelector',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            name: this.scanner.substrToCursor(start)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.name);
+	    }
+	};
+
+	var isHex$2 = tokenizer$1.isHex;
+	var TYPE$A = tokenizer$1.TYPE;
+
+	var IDENTIFIER$j = TYPE$A.Identifier;
+	var NUMBER$b = TYPE$A.Number;
+	var PLUSSIGN$7 = TYPE$A.PlusSign;
+	var HYPHENMINUS$7 = TYPE$A.HyphenMinus;
+	var FULLSTOP$5 = TYPE$A.FullStop;
+	var QUESTIONMARK = TYPE$A.QuestionMark;
+
+	function scanUnicodeNumber(scanner) {
+	    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {
+	        var code = scanner.source.charCodeAt(pos);
+
+	        // break on fullstop or hyperminus/plussign after exponent
+	        if (code === FULLSTOP$5 || code === PLUSSIGN$7) {
+	            // break token, exclude symbol
+	            scanner.tokenStart = pos;
+	            return false;
+	        }
+	    }
+
+	    return true;
+	}
+
+	// https://drafts.csswg.org/css-syntax-3/#urange
+	function scanUnicodeRange(scanner) {
+	    var hexStart = scanner.tokenStart + 1; // skip +
+	    var hexLength = 0;
+
+	    scan: {
+	        if (scanner.tokenType === NUMBER$b) {
+	            if (scanner.source.charCodeAt(scanner.tokenStart) !== FULLSTOP$5 && scanUnicodeNumber(scanner)) {
+	                scanner.next();
+	            } else if (scanner.source.charCodeAt(scanner.tokenStart) !== HYPHENMINUS$7) {
+	                break scan;
+	            }
+	        } else {
+	            scanner.next(); // PLUSSIGN
+	        }
+
+	        if (scanner.tokenType === HYPHENMINUS$7) {
+	            scanner.next();
+	        }
+
+	        if (scanner.tokenType === NUMBER$b) {
+	            scanner.next();
+	        }
+
+	        if (scanner.tokenType === IDENTIFIER$j) {
+	            scanner.next();
+	        }
+
+	        if (scanner.tokenStart === hexStart) {
+	            scanner.error('Unexpected input', hexStart);
+	        }
+	    }
+
+	    // validate for U+x{1,6} or U+x{1,6}-x{1,6}
+	    // where x is [0-9a-fA-F]
+	    for (var i = hexStart, wasHyphenMinus = false; i < scanner.tokenStart; i++) {
+	        var code = scanner.source.charCodeAt(i);
+
+	        if (isHex$2(code) === false && (code !== HYPHENMINUS$7 || wasHyphenMinus)) {
+	            scanner.error('Unexpected input', i);
+	        }
+
+	        if (code === HYPHENMINUS$7) {
+	            // hex sequence shouldn't be an empty
+	            if (hexLength === 0) {
+	                scanner.error('Unexpected input', i);
+	            }
+
+	            wasHyphenMinus = true;
+	            hexLength = 0;
+	        } else {
+	            hexLength++;
+
+	            // too long hex sequence
+	            if (hexLength > 6) {
+	                scanner.error('Too long hex sequence', i);
+	            }
+	        }
+
+	    }
+
+	    // check we have a non-zero sequence
+	    if (hexLength === 0) {
+	        scanner.error('Unexpected input', i - 1);
+	    }
+
+	    // U+abc???
+	    if (!wasHyphenMinus) {
+	        // consume as many U+003F QUESTION MARK (?) code points as possible
+	        for (; hexLength < 6 && !scanner.eof; scanner.next()) {
+	            if (scanner.tokenType !== QUESTIONMARK) {
+	                break;
+	            }
+
+	            hexLength++;
+	        }
+	    }
+	}
+
+	var UnicodeRange = {
+	    name: 'UnicodeRange',
+	    structure: {
+	        value: String
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+
+	        this.scanner.next(); // U or u
+	        scanUnicodeRange(this.scanner);
+
+	        return {
+	            type: 'UnicodeRange',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            value: this.scanner.substrToCursor(start)
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.value);
+	    }
+	};
+
+	var TYPE$B = tokenizer$1.TYPE;
+
+	var STRING$6 = TYPE$B.String;
+	var URL$4 = TYPE$B.Url;
+	var RAW$2 = TYPE$B.Raw;
+	var RIGHTPARENTHESIS$7 = TYPE$B.RightParenthesis;
+
+	// url '(' S* (string | raw) S* ')'
+	var Url = {
+	    name: 'Url',
+	    structure: {
+	        value: ['String', 'Raw']
+	    },
+	    parse: function() {
+	        var start = this.scanner.tokenStart;
+	        var value;
+
+	        this.scanner.eat(URL$4);
+	        this.scanner.skipSC();
+
+	        switch (this.scanner.tokenType) {
+	            case STRING$6:
+	                value = this.String();
+	                break;
+
+	            case RAW$2:
+	                value = this.Raw(this.scanner.currentToken, 0, RAW$2, true, false);
+	                break;
+
+	            default:
+	                this.scanner.error('String or Raw is expected');
+	        }
+
+	        this.scanner.skipSC();
+	        this.scanner.eat(RIGHTPARENTHESIS$7);
+
+	        return {
+	            type: 'Url',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            value: value
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk('url');
+	        processChunk('(');
+	        this.generate(processChunk, node.value);
+	        processChunk(')');
+	    }
+	};
+
+	var endsWith$1 = tokenizer$1.endsWith;
+	var TYPE$C = tokenizer$1.TYPE;
+
+	var WHITESPACE$8 = TYPE$C.WhiteSpace;
+	var COMMENT$8 = TYPE$C.Comment;
+	var FUNCTION$6 = TYPE$C.Function;
+	var COLON$7 = TYPE$C.Colon;
+	var SEMICOLON$6 = TYPE$C.Semicolon;
+	var EXCLAMATIONMARK$4 = TYPE$C.ExclamationMark;
+
+	// 'progid:' ws* 'DXImageTransform.Microsoft.' ident ws* '(' .* ')'
+	function checkProgid(scanner) {
+	    var offset = 0;
+
+	    for (var type; type = scanner.lookupType(offset); offset++) {
+	        if (type !== WHITESPACE$8 && type !== COMMENT$8) {
+	            break;
+	        }
+	    }
+
+	    if (scanner.lookupValue(offset, 'alpha(') ||
+	        scanner.lookupValue(offset, 'chroma(') ||
+	        scanner.lookupValue(offset, 'dropshadow(')) {
+	        if (scanner.lookupType(offset) !== FUNCTION$6) {
+	            return false;
+	        }
+	    } else {
+	        if (scanner.lookupValue(offset, 'progid') === false ||
+	            scanner.lookupType(offset + 1) !== COLON$7) {
+	            return false;
+	        }
+	    }
+
+	    return true;
+	}
+
+	var Value = {
+	    name: 'Value',
+	    structure: {
+	        children: [[]]
+	    },
+	    parse: function(property) {
+	        // special parser for filter property since it can contains non-standart syntax for old IE
+	        if (property !== null && endsWith$1(property, 'filter') && checkProgid(this.scanner)) {
+	            this.scanner.skipSC();
+	            return this.Raw(this.scanner.currentToken, EXCLAMATIONMARK$4, SEMICOLON$6, false, false);
+	        }
+
+	        var start = this.scanner.tokenStart;
+	        var children = this.readSequence(this.scope.Value);
+
+	        return {
+	            type: 'Value',
+	            loc: this.getLocation(start, this.scanner.tokenStart),
+	            children: children
+	        };
+	    },
+	    generate: function(processChunk, node) {
+	        this.each(processChunk, node);
+	    }
+	};
+
+	var WHITESPACE$9 = tokenizer$1.TYPE.WhiteSpace;
+	var SPACE$2 = Object.freeze({
+	    type: 'WhiteSpace',
+	    loc: null,
+	    value: ' '
+	});
+
+	var WhiteSpace = {
+	    name: 'WhiteSpace',
+	    structure: {
+	        value: String
+	    },
+	    parse: function() {
+	        this.scanner.eat(WHITESPACE$9);
+	        return SPACE$2;
+
+	        // return {
+	        //     type: 'WhiteSpace',
+	        //     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
+	        //     value: this.scanner.consume(WHITESPACE)
+	        // };
+	    },
+	    generate: function(processChunk, node) {
+	        processChunk(node.value);
+	    }
+	};
+
+	var node = {
+	    AnPlusB: AnPlusB,
+	    Atrule: Atrule,
+	    AtruleExpression: AtruleExpression,
+	    AttributeSelector: AttributeSelector,
+	    Block: Block,
+	    Brackets: Brackets,
+	    CDC: CDC_1,
+	    CDO: CDO_1,
+	    ClassSelector: ClassSelector,
+	    Combinator: Combinator,
+	    Comment: Comment,
+	    Declaration: Declaration,
+	    DeclarationList: DeclarationList,
+	    Dimension: Dimension,
+	    Function: _Function,
+	    HexColor: HexColor,
+	    Identifier: Identifier,
+	    IdSelector: IdSelector,
+	    MediaFeature: MediaFeature,
+	    MediaQuery: MediaQuery,
+	    MediaQueryList: MediaQueryList,
+	    Nth: Nth,
+	    Number: _Number,
+	    Operator: Operator,
+	    Parentheses: Parentheses,
+	    Percentage: Percentage,
+	    PseudoClassSelector: PseudoClassSelector,
+	    PseudoElementSelector: PseudoElementSelector,
+	    Ratio: Ratio,
+	    Raw: Raw,
+	    Rule: Rule,
+	    Selector: Selector,
+	    SelectorList: SelectorList,
+	    String: _String,
+	    StyleSheet: StyleSheet,
+	    TypeSelector: TypeSelector,
+	    UnicodeRange: UnicodeRange,
+	    Url: Url,
+	    Value: Value,
+	    WhiteSpace: WhiteSpace
+	};
+
+	var parser = {
+	    parseContext: {
+	        default: 'StyleSheet',
+	        stylesheet: 'StyleSheet',
+	        atrule: 'Atrule',
+	        atruleExpression: function(options) {
+	            return this.AtruleExpression(options.atrule ? String(options.atrule) : null);
+	        },
+	        mediaQueryList: 'MediaQueryList',
+	        mediaQuery: 'MediaQuery',
+	        rule: 'Rule',
+	        selectorList: 'SelectorList',
+	        selector: 'Selector',
+	        block: function() {
+	            return this.Block(this.Declaration);
+	        },
+	        declarationList: 'DeclarationList',
+	        declaration: 'Declaration',
+	        value: function(options) {
+	            return this.Value(options.property ? String(options.property) : null);
+	        }
+	    },
+	    scope: scope,
+	    atrule: atrule,
+	    pseudo: pseudo,
+	    node: node
+	};
+
+	var parser$1 = create(parser);
+
+	function walk(ast, { enter, leave }) {
+		visit(ast, null, enter, leave);
+	}
+
+	let shouldSkip = false;
+	const context = { skip: () => shouldSkip = true };
+
+	const childKeys = {};
+
+	const toString$1 = Object.prototype.toString;
+
+	function isArray$1(thing) {
+		return toString$1.call(thing) === '[object Array]';
+	}
+
+	function visit(node, parent, enter, leave, prop, index) {
+		if (!node) return;
+
+		if (enter) {
+			const _shouldSkip = shouldSkip;
+			shouldSkip = false;
+			enter.call(context, node, parent, prop, index);
+			const skipped = shouldSkip;
+			shouldSkip = _shouldSkip;
+
+			if (skipped) return;
+		}
+
+		const keys = childKeys[node.type] || (
+			childKeys[node.type] = Object.keys(node).filter(key => typeof node[key] === 'object')
+		);
+
+		for (let i = 0; i < keys.length; i += 1) {
+			const key = keys[i];
+			const value = node[key];
+
+			if (isArray$1(value)) {
+				for (let j = 0; j < value.length; j += 1) {
+					visit(value[j], node, enter, leave, key, j);
+				}
+			}
+
+			else if (value && value.type) {
+				visit(value, node, enter, leave, key, null);
+			}
+		}
+
+		if (leave) {
+			leave(node, parent, prop, index);
+		}
+	}
+
+	function read_style(parser, start, attributes) {
+	    const content_start = parser.index;
+	    const styles = parser.read_until(/<\/style>/);
+	    const content_end = parser.index;
+	    let ast;
+	    try {
+	        ast = parser$1(styles, {
+	            positions: true,
+	            offset: content_start,
+	        });
+	    }
+	    catch (err) {
+	        if (err.name === 'CssSyntaxError') {
+	            parser.error({
+	                code: `css-syntax-error`,
+	                message: err.message
+	            }, err.offset);
+	        }
+	        else {
+	            throw err;
+	        }
+	    }
+	    ast = JSON.parse(JSON.stringify(ast));
+	    // tidy up AST
+	    walk(ast, {
+	        enter: (node) => {
+	            // replace `ref:a` nodes
+	            if (node.type === 'Selector') {
+	                for (let i = 0; i < node.children.length; i += 1) {
+	                    const a = node.children[i];
+	                    const b = node.children[i + 1];
+	                    if (is_ref_selector(a, b)) {
+	                        parser.error({
+	                            code: `invalid-ref-selector`,
+	                            message: 'ref selectors are no longer supported'
+	                        }, a.loc.start.offset);
+	                    }
+	                }
+	            }
+	            if (node.loc) {
+	                node.start = node.loc.start.offset;
+	                node.end = node.loc.end.offset;
+	                delete node.loc;
+	            }
+	        }
+	    });
+	    parser.eat('</style>', true);
+	    const end = parser.index;
+	    return {
+	        start,
+	        end,
+	        attributes,
+	        children: ast.children,
+	        content: {
+	            start: content_start,
+	            end: content_end,
+	            styles,
+	        },
+	    };
+	}
+	function is_ref_selector(a, b) {
+	    if (!b)
+	        return false;
+	    return (a.type === 'TypeSelector' &&
+	        a.name === 'ref' &&
+	        b.type === 'PseudoClassSelector');
+	}
+
+	// https://dev.w3.org/html5/html-author/charref
+	var entities = {
+	    CounterClockwiseContourIntegral: 8755,
+	    ClockwiseContourIntegral: 8754,
+	    DoubleLongLeftRightArrow: 10234,
+	    DiacriticalDoubleAcute: 733,
+	    NotSquareSupersetEqual: 8931,
+	    CloseCurlyDoubleQuote: 8221,
+	    DoubleContourIntegral: 8751,
+	    FilledVerySmallSquare: 9642,
+	    NegativeVeryThinSpace: 8203,
+	    NotPrecedesSlantEqual: 8928,
+	    NotRightTriangleEqual: 8941,
+	    NotSucceedsSlantEqual: 8929,
+	    CapitalDifferentialD: 8517,
+	    DoubleLeftRightArrow: 8660,
+	    DoubleLongRightArrow: 10233,
+	    EmptyVerySmallSquare: 9643,
+	    NestedGreaterGreater: 8811,
+	    NotDoubleVerticalBar: 8742,
+	    NotLeftTriangleEqual: 8940,
+	    NotSquareSubsetEqual: 8930,
+	    OpenCurlyDoubleQuote: 8220,
+	    ReverseUpEquilibrium: 10607,
+	    DoubleLongLeftArrow: 10232,
+	    DownLeftRightVector: 10576,
+	    LeftArrowRightArrow: 8646,
+	    NegativeMediumSpace: 8203,
+	    RightArrowLeftArrow: 8644,
+	    SquareSupersetEqual: 8850,
+	    leftrightsquigarrow: 8621,
+	    DownRightTeeVector: 10591,
+	    DownRightVectorBar: 10583,
+	    LongLeftRightArrow: 10231,
+	    Longleftrightarrow: 10234,
+	    NegativeThickSpace: 8203,
+	    PrecedesSlantEqual: 8828,
+	    ReverseEquilibrium: 8651,
+	    RightDoubleBracket: 10215,
+	    RightDownTeeVector: 10589,
+	    RightDownVectorBar: 10581,
+	    RightTriangleEqual: 8885,
+	    SquareIntersection: 8851,
+	    SucceedsSlantEqual: 8829,
+	    blacktriangleright: 9656,
+	    longleftrightarrow: 10231,
+	    DoubleUpDownArrow: 8661,
+	    DoubleVerticalBar: 8741,
+	    DownLeftTeeVector: 10590,
+	    DownLeftVectorBar: 10582,
+	    FilledSmallSquare: 9724,
+	    GreaterSlantEqual: 10878,
+	    LeftDoubleBracket: 10214,
+	    LeftDownTeeVector: 10593,
+	    LeftDownVectorBar: 10585,
+	    LeftTriangleEqual: 8884,
+	    NegativeThinSpace: 8203,
+	    NotReverseElement: 8716,
+	    NotTildeFullEqual: 8775,
+	    RightAngleBracket: 10217,
+	    RightUpDownVector: 10575,
+	    SquareSubsetEqual: 8849,
+	    VerticalSeparator: 10072,
+	    blacktriangledown: 9662,
+	    blacktriangleleft: 9666,
+	    leftrightharpoons: 8651,
+	    rightleftharpoons: 8652,
+	    twoheadrightarrow: 8608,
+	    DiacriticalAcute: 180,
+	    DiacriticalGrave: 96,
+	    DiacriticalTilde: 732,
+	    DoubleRightArrow: 8658,
+	    DownArrowUpArrow: 8693,
+	    EmptySmallSquare: 9723,
+	    GreaterEqualLess: 8923,
+	    GreaterFullEqual: 8807,
+	    LeftAngleBracket: 10216,
+	    LeftUpDownVector: 10577,
+	    LessEqualGreater: 8922,
+	    NonBreakingSpace: 160,
+	    NotRightTriangle: 8939,
+	    NotSupersetEqual: 8841,
+	    RightTriangleBar: 10704,
+	    RightUpTeeVector: 10588,
+	    RightUpVectorBar: 10580,
+	    UnderParenthesis: 9181,
+	    UpArrowDownArrow: 8645,
+	    circlearrowright: 8635,
+	    downharpoonright: 8642,
+	    ntrianglerighteq: 8941,
+	    rightharpoondown: 8641,
+	    rightrightarrows: 8649,
+	    twoheadleftarrow: 8606,
+	    vartriangleright: 8883,
+	    CloseCurlyQuote: 8217,
+	    ContourIntegral: 8750,
+	    DoubleDownArrow: 8659,
+	    DoubleLeftArrow: 8656,
+	    DownRightVector: 8641,
+	    LeftRightVector: 10574,
+	    LeftTriangleBar: 10703,
+	    LeftUpTeeVector: 10592,
+	    LeftUpVectorBar: 10584,
+	    LowerRightArrow: 8600,
+	    NotGreaterEqual: 8817,
+	    NotGreaterTilde: 8821,
+	    NotLeftTriangle: 8938,
+	    OverParenthesis: 9180,
+	    RightDownVector: 8642,
+	    ShortRightArrow: 8594,
+	    UpperRightArrow: 8599,
+	    bigtriangledown: 9661,
+	    circlearrowleft: 8634,
+	    curvearrowright: 8631,
+	    downharpoonleft: 8643,
+	    leftharpoondown: 8637,
+	    leftrightarrows: 8646,
+	    nLeftrightarrow: 8654,
+	    nleftrightarrow: 8622,
+	    ntrianglelefteq: 8940,
+	    rightleftarrows: 8644,
+	    rightsquigarrow: 8605,
+	    rightthreetimes: 8908,
+	    straightepsilon: 1013,
+	    trianglerighteq: 8885,
+	    vartriangleleft: 8882,
+	    DiacriticalDot: 729,
+	    DoubleRightTee: 8872,
+	    DownLeftVector: 8637,
+	    GreaterGreater: 10914,
+	    HorizontalLine: 9472,
+	    InvisibleComma: 8291,
+	    InvisibleTimes: 8290,
+	    LeftDownVector: 8643,
+	    LeftRightArrow: 8596,
+	    Leftrightarrow: 8660,
+	    LessSlantEqual: 10877,
+	    LongRightArrow: 10230,
+	    Longrightarrow: 10233,
+	    LowerLeftArrow: 8601,
+	    NestedLessLess: 8810,
+	    NotGreaterLess: 8825,
+	    NotLessGreater: 8824,
+	    NotSubsetEqual: 8840,
+	    NotVerticalBar: 8740,
+	    OpenCurlyQuote: 8216,
+	    ReverseElement: 8715,
+	    RightTeeVector: 10587,
+	    RightVectorBar: 10579,
+	    ShortDownArrow: 8595,
+	    ShortLeftArrow: 8592,
+	    SquareSuperset: 8848,
+	    TildeFullEqual: 8773,
+	    UpperLeftArrow: 8598,
+	    ZeroWidthSpace: 8203,
+	    curvearrowleft: 8630,
+	    doublebarwedge: 8966,
+	    downdownarrows: 8650,
+	    hookrightarrow: 8618,
+	    leftleftarrows: 8647,
+	    leftrightarrow: 8596,
+	    leftthreetimes: 8907,
+	    longrightarrow: 10230,
+	    looparrowright: 8620,
+	    nshortparallel: 8742,
+	    ntriangleright: 8939,
+	    rightarrowtail: 8611,
+	    rightharpoonup: 8640,
+	    trianglelefteq: 8884,
+	    upharpoonright: 8638,
+	    ApplyFunction: 8289,
+	    DifferentialD: 8518,
+	    DoubleLeftTee: 10980,
+	    DoubleUpArrow: 8657,
+	    LeftTeeVector: 10586,
+	    LeftVectorBar: 10578,
+	    LessFullEqual: 8806,
+	    LongLeftArrow: 10229,
+	    Longleftarrow: 10232,
+	    NotTildeEqual: 8772,
+	    NotTildeTilde: 8777,
+	    Poincareplane: 8460,
+	    PrecedesEqual: 10927,
+	    PrecedesTilde: 8830,
+	    RightArrowBar: 8677,
+	    RightTeeArrow: 8614,
+	    RightTriangle: 8883,
+	    RightUpVector: 8638,
+	    SucceedsEqual: 10928,
+	    SucceedsTilde: 8831,
+	    SupersetEqual: 8839,
+	    UpEquilibrium: 10606,
+	    VerticalTilde: 8768,
+	    VeryThinSpace: 8202,
+	    bigtriangleup: 9651,
+	    blacktriangle: 9652,
+	    divideontimes: 8903,
+	    fallingdotseq: 8786,
+	    hookleftarrow: 8617,
+	    leftarrowtail: 8610,
+	    leftharpoonup: 8636,
+	    longleftarrow: 10229,
+	    looparrowleft: 8619,
+	    measuredangle: 8737,
+	    ntriangleleft: 8938,
+	    shortparallel: 8741,
+	    smallsetminus: 8726,
+	    triangleright: 9657,
+	    upharpoonleft: 8639,
+	    DownArrowBar: 10515,
+	    DownTeeArrow: 8615,
+	    ExponentialE: 8519,
+	    GreaterEqual: 8805,
+	    GreaterTilde: 8819,
+	    HilbertSpace: 8459,
+	    HumpDownHump: 8782,
+	    Intersection: 8898,
+	    LeftArrowBar: 8676,
+	    LeftTeeArrow: 8612,
+	    LeftTriangle: 8882,
+	    LeftUpVector: 8639,
+	    NotCongruent: 8802,
+	    NotLessEqual: 8816,
+	    NotLessTilde: 8820,
+	    Proportional: 8733,
+	    RightCeiling: 8969,
+	    RoundImplies: 10608,
+	    ShortUpArrow: 8593,
+	    SquareSubset: 8847,
+	    UnderBracket: 9141,
+	    VerticalLine: 124,
+	    blacklozenge: 10731,
+	    exponentiale: 8519,
+	    risingdotseq: 8787,
+	    triangledown: 9663,
+	    triangleleft: 9667,
+	    CircleMinus: 8854,
+	    CircleTimes: 8855,
+	    Equilibrium: 8652,
+	    GreaterLess: 8823,
+	    LeftCeiling: 8968,
+	    LessGreater: 8822,
+	    MediumSpace: 8287,
+	    NotPrecedes: 8832,
+	    NotSucceeds: 8833,
+	    OverBracket: 9140,
+	    RightVector: 8640,
+	    Rrightarrow: 8667,
+	    RuleDelayed: 10740,
+	    SmallCircle: 8728,
+	    SquareUnion: 8852,
+	    SubsetEqual: 8838,
+	    UpDownArrow: 8597,
+	    Updownarrow: 8661,
+	    VerticalBar: 8739,
+	    backepsilon: 1014,
+	    blacksquare: 9642,
+	    circledcirc: 8858,
+	    circleddash: 8861,
+	    curlyeqprec: 8926,
+	    curlyeqsucc: 8927,
+	    diamondsuit: 9830,
+	    eqslantless: 10901,
+	    expectation: 8496,
+	    nRightarrow: 8655,
+	    nrightarrow: 8603,
+	    preccurlyeq: 8828,
+	    precnapprox: 10937,
+	    quaternions: 8461,
+	    straightphi: 981,
+	    succcurlyeq: 8829,
+	    succnapprox: 10938,
+	    thickapprox: 8776,
+	    updownarrow: 8597,
+	    Bernoullis: 8492,
+	    CirclePlus: 8853,
+	    EqualTilde: 8770,
+	    Fouriertrf: 8497,
+	    ImaginaryI: 8520,
+	    Laplacetrf: 8466,
+	    LeftVector: 8636,
+	    Lleftarrow: 8666,
+	    NotElement: 8713,
+	    NotGreater: 8815,
+	    Proportion: 8759,
+	    RightArrow: 8594,
+	    RightFloor: 8971,
+	    Rightarrow: 8658,
+	    TildeEqual: 8771,
+	    TildeTilde: 8776,
+	    UnderBrace: 9183,
+	    UpArrowBar: 10514,
+	    UpTeeArrow: 8613,
+	    circledast: 8859,
+	    complement: 8705,
+	    curlywedge: 8911,
+	    eqslantgtr: 10902,
+	    gtreqqless: 10892,
+	    lessapprox: 10885,
+	    lesseqqgtr: 10891,
+	    lmoustache: 9136,
+	    longmapsto: 10236,
+	    mapstodown: 8615,
+	    mapstoleft: 8612,
+	    nLeftarrow: 8653,
+	    nleftarrow: 8602,
+	    precapprox: 10935,
+	    rightarrow: 8594,
+	    rmoustache: 9137,
+	    sqsubseteq: 8849,
+	    sqsupseteq: 8850,
+	    subsetneqq: 10955,
+	    succapprox: 10936,
+	    supsetneqq: 10956,
+	    upuparrows: 8648,
+	    varepsilon: 949,
+	    varnothing: 8709,
+	    Backslash: 8726,
+	    CenterDot: 183,
+	    CircleDot: 8857,
+	    Congruent: 8801,
+	    Coproduct: 8720,
+	    DoubleDot: 168,
+	    DownArrow: 8595,
+	    DownBreve: 785,
+	    Downarrow: 8659,
+	    HumpEqual: 8783,
+	    LeftArrow: 8592,
+	    LeftFloor: 8970,
+	    Leftarrow: 8656,
+	    LessTilde: 8818,
+	    Mellintrf: 8499,
+	    MinusPlus: 8723,
+	    NotCupCap: 8813,
+	    NotExists: 8708,
+	    OverBrace: 9182,
+	    PlusMinus: 177,
+	    Therefore: 8756,
+	    ThinSpace: 8201,
+	    TripleDot: 8411,
+	    UnionPlus: 8846,
+	    backprime: 8245,
+	    backsimeq: 8909,
+	    bigotimes: 10754,
+	    centerdot: 183,
+	    checkmark: 10003,
+	    complexes: 8450,
+	    dotsquare: 8865,
+	    downarrow: 8595,
+	    gtrapprox: 10886,
+	    gtreqless: 8923,
+	    heartsuit: 9829,
+	    leftarrow: 8592,
+	    lesseqgtr: 8922,
+	    nparallel: 8742,
+	    nshortmid: 8740,
+	    nsubseteq: 8840,
+	    nsupseteq: 8841,
+	    pitchfork: 8916,
+	    rationals: 8474,
+	    spadesuit: 9824,
+	    subseteqq: 10949,
+	    subsetneq: 8842,
+	    supseteqq: 10950,
+	    supsetneq: 8843,
+	    therefore: 8756,
+	    triangleq: 8796,
+	    varpropto: 8733,
+	    DDotrahd: 10513,
+	    DotEqual: 8784,
+	    Integral: 8747,
+	    LessLess: 10913,
+	    NotEqual: 8800,
+	    NotTilde: 8769,
+	    PartialD: 8706,
+	    Precedes: 8826,
+	    RightTee: 8866,
+	    Succeeds: 8827,
+	    SuchThat: 8715,
+	    Superset: 8835,
+	    Uarrocir: 10569,
+	    UnderBar: 818,
+	    andslope: 10840,
+	    angmsdaa: 10664,
+	    angmsdab: 10665,
+	    angmsdac: 10666,
+	    angmsdad: 10667,
+	    angmsdae: 10668,
+	    angmsdaf: 10669,
+	    angmsdag: 10670,
+	    angmsdah: 10671,
+	    angrtvbd: 10653,
+	    approxeq: 8778,
+	    awconint: 8755,
+	    backcong: 8780,
+	    barwedge: 8965,
+	    bbrktbrk: 9142,
+	    bigoplus: 10753,
+	    bigsqcup: 10758,
+	    biguplus: 10756,
+	    bigwedge: 8896,
+	    boxminus: 8863,
+	    boxtimes: 8864,
+	    capbrcup: 10825,
+	    circledR: 174,
+	    circledS: 9416,
+	    cirfnint: 10768,
+	    clubsuit: 9827,
+	    cupbrcap: 10824,
+	    curlyvee: 8910,
+	    cwconint: 8754,
+	    doteqdot: 8785,
+	    dotminus: 8760,
+	    drbkarow: 10512,
+	    dzigrarr: 10239,
+	    elinters: 9191,
+	    emptyset: 8709,
+	    eqvparsl: 10725,
+	    fpartint: 10765,
+	    geqslant: 10878,
+	    gesdotol: 10884,
+	    gnapprox: 10890,
+	    hksearow: 10533,
+	    hkswarow: 10534,
+	    imagline: 8464,
+	    imagpart: 8465,
+	    infintie: 10717,
+	    integers: 8484,
+	    intercal: 8890,
+	    intlarhk: 10775,
+	    laemptyv: 10676,
+	    ldrushar: 10571,
+	    leqslant: 10877,
+	    lesdotor: 10883,
+	    llcorner: 8990,
+	    lnapprox: 10889,
+	    lrcorner: 8991,
+	    lurdshar: 10570,
+	    mapstoup: 8613,
+	    multimap: 8888,
+	    naturals: 8469,
+	    otimesas: 10806,
+	    parallel: 8741,
+	    plusacir: 10787,
+	    pointint: 10773,
+	    precneqq: 10933,
+	    precnsim: 8936,
+	    profalar: 9006,
+	    profline: 8978,
+	    profsurf: 8979,
+	    raemptyv: 10675,
+	    realpart: 8476,
+	    rppolint: 10770,
+	    rtriltri: 10702,
+	    scpolint: 10771,
+	    setminus: 8726,
+	    shortmid: 8739,
+	    smeparsl: 10724,
+	    sqsubset: 8847,
+	    sqsupset: 8848,
+	    subseteq: 8838,
+	    succneqq: 10934,
+	    succnsim: 8937,
+	    supseteq: 8839,
+	    thetasym: 977,
+	    thicksim: 8764,
+	    timesbar: 10801,
+	    triangle: 9653,
+	    triminus: 10810,
+	    trpezium: 9186,
+	    ulcorner: 8988,
+	    urcorner: 8989,
+	    varkappa: 1008,
+	    varsigma: 962,
+	    vartheta: 977,
+	    Because: 8757,
+	    Cayleys: 8493,
+	    Cconint: 8752,
+	    Cedilla: 184,
+	    Diamond: 8900,
+	    DownTee: 8868,
+	    Element: 8712,
+	    Epsilon: 917,
+	    Implies: 8658,
+	    LeftTee: 8867,
+	    NewLine: 10,
+	    NoBreak: 8288,
+	    NotLess: 8814,
+	    Omicron: 927,
+	    OverBar: 175,
+	    Product: 8719,
+	    UpArrow: 8593,
+	    Uparrow: 8657,
+	    Upsilon: 933,
+	    alefsym: 8501,
+	    angrtvb: 8894,
+	    angzarr: 9084,
+	    asympeq: 8781,
+	    backsim: 8765,
+	    because: 8757,
+	    bemptyv: 10672,
+	    between: 8812,
+	    bigcirc: 9711,
+	    bigodot: 10752,
+	    bigstar: 9733,
+	    boxplus: 8862,
+	    ccupssm: 10832,
+	    cemptyv: 10674,
+	    cirscir: 10690,
+	    coloneq: 8788,
+	    congdot: 10861,
+	    cudarrl: 10552,
+	    cudarrr: 10549,
+	    cularrp: 10557,
+	    curarrm: 10556,
+	    dbkarow: 10511,
+	    ddagger: 8225,
+	    ddotseq: 10871,
+	    demptyv: 10673,
+	    diamond: 8900,
+	    digamma: 989,
+	    dotplus: 8724,
+	    dwangle: 10662,
+	    epsilon: 949,
+	    eqcolon: 8789,
+	    equivDD: 10872,
+	    gesdoto: 10882,
+	    gtquest: 10876,
+	    gtrless: 8823,
+	    harrcir: 10568,
+	    intprod: 10812,
+	    isindot: 8949,
+	    larrbfs: 10527,
+	    larrsim: 10611,
+	    lbrksld: 10639,
+	    lbrkslu: 10637,
+	    ldrdhar: 10599,
+	    lesdoto: 10881,
+	    lessdot: 8918,
+	    lessgtr: 8822,
+	    lesssim: 8818,
+	    lotimes: 10804,
+	    lozenge: 9674,
+	    ltquest: 10875,
+	    luruhar: 10598,
+	    maltese: 10016,
+	    minusdu: 10794,
+	    napprox: 8777,
+	    natural: 9838,
+	    nearrow: 8599,
+	    nexists: 8708,
+	    notinva: 8713,
+	    notinvb: 8951,
+	    notinvc: 8950,
+	    notniva: 8716,
+	    notnivb: 8958,
+	    notnivc: 8957,
+	    npolint: 10772,
+	    nsqsube: 8930,
+	    nsqsupe: 8931,
+	    nvinfin: 10718,
+	    nwarrow: 8598,
+	    olcross: 10683,
+	    omicron: 959,
+	    orderof: 8500,
+	    orslope: 10839,
+	    pertenk: 8241,
+	    planckh: 8462,
+	    pluscir: 10786,
+	    plussim: 10790,
+	    plustwo: 10791,
+	    precsim: 8830,
+	    quatint: 10774,
+	    questeq: 8799,
+	    rarrbfs: 10528,
+	    rarrsim: 10612,
+	    rbrksld: 10638,
+	    rbrkslu: 10640,
+	    rdldhar: 10601,
+	    realine: 8475,
+	    rotimes: 10805,
+	    ruluhar: 10600,
+	    searrow: 8600,
+	    simplus: 10788,
+	    simrarr: 10610,
+	    subedot: 10947,
+	    submult: 10945,
+	    subplus: 10943,
+	    subrarr: 10617,
+	    succsim: 8831,
+	    supdsub: 10968,
+	    supedot: 10948,
+	    suphsub: 10967,
+	    suplarr: 10619,
+	    supmult: 10946,
+	    supplus: 10944,
+	    swarrow: 8601,
+	    topfork: 10970,
+	    triplus: 10809,
+	    tritime: 10811,
+	    uparrow: 8593,
+	    upsilon: 965,
+	    uwangle: 10663,
+	    vzigzag: 10650,
+	    zigrarr: 8669,
+	    Aacute: 193,
+	    Abreve: 258,
+	    Agrave: 192,
+	    Assign: 8788,
+	    Atilde: 195,
+	    Barwed: 8966,
+	    Bumpeq: 8782,
+	    Cacute: 262,
+	    Ccaron: 268,
+	    Ccedil: 199,
+	    Colone: 10868,
+	    Conint: 8751,
+	    CupCap: 8781,
+	    Dagger: 8225,
+	    Dcaron: 270,
+	    DotDot: 8412,
+	    Dstrok: 272,
+	    Eacute: 201,
+	    Ecaron: 282,
+	    Egrave: 200,
+	    Exists: 8707,
+	    ForAll: 8704,
+	    Gammad: 988,
+	    Gbreve: 286,
+	    Gcedil: 290,
+	    HARDcy: 1066,
+	    Hstrok: 294,
+	    Iacute: 205,
+	    Igrave: 204,
+	    Itilde: 296,
+	    Jsercy: 1032,
+	    Kcedil: 310,
+	    Lacute: 313,
+	    Lambda: 923,
+	    Lcaron: 317,
+	    Lcedil: 315,
+	    Lmidot: 319,
+	    Lstrok: 321,
+	    Nacute: 323,
+	    Ncaron: 327,
+	    Ncedil: 325,
+	    Ntilde: 209,
+	    Oacute: 211,
+	    Odblac: 336,
+	    Ograve: 210,
+	    Oslash: 216,
+	    Otilde: 213,
+	    Otimes: 10807,
+	    Racute: 340,
+	    Rarrtl: 10518,
+	    Rcaron: 344,
+	    Rcedil: 342,
+	    SHCHcy: 1065,
+	    SOFTcy: 1068,
+	    Sacute: 346,
+	    Scaron: 352,
+	    Scedil: 350,
+	    Square: 9633,
+	    Subset: 8912,
+	    Supset: 8913,
+	    Tcaron: 356,
+	    Tcedil: 354,
+	    Tstrok: 358,
+	    Uacute: 218,
+	    Ubreve: 364,
+	    Udblac: 368,
+	    Ugrave: 217,
+	    Utilde: 360,
+	    Vdashl: 10982,
+	    Verbar: 8214,
+	    Vvdash: 8874,
+	    Yacute: 221,
+	    Zacute: 377,
+	    Zcaron: 381,
+	    aacute: 225,
+	    abreve: 259,
+	    agrave: 224,
+	    andand: 10837,
+	    angmsd: 8737,
+	    angsph: 8738,
+	    apacir: 10863,
+	    approx: 8776,
+	    atilde: 227,
+	    barvee: 8893,
+	    barwed: 8965,
+	    becaus: 8757,
+	    bernou: 8492,
+	    bigcap: 8898,
+	    bigcup: 8899,
+	    bigvee: 8897,
+	    bkarow: 10509,
+	    bottom: 8869,
+	    bowtie: 8904,
+	    boxbox: 10697,
+	    bprime: 8245,
+	    brvbar: 166,
+	    bullet: 8226,
+	    bumpeq: 8783,
+	    cacute: 263,
+	    capand: 10820,
+	    capcap: 10827,
+	    capcup: 10823,
+	    capdot: 10816,
+	    ccaron: 269,
+	    ccedil: 231,
+	    circeq: 8791,
+	    cirmid: 10991,
+	    colone: 8788,
+	    commat: 64,
+	    compfn: 8728,
+	    conint: 8750,
+	    coprod: 8720,
+	    copysr: 8471,
+	    cularr: 8630,
+	    cupcap: 10822,
+	    cupcup: 10826,
+	    cupdot: 8845,
+	    curarr: 8631,
+	    curren: 164,
+	    cylcty: 9005,
+	    dagger: 8224,
+	    daleth: 8504,
+	    dcaron: 271,
+	    dfisht: 10623,
+	    divide: 247,
+	    divonx: 8903,
+	    dlcorn: 8990,
+	    dlcrop: 8973,
+	    dollar: 36,
+	    drcorn: 8991,
+	    drcrop: 8972,
+	    dstrok: 273,
+	    eacute: 233,
+	    easter: 10862,
+	    ecaron: 283,
+	    ecolon: 8789,
+	    egrave: 232,
+	    egsdot: 10904,
+	    elsdot: 10903,
+	    emptyv: 8709,
+	    emsp13: 8196,
+	    emsp14: 8197,
+	    eparsl: 10723,
+	    eqcirc: 8790,
+	    equals: 61,
+	    equest: 8799,
+	    female: 9792,
+	    ffilig: 64259,
+	    ffllig: 64260,
+	    forall: 8704,
+	    frac12: 189,
+	    frac13: 8531,
+	    frac14: 188,
+	    frac15: 8533,
+	    frac16: 8537,
+	    frac18: 8539,
+	    frac23: 8532,
+	    frac25: 8534,
+	    frac34: 190,
+	    frac35: 8535,
+	    frac38: 8540,
+	    frac45: 8536,
+	    frac56: 8538,
+	    frac58: 8541,
+	    frac78: 8542,
+	    gacute: 501,
+	    gammad: 989,
+	    gbreve: 287,
+	    gesdot: 10880,
+	    gesles: 10900,
+	    gtlPar: 10645,
+	    gtrarr: 10616,
+	    gtrdot: 8919,
+	    gtrsim: 8819,
+	    hairsp: 8202,
+	    hamilt: 8459,
+	    hardcy: 1098,
+	    hearts: 9829,
+	    hellip: 8230,
+	    hercon: 8889,
+	    homtht: 8763,
+	    horbar: 8213,
+	    hslash: 8463,
+	    hstrok: 295,
+	    hybull: 8259,
+	    hyphen: 8208,
+	    iacute: 237,
+	    igrave: 236,
+	    iiiint: 10764,
+	    iinfin: 10716,
+	    incare: 8453,
+	    inodot: 305,
+	    intcal: 8890,
+	    iquest: 191,
+	    isinsv: 8947,
+	    itilde: 297,
+	    jsercy: 1112,
+	    kappav: 1008,
+	    kcedil: 311,
+	    kgreen: 312,
+	    lAtail: 10523,
+	    lacute: 314,
+	    lagran: 8466,
+	    lambda: 955,
+	    langle: 10216,
+	    larrfs: 10525,
+	    larrhk: 8617,
+	    larrlp: 8619,
+	    larrpl: 10553,
+	    larrtl: 8610,
+	    latail: 10521,
+	    lbrace: 123,
+	    lbrack: 91,
+	    lcaron: 318,
+	    lcedil: 316,
+	    ldquor: 8222,
+	    lesdot: 10879,
+	    lesges: 10899,
+	    lfisht: 10620,
+	    lfloor: 8970,
+	    lharul: 10602,
+	    llhard: 10603,
+	    lmidot: 320,
+	    lmoust: 9136,
+	    loplus: 10797,
+	    lowast: 8727,
+	    lowbar: 95,
+	    lparlt: 10643,
+	    lrhard: 10605,
+	    lsaquo: 8249,
+	    lsquor: 8218,
+	    lstrok: 322,
+	    lthree: 8907,
+	    ltimes: 8905,
+	    ltlarr: 10614,
+	    ltrPar: 10646,
+	    mapsto: 8614,
+	    marker: 9646,
+	    mcomma: 10793,
+	    midast: 42,
+	    midcir: 10992,
+	    middot: 183,
+	    minusb: 8863,
+	    minusd: 8760,
+	    mnplus: 8723,
+	    models: 8871,
+	    mstpos: 8766,
+	    nVDash: 8879,
+	    nVdash: 8878,
+	    nacute: 324,
+	    ncaron: 328,
+	    ncedil: 326,
+	    nearhk: 10532,
+	    nequiv: 8802,
+	    nesear: 10536,
+	    nexist: 8708,
+	    nltrie: 8940,
+	    nprcue: 8928,
+	    nrtrie: 8941,
+	    nsccue: 8929,
+	    nsimeq: 8772,
+	    ntilde: 241,
+	    numero: 8470,
+	    nvDash: 8877,
+	    nvHarr: 10500,
+	    nvdash: 8876,
+	    nvlArr: 10498,
+	    nvrArr: 10499,
+	    nwarhk: 10531,
+	    nwnear: 10535,
+	    oacute: 243,
+	    odblac: 337,
+	    odsold: 10684,
+	    ograve: 242,
+	    ominus: 8854,
+	    origof: 8886,
+	    oslash: 248,
+	    otilde: 245,
+	    otimes: 8855,
+	    parsim: 10995,
+	    percnt: 37,
+	    period: 46,
+	    permil: 8240,
+	    phmmat: 8499,
+	    planck: 8463,
+	    plankv: 8463,
+	    plusdo: 8724,
+	    plusdu: 10789,
+	    plusmn: 177,
+	    preceq: 10927,
+	    primes: 8473,
+	    prnsim: 8936,
+	    propto: 8733,
+	    prurel: 8880,
+	    puncsp: 8200,
+	    qprime: 8279,
+	    rAtail: 10524,
+	    racute: 341,
+	    rangle: 10217,
+	    rarrap: 10613,
+	    rarrfs: 10526,
+	    rarrhk: 8618,
+	    rarrlp: 8620,
+	    rarrpl: 10565,
+	    rarrtl: 8611,
+	    ratail: 10522,
+	    rbrace: 125,
+	    rbrack: 93,
+	    rcaron: 345,
+	    rcedil: 343,
+	    rdquor: 8221,
+	    rfisht: 10621,
+	    rfloor: 8971,
+	    rharul: 10604,
+	    rmoust: 9137,
+	    roplus: 10798,
+	    rpargt: 10644,
+	    rsaquo: 8250,
+	    rsquor: 8217,
+	    rthree: 8908,
+	    rtimes: 8906,
+	    sacute: 347,
+	    scaron: 353,
+	    scedil: 351,
+	    scnsim: 8937,
+	    searhk: 10533,
+	    seswar: 10537,
+	    sfrown: 8994,
+	    shchcy: 1097,
+	    sigmaf: 962,
+	    sigmav: 962,
+	    simdot: 10858,
+	    smashp: 10803,
+	    softcy: 1100,
+	    solbar: 9023,
+	    spades: 9824,
+	    sqsube: 8849,
+	    sqsupe: 8850,
+	    square: 9633,
+	    squarf: 9642,
+	    ssetmn: 8726,
+	    ssmile: 8995,
+	    sstarf: 8902,
+	    subdot: 10941,
+	    subset: 8834,
+	    subsim: 10951,
+	    subsub: 10965,
+	    subsup: 10963,
+	    succeq: 10928,
+	    supdot: 10942,
+	    supset: 8835,
+	    supsim: 10952,
+	    supsub: 10964,
+	    supsup: 10966,
+	    swarhk: 10534,
+	    swnwar: 10538,
+	    target: 8982,
+	    tcaron: 357,
+	    tcedil: 355,
+	    telrec: 8981,
+	    there4: 8756,
+	    thetav: 977,
+	    thinsp: 8201,
+	    thksim: 8764,
+	    timesb: 8864,
+	    timesd: 10800,
+	    topbot: 9014,
+	    topcir: 10993,
+	    tprime: 8244,
+	    tridot: 9708,
+	    tstrok: 359,
+	    uacute: 250,
+	    ubreve: 365,
+	    udblac: 369,
+	    ufisht: 10622,
+	    ugrave: 249,
+	    ulcorn: 8988,
+	    ulcrop: 8975,
+	    urcorn: 8989,
+	    urcrop: 8974,
+	    utilde: 361,
+	    vangrt: 10652,
+	    varphi: 966,
+	    varrho: 1009,
+	    veebar: 8891,
+	    vellip: 8942,
+	    verbar: 124,
+	    wedbar: 10847,
+	    wedgeq: 8793,
+	    weierp: 8472,
+	    wreath: 8768,
+	    xoplus: 10753,
+	    xotime: 10754,
+	    xsqcup: 10758,
+	    xuplus: 10756,
+	    xwedge: 8896,
+	    yacute: 253,
+	    zacute: 378,
+	    zcaron: 382,
+	    zeetrf: 8488,
+	    AElig: 198,
+	    Acirc: 194,
+	    Alpha: 913,
+	    Amacr: 256,
+	    Aogon: 260,
+	    Aring: 197,
+	    Breve: 728,
+	    Ccirc: 264,
+	    Colon: 8759,
+	    Cross: 10799,
+	    Dashv: 10980,
+	    Delta: 916,
+	    Ecirc: 202,
+	    Emacr: 274,
+	    Eogon: 280,
+	    Equal: 10869,
+	    Gamma: 915,
+	    Gcirc: 284,
+	    Hacek: 711,
+	    Hcirc: 292,
+	    IJlig: 306,
+	    Icirc: 206,
+	    Imacr: 298,
+	    Iogon: 302,
+	    Iukcy: 1030,
+	    Jcirc: 308,
+	    Jukcy: 1028,
+	    Kappa: 922,
+	    OElig: 338,
+	    Ocirc: 212,
+	    Omacr: 332,
+	    Omega: 937,
+	    Prime: 8243,
+	    RBarr: 10512,
+	    Scirc: 348,
+	    Sigma: 931,
+	    THORN: 222,
+	    TRADE: 8482,
+	    TSHcy: 1035,
+	    Theta: 920,
+	    Tilde: 8764,
+	    Ubrcy: 1038,
+	    Ucirc: 219,
+	    Umacr: 362,
+	    Union: 8899,
+	    Uogon: 370,
+	    UpTee: 8869,
+	    Uring: 366,
+	    VDash: 8875,
+	    Vdash: 8873,
+	    Wcirc: 372,
+	    Wedge: 8896,
+	    Ycirc: 374,
+	    acirc: 226,
+	    acute: 180,
+	    aelig: 230,
+	    aleph: 8501,
+	    alpha: 945,
+	    amacr: 257,
+	    amalg: 10815,
+	    angle: 8736,
+	    angrt: 8735,
+	    angst: 8491,
+	    aogon: 261,
+	    aring: 229,
+	    asymp: 8776,
+	    awint: 10769,
+	    bcong: 8780,
+	    bdquo: 8222,
+	    bepsi: 1014,
+	    blank: 9251,
+	    blk12: 9618,
+	    blk14: 9617,
+	    blk34: 9619,
+	    block: 9608,
+	    boxDL: 9559,
+	    boxDR: 9556,
+	    boxDl: 9558,
+	    boxDr: 9555,
+	    boxHD: 9574,
+	    boxHU: 9577,
+	    boxHd: 9572,
+	    boxHu: 9575,
+	    boxUL: 9565,
+	    boxUR: 9562,
+	    boxUl: 9564,
+	    boxUr: 9561,
+	    boxVH: 9580,
+	    boxVL: 9571,
+	    boxVR: 9568,
+	    boxVh: 9579,
+	    boxVl: 9570,
+	    boxVr: 9567,
+	    boxdL: 9557,
+	    boxdR: 9554,
+	    boxdl: 9488,
+	    boxdr: 9484,
+	    boxhD: 9573,
+	    boxhU: 9576,
+	    boxhd: 9516,
+	    boxhu: 9524,
+	    boxuL: 9563,
+	    boxuR: 9560,
+	    boxul: 9496,
+	    boxur: 9492,
+	    boxvH: 9578,
+	    boxvL: 9569,
+	    boxvR: 9566,
+	    boxvh: 9532,
+	    boxvl: 9508,
+	    boxvr: 9500,
+	    breve: 728,
+	    bsemi: 8271,
+	    bsime: 8909,
+	    bsolb: 10693,
+	    bumpE: 10926,
+	    bumpe: 8783,
+	    caret: 8257,
+	    caron: 711,
+	    ccaps: 10829,
+	    ccirc: 265,
+	    ccups: 10828,
+	    cedil: 184,
+	    check: 10003,
+	    clubs: 9827,
+	    colon: 58,
+	    comma: 44,
+	    crarr: 8629,
+	    cross: 10007,
+	    csube: 10961,
+	    csupe: 10962,
+	    ctdot: 8943,
+	    cuepr: 8926,
+	    cuesc: 8927,
+	    cupor: 10821,
+	    cuvee: 8910,
+	    cuwed: 8911,
+	    cwint: 8753,
+	    dashv: 8867,
+	    dblac: 733,
+	    ddarr: 8650,
+	    delta: 948,
+	    dharl: 8643,
+	    dharr: 8642,
+	    diams: 9830,
+	    disin: 8946,
+	    doteq: 8784,
+	    dtdot: 8945,
+	    dtrif: 9662,
+	    duarr: 8693,
+	    duhar: 10607,
+	    eDDot: 10871,
+	    ecirc: 234,
+	    efDot: 8786,
+	    emacr: 275,
+	    empty: 8709,
+	    eogon: 281,
+	    eplus: 10865,
+	    epsiv: 949,
+	    eqsim: 8770,
+	    equiv: 8801,
+	    erDot: 8787,
+	    erarr: 10609,
+	    esdot: 8784,
+	    exist: 8707,
+	    fflig: 64256,
+	    filig: 64257,
+	    fllig: 64258,
+	    fltns: 9649,
+	    forkv: 10969,
+	    frasl: 8260,
+	    frown: 8994,
+	    gamma: 947,
+	    gcirc: 285,
+	    gescc: 10921,
+	    gimel: 8503,
+	    gneqq: 8809,
+	    gnsim: 8935,
+	    grave: 96,
+	    gsime: 10894,
+	    gsiml: 10896,
+	    gtcir: 10874,
+	    gtdot: 8919,
+	    harrw: 8621,
+	    hcirc: 293,
+	    hoarr: 8703,
+	    icirc: 238,
+	    iexcl: 161,
+	    iiint: 8749,
+	    iiota: 8489,
+	    ijlig: 307,
+	    imacr: 299,
+	    image: 8465,
+	    imath: 305,
+	    imped: 437,
+	    infin: 8734,
+	    iogon: 303,
+	    iprod: 10812,
+	    isinE: 8953,
+	    isins: 8948,
+	    isinv: 8712,
+	    iukcy: 1110,
+	    jcirc: 309,
+	    jmath: 567,
+	    jukcy: 1108,
+	    kappa: 954,
+	    lAarr: 8666,
+	    lBarr: 10510,
+	    langd: 10641,
+	    laquo: 171,
+	    larrb: 8676,
+	    lbarr: 10508,
+	    lbbrk: 10098,
+	    lbrke: 10635,
+	    lceil: 8968,
+	    ldquo: 8220,
+	    lescc: 10920,
+	    lhard: 8637,
+	    lharu: 8636,
+	    lhblk: 9604,
+	    llarr: 8647,
+	    lltri: 9722,
+	    lneqq: 8808,
+	    lnsim: 8934,
+	    loang: 10220,
+	    loarr: 8701,
+	    lobrk: 10214,
+	    lopar: 10629,
+	    lrarr: 8646,
+	    lrhar: 8651,
+	    lrtri: 8895,
+	    lsime: 10893,
+	    lsimg: 10895,
+	    lsquo: 8216,
+	    ltcir: 10873,
+	    ltdot: 8918,
+	    ltrie: 8884,
+	    ltrif: 9666,
+	    mDDot: 8762,
+	    mdash: 8212,
+	    micro: 181,
+	    minus: 8722,
+	    mumap: 8888,
+	    nabla: 8711,
+	    napos: 329,
+	    natur: 9838,
+	    ncong: 8775,
+	    ndash: 8211,
+	    neArr: 8663,
+	    nearr: 8599,
+	    ngsim: 8821,
+	    nhArr: 8654,
+	    nharr: 8622,
+	    nhpar: 10994,
+	    nlArr: 8653,
+	    nlarr: 8602,
+	    nless: 8814,
+	    nlsim: 8820,
+	    nltri: 8938,
+	    notin: 8713,
+	    notni: 8716,
+	    nprec: 8832,
+	    nrArr: 8655,
+	    nrarr: 8603,
+	    nrtri: 8939,
+	    nsime: 8772,
+	    nsmid: 8740,
+	    nspar: 8742,
+	    nsube: 8840,
+	    nsucc: 8833,
+	    nsupe: 8841,
+	    numsp: 8199,
+	    nwArr: 8662,
+	    nwarr: 8598,
+	    ocirc: 244,
+	    odash: 8861,
+	    oelig: 339,
+	    ofcir: 10687,
+	    ohbar: 10677,
+	    olarr: 8634,
+	    olcir: 10686,
+	    oline: 8254,
+	    omacr: 333,
+	    omega: 969,
+	    operp: 10681,
+	    oplus: 8853,
+	    orarr: 8635,
+	    order: 8500,
+	    ovbar: 9021,
+	    parsl: 11005,
+	    phone: 9742,
+	    plusb: 8862,
+	    pluse: 10866,
+	    pound: 163,
+	    prcue: 8828,
+	    prime: 8242,
+	    prnap: 10937,
+	    prsim: 8830,
+	    quest: 63,
+	    rAarr: 8667,
+	    rBarr: 10511,
+	    radic: 8730,
+	    rangd: 10642,
+	    range: 10661,
+	    raquo: 187,
+	    rarrb: 8677,
+	    rarrc: 10547,
+	    rarrw: 8605,
+	    ratio: 8758,
+	    rbarr: 10509,
+	    rbbrk: 10099,
+	    rbrke: 10636,
+	    rceil: 8969,
+	    rdquo: 8221,
+	    reals: 8477,
+	    rhard: 8641,
+	    rharu: 8640,
+	    rlarr: 8644,
+	    rlhar: 8652,
+	    rnmid: 10990,
+	    roang: 10221,
+	    roarr: 8702,
+	    robrk: 10215,
+	    ropar: 10630,
+	    rrarr: 8649,
+	    rsquo: 8217,
+	    rtrie: 8885,
+	    rtrif: 9656,
+	    sbquo: 8218,
+	    sccue: 8829,
+	    scirc: 349,
+	    scnap: 10938,
+	    scsim: 8831,
+	    sdotb: 8865,
+	    sdote: 10854,
+	    seArr: 8664,
+	    searr: 8600,
+	    setmn: 8726,
+	    sharp: 9839,
+	    sigma: 963,
+	    simeq: 8771,
+	    simgE: 10912,
+	    simlE: 10911,
+	    simne: 8774,
+	    slarr: 8592,
+	    smile: 8995,
+	    sqcap: 8851,
+	    sqcup: 8852,
+	    sqsub: 8847,
+	    sqsup: 8848,
+	    srarr: 8594,
+	    starf: 9733,
+	    strns: 175,
+	    subnE: 10955,
+	    subne: 8842,
+	    supnE: 10956,
+	    supne: 8843,
+	    swArr: 8665,
+	    swarr: 8601,
+	    szlig: 223,
+	    theta: 952,
+	    thkap: 8776,
+	    thorn: 254,
+	    tilde: 732,
+	    times: 215,
+	    trade: 8482,
+	    trisb: 10701,
+	    tshcy: 1115,
+	    twixt: 8812,
+	    ubrcy: 1118,
+	    ucirc: 251,
+	    udarr: 8645,
+	    udhar: 10606,
+	    uharl: 8639,
+	    uharr: 8638,
+	    uhblk: 9600,
+	    ultri: 9720,
+	    umacr: 363,
+	    uogon: 371,
+	    uplus: 8846,
+	    upsih: 978,
+	    uring: 367,
+	    urtri: 9721,
+	    utdot: 8944,
+	    utrif: 9652,
+	    uuarr: 8648,
+	    vBarv: 10985,
+	    vDash: 8872,
+	    varpi: 982,
+	    vdash: 8866,
+	    veeeq: 8794,
+	    vltri: 8882,
+	    vprop: 8733,
+	    vrtri: 8883,
+	    wcirc: 373,
+	    wedge: 8743,
+	    xcirc: 9711,
+	    xdtri: 9661,
+	    xhArr: 10234,
+	    xharr: 10231,
+	    xlArr: 10232,
+	    xlarr: 10229,
+	    xodot: 10752,
+	    xrArr: 10233,
+	    xrarr: 10230,
+	    xutri: 9651,
+	    ycirc: 375,
+	    Aopf: 120120,
+	    Ascr: 119964,
+	    Auml: 196,
+	    Barv: 10983,
+	    Beta: 914,
+	    Bopf: 120121,
+	    Bscr: 8492,
+	    CHcy: 1063,
+	    COPY: 169,
+	    Cdot: 266,
+	    Copf: 8450,
+	    Cscr: 119966,
+	    DJcy: 1026,
+	    DScy: 1029,
+	    DZcy: 1039,
+	    Darr: 8609,
+	    Dopf: 120123,
+	    Dscr: 119967,
+	    Edot: 278,
+	    Eopf: 120124,
+	    Escr: 8496,
+	    Esim: 10867,
+	    Euml: 203,
+	    Fopf: 120125,
+	    Fscr: 8497,
+	    GJcy: 1027,
+	    Gdot: 288,
+	    Gopf: 120126,
+	    Gscr: 119970,
+	    Hopf: 8461,
+	    Hscr: 8459,
+	    IEcy: 1045,
+	    IOcy: 1025,
+	    Idot: 304,
+	    Iopf: 120128,
+	    Iota: 921,
+	    Iscr: 8464,
+	    Iuml: 207,
+	    Jopf: 120129,
+	    Jscr: 119973,
+	    KHcy: 1061,
+	    KJcy: 1036,
+	    Kopf: 120130,
+	    Kscr: 119974,
+	    LJcy: 1033,
+	    Lang: 10218,
+	    Larr: 8606,
+	    Lopf: 120131,
+	    Lscr: 8466,
+	    Mopf: 120132,
+	    Mscr: 8499,
+	    NJcy: 1034,
+	    Nopf: 8469,
+	    Nscr: 119977,
+	    Oopf: 120134,
+	    Oscr: 119978,
+	    Ouml: 214,
+	    Popf: 8473,
+	    Pscr: 119979,
+	    QUOT: 34,
+	    Qopf: 8474,
+	    Qscr: 119980,
+	    Rang: 10219,
+	    Rarr: 8608,
+	    Ropf: 8477,
+	    Rscr: 8475,
+	    SHcy: 1064,
+	    Sopf: 120138,
+	    Sqrt: 8730,
+	    Sscr: 119982,
+	    Star: 8902,
+	    TScy: 1062,
+	    Topf: 120139,
+	    Tscr: 119983,
+	    Uarr: 8607,
+	    Uopf: 120140,
+	    Upsi: 978,
+	    Uscr: 119984,
+	    Uuml: 220,
+	    Vbar: 10987,
+	    Vert: 8214,
+	    Vopf: 120141,
+	    Vscr: 119985,
+	    Wopf: 120142,
+	    Wscr: 119986,
+	    Xopf: 120143,
+	    Xscr: 119987,
+	    YAcy: 1071,
+	    YIcy: 1031,
+	    YUcy: 1070,
+	    Yopf: 120144,
+	    Yscr: 119988,
+	    Yuml: 376,
+	    ZHcy: 1046,
+	    Zdot: 379,
+	    Zeta: 918,
+	    Zopf: 8484,
+	    Zscr: 119989,
+	    andd: 10844,
+	    andv: 10842,
+	    ange: 10660,
+	    aopf: 120146,
+	    apid: 8779,
+	    apos: 39,
+	    ascr: 119990,
+	    auml: 228,
+	    bNot: 10989,
+	    bbrk: 9141,
+	    beta: 946,
+	    beth: 8502,
+	    bnot: 8976,
+	    bopf: 120147,
+	    boxH: 9552,
+	    boxV: 9553,
+	    boxh: 9472,
+	    boxv: 9474,
+	    bscr: 119991,
+	    bsim: 8765,
+	    bsol: 92,
+	    bull: 8226,
+	    bump: 8782,
+	    cdot: 267,
+	    cent: 162,
+	    chcy: 1095,
+	    cirE: 10691,
+	    circ: 710,
+	    cire: 8791,
+	    comp: 8705,
+	    cong: 8773,
+	    copf: 120148,
+	    copy: 169,
+	    cscr: 119992,
+	    csub: 10959,
+	    csup: 10960,
+	    dArr: 8659,
+	    dHar: 10597,
+	    darr: 8595,
+	    dash: 8208,
+	    diam: 8900,
+	    djcy: 1106,
+	    dopf: 120149,
+	    dscr: 119993,
+	    dscy: 1109,
+	    dsol: 10742,
+	    dtri: 9663,
+	    dzcy: 1119,
+	    eDot: 8785,
+	    ecir: 8790,
+	    edot: 279,
+	    emsp: 8195,
+	    ensp: 8194,
+	    eopf: 120150,
+	    epar: 8917,
+	    epsi: 1013,
+	    escr: 8495,
+	    esim: 8770,
+	    euml: 235,
+	    euro: 8364,
+	    excl: 33,
+	    flat: 9837,
+	    fnof: 402,
+	    fopf: 120151,
+	    fork: 8916,
+	    fscr: 119995,
+	    gdot: 289,
+	    geqq: 8807,
+	    gjcy: 1107,
+	    gnap: 10890,
+	    gneq: 10888,
+	    gopf: 120152,
+	    gscr: 8458,
+	    gsim: 8819,
+	    gtcc: 10919,
+	    hArr: 8660,
+	    half: 189,
+	    harr: 8596,
+	    hbar: 8463,
+	    hopf: 120153,
+	    hscr: 119997,
+	    iecy: 1077,
+	    imof: 8887,
+	    iocy: 1105,
+	    iopf: 120154,
+	    iota: 953,
+	    iscr: 119998,
+	    isin: 8712,
+	    iuml: 239,
+	    jopf: 120155,
+	    jscr: 119999,
+	    khcy: 1093,
+	    kjcy: 1116,
+	    kopf: 120156,
+	    kscr: 120000,
+	    lArr: 8656,
+	    lHar: 10594,
+	    lang: 10216,
+	    larr: 8592,
+	    late: 10925,
+	    lcub: 123,
+	    ldca: 10550,
+	    ldsh: 8626,
+	    leqq: 8806,
+	    ljcy: 1113,
+	    lnap: 10889,
+	    lneq: 10887,
+	    lopf: 120157,
+	    lozf: 10731,
+	    lpar: 40,
+	    lscr: 120001,
+	    lsim: 8818,
+	    lsqb: 91,
+	    ltcc: 10918,
+	    ltri: 9667,
+	    macr: 175,
+	    male: 9794,
+	    malt: 10016,
+	    mlcp: 10971,
+	    mldr: 8230,
+	    mopf: 120158,
+	    mscr: 120002,
+	    nbsp: 160,
+	    ncap: 10819,
+	    ncup: 10818,
+	    ngeq: 8817,
+	    ngtr: 8815,
+	    nisd: 8954,
+	    njcy: 1114,
+	    nldr: 8229,
+	    nleq: 8816,
+	    nmid: 8740,
+	    nopf: 120159,
+	    npar: 8742,
+	    nscr: 120003,
+	    nsim: 8769,
+	    nsub: 8836,
+	    nsup: 8837,
+	    ntgl: 8825,
+	    ntlg: 8824,
+	    oast: 8859,
+	    ocir: 8858,
+	    odiv: 10808,
+	    odot: 8857,
+	    ogon: 731,
+	    oint: 8750,
+	    omid: 10678,
+	    oopf: 120160,
+	    opar: 10679,
+	    ordf: 170,
+	    ordm: 186,
+	    oror: 10838,
+	    oscr: 8500,
+	    osol: 8856,
+	    ouml: 246,
+	    para: 182,
+	    part: 8706,
+	    perp: 8869,
+	    phiv: 966,
+	    plus: 43,
+	    popf: 120161,
+	    prap: 10935,
+	    prec: 8826,
+	    prnE: 10933,
+	    prod: 8719,
+	    prop: 8733,
+	    pscr: 120005,
+	    qint: 10764,
+	    qopf: 120162,
+	    qscr: 120006,
+	    quot: 34,
+	    rArr: 8658,
+	    rHar: 10596,
+	    race: 10714,
+	    rang: 10217,
+	    rarr: 8594,
+	    rcub: 125,
+	    rdca: 10551,
+	    rdsh: 8627,
+	    real: 8476,
+	    rect: 9645,
+	    rhov: 1009,
+	    ring: 730,
+	    ropf: 120163,
+	    rpar: 41,
+	    rscr: 120007,
+	    rsqb: 93,
+	    rtri: 9657,
+	    scap: 10936,
+	    scnE: 10934,
+	    sdot: 8901,
+	    sect: 167,
+	    semi: 59,
+	    sext: 10038,
+	    shcy: 1096,
+	    sime: 8771,
+	    simg: 10910,
+	    siml: 10909,
+	    smid: 8739,
+	    smte: 10924,
+	    solb: 10692,
+	    sopf: 120164,
+	    spar: 8741,
+	    squf: 9642,
+	    sscr: 120008,
+	    star: 9734,
+	    subE: 10949,
+	    sube: 8838,
+	    succ: 8827,
+	    sung: 9834,
+	    sup1: 185,
+	    sup2: 178,
+	    sup3: 179,
+	    supE: 10950,
+	    supe: 8839,
+	    tbrk: 9140,
+	    tdot: 8411,
+	    tint: 8749,
+	    toea: 10536,
+	    topf: 120165,
+	    tosa: 10537,
+	    trie: 8796,
+	    tscr: 120009,
+	    tscy: 1094,
+	    uArr: 8657,
+	    uHar: 10595,
+	    uarr: 8593,
+	    uopf: 120166,
+	    upsi: 965,
+	    uscr: 120010,
+	    utri: 9653,
+	    uuml: 252,
+	    vArr: 8661,
+	    vBar: 10984,
+	    varr: 8597,
+	    vert: 124,
+	    vopf: 120167,
+	    vscr: 120011,
+	    wopf: 120168,
+	    wscr: 120012,
+	    xcap: 8898,
+	    xcup: 8899,
+	    xmap: 10236,
+	    xnis: 8955,
+	    xopf: 120169,
+	    xscr: 120013,
+	    xvee: 8897,
+	    yacy: 1103,
+	    yicy: 1111,
+	    yopf: 120170,
+	    yscr: 120014,
+	    yucy: 1102,
+	    yuml: 255,
+	    zdot: 380,
+	    zeta: 950,
+	    zhcy: 1078,
+	    zopf: 120171,
+	    zscr: 120015,
+	    zwnj: 8204,
+	    AMP: 38,
+	    Acy: 1040,
+	    Afr: 120068,
+	    And: 10835,
+	    Bcy: 1041,
+	    Bfr: 120069,
+	    Cap: 8914,
+	    Cfr: 8493,
+	    Chi: 935,
+	    Cup: 8915,
+	    Dcy: 1044,
+	    Del: 8711,
+	    Dfr: 120071,
+	    Dot: 168,
+	    ENG: 330,
+	    ETH: 208,
+	    Ecy: 1069,
+	    Efr: 120072,
+	    Eta: 919,
+	    Fcy: 1060,
+	    Ffr: 120073,
+	    Gcy: 1043,
+	    Gfr: 120074,
+	    Hat: 94,
+	    Hfr: 8460,
+	    Icy: 1048,
+	    Ifr: 8465,
+	    Int: 8748,
+	    Jcy: 1049,
+	    Jfr: 120077,
+	    Kcy: 1050,
+	    Kfr: 120078,
+	    Lcy: 1051,
+	    Lfr: 120079,
+	    Lsh: 8624,
+	    Map: 10501,
+	    Mcy: 1052,
+	    Mfr: 120080,
+	    Ncy: 1053,
+	    Nfr: 120081,
+	    Not: 10988,
+	    Ocy: 1054,
+	    Ofr: 120082,
+	    Pcy: 1055,
+	    Pfr: 120083,
+	    Phi: 934,
+	    Psi: 936,
+	    Qfr: 120084,
+	    REG: 174,
+	    Rcy: 1056,
+	    Rfr: 8476,
+	    Rho: 929,
+	    Rsh: 8625,
+	    Scy: 1057,
+	    Sfr: 120086,
+	    Sub: 8912,
+	    Sum: 8721,
+	    Sup: 8913,
+	    Tab: 9,
+	    Tau: 932,
+	    Tcy: 1058,
+	    Tfr: 120087,
+	    Ucy: 1059,
+	    Ufr: 120088,
+	    Vcy: 1042,
+	    Vee: 8897,
+	    Vfr: 120089,
+	    Wfr: 120090,
+	    Xfr: 120091,
+	    Ycy: 1067,
+	    Yfr: 120092,
+	    Zcy: 1047,
+	    Zfr: 8488,
+	    acd: 8767,
+	    acy: 1072,
+	    afr: 120094,
+	    amp: 38,
+	    and: 8743,
+	    ang: 8736,
+	    apE: 10864,
+	    ape: 8778,
+	    ast: 42,
+	    bcy: 1073,
+	    bfr: 120095,
+	    bot: 8869,
+	    cap: 8745,
+	    cfr: 120096,
+	    chi: 967,
+	    cir: 9675,
+	    cup: 8746,
+	    dcy: 1076,
+	    deg: 176,
+	    dfr: 120097,
+	    die: 168,
+	    div: 247,
+	    dot: 729,
+	    ecy: 1101,
+	    efr: 120098,
+	    egs: 10902,
+	    ell: 8467,
+	    els: 10901,
+	    eng: 331,
+	    eta: 951,
+	    eth: 240,
+	    fcy: 1092,
+	    ffr: 120099,
+	    gEl: 10892,
+	    gap: 10886,
+	    gcy: 1075,
+	    gel: 8923,
+	    geq: 8805,
+	    ges: 10878,
+	    gfr: 120100,
+	    ggg: 8921,
+	    glE: 10898,
+	    gla: 10917,
+	    glj: 10916,
+	    gnE: 8809,
+	    gne: 10888,
+	    hfr: 120101,
+	    icy: 1080,
+	    iff: 8660,
+	    ifr: 120102,
+	    int: 8747,
+	    jcy: 1081,
+	    jfr: 120103,
+	    kcy: 1082,
+	    kfr: 120104,
+	    lEg: 10891,
+	    lap: 10885,
+	    lat: 10923,
+	    lcy: 1083,
+	    leg: 8922,
+	    leq: 8804,
+	    les: 10877,
+	    lfr: 120105,
+	    lgE: 10897,
+	    lnE: 8808,
+	    lne: 10887,
+	    loz: 9674,
+	    lrm: 8206,
+	    lsh: 8624,
+	    map: 8614,
+	    mcy: 1084,
+	    mfr: 120106,
+	    mho: 8487,
+	    mid: 8739,
+	    nap: 8777,
+	    ncy: 1085,
+	    nfr: 120107,
+	    nge: 8817,
+	    ngt: 8815,
+	    nis: 8956,
+	    niv: 8715,
+	    nle: 8816,
+	    nlt: 8814,
+	    not: 172,
+	    npr: 8832,
+	    nsc: 8833,
+	    num: 35,
+	    ocy: 1086,
+	    ofr: 120108,
+	    ogt: 10689,
+	    ohm: 8486,
+	    olt: 10688,
+	    ord: 10845,
+	    orv: 10843,
+	    par: 8741,
+	    pcy: 1087,
+	    pfr: 120109,
+	    phi: 966,
+	    piv: 982,
+	    prE: 10931,
+	    pre: 10927,
+	    psi: 968,
+	    qfr: 120110,
+	    rcy: 1088,
+	    reg: 174,
+	    rfr: 120111,
+	    rho: 961,
+	    rlm: 8207,
+	    rsh: 8625,
+	    scE: 10932,
+	    sce: 10928,
+	    scy: 1089,
+	    sfr: 120112,
+	    shy: 173,
+	    sim: 8764,
+	    smt: 10922,
+	    sol: 47,
+	    squ: 9633,
+	    sub: 8834,
+	    sum: 8721,
+	    sup: 8835,
+	    tau: 964,
+	    tcy: 1090,
+	    tfr: 120113,
+	    top: 8868,
+	    ucy: 1091,
+	    ufr: 120114,
+	    uml: 168,
+	    vcy: 1074,
+	    vee: 8744,
+	    vfr: 120115,
+	    wfr: 120116,
+	    xfr: 120117,
+	    ycy: 1099,
+	    yen: 165,
+	    yfr: 120118,
+	    zcy: 1079,
+	    zfr: 120119,
+	    zwj: 8205,
+	    DD: 8517,
+	    GT: 62,
+	    Gg: 8921,
+	    Gt: 8811,
+	    Im: 8465,
+	    LT: 60,
+	    Ll: 8920,
+	    Lt: 8810,
+	    Mu: 924,
+	    Nu: 925,
+	    Or: 10836,
+	    Pi: 928,
+	    Pr: 10939,
+	    Re: 8476,
+	    Sc: 10940,
+	    Xi: 926,
+	    ac: 8766,
+	    af: 8289,
+	    ap: 8776,
+	    dd: 8518,
+	    ee: 8519,
+	    eg: 10906,
+	    el: 10905,
+	    gE: 8807,
+	    ge: 8805,
+	    gg: 8811,
+	    gl: 8823,
+	    gt: 62,
+	    ic: 8291,
+	    ii: 8520,
+	    in: 8712,
+	    it: 8290,
+	    lE: 8806,
+	    le: 8804,
+	    lg: 8822,
+	    ll: 8810,
+	    lt: 60,
+	    mp: 8723,
+	    mu: 956,
+	    ne: 8800,
+	    ni: 8715,
+	    nu: 957,
+	    oS: 9416,
+	    or: 8744,
+	    pi: 960,
+	    pm: 177,
+	    pr: 8826,
+	    rx: 8478,
+	    sc: 8827,
+	    wp: 8472,
+	    wr: 8768,
+	    xi: 958,
+	};
+
+	const windows_1252 = [
+	    8364,
+	    129,
+	    8218,
+	    402,
+	    8222,
+	    8230,
+	    8224,
+	    8225,
+	    710,
+	    8240,
+	    352,
+	    8249,
+	    338,
+	    141,
+	    381,
+	    143,
+	    144,
+	    8216,
+	    8217,
+	    8220,
+	    8221,
+	    8226,
+	    8211,
+	    8212,
+	    732,
+	    8482,
+	    353,
+	    8250,
+	    339,
+	    157,
+	    382,
+	    376,
+	];
+	const entity_pattern = new RegExp(`&(#?(?:x[\\w\\d]+|\\d+|${Object.keys(entities).join('|')}));?`, 'g');
+	function decode_character_references(html) {
+	    return html.replace(entity_pattern, (match, entity) => {
+	        let code;
+	        // Handle named entities
+	        if (entity[0] !== '#') {
+	            code = entities[entity];
+	        }
+	        else if (entity[1] === 'x') {
+	            code = parseInt(entity.substring(2), 16);
+	        }
+	        else {
+	            code = parseInt(entity.substring(1), 10);
+	        }
+	        if (!code) {
+	            return match;
+	        }
+	        return String.fromCodePoint(validate_code(code));
+	    });
+	}
+	const NUL = 0;
+	// some code points are verboten. If we were inserting HTML, the browser would replace the illegal
+	// code points with alternatives in some cases - since we're bypassing that mechanism, we need
+	// to replace them ourselves
+	//
+	// Source: http://en.wikipedia.org/wiki/Character_encodings_in_HTML#Illegal_characters
+	function validate_code(code) {
+	    // line feed becomes generic whitespace
+	    if (code === 10) {
+	        return 32;
+	    }
+	    // ASCII range. (Why someone would use HTML entities for ASCII characters I don't know, but...)
+	    if (code < 128) {
+	        return code;
+	    }
+	    // code points 128-159 are dealt with leniently by browsers, but they're incorrect. We need
+	    // to correct the mistake or we'll end up with missing € signs and so on
+	    if (code <= 159) {
+	        return windows_1252[code - 128];
+	    }
+	    // basic multilingual plane
+	    if (code < 55296) {
+	        return code;
+	    }
+	    // UTF-16 surrogate halves
+	    if (code <= 57343) {
+	        return NUL;
+	    }
+	    // rest of the basic multilingual plane
+	    if (code <= 65535) {
+	        return code;
+	    }
+	    // supplementary multilingual plane 0x10000 - 0x1ffff
+	    if (code >= 65536 && code <= 131071) {
+	        return code;
+	    }
+	    // supplementary ideographic plane 0x20000 - 0x2ffff
+	    if (code >= 131072 && code <= 196607) {
+	        return code;
+	    }
+	    return NUL;
+	}
+
+	// Adapted from https://github.com/acornjs/acorn/blob/6584815dca7440e00de841d1dad152302fdd7ca5/src/tokenize.js
+	// Reproduced under MIT License https://github.com/acornjs/acorn/blob/master/LICENSE
+	function full_char_code_at(str, i) {
+	    let code = str.charCodeAt(i);
+	    if (code <= 0xd7ff || code >= 0xe000)
+	        return code;
+	    let next = str.charCodeAt(i + 1);
+	    return (code << 10) + next - 0x35fdc00;
+	}
+
+	const globals = new Set([
+	    'alert',
+	    'Array',
+	    'Boolean',
+	    'confirm',
+	    'console',
+	    'Date',
+	    'decodeURI',
+	    'decodeURIComponent',
+	    'document',
+	    'encodeURI',
+	    'encodeURIComponent',
+	    'Infinity',
+	    'Intl',
+	    'isFinite',
+	    'isNaN',
+	    'JSON',
+	    'Map',
+	    'Math',
+	    'NaN',
+	    'Number',
+	    'Object',
+	    'parseFloat',
+	    'parseInt',
+	    'process',
+	    'Promise',
+	    'prompt',
+	    'RegExp',
+	    'Set',
+	    'String',
+	    'undefined',
+	    'window',
+	]);
+	const reserved = new Set([
+	    'arguments',
+	    'await',
+	    'break',
+	    'case',
+	    'catch',
+	    'class',
+	    'const',
+	    'continue',
+	    'debugger',
+	    'default',
+	    'delete',
+	    'do',
+	    'else',
+	    'enum',
+	    'eval',
+	    'export',
+	    'extends',
+	    'false',
+	    'finally',
+	    'for',
+	    'function',
+	    'if',
+	    'implements',
+	    'import',
+	    'in',
+	    'instanceof',
+	    'interface',
+	    'let',
+	    'new',
+	    'null',
+	    'package',
+	    'private',
+	    'protected',
+	    'public',
+	    'return',
+	    'static',
+	    'super',
+	    'switch',
+	    'this',
+	    'throw',
+	    'true',
+	    'try',
+	    'typeof',
+	    'var',
+	    'void',
+	    'while',
+	    'with',
+	    'yield',
+	]);
+	const void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;
+	function is_void(name) {
+	    return void_element_names.test(name) || name.toLowerCase() === '!doctype';
+	}
+	function is_valid(str) {
+	    let i = 0;
+	    while (i < str.length) {
+	        const code = full_char_code_at(str, i);
+	        if (!(i === 0 ? isIdentifierStart : isIdentifierChar)(code, true))
+	            return false;
+	        i += code <= 0xffff ? 1 : 2;
+	    }
+	    return true;
+	}
+	function quote_name_if_necessary(name) {
+	    if (!is_valid(name))
+	        return `"${name}"`;
+	    return name;
+	}
+	function quote_prop_if_necessary(name) {
+	    if (!is_valid(name))
+	        return `["${name}"]`;
+	    return `.${name}`;
+	}
+	function sanitize(name) {
+	    return name
+	        .replace(/[^a-zA-Z0-9_]+/g, '_')
+	        .replace(/^_/, '')
+	        .replace(/_$/, '')
+	        .replace(/^[0-9]/, '_$&');
+	}
+
+	function fuzzymatch(name, names) {
+	    const set = new FuzzySet(names);
+	    const matches = set.get(name);
+	    return matches && matches[0] && matches[0][0] > 0.7 ? matches[0][1] : null;
+	}
+	// adapted from https://github.com/Glench/fuzzyset.js/blob/master/lib/fuzzyset.js
+	// BSD Licensed
+	const GRAM_SIZE_LOWER = 2;
+	const GRAM_SIZE_UPPER = 3;
+	// return an edit distance from 0 to 1
+	function _distance(str1, str2) {
+	    if (str1 === null && str2 === null)
+	        throw 'Trying to compare two null values';
+	    if (str1 === null || str2 === null)
+	        return 0;
+	    str1 = String(str1);
+	    str2 = String(str2);
+	    const distance = levenshtein(str1, str2);
+	    if (str1.length > str2.length) {
+	        return 1 - distance / str1.length;
+	    }
+	    else {
+	        return 1 - distance / str2.length;
+	    }
+	}
+	// helper functions
+	function levenshtein(str1, str2) {
+	    const current = [];
+	    let prev;
+	    let value;
+	    for (let i = 0; i <= str2.length; i++) {
+	        for (let j = 0; j <= str1.length; j++) {
+	            if (i && j) {
+	                if (str1.charAt(j - 1) === str2.charAt(i - 1)) {
+	                    value = prev;
+	                }
+	                else {
+	                    value = Math.min(current[j], current[j - 1], prev) + 1;
+	                }
+	            }
+	            else {
+	                value = i + j;
+	            }
+	            prev = current[j];
+	            current[j] = value;
+	        }
+	    }
+	    return current.pop();
+	}
+	const non_word_regex = /[^\w, ]+/;
+	function iterate_grams(value, gram_size = 2) {
+	    const simplified = '-' + value.toLowerCase().replace(non_word_regex, '') + '-';
+	    const len_diff = gram_size - simplified.length;
+	    const results = [];
+	    if (len_diff > 0) {
+	        for (let i = 0; i < len_diff; ++i) {
+	            value += '-';
+	        }
+	    }
+	    for (let i = 0; i < simplified.length - gram_size + 1; ++i) {
+	        results.push(simplified.slice(i, i + gram_size));
+	    }
+	    return results;
+	}
+	function gram_counter(value, gram_size = 2) {
+	    // return an object where key=gram, value=number of occurrences
+	    const result = {};
+	    const grams = iterate_grams(value, gram_size);
+	    let i = 0;
+	    for (i; i < grams.length; ++i) {
+	        if (grams[i] in result) {
+	            result[grams[i]] += 1;
+	        }
+	        else {
+	            result[grams[i]] = 1;
+	        }
+	    }
+	    return result;
+	}
+	function sort_descending(a, b) {
+	    return b[0] - a[0];
+	}
+	class FuzzySet {
+	    constructor(arr) {
+	        this.exact_set = {};
+	        this.match_dict = {};
+	        this.items = {};
+	        // initialization
+	        for (let i = GRAM_SIZE_LOWER; i < GRAM_SIZE_UPPER + 1; ++i) {
+	            this.items[i] = [];
+	        }
+	        // add all the items to the set
+	        for (let i = 0; i < arr.length; ++i) {
+	            this.add(arr[i]);
+	        }
+	    }
+	    add(value) {
+	        const normalized_value = value.toLowerCase();
+	        if (normalized_value in this.exact_set) {
+	            return false;
+	        }
+	        let i = GRAM_SIZE_LOWER;
+	        for (i; i < GRAM_SIZE_UPPER + 1; ++i) {
+	            this._add(value, i);
+	        }
+	    }
+	    _add(value, gram_size) {
+	        const normalized_value = value.toLowerCase();
+	        const items = this.items[gram_size] || [];
+	        const index = items.length;
+	        items.push(0);
+	        const gram_counts = gram_counter(normalized_value, gram_size);
+	        let sum_of_square_gram_counts = 0;
+	        let gram;
+	        let gram_count;
+	        for (gram in gram_counts) {
+	            gram_count = gram_counts[gram];
+	            sum_of_square_gram_counts += Math.pow(gram_count, 2);
+	            if (gram in this.match_dict) {
+	                this.match_dict[gram].push([index, gram_count]);
+	            }
+	            else {
+	                this.match_dict[gram] = [[index, gram_count]];
+	            }
+	        }
+	        const vector_normal = Math.sqrt(sum_of_square_gram_counts);
+	        items[index] = [vector_normal, normalized_value];
+	        this.items[gram_size] = items;
+	        this.exact_set[normalized_value] = value;
+	    }
+	    ;
+	    get(value) {
+	        const normalized_value = value.toLowerCase();
+	        const result = this.exact_set[normalized_value];
+	        if (result) {
+	            return [[1, result]];
+	        }
+	        let results = [];
+	        // start with high gram size and if there are no results, go to lower gram sizes
+	        for (let gram_size = GRAM_SIZE_UPPER; gram_size >= GRAM_SIZE_LOWER; --gram_size) {
+	            results = this.__get(value, gram_size);
+	            if (results) {
+	                return results;
+	            }
+	        }
+	        return null;
+	    }
+	    __get(value, gram_size) {
+	        const normalized_value = value.toLowerCase();
+	        const matches = {};
+	        const gram_counts = gram_counter(normalized_value, gram_size);
+	        const items = this.items[gram_size];
+	        let sum_of_square_gram_counts = 0;
+	        let gram;
+	        let gram_count;
+	        let i;
+	        let index;
+	        let other_gram_count;
+	        for (gram in gram_counts) {
+	            gram_count = gram_counts[gram];
+	            sum_of_square_gram_counts += Math.pow(gram_count, 2);
+	            if (gram in this.match_dict) {
+	                for (i = 0; i < this.match_dict[gram].length; ++i) {
+	                    index = this.match_dict[gram][i][0];
+	                    other_gram_count = this.match_dict[gram][i][1];
+	                    if (index in matches) {
+	                        matches[index] += gram_count * other_gram_count;
+	                    }
+	                    else {
+	                        matches[index] = gram_count * other_gram_count;
+	                    }
+	                }
+	            }
+	        }
+	        const vector_normal = Math.sqrt(sum_of_square_gram_counts);
+	        let results = [];
+	        let match_score;
+	        // build a results list of [score, str]
+	        for (const match_index in matches) {
+	            match_score = matches[match_index];
+	            results.push([
+	                match_score / (vector_normal * items[match_index][0]),
+	                items[match_index][1],
+	            ]);
+	        }
+	        results.sort(sort_descending);
+	        let new_results = [];
+	        const end_index = Math.min(50, results.length);
+	        // truncate somewhat arbitrarily to 50
+	        for (let i = 0; i < end_index; ++i) {
+	            new_results.push([
+	                _distance(results[i][1], normalized_value),
+	                results[i][1],
+	            ]);
+	        }
+	        results = new_results;
+	        results.sort(sort_descending);
+	        new_results = [];
+	        for (let i = 0; i < results.length; ++i) {
+	            if (results[i][0] == results[0][0]) {
+	                new_results.push([results[i][0], this.exact_set[results[i][1]]]);
+	            }
+	        }
+	        return new_results;
+	    }
+	    ;
+	}
+
+	function list$1(items, conjunction = 'or') {
+	    if (items.length === 1)
+	        return items[0];
+	    return `${items.slice(0, -1).join(', ')} ${conjunction} ${items[items.length - 1]}`;
+	}
+
+	const valid_tag_name = /^\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\-]*/;
+	const meta_tags = new Map([
+	    ['svelte:head', 'Head'],
+	    ['svelte:options', 'Options'],
+	    ['svelte:window', 'Window'],
+	    ['svelte:body', 'Body']
+	]);
+	const valid_meta_tags = Array.from(meta_tags.keys()).concat('svelte:self', 'svelte:component');
+	const specials = new Map([
+	    [
+	        'script',
+	        {
+	            read: read_script,
+	            property: 'js',
+	        },
+	    ],
+	    [
+	        'style',
+	        {
+	            read: read_style,
+	            property: 'css',
+	        },
+	    ],
+	]);
+	const SELF = /^svelte:self(?=[\s\/>])/;
+	const COMPONENT = /^svelte:component(?=[\s\/>])/;
+	// based on http://developers.whatwg.org/syntax.html#syntax-tag-omission
+	const disallowed_contents = new Map([
+	    ['li', new Set(['li'])],
+	    ['dt', new Set(['dt', 'dd'])],
+	    ['dd', new Set(['dt', 'dd'])],
+	    [
+	        'p',
+	        new Set('address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul'.split(' ')),
+	    ],
+	    ['rt', new Set(['rt', 'rp'])],
+	    ['rp', new Set(['rt', 'rp'])],
+	    ['optgroup', new Set(['optgroup'])],
+	    ['option', new Set(['option', 'optgroup'])],
+	    ['thead', new Set(['tbody', 'tfoot'])],
+	    ['tbody', new Set(['tbody', 'tfoot'])],
+	    ['tfoot', new Set(['tbody'])],
+	    ['tr', new Set(['tr', 'tbody'])],
+	    ['td', new Set(['td', 'th', 'tr'])],
+	    ['th', new Set(['td', 'th', 'tr'])],
+	]);
+	function parent_is_head(stack) {
+	    let i = stack.length;
+	    while (i--) {
+	        const { type } = stack[i];
+	        if (type === 'Head')
+	            return true;
+	        if (type === 'Element' || type === 'InlineComponent')
+	            return false;
+	    }
+	    return false;
+	}
+	function tag(parser) {
+	    const start = parser.index++;
+	    let parent = parser.current();
+	    if (parser.eat('!--')) {
+	        const data = parser.read_until(/-->/);
+	        parser.eat('-->', true, 'comment was left open, expected -->');
+	        parser.current().children.push({
+	            start,
+	            end: parser.index,
+	            type: 'Comment',
+	            data,
+	        });
+	        return;
+	    }
+	    const is_closing_tag = parser.eat('/');
+	    const name = read_tag_name(parser);
+	    if (meta_tags.has(name)) {
+	        const slug = meta_tags.get(name).toLowerCase();
+	        if (is_closing_tag) {
+	            if ((name === 'svelte:window' || name === 'svelte:body') &&
+	                parser.current().children.length) {
+	                parser.error({
+	                    code: `invalid-${name.slice(7)}-content`,
+	                    message: `<${name}> cannot have children`
+	                }, parser.current().children[0].start);
+	            }
+	        }
+	        else {
+	            if (name in parser.meta_tags) {
+	                parser.error({
+	                    code: `duplicate-${slug}`,
+	                    message: `A component can only have one <${name}> tag`
+	                }, start);
+	            }
+	            if (parser.stack.length > 1) {
+	                parser.error({
+	                    code: `invalid-${slug}-placement`,
+	                    message: `<${name}> tags cannot be inside elements or blocks`
+	                }, start);
+	            }
+	            parser.meta_tags[name] = true;
+	        }
+	    }
+	    const type = meta_tags.has(name)
+	        ? meta_tags.get(name)
+	        : (/[A-Z]/.test(name[0]) || name === 'svelte:self' || name === 'svelte:component') ? 'InlineComponent'
+	            : name === 'title' && parent_is_head(parser.stack) ? 'Title'
+	                : name === 'slot' && !parser.customElement ? 'Slot' : 'Element';
+	    const element = {
+	        start,
+	        end: null,
+	        type,
+	        name,
+	        attributes: [],
+	        children: [],
+	    };
+	    parser.allow_whitespace();
+	    if (is_closing_tag) {
+	        if (is_void(name)) {
+	            parser.error({
+	                code: `invalid-void-content`,
+	                message: `<${name}> is a void element and cannot have children, or a closing tag`
+	            }, start);
+	        }
+	        parser.eat('>', true);
+	        // close any elements that don't have their own closing tags, e.g. <div><p></div>
+	        while (parent.name !== name) {
+	            if (parent.type !== 'Element')
+	                parser.error({
+	                    code: `invalid-closing-tag`,
+	                    message: `</${name}> attempted to close an element that was not open`
+	                }, start);
+	            parent.end = start;
+	            parser.stack.pop();
+	            parent = parser.current();
+	        }
+	        parent.end = parser.index;
+	        parser.stack.pop();
+	        return;
+	    }
+	    else if (disallowed_contents.has(parent.name)) {
+	        // can this be a child of the parent element, or does it implicitly
+	        // close it, like `<li>one<li>two`?
+	        if (disallowed_contents.get(parent.name).has(name)) {
+	            parent.end = start;
+	            parser.stack.pop();
+	        }
+	    }
+	    const unique_names = new Set();
+	    let attribute;
+	    while ((attribute = read_attribute(parser, unique_names))) {
+	        element.attributes.push(attribute);
+	        parser.allow_whitespace();
+	    }
+	    if (name === 'svelte:component') {
+	        const index = element.attributes.findIndex(attr => attr.type === 'Attribute' && attr.name === 'this');
+	        if (!~index) {
+	            parser.error({
+	                code: `missing-component-definition`,
+	                message: `<svelte:component> must have a 'this' attribute`
+	            }, start);
+	        }
+	        const definition = element.attributes.splice(index, 1)[0];
+	        if (definition.value === true || definition.value.length !== 1 || definition.value[0].type === 'Text') {
+	            parser.error({
+	                code: `invalid-component-definition`,
+	                message: `invalid component definition`
+	            }, definition.start);
+	        }
+	        element.expression = definition.value[0].expression;
+	    }
+	    // special cases – top-level <script> and <style>
+	    if (specials.has(name) && parser.stack.length === 1) {
+	        const special = specials.get(name);
+	        parser.eat('>', true);
+	        const content = special.read(parser, start, element.attributes);
+	        if (content)
+	            parser[special.property].push(content);
+	        return;
+	    }
+	    parser.current().children.push(element);
+	    const self_closing = parser.eat('/') || is_void(name);
+	    parser.eat('>', true);
+	    if (self_closing) {
+	        // don't push self-closing elements onto the stack
+	        element.end = parser.index;
+	    }
+	    else if (name === 'textarea') {
+	        // special case
+	        element.children = read_sequence(parser, () => parser.template.slice(parser.index, parser.index + 11) === '</textarea>');
+	        parser.read(/<\/textarea>/);
+	        element.end = parser.index;
+	    }
+	    else if (name === 'script') {
+	        // special case
+	        const start = parser.index;
+	        const data = parser.read_until(/<\/script>/);
+	        const end = parser.index;
+	        element.children.push({ start, end, type: 'Text', data });
+	        parser.eat('</script>', true);
+	        element.end = parser.index;
+	    }
+	    else if (name === 'style') {
+	        // special case
+	        const start = parser.index;
+	        const data = parser.read_until(/<\/style>/);
+	        const end = parser.index;
+	        element.children.push({ start, end, type: 'Text', data });
+	        parser.eat('</style>', true);
+	    }
+	    else {
+	        parser.stack.push(element);
+	    }
+	}
+	function read_tag_name(parser) {
+	    const start = parser.index;
+	    if (parser.read(SELF)) {
+	        // check we're inside a block, otherwise this
+	        // will cause infinite recursion
+	        let i = parser.stack.length;
+	        let legal = false;
+	        while (i--) {
+	            const fragment = parser.stack[i];
+	            if (fragment.type === 'IfBlock' || fragment.type === 'EachBlock') {
+	                legal = true;
+	                break;
+	            }
+	        }
+	        if (!legal) {
+	            parser.error({
+	                code: `invalid-self-placement`,
+	                message: `<svelte:self> components can only exist inside if-blocks or each-blocks`
+	            }, start);
+	        }
+	        return 'svelte:self';
+	    }
+	    if (parser.read(COMPONENT))
+	        return 'svelte:component';
+	    const name = parser.read_until(/(\s|\/|>)/);
+	    if (meta_tags.has(name))
+	        return name;
+	    if (name.startsWith('svelte:')) {
+	        const match = fuzzymatch(name.slice(7), valid_meta_tags);
+	        let message = `Valid <svelte:...> tag names are ${list$1(valid_meta_tags)}`;
+	        if (match)
+	            message += ` (did you mean '${match}'?)`;
+	        parser.error({
+	            code: 'invalid-tag-name',
+	            message
+	        }, start);
+	    }
+	    if (!valid_tag_name.test(name)) {
+	        parser.error({
+	            code: `invalid-tag-name`,
+	            message: `Expected valid tag name`
+	        }, start);
+	    }
+	    return name;
+	}
+	function read_attribute(parser, unique_names) {
+	    const start = parser.index;
+	    if (parser.eat('{')) {
+	        parser.allow_whitespace();
+	        if (parser.eat('...')) {
+	            const expression = read_expression(parser);
+	            parser.allow_whitespace();
+	            parser.eat('}', true);
+	            return {
+	                start,
+	                end: parser.index,
+	                type: 'Spread',
+	                expression
+	            };
+	        }
+	        else {
+	            const value_start = parser.index;
+	            const name = parser.read_identifier();
+	            parser.allow_whitespace();
+	            parser.eat('}', true);
+	            return {
+	                start,
+	                end: parser.index,
+	                type: 'Attribute',
+	                name,
+	                value: [{
+	                        start: value_start,
+	                        end: value_start + name.length,
+	                        type: 'AttributeShorthand',
+	                        expression: {
+	                            start: value_start,
+	                            end: value_start + name.length,
+	                            type: 'Identifier',
+	                            name
+	                        }
+	                    }]
+	            };
+	        }
+	    }
+	    let name = parser.read_until(/[\s=\/>"']/);
+	    if (!name)
+	        return null;
+	    let end = parser.index;
+	    parser.allow_whitespace();
+	    const colon_index = name.indexOf(':');
+	    const type = colon_index !== -1 && get_directive_type(name.slice(0, colon_index));
+	    if (unique_names.has(name)) {
+	        parser.error({
+	            code: `duplicate-attribute`,
+	            message: 'Attributes need to be unique'
+	        }, start);
+	    }
+	    if (type !== "EventHandler") {
+	        unique_names.add(name);
+	    }
+	    let value = true;
+	    if (parser.eat('=')) {
+	        value = read_attribute_value(parser);
+	        end = parser.index;
+	    }
+	    else if (parser.match_regex(/["']/)) {
+	        parser.error({
+	            code: `unexpected-token`,
+	            message: `Expected =`
+	        }, parser.index);
+	    }
+	    if (type) {
+	        const [directive_name, ...modifiers] = name.slice(colon_index + 1).split('|');
+	        if (type === 'Ref') {
+	            parser.error({
+	                code: `invalid-ref-directive`,
+	                message: `The ref directive is no longer supported — use \`bind:this={${directive_name}}\` instead`
+	            }, start);
+	        }
+	        if (value[0]) {
+	            if (value.length > 1 || value[0].type === 'Text') {
+	                parser.error({
+	                    code: `invalid-directive-value`,
+	                    message: `Directive value must be a JavaScript expression enclosed in curly braces`
+	                }, value[0].start);
+	            }
+	        }
+	        const directive = {
+	            start,
+	            end,
+	            type,
+	            name: directive_name,
+	            modifiers,
+	            expression: (value[0] && value[0].expression) || null
+	        };
+	        if (type === 'Transition') {
+	            const direction = name.slice(0, colon_index);
+	            directive.intro = direction === 'in' || direction === 'transition';
+	            directive.outro = direction === 'out' || direction === 'transition';
+	        }
+	        if (!directive.expression && (type === 'Binding' || type === 'Class')) {
+	            directive.expression = {
+	                start: directive.start + colon_index + 1,
+	                end: directive.end,
+	                type: 'Identifier',
+	                name: directive.name
+	            };
+	        }
+	        return directive;
+	    }
+	    return {
+	        start,
+	        end,
+	        type: 'Attribute',
+	        name,
+	        value,
+	    };
+	}
+	function get_directive_type(name) {
+	    if (name === 'use')
+	        return 'Action';
+	    if (name === 'animate')
+	        return 'Animation';
+	    if (name === 'bind')
+	        return 'Binding';
+	    if (name === 'class')
+	        return 'Class';
+	    if (name === 'on')
+	        return 'EventHandler';
+	    if (name === 'let')
+	        return 'Let';
+	    if (name === 'ref')
+	        return 'Ref';
+	    if (name === 'in' || name === 'out' || name === 'transition')
+	        return 'Transition';
+	}
+	function read_attribute_value(parser) {
+	    const quote_mark = parser.eat(`'`) ? `'` : parser.eat(`"`) ? `"` : null;
+	    const regex = (quote_mark === `'` ? /'/ :
+	        quote_mark === `"` ? /"/ :
+	            /(\/>|[\s"'=<>`])/);
+	    const value = read_sequence(parser, () => !!parser.match_regex(regex));
+	    if (quote_mark)
+	        parser.index += 1;
+	    return value;
+	}
+	function read_sequence(parser, done) {
+	    let current_chunk = {
+	        start: parser.index,
+	        end: null,
+	        type: 'Text',
+	        raw: '',
+	        data: null
+	    };
+	    function flush() {
+	        if (current_chunk.raw) {
+	            current_chunk.data = decode_character_references(current_chunk.raw);
+	            current_chunk.end = parser.index;
+	            chunks.push(current_chunk);
+	        }
+	    }
+	    const chunks = [];
+	    while (parser.index < parser.template.length) {
+	        const index = parser.index;
+	        if (done()) {
+	            flush();
+	            return chunks;
+	        }
+	        else if (parser.eat('{')) {
+	            flush();
+	            parser.allow_whitespace();
+	            const expression = read_expression(parser);
+	            parser.allow_whitespace();
+	            parser.eat('}', true);
+	            chunks.push({
+	                start: index,
+	                end: parser.index,
+	                type: 'MustacheTag',
+	                expression,
+	            });
+	            current_chunk = {
+	                start: parser.index,
+	                end: null,
+	                type: 'Text',
+	                raw: '',
+	                data: null
+	            };
+	        }
+	        else {
+	            current_chunk.raw += parser.template[parser.index++];
+	        }
+	    }
+	    parser.error({
+	        code: `unexpected-eof`,
+	        message: `Unexpected end of input`
+	    });
+	}
+
+	function error_on_assignment_pattern(parser) {
+	    if (parser.eat('=')) {
+	        parser.error({
+	            code: 'invalid-assignment-pattern',
+	            message: 'Assignment patterns are not supported'
+	        }, parser.index - 1);
+	    }
+	}
+	function error_on_rest_pattern_not_last(parser) {
+	    parser.error({
+	        code: 'rest-pattern-not-last',
+	        message: 'Rest destructuring expected to be last'
+	    }, parser.index);
+	}
+	function read_context(parser) {
+	    const context = {
+	        start: parser.index,
+	        end: null,
+	        type: null
+	    };
+	    if (parser.eat('[')) {
+	        context.type = 'ArrayPattern';
+	        context.elements = [];
+	        do {
+	            parser.allow_whitespace();
+	            const lastContext = context.elements[context.elements.length - 1];
+	            if (lastContext && lastContext.type === 'RestIdentifier') {
+	                error_on_rest_pattern_not_last(parser);
+	            }
+	            if (parser.template[parser.index] === ',') {
+	                context.elements.push(null);
+	            }
+	            else {
+	                context.elements.push(read_context(parser));
+	                parser.allow_whitespace();
+	            }
+	        } while (parser.eat(','));
+	        error_on_assignment_pattern(parser);
+	        parser.eat(']', true);
+	        context.end = parser.index;
+	    }
+	    else if (parser.eat('{')) {
+	        context.type = 'ObjectPattern';
+	        context.properties = [];
+	        do {
+	            parser.allow_whitespace();
+	            if (parser.eat('...')) {
+	                parser.allow_whitespace();
+	                const start = parser.index;
+	                const name = parser.read_identifier();
+	                const key = {
+	                    start,
+	                    end: parser.index,
+	                    type: 'Identifier',
+	                    name
+	                };
+	                const property = {
+	                    start,
+	                    end: parser.index,
+	                    type: 'Property',
+	                    kind: 'rest',
+	                    shorthand: true,
+	                    key,
+	                    value: key
+	                };
+	                context.properties.push(property);
+	                parser.allow_whitespace();
+	                if (parser.eat(',')) {
+	                    parser.error({
+	                        code: `comma-after-rest`,
+	                        message: `Comma is not permitted after the rest element`
+	                    }, parser.index - 1);
+	                }
+	                break;
+	            }
+	            const start = parser.index;
+	            const name = parser.read_identifier();
+	            const key = {
+	                start,
+	                end: parser.index,
+	                type: 'Identifier',
+	                name
+	            };
+	            parser.allow_whitespace();
+	            const value = parser.eat(':')
+	                ? (parser.allow_whitespace(), read_context(parser))
+	                : key;
+	            const property = {
+	                start,
+	                end: value.end,
+	                type: 'Property',
+	                kind: 'init',
+	                shorthand: value.type === 'Identifier' && value.name === name,
+	                key,
+	                value
+	            };
+	            context.properties.push(property);
+	            parser.allow_whitespace();
+	        } while (parser.eat(','));
+	        error_on_assignment_pattern(parser);
+	        parser.eat('}', true);
+	        context.end = parser.index;
+	    }
+	    else if (parser.eat('...')) {
+	        const name = parser.read_identifier();
+	        if (name) {
+	            context.type = 'RestIdentifier';
+	            context.end = parser.index;
+	            context.name = name;
+	        }
+	        else {
+	            parser.error({
+	                code: 'invalid-context',
+	                message: 'Expected a rest pattern'
+	            });
+	        }
+	    }
+	    else {
+	        const name = parser.read_identifier();
+	        if (name) {
+	            context.type = 'Identifier';
+	            context.end = parser.index;
+	            context.name = name;
+	        }
+	        else {
+	            parser.error({
+	                code: 'invalid-context',
+	                message: 'Expected a name, array pattern or object pattern'
+	            });
+	        }
+	        error_on_assignment_pattern(parser);
+	    }
+	    return context;
+	}
+
+	const whitespace = /[ \t\r\n]/;
+	const dimensions = /^(?:offset|client)(?:Width|Height)$/;
+
+	function trim_start(str) {
+	    let i = 0;
+	    while (whitespace.test(str[i]))
+	        i += 1;
+	    return str.slice(i);
+	}
+	function trim_end(str) {
+	    let i = str.length;
+	    while (whitespace.test(str[i - 1]))
+	        i -= 1;
+	    return str.slice(0, i);
+	}
+
+	function trim_whitespace(block, trim_before, trim_after) {
+	    if (!block.children || block.children.length === 0)
+	        return; // AwaitBlock
+	    const first_child = block.children[0];
+	    const last_child = block.children[block.children.length - 1];
+	    if (first_child.type === 'Text' && trim_before) {
+	        first_child.data = trim_start(first_child.data);
+	        if (!first_child.data)
+	            block.children.shift();
+	    }
+	    if (last_child.type === 'Text' && trim_after) {
+	        last_child.data = trim_end(last_child.data);
+	        if (!last_child.data)
+	            block.children.pop();
+	    }
+	    if (block.else) {
+	        trim_whitespace(block.else, trim_before, trim_after);
+	    }
+	    if (first_child.elseif) {
+	        trim_whitespace(first_child, trim_before, trim_after);
+	    }
+	}
+	function mustache(parser) {
+	    const start = parser.index;
+	    parser.index += 1;
+	    parser.allow_whitespace();
+	    // {/if}, {/each} or {/await}
+	    if (parser.eat('/')) {
+	        let block = parser.current();
+	        let expected;
+	        if (block.type === 'ElseBlock' || block.type === 'PendingBlock' || block.type === 'ThenBlock' || block.type === 'CatchBlock') {
+	            block.end = start;
+	            parser.stack.pop();
+	            block = parser.current();
+	            expected = 'await';
+	        }
+	        if (block.type === 'IfBlock') {
+	            expected = 'if';
+	        }
+	        else if (block.type === 'EachBlock') {
+	            expected = 'each';
+	        }
+	        else if (block.type === 'AwaitBlock') {
+	            expected = 'await';
+	        }
+	        else {
+	            parser.error({
+	                code: `unexpected-block-close`,
+	                message: `Unexpected block closing tag`
+	            });
+	        }
+	        parser.eat(expected, true);
+	        parser.allow_whitespace();
+	        parser.eat('}', true);
+	        while (block.elseif) {
+	            block.end = parser.index;
+	            parser.stack.pop();
+	            block = parser.current();
+	            if (block.else) {
+	                block.else.end = start;
+	            }
+	        }
+	        // strip leading/trailing whitespace as necessary
+	        const char_before = parser.template[block.start - 1];
+	        const char_after = parser.template[parser.index];
+	        const trim_before = !char_before || whitespace.test(char_before);
+	        const trim_after = !char_after || whitespace.test(char_after);
+	        trim_whitespace(block, trim_before, trim_after);
+	        block.end = parser.index;
+	        parser.stack.pop();
+	    }
+	    else if (parser.eat(':else')) {
+	        if (parser.eat('if')) {
+	            parser.error({
+	                code: 'invalid-elseif',
+	                message: `'elseif' should be 'else if'`
+	            });
+	        }
+	        parser.allow_whitespace();
+	        // :else if
+	        if (parser.eat('if')) {
+	            const block = parser.current();
+	            if (block.type !== 'IfBlock')
+	                parser.error({
+	                    code: `invalid-elseif-placement`,
+	                    message: 'Cannot have an {:else if ...} block outside an {#if ...} block'
+	                });
+	            parser.require_whitespace();
+	            const expression = read_expression(parser);
+	            parser.allow_whitespace();
+	            parser.eat('}', true);
+	            block.else = {
+	                start: parser.index,
+	                end: null,
+	                type: 'ElseBlock',
+	                children: [
+	                    {
+	                        start: parser.index,
+	                        end: null,
+	                        type: 'IfBlock',
+	                        elseif: true,
+	                        expression,
+	                        children: [],
+	                    },
+	                ],
+	            };
+	            parser.stack.push(block.else.children[0]);
+	        }
+	        // :else
+	        else {
+	            const block = parser.current();
+	            if (block.type !== 'IfBlock' && block.type !== 'EachBlock') {
+	                parser.error({
+	                    code: `invalid-else-placement`,
+	                    message: 'Cannot have an {:else} block outside an {#if ...} or {#each ...} block'
+	                });
+	            }
+	            parser.allow_whitespace();
+	            parser.eat('}', true);
+	            block.else = {
+	                start: parser.index,
+	                end: null,
+	                type: 'ElseBlock',
+	                children: [],
+	            };
+	            parser.stack.push(block.else);
+	        }
+	    }
+	    else if (parser.eat(':then')) {
+	        // TODO DRY out this and the next section
+	        const pending_block = parser.current();
+	        if (pending_block.type === 'PendingBlock') {
+	            pending_block.end = start;
+	            parser.stack.pop();
+	            const await_block = parser.current();
+	            if (!parser.eat('}')) {
+	                parser.require_whitespace();
+	                await_block.value = parser.read_identifier();
+	                parser.allow_whitespace();
+	                parser.eat('}', true);
+	            }
+	            const then_block = {
+	                start,
+	                end: null,
+	                type: 'ThenBlock',
+	                children: [],
+	                skip: false
+	            };
+	            await_block.then = then_block;
+	            parser.stack.push(then_block);
+	        }
+	    }
+	    else if (parser.eat(':catch')) {
+	        const then_block = parser.current();
+	        if (then_block.type === 'ThenBlock') {
+	            then_block.end = start;
+	            parser.stack.pop();
+	            const await_block = parser.current();
+	            if (!parser.eat('}')) {
+	                parser.require_whitespace();
+	                await_block.error = parser.read_identifier();
+	                parser.allow_whitespace();
+	                parser.eat('}', true);
+	            }
+	            const catch_block = {
+	                start,
+	                end: null,
+	                type: 'CatchBlock',
+	                children: [],
+	                skip: false
+	            };
+	            await_block.catch = catch_block;
+	            parser.stack.push(catch_block);
+	        }
+	    }
+	    else if (parser.eat('#')) {
+	        // {#if foo}, {#each foo} or {#await foo}
+	        let type;
+	        if (parser.eat('if')) {
+	            type = 'IfBlock';
+	        }
+	        else if (parser.eat('each')) {
+	            type = 'EachBlock';
+	        }
+	        else if (parser.eat('await')) {
+	            type = 'AwaitBlock';
+	        }
+	        else {
+	            parser.error({
+	                code: `expected-block-type`,
+	                message: `Expected if, each or await`
+	            });
+	        }
+	        parser.require_whitespace();
+	        const expression = read_expression(parser);
+	        const block = type === 'AwaitBlock' ?
+	            {
+	                start,
+	                end: null,
+	                type,
+	                expression,
+	                value: null,
+	                error: null,
+	                pending: {
+	                    start: null,
+	                    end: null,
+	                    type: 'PendingBlock',
+	                    children: [],
+	                    skip: true
+	                },
+	                then: {
+	                    start: null,
+	                    end: null,
+	                    type: 'ThenBlock',
+	                    children: [],
+	                    skip: true
+	                },
+	                catch: {
+	                    start: null,
+	                    end: null,
+	                    type: 'CatchBlock',
+	                    children: [],
+	                    skip: true
+	                },
+	            } :
+	            {
+	                start,
+	                end: null,
+	                type,
+	                expression,
+	                children: [],
+	            };
+	        parser.allow_whitespace();
+	        // {#each} blocks must declare a context – {#each list as item}
+	        if (type === 'EachBlock') {
+	            parser.eat('as', true);
+	            parser.require_whitespace();
+	            block.context = read_context(parser);
+	            parser.allow_whitespace();
+	            if (parser.eat(',')) {
+	                parser.allow_whitespace();
+	                block.index = parser.read_identifier();
+	                if (!block.index)
+	                    parser.error({
+	                        code: `expected-name`,
+	                        message: `Expected name`
+	                    });
+	                parser.allow_whitespace();
+	            }
+	            if (parser.eat('(')) {
+	                parser.allow_whitespace();
+	                block.key = read_expression(parser);
+	                parser.allow_whitespace();
+	                parser.eat(')', true);
+	                parser.allow_whitespace();
+	            }
+	        }
+	        let await_block_shorthand = type === 'AwaitBlock' && parser.eat('then');
+	        if (await_block_shorthand) {
+	            parser.require_whitespace();
+	            block.value = parser.read_identifier();
+	            parser.allow_whitespace();
+	        }
+	        parser.eat('}', true);
+	        parser.current().children.push(block);
+	        parser.stack.push(block);
+	        if (type === 'AwaitBlock') {
+	            let child_block;
+	            if (await_block_shorthand) {
+	                block.then.skip = false;
+	                child_block = block.then;
+	            }
+	            else {
+	                block.pending.skip = false;
+	                child_block = block.pending;
+	            }
+	            child_block.start = parser.index;
+	            parser.stack.push(child_block);
+	        }
+	    }
+	    else if (parser.eat('@html')) {
+	        // {@html content} tag
+	        parser.require_whitespace();
+	        const expression = read_expression(parser);
+	        parser.allow_whitespace();
+	        parser.eat('}', true);
+	        parser.current().children.push({
+	            start,
+	            end: parser.index,
+	            type: 'RawMustacheTag',
+	            expression,
+	        });
+	    }
+	    else if (parser.eat('@debug')) {
+	        let identifiers;
+	        // Implies {@debug} which indicates "debug all"
+	        if (parser.read(/\s*}/)) {
+	            identifiers = [];
+	        }
+	        else {
+	            const expression = read_expression(parser);
+	            identifiers = expression.type === 'SequenceExpression'
+	                ? expression.expressions
+	                : [expression];
+	            identifiers.forEach(node => {
+	                if (node.type !== 'Identifier') {
+	                    parser.error({
+	                        code: 'invalid-debug-args',
+	                        message: '{@debug ...} arguments must be identifiers, not arbitrary expressions'
+	                    }, node.start);
+	                }
+	            });
+	            parser.allow_whitespace();
+	            parser.eat('}', true);
+	        }
+	        parser.current().children.push({
+	            start,
+	            end: parser.index,
+	            type: 'DebugTag',
+	            identifiers
+	        });
+	    }
+	    else {
+	        const expression = read_expression(parser);
+	        parser.allow_whitespace();
+	        parser.eat('}', true);
+	        parser.current().children.push({
+	            start,
+	            end: parser.index,
+	            type: 'MustacheTag',
+	            expression,
+	        });
+	    }
+	}
+
+	function text$1(parser) {
+	    const start = parser.index;
+	    let data = '';
+	    while (parser.index < parser.template.length &&
+	        !parser.match('<') &&
+	        !parser.match('{')) {
+	        data += parser.template[parser.index++];
+	    }
+	    let node = {
+	        start,
+	        end: parser.index,
+	        type: 'Text',
+	        raw: data,
+	        data: decode_character_references(data),
+	    };
+	    parser.current().children.push(node);
+	}
+
+	function fragment(parser) {
+	    if (parser.match('<')) {
+	        return tag;
+	    }
+	    if (parser.match('{')) {
+	        return mustache;
+	    }
+	    return text$1;
+	}
+
+	function getLocator(source, options) {
+	    if (options === void 0) { options = {}; }
+	    var offsetLine = options.offsetLine || 0;
+	    var offsetColumn = options.offsetColumn || 0;
+	    var originalLines = source.split('\n');
+	    var start = 0;
+	    var lineRanges = originalLines.map(function (line, i) {
+	        var end = start + line.length + 1;
+	        var range = { start: start, end: end, line: i };
+	        start = end;
+	        return range;
+	    });
+	    var i = 0;
+	    function rangeContains(range, index) {
+	        return range.start <= index && index < range.end;
+	    }
+	    function getLocation(range, index) {
+	        return { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };
+	    }
+	    function locate(search, startIndex) {
+	        if (typeof search === 'string') {
+	            search = source.indexOf(search, startIndex || 0);
+	        }
+	        var range = lineRanges[i];
+	        var d = search >= range.end ? 1 : -1;
+	        while (range) {
+	            if (rangeContains(range, search))
+	                return getLocation(range, search);
+	            i += d;
+	            range = lineRanges[i];
+	        }
+	    }
+	    return locate;
+	}
+	function locate(source, search, options) {
+	    if (typeof options === 'number') {
+	        throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');
+	    }
+	    return getLocator(source, options)(search, options && options.startIndex);
+	}
+
+	function tabs_to_spaces(str) {
+	    return str.replace(/^\t+/, match => match.split('\t').join('  '));
+	}
+	function get_code_frame(source, line, column) {
+	    const lines = source.split('\n');
+	    const frame_start = Math.max(0, line - 2);
+	    const frame_end = Math.min(line + 3, lines.length);
+	    const digits = String(frame_end + 1).length;
+	    return lines
+	        .slice(frame_start, frame_end)
+	        .map((str, i) => {
+	        const isErrorLine = frame_start + i === line;
+	        let line_num = String(i + frame_start + 1);
+	        while (line_num.length < digits)
+	            line_num = ` ${line_num}`;
+	        if (isErrorLine) {
+	            const indicator = repeat(' ', digits + 2 + tabs_to_spaces(str.slice(0, column)).length) + '^';
+	            return `${line_num}: ${tabs_to_spaces(str)}\n${indicator}`;
+	        }
+	        return `${line_num}: ${tabs_to_spaces(str)}`;
+	    })
+	        .join('\n');
+	}
+
+	class CompileError extends Error {
+	    toString() {
+	        return `${this.message} (${this.start.line}:${this.start.column})\n${this.frame}`;
+	    }
+	}
+	function error$1(message, props) {
+	    const error = new CompileError(message);
+	    error.name = props.name;
+	    const start = locate(props.source, props.start, { offsetLine: 1 });
+	    const end = locate(props.source, props.end || props.start, { offsetLine: 1 });
+	    error.code = props.code;
+	    error.start = start;
+	    error.end = end;
+	    error.pos = props.start;
+	    error.filename = props.filename;
+	    error.frame = get_code_frame(props.source, start.line - 1, start.column);
+	    throw error;
+	}
+
+	class Parser$2 {
+	    constructor(template, options) {
+	        this.index = 0;
+	        this.stack = [];
+	        this.css = [];
+	        this.js = [];
+	        this.meta_tags = {};
+	        if (typeof template !== 'string') {
+	            throw new TypeError('Template must be a string');
+	        }
+	        this.template = template.replace(/\s+$/, '');
+	        this.filename = options.filename;
+	        this.customElement = options.customElement;
+	        this.html = {
+	            start: null,
+	            end: null,
+	            type: 'Fragment',
+	            children: [],
+	        };
+	        this.stack.push(this.html);
+	        let state = fragment;
+	        while (this.index < this.template.length) {
+	            state = state(this) || fragment;
+	        }
+	        if (this.stack.length > 1) {
+	            const current = this.current();
+	            const type = current.type === 'Element' ? `<${current.name}>` : 'Block';
+	            const slug = current.type === 'Element' ? 'element' : 'block';
+	            this.error({
+	                code: `unclosed-${slug}`,
+	                message: `${type} was left open`
+	            }, current.start);
+	        }
+	        if (state !== fragment) {
+	            this.error({
+	                code: `unexpected-eof`,
+	                message: 'Unexpected end of input'
+	            });
+	        }
+	        if (this.html.children.length) {
+	            let start = this.html.children[0] && this.html.children[0].start;
+	            while (/\s/.test(template[start]))
+	                start += 1;
+	            let end = this.html.children[this.html.children.length - 1] && this.html.children[this.html.children.length - 1].end;
+	            while (/\s/.test(template[end - 1]))
+	                end -= 1;
+	            this.html.start = start;
+	            this.html.end = end;
+	        }
+	        else {
+	            this.html.start = this.html.end = null;
+	        }
+	    }
+	    current() {
+	        return this.stack[this.stack.length - 1];
+	    }
+	    acorn_error(err) {
+	        this.error({
+	            code: `parse-error`,
+	            message: err.message.replace(/ \(\d+:\d+\)$/, '')
+	        }, err.pos);
+	    }
+	    error({ code, message }, index = this.index) {
+	        error$1(message, {
+	            name: 'ParseError',
+	            code,
+	            source: this.template,
+	            start: index,
+	            filename: this.filename
+	        });
+	    }
+	    eat(str, required, message) {
+	        if (this.match(str)) {
+	            this.index += str.length;
+	            return true;
+	        }
+	        if (required) {
+	            this.error({
+	                code: `unexpected-${this.index === this.template.length ? 'eof' : 'token'}`,
+	                message: message || `Expected ${str}`
+	            });
+	        }
+	        return false;
+	    }
+	    match(str) {
+	        return this.template.slice(this.index, this.index + str.length) === str;
+	    }
+	    match_regex(pattern) {
+	        const match = pattern.exec(this.template.slice(this.index));
+	        if (!match || match.index !== 0)
+	            return null;
+	        return match[0];
+	    }
+	    allow_whitespace() {
+	        while (this.index < this.template.length &&
+	            whitespace.test(this.template[this.index])) {
+	            this.index++;
+	        }
+	    }
+	    read(pattern) {
+	        const result = this.match_regex(pattern);
+	        if (result)
+	            this.index += result.length;
+	        return result;
+	    }
+	    read_identifier() {
+	        const start = this.index;
+	        let i = this.index;
+	        const code = full_char_code_at(this.template, i);
+	        if (!isIdentifierStart(code, true))
+	            return null;
+	        i += code <= 0xffff ? 1 : 2;
+	        while (i < this.template.length) {
+	            const code = full_char_code_at(this.template, i);
+	            if (!isIdentifierChar(code, true))
+	                break;
+	            i += code <= 0xffff ? 1 : 2;
+	        }
+	        const identifier = this.template.slice(this.index, this.index = i);
+	        if (reserved.has(identifier)) {
+	            this.error({
+	                code: `unexpected-reserved-word`,
+	                message: `'${identifier}' is a reserved word in JavaScript and cannot be used here`
+	            }, start);
+	        }
+	        return identifier;
+	    }
+	    read_until(pattern) {
+	        if (this.index >= this.template.length)
+	            this.error({
+	                code: `unexpected-eof`,
+	                message: 'Unexpected end of input'
+	            });
+	        const start = this.index;
+	        const match = pattern.exec(this.template.slice(start));
+	        if (match) {
+	            this.index = start + match.index;
+	            return this.template.slice(start, this.index);
+	        }
+	        this.index = this.template.length;
+	        return this.template.slice(start);
+	    }
+	    require_whitespace() {
+	        if (!whitespace.test(this.template[this.index])) {
+	            this.error({
+	                code: `missing-whitespace`,
+	                message: `Expected whitespace`
+	            });
+	        }
+	        this.allow_whitespace();
+	    }
+	}
+	function parse$2(template, options = {}) {
+	    const parser = new Parser$2(template, options);
+	    // TODO we way want to allow multiple <style> tags —
+	    // one scoped, one global. for now, only allow one
+	    if (parser.css.length > 1) {
+	        parser.error({
+	            code: 'duplicate-style',
+	            message: 'You can only have one top-level <style> tag per component'
+	        }, parser.css[1].start);
+	    }
+	    const instance_scripts = parser.js.filter(script => script.context === 'default');
+	    const module_scripts = parser.js.filter(script => script.context === 'module');
+	    if (instance_scripts.length > 1) {
+	        parser.error({
+	            code: `invalid-script`,
+	            message: `A component can only have one instance-level <script> element`
+	        }, instance_scripts[1].start);
+	    }
+	    if (module_scripts.length > 1) {
+	        parser.error({
+	            code: `invalid-script`,
+	            message: `A component can only have one <script context="module"> element`
+	        }, module_scripts[1].start);
+	    }
+	    return {
+	        html: parser.html,
+	        css: parser.css[0],
+	        instance: instance_scripts[0],
+	        module: module_scripts[0]
+	    };
+	}
+
+	const start = /\n(\t+)/;
+	function deindent(strings, ...values) {
+	    const indentation = start.exec(strings[0])[1];
+	    const pattern = new RegExp(`^${indentation}`, 'gm');
+	    let result = strings[0].replace(start, '').replace(pattern, '');
+	    let current_indentation = get_current_indentation(result);
+	    for (let i = 1; i < strings.length; i += 1) {
+	        let expression = values[i - 1];
+	        const string = strings[i].replace(pattern, '');
+	        if (Array.isArray(expression)) {
+	            expression = expression.length ? expression.join('\n') : null;
+	        }
+	        // discard empty codebuilders
+	        if (expression && expression.is_empty && expression.is_empty()) {
+	            expression = null;
+	        }
+	        if (expression || expression === '') {
+	            const value = String(expression).replace(/\n/g, `\n${current_indentation}`);
+	            result += value + string;
+	        }
+	        else {
+	            let c = result.length;
+	            while (/\s/.test(result[c - 1]))
+	                c -= 1;
+	            result = result.slice(0, c) + string;
+	        }
+	        current_indentation = get_current_indentation(result);
+	    }
+	    return result.trim().replace(/\t+$/gm, '').replace(/{\n\n/gm, '{\n');
+	}
+	function get_current_indentation(str) {
+	    let a = str.length;
+	    while (a > 0 && str[a - 1] !== '\n')
+	        a -= 1;
+	    let b = a;
+	    while (b < str.length && /\s/.test(str[b]))
+	        b += 1;
+	    return str.slice(a, b);
+	}
+
+	function stringify(data, options = {}) {
+	    return JSON.stringify(escape$1(data, options));
+	}
+	function escape$1(data, { only_escape_at_symbol = false } = {}) {
+	    return data.replace(only_escape_at_symbol ? /@+/g : /(@+|#+)/g, (match) => {
+	        return match + match[0];
+	    });
+	}
+	const escaped$1 = {
+	    '&': '&amp;',
+	    '<': '&lt;',
+	    '>': '&gt;',
+	};
+	function escape_html(html) {
+	    return String(html).replace(/[&<>]/g, match => escaped$1[match]);
+	}
+	function escape_template(str) {
+	    return str.replace(/(\${|`|\\)/g, '\\$1');
+	}
+
+	const whitespace$1 = /^\s+$/;
+	class CodeBuilder {
+	    constructor(str = '') {
+	        this.root = { type: 'root', children: [], parent: null };
+	        this.current = this.last = this.root;
+	        this.add_line(str);
+	    }
+	    add_conditional(condition, body) {
+	        if (this.last.type === 'condition' && this.last.condition === condition) {
+	            if (body && !whitespace$1.test(body))
+	                this.last.children.push({ type: 'line', line: body });
+	        }
+	        else {
+	            const next = this.last = { type: 'condition', condition, parent: this.current, children: [] };
+	            this.current.children.push(next);
+	            if (body && !whitespace$1.test(body))
+	                next.children.push({ type: 'line', line: body });
+	        }
+	    }
+	    add_line(line) {
+	        if (line && !whitespace$1.test(line))
+	            this.current.children.push(this.last = { type: 'line', line });
+	    }
+	    add_block(block) {
+	        if (block && !whitespace$1.test(block))
+	            this.current.children.push(this.last = { type: 'line', line: block, block: true });
+	    }
+	    is_empty() { return !find_line(this.root); }
+	    push_condition(condition) {
+	        if (this.last.type === 'condition' && this.last.condition === condition) {
+	            this.current = this.last;
+	        }
+	        else {
+	            const next = this.last = { type: 'condition', condition, parent: this.current, children: [] };
+	            this.current.children.push(next);
+	            this.current = next;
+	        }
+	    }
+	    pop_condition() {
+	        if (!this.current.parent)
+	            throw new Error(`Popping a condition that maybe wasn't pushed.`);
+	        this.current = this.current.parent;
+	    }
+	    toString() {
+	        return chunk_to_string(this.root);
+	    }
+	}
+	function find_line(chunk) {
+	    for (const c of chunk.children) {
+	        if (c.type === 'line' || find_line(c))
+	            return true;
+	    }
+	    return false;
+	}
+	function chunk_to_string(chunk, level = 0, last_block, first) {
+	    if (chunk.type === 'line') {
+	        return `${last_block || (!first && chunk.block) ? '\n' : ''}${chunk.line.replace(/^/gm, repeat('\t', level))}`;
+	    }
+	    else if (chunk.type === 'condition') {
+	        let t = false;
+	        const lines = chunk.children.map((c, i) => {
+	            const str = chunk_to_string(c, level + 1, t, i === 0);
+	            t = c.type !== 'line' || c.block;
+	            return str;
+	        }).filter(l => !!l);
+	        if (!lines.length)
+	            return '';
+	        return `${last_block || (!first) ? '\n' : ''}${repeat('\t', level)}if (${chunk.condition}) {\n${lines.join('\n')}\n${repeat('\t', level)}}`;
+	    }
+	    else if (chunk.type === 'root') {
+	        let t = false;
+	        const lines = chunk.children.map((c, i) => {
+	            const str = chunk_to_string(c, 0, t, i === 0);
+	            t = c.type !== 'line' || c.block;
+	            return str;
+	        }).filter(l => !!l);
+	        if (!lines.length)
+	            return '';
+	        return lines.join('\n');
+	    }
+	}
+
+	class Block$1 {
+	    constructor(options) {
+	        this.event_listeners = [];
+	        this.has_update_method = false;
+	        this.parent = options.parent;
+	        this.renderer = options.renderer;
+	        this.name = options.name;
+	        this.comment = options.comment;
+	        this.wrappers = [];
+	        // for keyed each blocks
+	        this.key = options.key;
+	        this.first = null;
+	        this.dependencies = new Set();
+	        this.bindings = options.bindings;
+	        this.builders = {
+	            init: new CodeBuilder(),
+	            create: new CodeBuilder(),
+	            claim: new CodeBuilder(),
+	            hydrate: new CodeBuilder(),
+	            mount: new CodeBuilder(),
+	            measure: new CodeBuilder(),
+	            fix: new CodeBuilder(),
+	            animate: new CodeBuilder(),
+	            intro: new CodeBuilder(),
+	            update: new CodeBuilder(),
+	            outro: new CodeBuilder(),
+	            destroy: new CodeBuilder(),
+	        };
+	        this.has_animation = false;
+	        this.has_intro_method = false; // a block could have an intro method but not intro transitions, e.g. if a sibling block has intros
+	        this.has_outro_method = false;
+	        this.outros = 0;
+	        this.get_unique_name = this.renderer.component.get_unique_name_maker();
+	        this.variables = new Map();
+	        this.aliases = new Map().set('ctx', this.get_unique_name('ctx'));
+	        if (this.key)
+	            this.aliases.set('key', this.get_unique_name('key'));
+	    }
+	    assign_variable_names() {
+	        const seen = new Set();
+	        const dupes = new Set();
+	        let i = this.wrappers.length;
+	        while (i--) {
+	            const wrapper = this.wrappers[i];
+	            if (!wrapper.var)
+	                continue;
+	            if (wrapper.parent && wrapper.parent.can_use_innerhtml)
+	                continue;
+	            if (seen.has(wrapper.var)) {
+	                dupes.add(wrapper.var);
+	            }
+	            seen.add(wrapper.var);
+	        }
+	        const counts = new Map();
+	        i = this.wrappers.length;
+	        while (i--) {
+	            const wrapper = this.wrappers[i];
+	            if (!wrapper.var)
+	                continue;
+	            if (dupes.has(wrapper.var)) {
+	                const i = counts.get(wrapper.var) || 0;
+	                counts.set(wrapper.var, i + 1);
+	                wrapper.var = this.get_unique_name(wrapper.var + i);
+	            }
+	            else {
+	                wrapper.var = this.get_unique_name(wrapper.var);
+	            }
+	        }
+	    }
+	    add_dependencies(dependencies) {
+	        dependencies.forEach(dependency => {
+	            this.dependencies.add(dependency);
+	        });
+	        this.has_update_method = true;
+	    }
+	    add_element(name, render_statement, claim_statement, parent_node, no_detach) {
+	        this.add_variable(name);
+	        this.builders.create.add_line(`${name} = ${render_statement};`);
+	        if (this.renderer.options.hydratable) {
+	            this.builders.claim.add_line(`${name} = ${claim_statement || render_statement};`);
+	        }
+	        if (parent_node) {
+	            this.builders.mount.add_line(`@append(${parent_node}, ${name});`);
+	            if (parent_node === 'document.head' && !no_detach)
+	                this.builders.destroy.add_line(`@detach(${name});`);
+	        }
+	        else {
+	            this.builders.mount.add_line(`@insert(#target, ${name}, anchor);`);
+	            if (!no_detach)
+	                this.builders.destroy.add_conditional('detaching', `@detach(${name});`);
+	        }
+	    }
+	    add_intro(local) {
+	        this.has_intros = this.has_intro_method = true;
+	        if (!local && this.parent)
+	            this.parent.add_intro();
+	    }
+	    add_outro(local) {
+	        this.has_outros = this.has_outro_method = true;
+	        this.outros += 1;
+	        if (!local && this.parent)
+	            this.parent.add_outro();
+	    }
+	    add_animation() {
+	        this.has_animation = true;
+	    }
+	    add_variable(name, init) {
+	        if (name[0] === '#') {
+	            name = this.alias(name.slice(1));
+	        }
+	        if (this.variables.has(name) && this.variables.get(name) !== init) {
+	            throw new Error(`Variable '${name}' already initialised with a different value`);
+	        }
+	        this.variables.set(name, init);
+	    }
+	    alias(name) {
+	        if (!this.aliases.has(name)) {
+	            this.aliases.set(name, this.get_unique_name(name));
+	        }
+	        return this.aliases.get(name);
+	    }
+	    child(options) {
+	        return new Block$1(Object.assign({}, this, { key: null }, options, { parent: this }));
+	    }
+	    get_contents(local_key) {
+	        const { dev } = this.renderer.options;
+	        if (this.has_outros) {
+	            this.add_variable('#current');
+	            if (!this.builders.intro.is_empty()) {
+	                this.builders.intro.add_line(`#current = true;`);
+	                this.builders.mount.add_line(`#current = true;`);
+	            }
+	            if (!this.builders.outro.is_empty()) {
+	                this.builders.outro.add_line(`#current = false;`);
+	            }
+	        }
+	        if (this.autofocus) {
+	            this.builders.mount.add_line(`${this.autofocus}.focus();`);
+	        }
+	        this.render_listeners();
+	        const properties = new CodeBuilder();
+	        const method_name = (short, long) => dev ? `${short}: function ${this.get_unique_name(long)}` : short;
+	        if (local_key) {
+	            properties.add_block(`key: ${local_key},`);
+	        }
+	        if (this.first) {
+	            properties.add_block(`first: null,`);
+	            this.builders.hydrate.add_line(`this.first = ${this.first};`);
+	        }
+	        if (this.builders.create.is_empty() && this.builders.hydrate.is_empty()) {
+	            properties.add_line(`c: @noop,`);
+	        }
+	        else {
+	            const hydrate = !this.builders.hydrate.is_empty() && (this.renderer.options.hydratable
+	                ? `this.h()`
+	                : this.builders.hydrate);
+	            properties.add_block(deindent `
+				${method_name('c', 'create')}() {
+					${this.builders.create}
+					${hydrate}
+				},
+			`);
+	        }
+	        if (this.renderer.options.hydratable || !this.builders.claim.is_empty()) {
+	            if (this.builders.claim.is_empty() && this.builders.hydrate.is_empty()) {
+	                properties.add_line(`l: @noop,`);
+	            }
+	            else {
+	                properties.add_block(deindent `
+					${method_name('l', 'claim')}(nodes) {
+						${this.builders.claim}
+						${this.renderer.options.hydratable && !this.builders.hydrate.is_empty() && `this.h();`}
+					},
+				`);
+	            }
+	        }
+	        if (this.renderer.options.hydratable && !this.builders.hydrate.is_empty()) {
+	            properties.add_block(deindent `
+				${method_name('h', 'hydrate')}() {
+					${this.builders.hydrate}
+				},
+			`);
+	        }
+	        if (this.builders.mount.is_empty()) {
+	            properties.add_line(`m: @noop,`);
+	        }
+	        else {
+	            properties.add_block(deindent `
+				${method_name('m', 'mount')}(#target, anchor) {
+					${this.builders.mount}
+				},
+			`);
+	        }
+	        if (this.has_update_method || this.maintain_context) {
+	            if (this.builders.update.is_empty() && !this.maintain_context) {
+	                properties.add_line(`p: @noop,`);
+	            }
+	            else {
+	                properties.add_block(deindent `
+					${method_name('p', 'update')}(changed, ${this.maintain_context ? 'new_ctx' : 'ctx'}) {
+						${this.maintain_context && `ctx = new_ctx;`}
+						${this.builders.update}
+					},
+				`);
+	            }
+	        }
+	        if (this.has_animation) {
+	            properties.add_block(deindent `
+				${method_name('r', 'measure')}() {
+					${this.builders.measure}
+				},
+
+				${method_name('f', 'fix')}() {
+					${this.builders.fix}
+				},
+
+				${method_name('a', 'animate')}() {
+					${this.builders.animate}
+				},
+			`);
+	        }
+	        if (this.has_intro_method || this.has_outro_method) {
+	            if (this.builders.intro.is_empty()) {
+	                properties.add_line(`i: @noop,`);
+	            }
+	            else {
+	                properties.add_block(deindent `
+					${method_name('i', 'intro')}(#local) {
+						${this.has_outros && `if (#current) return;`}
+						${this.builders.intro}
+					},
+				`);
+	            }
+	            if (this.builders.outro.is_empty()) {
+	                properties.add_line(`o: @noop,`);
+	            }
+	            else {
+	                properties.add_block(deindent `
+					${method_name('o', 'outro')}(#local) {
+						${this.builders.outro}
+					},
+				`);
+	            }
+	        }
+	        if (this.builders.destroy.is_empty()) {
+	            properties.add_line(`d: @noop`);
+	        }
+	        else {
+	            properties.add_block(deindent `
+				${method_name('d', 'destroy')}(detaching) {
+					${this.builders.destroy}
+				}
+			`);
+	        }
+	        return deindent `
+			${this.variables.size > 0 &&
+            `var ${Array.from(this.variables.keys())
+                .map(key => {
+                const init = this.variables.get(key);
+                return init !== undefined ? `${key} = ${init}` : key;
+            })
+                .join(', ')};`}
+
+			${!this.builders.init.is_empty() && this.builders.init}
+
+			return {
+				${properties}
+			};
+		`.replace(/(#+)(\w*)/g, (match, sigil, name) => {
+	            return sigil === '#' ? this.alias(name) : sigil.slice(1) + name;
+	        });
+	    }
+	    render_listeners(chunk = '') {
+	        if (this.event_listeners.length > 0) {
+	            this.add_variable(`#dispose${chunk}`);
+	            if (this.event_listeners.length === 1) {
+	                this.builders.hydrate.add_line(`#dispose${chunk} = ${this.event_listeners[0]};`);
+	                this.builders.destroy.add_line(`#dispose${chunk}();`);
+	            }
+	            else {
+	                this.builders.hydrate.add_block(deindent `
+					#dispose${chunk} = [
+						${this.event_listeners.join(',\n')}
+					];
+				`);
+	                this.builders.destroy.add_line(`@run_all(#dispose${chunk});`);
+	            }
+	        }
+	    }
+	    toString() {
+	        const local_key = this.key && this.get_unique_name('key');
+	        return deindent `
+			${this.comment && `// ${this.comment}`}
+			function ${this.name}(${this.key ? `${local_key}, ` : ''}ctx) {
+				${this.get_contents(local_key)}
+			}
+		`;
+	    }
+	}
+
+	class Wrapper {
+	    constructor(renderer, block, parent, node) {
+	        this.node = node;
+	        // make these non-enumerable so that they can be logged sensibly
+	        // (TODO in dev only?)
+	        Object.defineProperties(this, {
+	            renderer: {
+	                value: renderer
+	            },
+	            parent: {
+	                value: parent
+	            }
+	        });
+	        this.can_use_innerhtml = !renderer.options.hydratable;
+	        block.wrappers.push(this);
+	    }
+	    cannot_use_innerhtml() {
+	        this.can_use_innerhtml = false;
+	        if (this.parent)
+	            this.parent.cannot_use_innerhtml();
+	    }
+	    get_or_create_anchor(block, parent_node, parent_nodes) {
+	        // TODO use this in EachBlock and IfBlock — tricky because
+	        // children need to be created first
+	        const needs_anchor = this.next ? !this.next.is_dom_node() : !parent_node || !this.parent.is_dom_node();
+	        const anchor = needs_anchor
+	            ? block.get_unique_name(`${this.var}_anchor`)
+	            : (this.next && this.next.var) || 'null';
+	        if (needs_anchor) {
+	            block.add_element(anchor, `@empty()`, parent_nodes && `@empty()`, parent_node);
+	        }
+	        return anchor;
+	    }
+	    get_update_mount_node(anchor) {
+	        return (this.parent && this.parent.is_dom_node())
+	            ? this.parent.var
+	            : `${anchor}.parentNode`;
+	    }
+	    is_dom_node() {
+	        return (this.node.type === 'Element' ||
+	            this.node.type === 'Text' ||
+	            this.node.type === 'MustacheTag');
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        throw Error('Wrapper class is not renderable');
+	    }
+	}
+
+	function create_debugging_comment(node, component) {
+	    const { locate, source } = component;
+	    let c = node.start;
+	    if (node.type === 'ElseBlock') {
+	        while (source[c - 1] !== '{')
+	            c -= 1;
+	        while (source[c - 1] === '{')
+	            c -= 1;
+	    }
+	    let d;
+	    if (node.type === 'InlineComponent' || node.type === 'Element') {
+	        d = node.children.length ? node.children[0].start : node.start;
+	        while (source[d - 1] !== '>')
+	            d -= 1;
+	    }
+	    else {
+	        // @ts-ignore
+	        d = node.expression ? node.expression.node.end : c;
+	        while (source[d] !== '}')
+	            d += 1;
+	        while (source[d] === '}')
+	            d += 1;
+	    }
+	    const start = locate(c);
+	    const loc = `(${start.line + 1}:${start.column})`;
+	    return `${loc} ${source.slice(c, d)}`.replace(/\s/g, ' ');
+	}
+
+	class AwaitBlockBranch extends Wrapper {
+	    constructor(status, renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.var = null;
+	        this.block = block.child({
+	            comment: create_debugging_comment(node, this.renderer.component),
+	            name: this.renderer.component.get_unique_name(`create_${status}_block`)
+	        });
+	        this.fragment = new FragmentWrapper(renderer, this.block, this.node.children, parent, strip_whitespace, next_sibling);
+	        this.is_dynamic = this.block.dependencies.size > 0;
+	    }
+	}
+	class AwaitBlockWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.var = 'await_block';
+	        this.cannot_use_innerhtml();
+	        block.add_dependencies(this.node.expression.dependencies);
+	        let is_dynamic = false;
+	        let has_intros = false;
+	        let has_outros = false;
+	        ['pending', 'then', 'catch'].forEach(status => {
+	            const child = this.node[status];
+	            const branch = new AwaitBlockBranch(status, renderer, block, this, child, strip_whitespace, next_sibling);
+	            renderer.blocks.push(branch.block);
+	            if (branch.is_dynamic) {
+	                is_dynamic = true;
+	                // TODO should blocks update their own parents?
+	                block.add_dependencies(branch.block.dependencies);
+	            }
+	            if (branch.block.has_intros)
+	                has_intros = true;
+	            if (branch.block.has_outros)
+	                has_outros = true;
+	            this[status] = branch;
+	        });
+	        this.pending.block.has_update_method = is_dynamic;
+	        this.then.block.has_update_method = is_dynamic;
+	        this.catch.block.has_update_method = is_dynamic;
+	        this.pending.block.has_intro_method = has_intros;
+	        this.then.block.has_intro_method = has_intros;
+	        this.catch.block.has_intro_method = has_intros;
+	        this.pending.block.has_outro_method = has_outros;
+	        this.then.block.has_outro_method = has_outros;
+	        this.catch.block.has_outro_method = has_outros;
+	        if (has_outros) {
+	            block.add_outro();
+	        }
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const anchor = this.get_or_create_anchor(block, parent_node, parent_nodes);
+	        const update_mount_node = this.get_update_mount_node(anchor);
+	        const snippet = this.node.expression.render(block);
+	        const info = block.get_unique_name(`info`);
+	        const promise = block.get_unique_name(`promise`);
+	        block.add_variable(promise);
+	        block.maintain_context = true;
+	        const info_props = [
+	            'ctx',
+	            'current: null',
+	            this.pending.block.name && `pending: ${this.pending.block.name}`,
+	            this.then.block.name && `then: ${this.then.block.name}`,
+	            this.catch.block.name && `catch: ${this.catch.block.name}`,
+	            this.then.block.name && `value: '${this.node.value}'`,
+	            this.catch.block.name && `error: '${this.node.error}'`,
+	            this.pending.block.has_outro_method && `blocks: Array(3)`
+	        ].filter(Boolean);
+	        block.builders.init.add_block(deindent `
+			let ${info} = {
+				${info_props.join(',\n')}
+			};
+		`);
+	        block.builders.init.add_block(deindent `
+			@handle_promise(${promise} = ${snippet}, ${info});
+		`);
+	        block.builders.create.add_block(deindent `
+			${info}.block.c();
+		`);
+	        if (parent_nodes && this.renderer.options.hydratable) {
+	            block.builders.claim.add_block(deindent `
+				${info}.block.l(${parent_nodes});
+			`);
+	        }
+	        const initial_mount_node = parent_node || '#target';
+	        const anchor_node = parent_node ? 'null' : 'anchor';
+	        const has_transitions = this.pending.block.has_intro_method || this.pending.block.has_outro_method;
+	        block.builders.mount.add_block(deindent `
+			${info}.block.m(${initial_mount_node}, ${info}.anchor = ${anchor_node});
+			${info}.mount = () => ${update_mount_node};
+			${info}.anchor = ${anchor};
+		`);
+	        if (has_transitions) {
+	            block.builders.intro.add_line(`${info}.block.i();`);
+	        }
+	        const conditions = [];
+	        const dependencies = this.node.expression.dynamic_dependencies();
+	        if (dependencies.length > 0) {
+	            conditions.push(`(${dependencies.map(dep => `'${dep}' in changed`).join(' || ')})`);
+	        }
+	        conditions.push(`${promise} !== (${promise} = ${snippet})`, `@handle_promise(${promise}, ${info})`);
+	        block.builders.update.add_line(`${info}.ctx = ctx;`);
+	        if (this.pending.block.has_update_method) {
+	            block.builders.update.add_block(deindent `
+				if (${conditions.join(' && ')}) {
+					// nothing
+				} else {
+					${info}.block.p(changed, @assign(@assign({}, ctx), ${info}.resolved));
+				}
+			`);
+	        }
+	        else {
+	            block.builders.update.add_block(deindent `
+				${conditions.join(' && ')}
+			`);
+	        }
+	        if (this.pending.block.has_outro_method) {
+	            block.builders.outro.add_block(deindent `
+				for (let #i = 0; #i < 3; #i += 1) {
+					const block = ${info}.blocks[#i];
+					if (block) block.o();
+				}
+			`);
+	        }
+	        block.builders.destroy.add_block(deindent `
+			${info}.block.d(${parent_node ? '' : 'detaching'});
+			${info} = null;
+		`);
+	        [this.pending, this.then, this.catch].forEach(branch => {
+	            branch.fragment.render(branch.block, null, 'nodes');
+	        });
+	    }
+	}
+
+	class BodyWrapper extends Wrapper {
+	    render(block, parent_node, parent_nodes) {
+	        this.node.handlers.forEach(handler => {
+	            const snippet = handler.render(block);
+	            block.builders.init.add_block(deindent `
+				document.body.addEventListener("${handler.name}", ${snippet});
+			`);
+	            block.builders.destroy.add_block(deindent `
+				document.body.removeEventListener("${handler.name}", ${snippet});
+			`);
+	        });
+	    }
+	}
+
+	function add_to_set(a, b) {
+	    // @ts-ignore
+	    b.forEach(item => {
+	        a.add(item);
+	    });
+	}
+
+	class DebugTagWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const { renderer } = this;
+	        const { component } = renderer;
+	        if (!renderer.options.dev)
+	            return;
+	        const { code, var_lookup } = component;
+	        if (this.node.expressions.length === 0) {
+	            // Debug all
+	            code.overwrite(this.node.start + 1, this.node.start + 7, 'debugger', {
+	                storeName: true
+	            });
+	            const statement = `[✂${this.node.start + 1}-${this.node.start + 7}✂];`;
+	            block.builders.create.add_line(statement);
+	            block.builders.update.add_line(statement);
+	        }
+	        else {
+	            const { code } = component;
+	            code.overwrite(this.node.start + 1, this.node.start + 7, 'log', {
+	                storeName: true
+	            });
+	            const log = `[✂${this.node.start + 1}-${this.node.start + 7}✂]`;
+	            const dependencies = new Set();
+	            this.node.expressions.forEach(expression => {
+	                add_to_set(dependencies, expression.dependencies);
+	            });
+	            const condition = Array.from(dependencies).map(d => `changed.${d}`).join(' || ');
+	            const ctx_identifiers = this.node.expressions
+	                .filter(e => {
+	                const looked_up_var = var_lookup.get(e.node.name);
+	                return !(looked_up_var && looked_up_var.hoistable);
+	            })
+	                .map(e => e.node.name)
+	                .join(', ');
+	            const logged_identifiers = this.node.expressions.map(e => e.node.name).join(', ');
+	            block.builders.update.add_block(deindent `
+				if (${condition}) {
+					const { ${ctx_identifiers} } = ctx;
+					console.${log}({ ${logged_identifiers} });
+					debugger;
+				}
+			`);
+	            block.builders.create.add_block(deindent `
+				{
+					const { ${ctx_identifiers} } = ctx;
+					console.${log}({ ${logged_identifiers} });
+					debugger;
+				}
+			`);
+	        }
+	    }
+	}
+
+	function new_tail() {
+	    return '%%tail_head%%';
+	}
+	function attach_head(head, tail) {
+	    return tail.replace('%%tail_head%%', head);
+	}
+
+	class ElseBlockWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.var = null;
+	        this.block = block.child({
+	            comment: create_debugging_comment(node, this.renderer.component),
+	            name: this.renderer.component.get_unique_name(`create_else_block`)
+	        });
+	        this.fragment = new FragmentWrapper(renderer, this.block, this.node.children, parent, strip_whitespace, next_sibling);
+	        this.is_dynamic = this.block.dependencies.size > 0;
+	    }
+	}
+	class EachBlockWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.var = 'each';
+	        this.cannot_use_innerhtml();
+	        const { dependencies } = node.expression;
+	        block.add_dependencies(dependencies);
+	        this.block = block.child({
+	            comment: create_debugging_comment(this.node, this.renderer.component),
+	            name: renderer.component.get_unique_name('create_each_block'),
+	            // @ts-ignore todo: probably error
+	            key: node.key,
+	            bindings: new Map(block.bindings)
+	        });
+	        // TODO this seems messy
+	        this.block.has_animation = this.node.has_animation;
+	        this.index_name = this.node.index || renderer.component.get_unique_name(`${this.node.context}_index`);
+	        const fixed_length = node.expression.node.type === 'ArrayExpression' &&
+	            node.expression.node.elements.every(element => element.type !== 'SpreadElement')
+	            ? node.expression.node.elements.length
+	            : null;
+	        // hack the sourcemap, so that if data is missing the bug
+	        // is easy to find
+	        let c = this.node.start + 2;
+	        while (renderer.component.source[c] !== 'e')
+	            c += 1;
+	        renderer.component.code.overwrite(c, c + 4, 'length');
+	        const each_block_value = renderer.component.get_unique_name(`${this.var}_value`);
+	        const iterations = block.get_unique_name(`${this.var}_blocks`);
+	        this.vars = {
+	            create_each_block: this.block.name,
+	            each_block_value,
+	            get_each_context: renderer.component.get_unique_name(`get_${this.var}_context`),
+	            iterations,
+	            length: `[✂${c}-${c + 4}✂]`,
+	            // optimisation for array literal
+	            fixed_length,
+	            data_length: fixed_length === null ? `${each_block_value}.[✂${c}-${c + 4}✂]` : fixed_length,
+	            view_length: fixed_length === null ? `${iterations}.[✂${c}-${c + 4}✂]` : fixed_length,
+	            // filled out later
+	            anchor: null
+	        };
+	        node.contexts.forEach(prop => {
+	            this.block.bindings.set(prop.key.name, {
+	                object: this.vars.each_block_value,
+	                property: this.index_name,
+	                snippet: attach_head(`${this.vars.each_block_value}[${this.index_name}]`, prop.tail)
+	            });
+	        });
+	        if (this.node.index) {
+	            this.block.get_unique_name(this.node.index); // this prevents name collisions (#1254)
+	        }
+	        renderer.blocks.push(this.block);
+	        this.fragment = new FragmentWrapper(renderer, this.block, node.children, this, strip_whitespace, next_sibling);
+	        if (this.node.else) {
+	            this.else = new ElseBlockWrapper(renderer, block, this, this.node.else, strip_whitespace, next_sibling);
+	            renderer.blocks.push(this.else.block);
+	            if (this.else.is_dynamic) {
+	                this.block.add_dependencies(this.else.block.dependencies);
+	            }
+	        }
+	        block.add_dependencies(this.block.dependencies);
+	        if (this.block.has_outros || (this.else && this.else.block.has_outros)) {
+	            block.add_outro();
+	        }
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        if (this.fragment.nodes.length === 0)
+	            return;
+	        const { renderer } = this;
+	        const { component } = renderer;
+	        const needs_anchor = this.next
+	            ? !this.next.is_dom_node() :
+	            !parent_node || !this.parent.is_dom_node();
+	        this.vars.anchor = needs_anchor
+	            ? block.get_unique_name(`${this.var}_anchor`)
+	            : (this.next && this.next.var) || 'null';
+	        this.context_props = this.node.contexts.map(prop => `child_ctx.${prop.key.name} = ${attach_head('list[i]', prop.tail)};`);
+	        if (this.node.has_binding)
+	            this.context_props.push(`child_ctx.${this.vars.each_block_value} = list;`);
+	        if (this.node.has_binding || this.node.index)
+	            this.context_props.push(`child_ctx.${this.index_name} = i;`);
+	        const snippet = this.node.expression.render(block);
+	        block.builders.init.add_line(`var ${this.vars.each_block_value} = ${snippet};`);
+	        renderer.blocks.push(deindent `
+			function ${this.vars.get_each_context}(ctx, list, i) {
+				const child_ctx = Object.create(ctx);
+				${this.context_props}
+				return child_ctx;
+			}
+		`);
+	        if (this.node.key) {
+	            this.render_keyed(block, parent_node, parent_nodes, snippet);
+	        }
+	        else {
+	            this.render_unkeyed(block, parent_node, parent_nodes, snippet);
+	        }
+	        if (this.block.has_intro_method || this.block.has_outro_method) {
+	            block.builders.intro.add_block(deindent `
+				for (var #i = 0; #i < ${this.vars.data_length}; #i += 1) ${this.vars.iterations}[#i].i();
+			`);
+	        }
+	        if (needs_anchor) {
+	            block.add_element(this.vars.anchor, `@empty()`, parent_nodes && `@empty()`, parent_node);
+	        }
+	        if (this.else) {
+	            const each_block_else = component.get_unique_name(`${this.var}_else`);
+	            block.builders.init.add_line(`var ${each_block_else} = null;`);
+	            // TODO neaten this up... will end up with an empty line in the block
+	            block.builders.init.add_block(deindent `
+				if (!${this.vars.data_length}) {
+					${each_block_else} = ${this.else.block.name}(ctx);
+					${each_block_else}.c();
+				}
+			`);
+	            block.builders.mount.add_block(deindent `
+				if (${each_block_else}) {
+					${each_block_else}.m(${parent_node || '#target'}, null);
+				}
+			`);
+	            const initial_mount_node = parent_node || `${this.vars.anchor}.parentNode`;
+	            if (this.else.block.has_update_method) {
+	                block.builders.update.add_block(deindent `
+					if (!${this.vars.data_length} && ${each_block_else}) {
+						${each_block_else}.p(changed, ctx);
+					} else if (!${this.vars.data_length}) {
+						${each_block_else} = ${this.else.block.name}(ctx);
+						${each_block_else}.c();
+						${each_block_else}.m(${initial_mount_node}, ${this.vars.anchor});
+					} else if (${each_block_else}) {
+						${each_block_else}.d(1);
+						${each_block_else} = null;
+					}
+				`);
+	            }
+	            else {
+	                block.builders.update.add_block(deindent `
+					if (${this.vars.data_length}) {
+						if (${each_block_else}) {
+							${each_block_else}.d(1);
+							${each_block_else} = null;
+						}
+					} else if (!${each_block_else}) {
+						${each_block_else} = ${this.else.block.name}(ctx);
+						${each_block_else}.c();
+						${each_block_else}.m(${initial_mount_node}, ${this.vars.anchor});
+					}
+				`);
+	            }
+	            block.builders.destroy.add_block(deindent `
+				if (${each_block_else}) ${each_block_else}.d(${parent_node ? '' : 'detaching'});
+			`);
+	        }
+	        this.fragment.render(this.block, null, 'nodes');
+	        if (this.else) {
+	            this.else.fragment.render(this.else.block, null, 'nodes');
+	        }
+	    }
+	    render_keyed(block, parent_node, parent_nodes, snippet) {
+	        const { create_each_block, length, anchor, iterations, view_length } = this.vars;
+	        const get_key = block.get_unique_name('get_key');
+	        const lookup = block.get_unique_name(`${this.var}_lookup`);
+	        block.add_variable(iterations, '[]');
+	        block.add_variable(lookup, `new Map()`);
+	        if (this.fragment.nodes[0].is_dom_node()) {
+	            this.block.first = this.fragment.nodes[0].var;
+	        }
+	        else {
+	            this.block.first = this.block.get_unique_name('first');
+	            this.block.add_element(this.block.first, `@empty()`, parent_nodes && `@empty()`, null);
+	        }
+	        block.builders.init.add_block(deindent `
+			const ${get_key} = ctx => ${
+        // @ts-ignore todo: probably error
+        this.node.key.render()};
+
+			for (var #i = 0; #i < ${this.vars.each_block_value}.${length}; #i += 1) {
+				let child_ctx = ${this.vars.get_each_context}(ctx, ${this.vars.each_block_value}, #i);
+				let key = ${get_key}(child_ctx);
+				${lookup}.set(key, ${iterations}[#i] = ${create_each_block}(key, child_ctx));
+			}
+		`);
+	        const initial_mount_node = parent_node || '#target';
+	        const update_mount_node = this.get_update_mount_node(anchor);
+	        const anchor_node = parent_node ? 'null' : 'anchor';
+	        block.builders.create.add_block(deindent `
+			for (#i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].c();
+		`);
+	        if (parent_nodes && this.renderer.options.hydratable) {
+	            block.builders.claim.add_block(deindent `
+				for (#i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].l(${parent_nodes});
+			`);
+	        }
+	        block.builders.mount.add_block(deindent `
+			for (#i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].m(${initial_mount_node}, ${anchor_node});
+		`);
+	        const dynamic = this.block.has_update_method;
+	        const destroy = this.node.has_animation
+	            ? `@fix_and_outro_and_destroy_block`
+	            : this.block.has_outros
+	                ? `@outro_and_destroy_block`
+	                : `@destroy_block`;
+	        block.builders.update.add_block(deindent `
+			const ${this.vars.each_block_value} = ${snippet};
+
+			${this.block.has_outros && `@group_outros();`}
+			${this.node.has_animation && `for (let #i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].r();`}
+			${iterations} = @update_keyed_each(${iterations}, changed, ${get_key}, ${dynamic ? '1' : '0'}, ctx, ${this.vars.each_block_value}, ${lookup}, ${update_mount_node}, ${destroy}, ${create_each_block}, ${anchor}, ${this.vars.get_each_context});
+			${this.node.has_animation && `for (let #i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].a();`}
+			${this.block.has_outros && `@check_outros();`}
+		`);
+	        if (this.block.has_outros) {
+	            block.builders.outro.add_block(deindent `
+				for (#i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].o();
+			`);
+	        }
+	        block.builders.destroy.add_block(deindent `
+			for (#i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].d(${parent_node ? '' : 'detaching'});
+		`);
+	    }
+	    render_unkeyed(block, parent_node, parent_nodes, snippet) {
+	        const { create_each_block, length, iterations, fixed_length, data_length, view_length, anchor } = this.vars;
+	        block.builders.init.add_block(deindent `
+			var ${iterations} = [];
+
+			for (var #i = 0; #i < ${data_length}; #i += 1) {
+				${iterations}[#i] = ${create_each_block}(${this.vars.get_each_context}(ctx, ${this.vars.each_block_value}, #i));
+			}
+		`);
+	        const initial_mount_node = parent_node || '#target';
+	        const update_mount_node = this.get_update_mount_node(anchor);
+	        const anchor_node = parent_node ? 'null' : 'anchor';
+	        block.builders.create.add_block(deindent `
+			for (var #i = 0; #i < ${view_length}; #i += 1) {
+				${iterations}[#i].c();
+			}
+		`);
+	        if (parent_nodes && this.renderer.options.hydratable) {
+	            block.builders.claim.add_block(deindent `
+				for (var #i = 0; #i < ${view_length}; #i += 1) {
+					${iterations}[#i].l(${parent_nodes});
+				}
+			`);
+	        }
+	        block.builders.mount.add_block(deindent `
+			for (var #i = 0; #i < ${view_length}; #i += 1) {
+				${iterations}[#i].m(${initial_mount_node}, ${anchor_node});
+			}
+		`);
+	        const all_dependencies = new Set(this.block.dependencies);
+	        const { dependencies } = this.node.expression;
+	        dependencies.forEach((dependency) => {
+	            all_dependencies.add(dependency);
+	        });
+	        const outro_block = this.block.has_outros && block.get_unique_name('outro_block');
+	        if (outro_block) {
+	            block.builders.init.add_block(deindent `
+				function ${outro_block}(i, detaching, local) {
+					if (${iterations}[i]) {
+						if (detaching) {
+							@on_outro(() => {
+								${iterations}[i].d(detaching);
+								${iterations}[i] = null;
+							});
+						}
+
+						${iterations}[i].o(local);
+					}
+				}
+			`);
+	        }
+	        const condition = Array.from(all_dependencies)
+	            .map(dependency => `changed.${dependency}`)
+	            .join(' || ');
+	        const has_transitions = !!(this.block.has_intro_method || this.block.has_outro_method);
+	        if (condition !== '') {
+	            const for_loop_body = this.block.has_update_method
+	                ? deindent `
+					if (${iterations}[#i]) {
+						${iterations}[#i].p(changed, child_ctx);
+						${has_transitions && `${iterations}[#i].i(1);`}
+					} else {
+						${iterations}[#i] = ${create_each_block}(child_ctx);
+						${iterations}[#i].c();
+						${has_transitions && `${iterations}[#i].i(1);`}
+						${iterations}[#i].m(${update_mount_node}, ${anchor});
+					}
+				`
+	                : deindent `
+					${iterations}[#i] = ${create_each_block}(child_ctx);
+					${iterations}[#i].c();
+					${has_transitions && `${iterations}[#i].i(1);`}
+					${iterations}[#i].m(${update_mount_node}, ${anchor});
+				`;
+	            const start = this.block.has_update_method ? '0' : `${view_length}`;
+	            let remove_old_blocks;
+	            if (this.block.has_outros) {
+	                remove_old_blocks = deindent `
+					@group_outros();
+					for (; #i < ${view_length}; #i += 1) ${outro_block}(#i, 1, 1);
+					@check_outros();
+				`;
+	            }
+	            else {
+	                remove_old_blocks = deindent `
+					for (${this.block.has_update_method ? `` : `#i = ${this.vars.each_block_value}.${length}`}; #i < ${view_length}; #i += 1) {
+						${iterations}[#i].d(1);
+					}
+					${!fixed_length && `${view_length} = ${this.vars.each_block_value}.${length};`}
+				`;
+	            }
+	            const update = deindent `
+				${this.vars.each_block_value} = ${snippet};
+
+				for (var #i = ${start}; #i < ${this.vars.each_block_value}.${length}; #i += 1) {
+					const child_ctx = ${this.vars.get_each_context}(ctx, ${this.vars.each_block_value}, #i);
+
+					${for_loop_body}
+				}
+
+				${remove_old_blocks}
+			`;
+	            block.builders.update.add_block(deindent `
+				if (${condition}) {
+					${update}
+				}
+			`);
+	        }
+	        if (outro_block) {
+	            block.builders.outro.add_block(deindent `
+				${iterations} = ${iterations}.filter(Boolean);
+				for (let #i = 0; #i < ${view_length}; #i += 1) ${outro_block}(#i, 0);`);
+	        }
+	        block.builders.destroy.add_block(`@destroy_each(${iterations}, detaching);`);
+	    }
+	}
+
+	const svg_attributes = 'accent-height accumulate additive alignment-baseline allowReorder alphabetic amplitude arabic-form ascent attributeName attributeType autoReverse azimuth baseFrequency baseline-shift baseProfile bbox begin bias by calcMode cap-height class clip clipPathUnits clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominant-baseline dur dx dy edgeMode elevation enable-background end exponent externalResourcesRequired fill fill-opacity fill-rule filter filterRes filterUnits flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight format from fr fx fy g1 g2 glyph-name glyph-orientation-horizontal glyph-orientation-vertical glyphRef gradientTransform gradientUnits hanging height href horiz-adv-x horiz-origin-x id ideographic image-rendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lang lengthAdjust letter-spacing lighting-color limitingConeAngle local marker-end marker-mid marker-start markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical max media method min mode name numOctaves offset onabort onactivate onbegin onclick onend onerror onfocusin onfocusout onload onmousedown onmousemove onmouseout onmouseover onmouseup onrepeat onresize onscroll onunload opacity operator order orient orientation origin overflow overline-position overline-thickness panose-1 paint-order pathLength patternContentUnits patternTransform patternUnits pointer-events points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shape-rendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stop-color stop-opacity strikethrough-position strikethrough-thickness string stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width style surfaceScale systemLanguage tabindex tableValues target targetX targetY text-anchor text-decoration text-rendering textLength to transform type u1 u2 underline-position underline-thickness unicode unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical values version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget visibility width widths word-spacing writing-mode x x-height x1 x2 xChannelSelector xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space y y1 y2 yChannelSelector z zoomAndPan'.split(' ');
+	const svg_attribute_lookup = new Map();
+	svg_attributes.forEach(name => {
+	    svg_attribute_lookup.set(name.toLowerCase(), name);
+	});
+	function fix_attribute_casing(name) {
+	    name = name.toLowerCase();
+	    return svg_attribute_lookup.get(name) || name;
+	}
+
+	const html = 'http://www.w3.org/1999/xhtml';
+	const mathml = 'http://www.w3.org/1998/Math/MathML';
+	const svg = 'http://www.w3.org/2000/svg';
+	const xlink = 'http://www.w3.org/1999/xlink';
+	const xml = 'http://www.w3.org/XML/1998/namespace';
+	const xmlns = 'http://www.w3.org/2000/xmlns';
+	const valid_namespaces = [
+	    'html',
+	    'mathml',
+	    'svg',
+	    'xlink',
+	    'xml',
+	    'xmlns',
+	    html,
+	    mathml,
+	    svg,
+	    xlink,
+	    xml,
+	    xmlns,
+	];
+	const namespaces = { html, mathml, svg, xlink, xml, xmlns };
+
+	class AttributeWrapper {
+	    constructor(parent, block, node) {
+	        this.node = node;
+	        this.parent = parent;
+	        if (node.dependencies.size > 0) {
+	            parent.cannot_use_innerhtml();
+	            block.add_dependencies(node.dependencies);
+	            // special case — <option value={foo}> — see below
+	            if (this.parent.node.name === 'option' && node.name === 'value') {
+	                let select = this.parent;
+	                while (select && (select.node.type !== 'Element' || select.node.name !== 'select'))
+	                    // @ts-ignore todo: doublecheck this, but looks to be correct
+	                    select = select.parent;
+	                if (select && select.select_binding_dependencies) {
+	                    select.select_binding_dependencies.forEach(prop => {
+	                        this.node.dependencies.forEach((dependency) => {
+	                            this.parent.renderer.component.indirect_dependencies.get(prop).add(dependency);
+	                        });
+	                    });
+	                }
+	            }
+	        }
+	    }
+	    render(block) {
+	        const element = this.parent;
+	        const name = fix_attribute_casing(this.node.name);
+	        let metadata = element.node.namespace ? null : attribute_lookup[name];
+	        if (metadata && metadata.applies_to && !~metadata.applies_to.indexOf(element.node.name))
+	            metadata = null;
+	        const is_indirectly_bound_value = name === 'value' &&
+	            (element.node.name === 'option' || // TODO check it's actually bound
+	                (element.node.name === 'input' &&
+	                    element.node.bindings.find((binding) => /checked|group/.test(binding.name))));
+	        const property_name = is_indirectly_bound_value
+	            ? '__value'
+	            : metadata && metadata.property_name;
+	        // xlink is a special case... we could maybe extend this to generic
+	        // namespaced attributes but I'm not sure that's applicable in
+	        // HTML5?
+	        const method = /-/.test(element.node.name)
+	            ? '@set_custom_element_data'
+	            : name.slice(0, 6) === 'xlink:'
+	                ? '@xlink_attr'
+	                : '@attr';
+	        const is_legacy_input_type = element.renderer.component.compile_options.legacy && name === 'type' && this.parent.node.name === 'input';
+	        const is_dataset = /^data-/.test(name) && !element.renderer.component.compile_options.legacy && !element.node.namespace;
+	        const camel_case_name = is_dataset ? name.replace('data-', '').replace(/(-\w)/g, function (m) {
+	            return m[1].toUpperCase();
+	        }) : name;
+	        if (this.node.is_dynamic) {
+	            let value;
+	            // TODO some of this code is repeated in Tag.ts — would be good to
+	            // DRY it out if that's possible without introducing crazy indirection
+	            if (this.node.chunks.length === 1) {
+	                // single {tag} — may be a non-string
+	                value = this.node.chunks[0].render(block);
+	            }
+	            else {
+	                // '{foo} {bar}' — treat as string concatenation
+	                value =
+	                    (this.node.chunks[0].type === 'Text' ? '' : `"" + `) +
+	                        this.node.chunks
+	                            .map((chunk) => {
+	                            if (chunk.type === 'Text') {
+	                                return stringify(chunk.data);
+	                            }
+	                            else {
+	                                return chunk.get_precedence() <= 13
+	                                    ? `(${chunk.render()})`
+	                                    : chunk.render();
+	                            }
+	                        })
+	                            .join(' + ');
+	            }
+	            const is_select_value_attribute = name === 'value' && element.node.name === 'select';
+	            const should_cache = (this.node.should_cache || is_select_value_attribute);
+	            const last = should_cache && block.get_unique_name(`${element.var}_${name.replace(/[^a-zA-Z_$]/g, '_')}_value`);
+	            if (should_cache)
+	                block.add_variable(last);
+	            let updater;
+	            const init = should_cache ? `${last} = ${value}` : value;
+	            if (is_legacy_input_type) {
+	                block.builders.hydrate.add_line(`@set_input_type(${element.var}, ${init});`);
+	                updater = `@set_input_type(${element.var}, ${should_cache ? last : value});`;
+	            }
+	            else if (is_select_value_attribute) {
+	                // annoying special case
+	                const is_multiple_select = element.node.get_static_attribute_value('multiple');
+	                const i = block.get_unique_name('i');
+	                const option = block.get_unique_name('option');
+	                const if_statement = is_multiple_select
+	                    ? deindent `
+						${option}.selected = ~${last}.indexOf(${option}.__value);`
+	                    : deindent `
+						if (${option}.__value === ${last}) {
+							${option}.selected = true;
+							break;
+						}`;
+	                updater = deindent `
+					for (var ${i} = 0; ${i} < ${element.var}.options.length; ${i} += 1) {
+						var ${option} = ${element.var}.options[${i}];
+
+						${if_statement}
+					}
+				`;
+	                block.builders.mount.add_block(deindent `
+					${last} = ${value};
+					${updater}
+				`);
+	            }
+	            else if (property_name) {
+	                block.builders.hydrate.add_line(`${element.var}.${property_name} = ${init};`);
+	                updater = `${element.var}.${property_name} = ${should_cache ? last : value};`;
+	            }
+	            else if (is_dataset) {
+	                block.builders.hydrate.add_line(`${element.var}.dataset.${camel_case_name} = ${init};`);
+	                updater = `${element.var}.dataset.${camel_case_name} = ${should_cache ? last : value};`;
+	            }
+	            else {
+	                block.builders.hydrate.add_line(`${method}(${element.var}, "${name}", ${init});`);
+	                updater = `${method}(${element.var}, "${name}", ${should_cache ? last : value});`;
+	            }
+	            // only add an update if mutations are involved (or it's a select?)
+	            const dependencies = this.node.get_dependencies();
+	            if (dependencies.length > 0 || is_select_value_attribute) {
+	                const changed_check = ((block.has_outros ? `!#current || ` : '') +
+	                    dependencies.map(dependency => `changed.${dependency}`).join(' || '));
+	                const update_cached_value = `${last} !== (${last} = ${value})`;
+	                const condition = should_cache
+	                    ? (dependencies.length ? `(${changed_check}) && ${update_cached_value}` : update_cached_value)
+	                    : changed_check;
+	                block.builders.update.add_conditional(condition, updater);
+	            }
+	        }
+	        else {
+	            const value = this.node.get_value(block);
+	            const statement = (is_legacy_input_type
+	                ? `@set_input_type(${element.var}, ${value});`
+	                : property_name
+	                    ? `${element.var}.${property_name} = ${value};`
+	                    : is_dataset
+	                        ? `${element.var}.dataset.${camel_case_name} = ${value === true ? '""' : value};`
+	                        : `${method}(${element.var}, "${name}", ${value === true ? '""' : value});`);
+	            block.builders.hydrate.add_line(statement);
+	            // special case – autofocus. has to be handled in a bit of a weird way
+	            if (this.node.is_true && name === 'autofocus') {
+	                block.autofocus = element.var;
+	            }
+	        }
+	        if (is_indirectly_bound_value) {
+	            const update_value = `${element.var}.value = ${element.var}.__value;`;
+	            block.builders.hydrate.add_line(update_value);
+	            if (this.node.is_dynamic)
+	                block.builders.update.add_line(update_value);
+	        }
+	    }
+	    stringify() {
+	        if (this.node.is_true)
+	            return '';
+	        const value = this.node.chunks;
+	        if (value.length === 0)
+	            return `=""`;
+	        return `="${value.map(chunk => {
+            return chunk.type === 'Text'
+                ? chunk.data.replace(/"/g, '\\"')
+                : `\${${chunk.render()}}`;
+        })}"`;
+	    }
+	}
+	// source: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
+	const attribute_lookup = {
+	    accept: { applies_to: ['form', 'input'] },
+	    'accept-charset': { property_name: 'acceptCharset', applies_to: ['form'] },
+	    accesskey: { property_name: 'accessKey' },
+	    action: { applies_to: ['form'] },
+	    align: {
+	        applies_to: [
+	            'applet',
+	            'caption',
+	            'col',
+	            'colgroup',
+	            'hr',
+	            'iframe',
+	            'img',
+	            'table',
+	            'tbody',
+	            'td',
+	            'tfoot',
+	            'th',
+	            'thead',
+	            'tr',
+	        ],
+	    },
+	    allowfullscreen: { property_name: 'allowFullscreen', applies_to: ['iframe'] },
+	    alt: { applies_to: ['applet', 'area', 'img', 'input'] },
+	    async: { applies_to: ['script'] },
+	    autocomplete: { applies_to: ['form', 'input'] },
+	    autofocus: { applies_to: ['button', 'input', 'keygen', 'select', 'textarea'] },
+	    autoplay: { applies_to: ['audio', 'video'] },
+	    autosave: { applies_to: ['input'] },
+	    bgcolor: {
+	        property_name: 'bgColor',
+	        applies_to: [
+	            'body',
+	            'col',
+	            'colgroup',
+	            'marquee',
+	            'table',
+	            'tbody',
+	            'tfoot',
+	            'td',
+	            'th',
+	            'tr',
+	        ],
+	    },
+	    border: { applies_to: ['img', 'object', 'table'] },
+	    buffered: { applies_to: ['audio', 'video'] },
+	    challenge: { applies_to: ['keygen'] },
+	    charset: { applies_to: ['meta', 'script'] },
+	    checked: { applies_to: ['command', 'input'] },
+	    cite: { applies_to: ['blockquote', 'del', 'ins', 'q'] },
+	    class: { property_name: 'className' },
+	    code: { applies_to: ['applet'] },
+	    codebase: { property_name: 'codeBase', applies_to: ['applet'] },
+	    color: { applies_to: ['basefont', 'font', 'hr'] },
+	    cols: { applies_to: ['textarea'] },
+	    colspan: { property_name: 'colSpan', applies_to: ['td', 'th'] },
+	    content: { applies_to: ['meta'] },
+	    contenteditable: { property_name: 'contentEditable' },
+	    contextmenu: {},
+	    controls: { applies_to: ['audio', 'video'] },
+	    coords: { applies_to: ['area'] },
+	    data: { applies_to: ['object'] },
+	    datetime: { property_name: 'dateTime', applies_to: ['del', 'ins', 'time'] },
+	    default: { applies_to: ['track'] },
+	    defer: { applies_to: ['script'] },
+	    dir: {},
+	    dirname: { property_name: 'dirName', applies_to: ['input', 'textarea'] },
+	    disabled: {
+	        applies_to: [
+	            'button',
+	            'command',
+	            'fieldset',
+	            'input',
+	            'keygen',
+	            'optgroup',
+	            'option',
+	            'select',
+	            'textarea',
+	        ],
+	    },
+	    download: { applies_to: ['a', 'area'] },
+	    draggable: {},
+	    dropzone: {},
+	    enctype: { applies_to: ['form'] },
+	    for: { property_name: 'htmlFor', applies_to: ['label', 'output'] },
+	    formaction: { applies_to: ['input', 'button'] },
+	    headers: { applies_to: ['td', 'th'] },
+	    height: {
+	        applies_to: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],
+	    },
+	    hidden: {},
+	    high: { applies_to: ['meter'] },
+	    href: { applies_to: ['a', 'area', 'base', 'link'] },
+	    hreflang: { applies_to: ['a', 'area', 'link'] },
+	    'http-equiv': { property_name: 'httpEquiv', applies_to: ['meta'] },
+	    icon: { applies_to: ['command'] },
+	    id: {},
+	    indeterminate: { applies_to: ['input'] },
+	    ismap: { property_name: 'isMap', applies_to: ['img'] },
+	    itemprop: {},
+	    keytype: { applies_to: ['keygen'] },
+	    kind: { applies_to: ['track'] },
+	    label: { applies_to: ['track'] },
+	    lang: {},
+	    language: { applies_to: ['script'] },
+	    loop: { applies_to: ['audio', 'bgsound', 'marquee', 'video'] },
+	    low: { applies_to: ['meter'] },
+	    manifest: { applies_to: ['html'] },
+	    max: { applies_to: ['input', 'meter', 'progress'] },
+	    maxlength: { property_name: 'maxLength', applies_to: ['input', 'textarea'] },
+	    media: { applies_to: ['a', 'area', 'link', 'source', 'style'] },
+	    method: { applies_to: ['form'] },
+	    min: { applies_to: ['input', 'meter'] },
+	    multiple: { applies_to: ['input', 'select'] },
+	    muted: { applies_to: ['audio', 'video'] },
+	    name: {
+	        applies_to: [
+	            'button',
+	            'form',
+	            'fieldset',
+	            'iframe',
+	            'input',
+	            'keygen',
+	            'object',
+	            'output',
+	            'select',
+	            'textarea',
+	            'map',
+	            'meta',
+	            'param',
+	        ],
+	    },
+	    novalidate: { property_name: 'noValidate', applies_to: ['form'] },
+	    open: { applies_to: ['details'] },
+	    optimum: { applies_to: ['meter'] },
+	    pattern: { applies_to: ['input'] },
+	    ping: { applies_to: ['a', 'area'] },
+	    placeholder: { applies_to: ['input', 'textarea'] },
+	    poster: { applies_to: ['video'] },
+	    preload: { applies_to: ['audio', 'video'] },
+	    radiogroup: { applies_to: ['command'] },
+	    readonly: { property_name: 'readOnly', applies_to: ['input', 'textarea'] },
+	    rel: { applies_to: ['a', 'area', 'link'] },
+	    required: { applies_to: ['input', 'select', 'textarea'] },
+	    reversed: { applies_to: ['ol'] },
+	    rows: { applies_to: ['textarea'] },
+	    rowspan: { property_name: 'rowSpan', applies_to: ['td', 'th'] },
+	    sandbox: { applies_to: ['iframe'] },
+	    scope: { applies_to: ['th'] },
+	    scoped: { applies_to: ['style'] },
+	    seamless: { applies_to: ['iframe'] },
+	    selected: { applies_to: ['option'] },
+	    shape: { applies_to: ['a', 'area'] },
+	    size: { applies_to: ['input', 'select'] },
+	    sizes: { applies_to: ['link', 'img', 'source'] },
+	    span: { applies_to: ['col', 'colgroup'] },
+	    spellcheck: {},
+	    src: {
+	        applies_to: [
+	            'audio',
+	            'embed',
+	            'iframe',
+	            'img',
+	            'input',
+	            'script',
+	            'source',
+	            'track',
+	            'video',
+	        ],
+	    },
+	    srcdoc: { applies_to: ['iframe'] },
+	    srclang: { applies_to: ['track'] },
+	    srcset: { applies_to: ['img'] },
+	    start: { applies_to: ['ol'] },
+	    step: { applies_to: ['input'] },
+	    style: { property_name: 'style.cssText' },
+	    summary: { applies_to: ['table'] },
+	    tabindex: { property_name: 'tabIndex' },
+	    target: { applies_to: ['a', 'area', 'base', 'form'] },
+	    title: {},
+	    type: {
+	        applies_to: [
+	            'button',
+	            'command',
+	            'embed',
+	            'object',
+	            'script',
+	            'source',
+	            'style',
+	            'menu',
+	        ],
+	    },
+	    usemap: { property_name: 'useMap', applies_to: ['img', 'input', 'object'] },
+	    value: {
+	        applies_to: [
+	            'button',
+	            'option',
+	            'input',
+	            'li',
+	            'meter',
+	            'progress',
+	            'param',
+	            'select',
+	            'textarea',
+	        ],
+	    },
+	    volume: { applies_to: ['audio', 'video'] },
+	    playbackRate: { applies_to: ['audio', 'video'] },
+	    width: {
+	        applies_to: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],
+	    },
+	    wrap: { applies_to: ['textarea'] },
+	};
+	Object.keys(attribute_lookup).forEach(name => {
+	    const metadata = attribute_lookup[name];
+	    if (!metadata.property_name)
+	        metadata.property_name = name;
+	});
+
+	class StyleAttributeWrapper extends AttributeWrapper {
+	    render(block) {
+	        const style_props = optimize_style(this.node.chunks);
+	        if (!style_props)
+	            return super.render(block);
+	        style_props.forEach((prop) => {
+	            let value;
+	            if (is_dynamic(prop.value)) {
+	                const prop_dependencies = new Set();
+	                value =
+	                    ((prop.value.length === 1 || prop.value[0].type === 'Text') ? '' : `"" + `) +
+	                        prop.value
+	                            .map((chunk) => {
+	                            if (chunk.type === 'Text') {
+	                                return stringify(chunk.data);
+	                            }
+	                            else {
+	                                const snippet = chunk.render();
+	                                add_to_set(prop_dependencies, chunk.dependencies);
+	                                return chunk.get_precedence() <= 13 ? `(${snippet})` : snippet;
+	                            }
+	                        })
+	                            .join(' + ');
+	                if (prop_dependencies.size) {
+	                    const dependencies = Array.from(prop_dependencies);
+	                    const condition = ((block.has_outros ? `!#current || ` : '') +
+	                        dependencies.map(dependency => `changed.${dependency}`).join(' || '));
+	                    block.builders.update.add_conditional(condition, `@set_style(${this.parent.var}, "${prop.key}", ${value});`);
+	                }
+	            }
+	            else {
+	                value = stringify(prop.value[0].data);
+	            }
+	            block.builders.hydrate.add_line(`@set_style(${this.parent.var}, "${prop.key}", ${value});`);
+	        });
+	    }
+	}
+	function optimize_style(value) {
+	    const props = [];
+	    let chunks = value.slice();
+	    while (chunks.length) {
+	        const chunk = chunks[0];
+	        if (chunk.type !== 'Text')
+	            return null;
+	        const key_match = /^\s*([\w-]+):\s*/.exec(chunk.data);
+	        if (!key_match)
+	            return null;
+	        const key = key_match[1];
+	        const offset = key_match.index + key_match[0].length;
+	        const remaining_data = chunk.data.slice(offset);
+	        if (remaining_data) {
+	            chunks[0] = {
+	                start: chunk.start + offset,
+	                end: chunk.end,
+	                type: 'Text',
+	                data: remaining_data
+	            };
+	        }
+	        else {
+	            chunks.shift();
+	        }
+	        const result = get_style_value(chunks);
+	        props.push({ key, value: result.value });
+	        chunks = result.chunks;
+	    }
+	    return props;
+	}
+	function get_style_value(chunks) {
+	    const value = [];
+	    let in_url = false;
+	    let quote_mark = null;
+	    let escaped = false;
+	    while (chunks.length) {
+	        const chunk = chunks.shift();
+	        if (chunk.type === 'Text') {
+	            let c = 0;
+	            while (c < chunk.data.length) {
+	                const char = chunk.data[c];
+	                if (escaped) {
+	                    escaped = false;
+	                }
+	                else if (char === '\\') {
+	                    escaped = true;
+	                }
+	                else if (char === quote_mark) {
+	                    quote_mark = null;
+	                }
+	                else if (char === '"' || char === "'") {
+	                    quote_mark = char;
+	                }
+	                else if (char === ')' && in_url) {
+	                    in_url = false;
+	                }
+	                else if (char === 'u' && chunk.data.slice(c, c + 4) === 'url(') {
+	                    in_url = true;
+	                }
+	                else if (char === ';' && !in_url && !quote_mark) {
+	                    break;
+	                }
+	                c += 1;
+	            }
+	            if (c > 0) {
+	                value.push({
+	                    type: 'Text',
+	                    start: chunk.start,
+	                    end: chunk.start + c,
+	                    data: chunk.data.slice(0, c)
+	                });
+	            }
+	            while (/[;\s]/.test(chunk.data[c]))
+	                c += 1;
+	            const remaining_data = chunk.data.slice(c);
+	            if (remaining_data) {
+	                chunks.unshift({
+	                    start: chunk.start + c,
+	                    end: chunk.end,
+	                    type: 'Text',
+	                    data: remaining_data
+	                });
+	                break;
+	            }
+	        }
+	        else {
+	            value.push(chunk);
+	        }
+	    }
+	    return {
+	        chunks,
+	        value
+	    };
+	}
+	function is_dynamic(value) {
+	    return value.length > 1 || value[0].type !== 'Text';
+	}
+
+	function unwrap_parens(node) {
+	    while (node.type === 'ParenthesizedExpression')
+	        node = node.expression;
+	    return node;
+	}
+
+	function get_object(node) {
+	    node = unwrap_parens(node);
+	    while (node.type === 'MemberExpression')
+	        node = node.object;
+	    return node;
+	}
+
+	function flatten_reference(node) {
+	    if (node.type === 'Expression')
+	        throw new Error('bad');
+	    const nodes = [];
+	    const parts = [];
+	    const prop_end = node.end;
+	    while (node.type === 'MemberExpression') {
+	        if (node.computed)
+	            return null;
+	        nodes.unshift(node.property);
+	        parts.unshift(node.property.name);
+	        node = node.object;
+	    }
+	    const prop_start = node.end;
+	    const name = node.type === 'Identifier'
+	        ? node.name
+	        : node.type === 'ThisExpression' ? 'this' : null;
+	    if (!name)
+	        return null;
+	    parts.unshift(name);
+	    nodes.unshift(node);
+	    return { name, nodes, parts, keypath: `${name}[✂${prop_start}-${prop_end}✂]` };
+	}
+
+	function get_tail(node) {
+	    const end = node.end;
+	    while (node.type === 'MemberExpression')
+	        node = node.object;
+	    return { start: node.end, end };
+	}
+	class BindingWrapper {
+	    constructor(block, node, parent) {
+	        this.node = node;
+	        this.parent = parent;
+	        const { dependencies } = this.node.expression;
+	        block.add_dependencies(dependencies);
+	        // TODO does this also apply to e.g. `<input type='checkbox' bind:group='foo'>`?
+	        if (parent.node.name === 'select') {
+	            parent.select_binding_dependencies = dependencies;
+	            dependencies.forEach((prop) => {
+	                parent.renderer.component.indirect_dependencies.set(prop, new Set());
+	            });
+	        }
+	        if (node.is_contextual) {
+	            // we need to ensure that the each block creates a context including
+	            // the list and the index, if they're not otherwise referenced
+	            const { name } = get_object(this.node.expression.node);
+	            const each_block = this.parent.node.scope.get_owner(name);
+	            each_block.has_binding = true;
+	        }
+	        this.object = get_object(this.node.expression.node).name;
+	        // TODO unfortunate code is necessary because we need to use `ctx`
+	        // inside the fragment, but not inside the <script>
+	        const contextless_snippet = this.parent.renderer.component.source.slice(this.node.expression.node.start, this.node.expression.node.end);
+	        // view to model
+	        this.handler = get_event_handler(this, parent.renderer, block, this.object, contextless_snippet);
+	        this.snippet = this.node.expression.render(block);
+	        this.is_readonly = this.node.is_readonly;
+	        this.needs_lock = this.node.name === 'currentTime'; // TODO others?
+	    }
+	    get_dependencies() {
+	        const dependencies = new Set(this.node.expression.dependencies);
+	        this.node.expression.dependencies.forEach((prop) => {
+	            const indirect_dependencies = this.parent.renderer.component.indirect_dependencies.get(prop);
+	            if (indirect_dependencies) {
+	                indirect_dependencies.forEach(indirect_dependency => {
+	                    dependencies.add(indirect_dependency);
+	                });
+	            }
+	        });
+	        return dependencies;
+	    }
+	    is_readonly_media_attribute() {
+	        return this.node.is_readonly_media_attribute();
+	    }
+	    render(block, lock) {
+	        if (this.is_readonly)
+	            return;
+	        const { parent } = this;
+	        let update_conditions = this.needs_lock ? [`!${lock}`] : [];
+	        const dependency_array = [...this.node.expression.dependencies];
+	        if (dependency_array.length === 1) {
+	            update_conditions.push(`changed.${dependency_array[0]}`);
+	        }
+	        else if (dependency_array.length > 1) {
+	            update_conditions.push(`(${dependency_array.map(prop => `changed.${prop}`).join(' || ')})`);
+	        }
+	        if (parent.node.name === 'input') {
+	            const type = parent.node.get_static_attribute_value('type');
+	            if (type === null || type === "" || type === "text") {
+	                update_conditions.push(`(${parent.var}.${this.node.name} !== ${this.snippet})`);
+	            }
+	        }
+	        // model to view
+	        let update_dom = get_dom_updater(parent, this);
+	        // special cases
+	        switch (this.node.name) {
+	            case 'group':
+	                const binding_group = get_binding_group(parent.renderer, this.node.expression.node);
+	                block.builders.hydrate.add_line(`ctx.$$binding_groups[${binding_group}].push(${parent.var});`);
+	                block.builders.destroy.add_line(`ctx.$$binding_groups[${binding_group}].splice(ctx.$$binding_groups[${binding_group}].indexOf(${parent.var}), 1);`);
+	                break;
+	            case 'currentTime':
+	            case 'playbackRate':
+	            case 'volume':
+	                update_conditions.push(`!isNaN(${this.snippet})`);
+	                break;
+	            case 'paused':
+	                // this is necessary to prevent audio restarting by itself
+	                const last = block.get_unique_name(`${parent.var}_is_paused`);
+	                block.add_variable(last, 'true');
+	                update_conditions.push(`${last} !== (${last} = ${this.snippet})`);
+	                update_dom = `${parent.var}[${last} ? "pause" : "play"]();`;
+	                break;
+	            case 'value':
+	                if (parent.node.get_static_attribute_value('type') === 'file') {
+	                    update_dom = null;
+	                }
+	        }
+	        if (update_dom) {
+	            block.builders.update.add_line(update_conditions.length ? `if (${update_conditions.join(' && ')}) ${update_dom}` : update_dom);
+	        }
+	        if (!/(currentTime|paused)/.test(this.node.name)) {
+	            block.builders.mount.add_block(update_dom);
+	        }
+	    }
+	}
+	function get_dom_updater(element, binding) {
+	    const { node } = element;
+	    if (binding.is_readonly_media_attribute()) {
+	        return null;
+	    }
+	    if (binding.node.name === 'this') {
+	        return null;
+	    }
+	    if (node.name === 'select') {
+	        return node.get_static_attribute_value('multiple') === true ?
+	            `@select_options(${element.var}, ${binding.snippet})` :
+	            `@select_option(${element.var}, ${binding.snippet})`;
+	    }
+	    if (binding.node.name === 'group') {
+	        const type = node.get_static_attribute_value('type');
+	        const condition = type === 'checkbox'
+	            ? `~${binding.snippet}.indexOf(${element.var}.__value)`
+	            : `${element.var}.__value === ${binding.snippet}`;
+	        return `${element.var}.checked = ${condition};`;
+	    }
+	    return `${element.var}.${binding.node.name} = ${binding.snippet};`;
+	}
+	function get_binding_group(renderer, value) {
+	    const { parts } = flatten_reference(value); // TODO handle cases involving computed member expressions
+	    const keypath = parts.join('.');
+	    // TODO handle contextual bindings — `keypath` should include unique ID of
+	    // each block that provides context
+	    let index = renderer.binding_groups.indexOf(keypath);
+	    if (index === -1) {
+	        index = renderer.binding_groups.length;
+	        renderer.binding_groups.push(keypath);
+	    }
+	    return index;
+	}
+	function mutate_store(store, value, tail) {
+	    return tail
+	        ? `${store}.update($$value => ($$value${tail} = ${value}, $$value));`
+	        : `${store}.set(${value});`;
+	}
+	function get_event_handler(binding, renderer, block, name, snippet) {
+	    const value = get_value_from_dom(renderer, binding.parent, binding);
+	    const store = binding.object[0] === '$' ? binding.object.slice(1) : null;
+	    let tail = '';
+	    if (binding.node.expression.node.type === 'MemberExpression') {
+	        const { start, end } = get_tail(binding.node.expression.node);
+	        tail = renderer.component.source.slice(start, end);
+	    }
+	    if (binding.node.is_contextual) {
+	        const { object, property, snippet } = block.bindings.get(name);
+	        return {
+	            uses_context: true,
+	            mutation: store
+	                ? mutate_store(store, value, tail)
+	                : `${snippet}${tail} = ${value};`,
+	            contextual_dependencies: new Set([object, property])
+	        };
+	    }
+	    const mutation = store
+	        ? mutate_store(store, value, tail)
+	        : `${snippet} = ${value};`;
+	    if (binding.node.expression.node.type === 'MemberExpression') {
+	        return {
+	            uses_context: binding.node.expression.uses_context,
+	            mutation,
+	            contextual_dependencies: binding.node.expression.contextual_dependencies,
+	            snippet
+	        };
+	    }
+	    return {
+	        uses_context: false,
+	        mutation,
+	        contextual_dependencies: new Set()
+	    };
+	}
+	function get_value_from_dom(renderer, element, binding) {
+	    const { node } = element;
+	    const { name } = binding.node;
+	    if (name === 'this') {
+	        return `$$node`;
+	    }
+	    // <select bind:value='selected>
+	    if (node.name === 'select') {
+	        return node.get_static_attribute_value('multiple') === true ?
+	            `@select_multiple_value(this)` :
+	            `@select_value(this)`;
+	    }
+	    const type = node.get_static_attribute_value('type');
+	    // <input type='checkbox' bind:group='foo'>
+	    if (name === 'group') {
+	        const binding_group = get_binding_group(renderer, binding.node.expression.node);
+	        if (type === 'checkbox') {
+	            return `@get_binding_group_value($$binding_groups[${binding_group}])`;
+	        }
+	        return `this.__value`;
+	    }
+	    // <input type='range|number' bind:value>
+	    if (type === 'range' || type === 'number') {
+	        return `@to_number(this.${name})`;
+	    }
+	    if ((name === 'buffered' || name === 'seekable' || name === 'played')) {
+	        return `@time_ranges_to_array(this.${name})`;
+	    }
+	    // everything else
+	    return `this.${name}`;
+	}
+
+	function add_event_handlers(block, target, handlers) {
+	    handlers.forEach(handler => {
+	        let snippet = handler.render(block);
+	        if (handler.modifiers.has('preventDefault'))
+	            snippet = `@prevent_default(${snippet})`;
+	        if (handler.modifiers.has('stopPropagation'))
+	            snippet = `@stop_propagation(${snippet})`;
+	        const opts = ['passive', 'once', 'capture'].filter(mod => handler.modifiers.has(mod));
+	        if (opts.length) {
+	            const opts_string = (opts.length === 1 && opts[0] === 'capture')
+	                ? 'true'
+	                : `{ ${opts.map(opt => `${opt}: true`).join(', ')} }`;
+	            block.event_listeners.push(`@listen(${target}, "${handler.name}", ${snippet}, ${opts_string})`);
+	        }
+	        else {
+	            block.event_listeners.push(`@listen(${target}, "${handler.name}", ${snippet})`);
+	        }
+	    });
+	}
+
+	function add_actions(component, block, target, actions) {
+	    actions.forEach(action => {
+	        const { expression } = action;
+	        let snippet, dependencies;
+	        if (expression) {
+	            snippet = expression.render(block);
+	            dependencies = expression.dynamic_dependencies();
+	        }
+	        const name = block.get_unique_name(`${action.name.replace(/[^a-zA-Z0-9_$]/g, '_')}_action`);
+	        block.add_variable(name);
+	        const fn = component.qualify(action.name);
+	        block.builders.mount.add_line(`${name} = ${fn}.call(null, ${target}${snippet ? `, ${snippet}` : ''}) || {};`);
+	        if (dependencies && dependencies.length > 0) {
+	            let conditional = `typeof ${name}.update === 'function' && `;
+	            const deps = dependencies.map(dependency => `changed.${dependency}`).join(' || ');
+	            conditional += dependencies.length > 1 ? `(${deps})` : deps;
+	            block.builders.update.add_conditional(conditional, `${name}.update.call(null, ${snippet});`);
+	        }
+	        block.builders.destroy.add_line(`if (${name} && typeof ${name}.destroy === 'function') ${name}.destroy();`);
+	    });
+	}
+
+	function get_context_merger(lets) {
+	    if (lets.length === 0)
+	        return null;
+	    const input = lets.map(l => l.value ? `${l.name}: ${l.value}` : l.name).join(', ');
+	    const names = new Set();
+	    lets.forEach(l => {
+	        l.names.forEach(name => {
+	            names.add(name);
+	        });
+	    });
+	    const output = Array.from(names).join(', ');
+	    return `({ ${input} }) => ({ ${output} })`;
+	}
+
+	const events = [
+	    {
+	        event_names: ['input'],
+	        filter: (node, name) => node.name === 'textarea' ||
+	            node.name === 'input' && !/radio|checkbox|range/.test(node.get_static_attribute_value('type'))
+	    },
+	    {
+	        event_names: ['change'],
+	        filter: (node, name) => node.name === 'select' ||
+	            node.name === 'input' && /radio|checkbox/.test(node.get_static_attribute_value('type'))
+	    },
+	    {
+	        event_names: ['change', 'input'],
+	        filter: (node, name) => node.name === 'input' && node.get_static_attribute_value('type') === 'range'
+	    },
+	    {
+	        event_names: ['resize'],
+	        filter: (node, name) => dimensions.test(name)
+	    },
+	    // media events
+	    {
+	        event_names: ['timeupdate'],
+	        filter: (node, name) => node.is_media_node() &&
+	            (name === 'currentTime' || name === 'played')
+	    },
+	    {
+	        event_names: ['durationchange'],
+	        filter: (node, name) => node.is_media_node() &&
+	            name === 'duration'
+	    },
+	    {
+	        event_names: ['play', 'pause'],
+	        filter: (node, name) => node.is_media_node() &&
+	            name === 'paused'
+	    },
+	    {
+	        event_names: ['progress'],
+	        filter: (node, name) => node.is_media_node() &&
+	            name === 'buffered'
+	    },
+	    {
+	        event_names: ['loadedmetadata'],
+	        filter: (node, name) => node.is_media_node() &&
+	            (name === 'buffered' || name === 'seekable')
+	    },
+	    {
+	        event_names: ['volumechange'],
+	        filter: (node, name) => node.is_media_node() &&
+	            name === 'volume'
+	    },
+	    {
+	        event_names: ['ratechange'],
+	        filter: (node, name) => node.is_media_node() &&
+	            name === 'playbackRate'
+	    },
+	    // details event
+	    {
+	        event_names: ['toggle'],
+	        filter: (node, name) => node.name === 'details'
+	    },
+	];
+	class ElementWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.var = node.name.replace(/[^a-zA-Z0-9_$]/g, '_');
+	        this.class_dependencies = [];
+	        this.attributes = this.node.attributes.map(attribute => {
+	            if (attribute.name === 'slot') {
+	                // TODO make separate subclass for this?
+	                let owner = this.parent;
+	                while (owner) {
+	                    if (owner.node.type === 'InlineComponent') {
+	                        break;
+	                    }
+	                    if (owner.node.type === 'Element' && /-/.test(owner.node.name)) {
+	                        break;
+	                    }
+	                    owner = owner.parent;
+	                }
+	                if (owner && owner.node.type === 'InlineComponent') {
+	                    const name = attribute.get_static_value();
+	                    if (!owner.slots.has(name)) {
+	                        const child_block = block.child({
+	                            comment: create_debugging_comment(node, this.renderer.component),
+	                            name: this.renderer.component.get_unique_name(`create_${sanitize(name)}_slot`)
+	                        });
+	                        const lets = this.node.lets;
+	                        const seen = new Set(lets.map(l => l.name));
+	                        owner.node.lets.forEach(l => {
+	                            if (!seen.has(l.name))
+	                                lets.push(l);
+	                        });
+	                        const fn = get_context_merger(lets);
+	                        owner.slots.set(name, {
+	                            block: child_block,
+	                            scope: this.node.scope,
+	                            fn
+	                        });
+	                        this.renderer.blocks.push(child_block);
+	                    }
+	                    this.slot_block = owner.slots.get(name).block;
+	                    block = this.slot_block;
+	                }
+	            }
+	            if (attribute.name === 'style') {
+	                return new StyleAttributeWrapper(this, block, attribute);
+	            }
+	            return new AttributeWrapper(this, block, attribute);
+	        });
+	        // ordinarily, there'll only be one... but we need to handle
+	        // the rare case where an element can have multiple bindings,
+	        // e.g. <audio bind:paused bind:currentTime>
+	        this.bindings = this.node.bindings.map(binding => new BindingWrapper(block, binding, this));
+	        if (node.intro || node.outro) {
+	            if (node.intro)
+	                block.add_intro(node.intro.is_local);
+	            if (node.outro)
+	                block.add_outro(node.outro.is_local);
+	        }
+	        if (node.animation) {
+	            block.add_animation();
+	        }
+	        // add directive and handler dependencies
+	        [node.animation, node.outro, ...node.actions, ...node.classes].forEach(directive => {
+	            if (directive && directive.expression) {
+	                block.add_dependencies(directive.expression.dependencies);
+	            }
+	        });
+	        node.handlers.forEach(handler => {
+	            if (handler.expression) {
+	                block.add_dependencies(handler.expression.dependencies);
+	            }
+	        });
+	        if (this.parent) {
+	            if (node.actions.length > 0)
+	                this.parent.cannot_use_innerhtml();
+	            if (node.animation)
+	                this.parent.cannot_use_innerhtml();
+	            if (node.bindings.length > 0)
+	                this.parent.cannot_use_innerhtml();
+	            if (node.classes.length > 0)
+	                this.parent.cannot_use_innerhtml();
+	            if (node.intro || node.outro)
+	                this.parent.cannot_use_innerhtml();
+	            if (node.handlers.length > 0)
+	                this.parent.cannot_use_innerhtml();
+	            if (this.node.name === 'option')
+	                this.parent.cannot_use_innerhtml();
+	            if (renderer.options.dev) {
+	                this.parent.cannot_use_innerhtml(); // need to use add_location
+	            }
+	        }
+	        this.fragment = new FragmentWrapper(renderer, block, node.children, this, strip_whitespace, next_sibling);
+	        if (this.slot_block) {
+	            block.parent.add_dependencies(block.dependencies);
+	            // appalling hack
+	            const index = block.parent.wrappers.indexOf(this);
+	            block.parent.wrappers.splice(index, 1);
+	            block.wrappers.push(this);
+	        }
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const { renderer } = this;
+	        if (this.node.name === 'noscript')
+	            return;
+	        if (this.slot_block) {
+	            block = this.slot_block;
+	        }
+	        const node = this.var;
+	        const nodes = parent_nodes && block.get_unique_name(`${this.var}_nodes`); // if we're in unclaimable territory, i.e. <head>, parent_nodes is null
+	        block.add_variable(node);
+	        const render_statement = this.get_render_statement();
+	        block.builders.create.add_line(`${node} = ${render_statement};`);
+	        if (renderer.options.hydratable) {
+	            if (parent_nodes) {
+	                block.builders.claim.add_block(deindent `
+					${node} = ${this.get_claim_statement(parent_nodes)};
+					var ${nodes} = @children(${this.node.name === 'template' ? `${node}.content` : node});
+				`);
+	            }
+	            else {
+	                block.builders.claim.add_line(`${node} = ${render_statement};`);
+	            }
+	        }
+	        if (parent_node) {
+	            block.builders.mount.add_line(`@append(${parent_node}, ${node});`);
+	            if (parent_node === 'document.head') {
+	                block.builders.destroy.add_line(`@detach(${node});`);
+	            }
+	        }
+	        else {
+	            block.builders.mount.add_line(`@insert(#target, ${node}, anchor);`);
+	            // TODO we eventually need to consider what happens to elements
+	            // that belong to the same outgroup as an outroing element...
+	            block.builders.destroy.add_conditional('detaching', `@detach(${node});`);
+	        }
+	        // insert static children with textContent or innerHTML
+	        if (!this.node.namespace && this.can_use_innerhtml && this.fragment.nodes.length > 0) {
+	            if (this.fragment.nodes.length === 1 && this.fragment.nodes[0].node.type === 'Text') {
+	                block.builders.create.add_line(
+	                // @ts-ignore todo: should it be this.fragment.nodes[0].node.data instead?
+	                `${node}.textContent = ${stringify(this.fragment.nodes[0].data)};`);
+	            }
+	            else {
+	                const inner_html = escape$1(this.fragment.nodes
+	                    .map(to_html)
+	                    .join(''));
+	                block.builders.create.add_line(`${node}.innerHTML = \`${inner_html}\`;`);
+	            }
+	        }
+	        else {
+	            this.fragment.nodes.forEach((child) => {
+	                child.render(block, this.node.name === 'template' ? `${node}.content` : node, nodes);
+	            });
+	        }
+	        const event_handler_or_binding_uses_context = (this.bindings.some(binding => binding.handler.uses_context) ||
+	            this.node.handlers.some(handler => handler.uses_context) ||
+	            this.node.actions.some(action => action.uses_context));
+	        if (event_handler_or_binding_uses_context) {
+	            block.maintain_context = true;
+	        }
+	        this.add_bindings(block);
+	        this.add_event_handlers(block);
+	        this.add_attributes(block);
+	        this.add_transitions(block);
+	        this.add_animation(block);
+	        this.add_actions(block);
+	        this.add_classes(block);
+	        if (nodes && this.renderer.options.hydratable) {
+	            block.builders.claim.add_line(`${nodes}.forEach(@detach);`);
+	        }
+	        function to_html(wrapper) {
+	            if (wrapper.node.type === 'Text') {
+	                const parent = wrapper.node.parent;
+	                const raw = parent && (parent.name === 'script' ||
+	                    parent.name === 'style');
+	                return raw
+	                    ? wrapper.node.data
+	                    : escape_html(wrapper.node.data)
+	                        .replace(/\\/g, '\\\\')
+	                        .replace(/`/g, '\\`')
+	                        .replace(/\$/g, '\\$');
+	            }
+	            if (wrapper.node.name === 'noscript')
+	                return '';
+	            let open = `<${wrapper.node.name}`;
+	            wrapper.attributes.forEach((attr) => {
+	                open += ` ${fix_attribute_casing(attr.node.name)}${attr.stringify()}`;
+	            });
+	            if (is_void(wrapper.node.name))
+	                return open + '>';
+	            return `${open}>${wrapper.fragment.nodes.map(to_html).join('')}</${wrapper.node.name}>`;
+	        }
+	        if (renderer.options.dev) {
+	            const loc = renderer.locate(this.node.start);
+	            block.builders.hydrate.add_line(`@add_location(${this.var}, ${renderer.file_var}, ${loc.line}, ${loc.column}, ${this.node.start});`);
+	        }
+	    }
+	    get_render_statement() {
+	        const { name, namespace } = this.node;
+	        if (namespace === 'http://www.w3.org/2000/svg') {
+	            return `@svg_element("${name}")`;
+	        }
+	        if (namespace) {
+	            return `document.createElementNS("${namespace}", "${name}")`;
+	        }
+	        return `@element("${name}")`;
+	    }
+	    get_claim_statement(nodes) {
+	        const attributes = this.node.attributes
+	            .filter((attr) => attr.type === 'Attribute')
+	            .map((attr) => `${quote_name_if_necessary(attr.name)}: true`)
+	            .join(', ');
+	        const name = this.node.namespace
+	            ? this.node.name
+	            : this.node.name.toUpperCase();
+	        return `@claim_element(${nodes}, "${name}", ${attributes
+            ? `{ ${attributes} }`
+            : `{}`}, ${this.node.namespace === namespaces.svg ? true : false})`;
+	    }
+	    add_bindings(block) {
+	        const { renderer } = this;
+	        if (this.bindings.length === 0)
+	            return;
+	        renderer.component.has_reactive_assignments = true;
+	        const lock = this.bindings.some(binding => binding.needs_lock) ?
+	            block.get_unique_name(`${this.var}_updating`) :
+	            null;
+	        if (lock)
+	            block.add_variable(lock, 'false');
+	        const groups = events
+	            .map(event => ({
+	            events: event.event_names,
+	            bindings: this.bindings
+	                .filter(binding => binding.node.name !== 'this')
+	                .filter(binding => event.filter(this.node, binding.node.name))
+	        }))
+	            .filter(group => group.bindings.length);
+	        groups.forEach(group => {
+	            const handler = renderer.component.get_unique_name(`${this.var}_${group.events.join('_')}_handler`);
+	            renderer.component.add_var({
+	                name: handler,
+	                internal: true,
+	                referenced: true
+	            });
+	            // TODO figure out how to handle locks
+	            const needs_lock = group.bindings.some(binding => binding.needs_lock);
+	            const dependencies = new Set();
+	            const contextual_dependencies = new Set();
+	            group.bindings.forEach(binding => {
+	                // TODO this is a mess
+	                add_to_set(dependencies, binding.get_dependencies());
+	                add_to_set(contextual_dependencies, binding.node.expression.contextual_dependencies);
+	                add_to_set(contextual_dependencies, binding.handler.contextual_dependencies);
+	                binding.render(block, lock);
+	            });
+	            // media bindings — awkward special case. The native timeupdate events
+	            // fire too infrequently, so we need to take matters into our
+	            // own hands
+	            let animation_frame;
+	            if (group.events[0] === 'timeupdate') {
+	                animation_frame = block.get_unique_name(`${this.var}_animationframe`);
+	                block.add_variable(animation_frame);
+	            }
+	            const has_local_function = contextual_dependencies.size > 0 || needs_lock || animation_frame;
+	            let callee;
+	            // TODO dry this out — similar code for event handlers and component bindings
+	            if (has_local_function) {
+	                // need to create a block-local function that calls an instance-level function
+	                block.builders.init.add_block(deindent `
+					function ${handler}() {
+						${animation_frame && deindent `
+						cancelAnimationFrame(${animation_frame});
+						if (!${this.var}.paused) ${animation_frame} = @raf(${handler});`}
+						${needs_lock && `${lock} = true;`}
+						ctx.${handler}.call(${this.var}${contextual_dependencies.size > 0 ? ', ctx' : ''});
+					}
+				`);
+	                callee = handler;
+	            }
+	            else {
+	                callee = `ctx.${handler}`;
+	            }
+	            this.renderer.component.partly_hoisted.push(deindent `
+				function ${handler}(${contextual_dependencies.size > 0 ? `{ ${Array.from(contextual_dependencies).join(', ')} }` : ``}) {
+					${group.bindings.map(b => b.handler.mutation)}
+					${Array.from(dependencies).filter(dep => dep[0] !== '$').map(dep => `${this.renderer.component.invalidate(dep)};`)}
+				}
+			`);
+	            group.events.forEach(name => {
+	                if (name === 'resize') {
+	                    // special case
+	                    const resize_listener = block.get_unique_name(`${this.var}_resize_listener`);
+	                    block.add_variable(resize_listener);
+	                    block.builders.mount.add_line(`${resize_listener} = @add_resize_listener(${this.var}, ${callee}.bind(${this.var}));`);
+	                    block.builders.destroy.add_line(`${resize_listener}.cancel();`);
+	                }
+	                else {
+	                    block.event_listeners.push(`@listen(${this.var}, "${name}", ${callee})`);
+	                }
+	            });
+	            const some_initial_state_is_undefined = group.bindings
+	                .map(binding => `${binding.snippet} === void 0`)
+	                .join(' || ');
+	            if (this.node.name === 'select' || group.bindings.find(binding => binding.node.name === 'indeterminate' || binding.is_readonly_media_attribute())) {
+	                const callback = has_local_function ? handler : `() => ${callee}.call(${this.var})`;
+	                block.builders.hydrate.add_line(`if (${some_initial_state_is_undefined}) @add_render_callback(${callback});`);
+	            }
+	            if (group.events[0] === 'resize') {
+	                block.builders.hydrate.add_line(`@add_render_callback(() => ${callee}.call(${this.var}));`);
+	            }
+	        });
+	        if (lock) {
+	            block.builders.update.add_line(`${lock} = false;`);
+	        }
+	        const this_binding = this.bindings.find(b => b.node.name === 'this');
+	        if (this_binding) {
+	            const name = renderer.component.get_unique_name(`${this.var}_binding`);
+	            renderer.component.add_var({
+	                name,
+	                internal: true,
+	                referenced: true
+	            });
+	            const { handler, object } = this_binding;
+	            const args = [];
+	            for (const arg of handler.contextual_dependencies) {
+	                args.push(arg);
+	                block.add_variable(arg, `ctx.${arg}`);
+	            }
+	            renderer.component.partly_hoisted.push(deindent `
+				function ${name}(${['$$node', 'check'].concat(args).join(', ')}) {
+					${handler.snippet ? `if ($$node || (!$$node && ${handler.snippet} === check)) ` : ''}${handler.mutation}
+					${renderer.component.invalidate(object)};
+				}
+			`);
+	            block.builders.mount.add_line(`@add_binding_callback(() => ctx.${name}(${[this.var, 'null'].concat(args).join(', ')}));`);
+	            block.builders.destroy.add_line(`ctx.${name}(${['null', this.var].concat(args).join(', ')});`);
+	            block.builders.update.add_line(deindent `
+				if (changed.items) {
+					ctx.${name}(${['null', this.var].concat(args).join(', ')});
+					${args.map(a => `${a} = ctx.${a}`).join(', ')};
+					ctx.${name}(${[this.var, 'null'].concat(args).join(', ')});
+				}`);
+	        }
+	    }
+	    add_attributes(block) {
+	        // @ts-ignore todo:
+	        if (this.node.attributes.find(attr => attr.type === 'Spread')) {
+	            this.add_spread_attributes(block);
+	            return;
+	        }
+	        this.attributes.forEach((attribute) => {
+	            if (attribute.node.name === 'class' && attribute.node.is_dynamic) {
+	                this.class_dependencies.push(...attribute.node.dependencies);
+	            }
+	            attribute.render(block);
+	        });
+	    }
+	    add_spread_attributes(block) {
+	        const levels = block.get_unique_name(`${this.var}_levels`);
+	        const data = block.get_unique_name(`${this.var}_data`);
+	        const initial_props = [];
+	        const updates = [];
+	        this.node.attributes
+	            .filter(attr => attr.type === 'Attribute' || attr.type === 'Spread')
+	            .forEach(attr => {
+	            const condition = attr.dependencies.size > 0
+	                ? `(${[...attr.dependencies].map(d => `changed.${d}`).join(' || ')})`
+	                : null;
+	            if (attr.is_spread) {
+	                const snippet = attr.expression.render(block);
+	                initial_props.push(snippet);
+	                updates.push(condition ? `${condition} && ${snippet}` : snippet);
+	            }
+	            else {
+	                const snippet = `{ ${quote_name_if_necessary(attr.name)}: ${attr.get_value(block)} }`;
+	                initial_props.push(snippet);
+	                updates.push(condition ? `${condition} && ${snippet}` : snippet);
+	            }
+	        });
+	        block.builders.init.add_block(deindent `
+			var ${levels} = [
+				${initial_props.join(',\n')}
+			];
+
+			var ${data} = {};
+			for (var #i = 0; #i < ${levels}.length; #i += 1) {
+				${data} = @assign(${data}, ${levels}[#i]);
+			}
+		`);
+	        block.builders.hydrate.add_line(`@set_attributes(${this.var}, ${data});`);
+	        block.builders.update.add_block(deindent `
+			@set_attributes(${this.var}, @get_spread_update(${levels}, [
+				${updates.join(',\n')}
+			]));
+		`);
+	    }
+	    add_event_handlers(block) {
+	        add_event_handlers(block, this.var, this.node.handlers);
+	    }
+	    add_transitions(block) {
+	        const { intro, outro } = this.node;
+	        if (!intro && !outro)
+	            return;
+	        const { component } = this.renderer;
+	        if (intro === outro) {
+	            // bidirectional transition
+	            const name = block.get_unique_name(`${this.var}_transition`);
+	            const snippet = intro.expression
+	                ? intro.expression.render(block)
+	                : '{}';
+	            block.add_variable(name);
+	            const fn = component.qualify(intro.name);
+	            const intro_block = deindent `
+				@add_render_callback(() => {
+					if (!${name}) ${name} = @create_bidirectional_transition(${this.var}, ${fn}, ${snippet}, true);
+					${name}.run(1);
+				});
+			`;
+	            const outro_block = deindent `
+				if (!${name}) ${name} = @create_bidirectional_transition(${this.var}, ${fn}, ${snippet}, false);
+				${name}.run(0);
+			`;
+	            if (intro.is_local) {
+	                block.builders.intro.add_block(deindent `
+					if (#local) {
+						${intro_block}
+					}
+				`);
+	                block.builders.outro.add_block(deindent `
+					if (#local) {
+						${outro_block}
+					}
+				`);
+	            }
+	            else {
+	                block.builders.intro.add_block(intro_block);
+	                block.builders.outro.add_block(outro_block);
+	            }
+	            block.builders.destroy.add_conditional('detaching', `if (${name}) ${name}.end();`);
+	        }
+	        else {
+	            const intro_name = intro && block.get_unique_name(`${this.var}_intro`);
+	            const outro_name = outro && block.get_unique_name(`${this.var}_outro`);
+	            if (intro) {
+	                block.add_variable(intro_name);
+	                const snippet = intro.expression
+	                    ? intro.expression.render(block)
+	                    : '{}';
+	                const fn = component.qualify(intro.name);
+	                let intro_block;
+	                if (outro) {
+	                    intro_block = deindent `
+						@add_render_callback(() => {
+							if (${outro_name}) ${outro_name}.end(1);
+							if (!${intro_name}) ${intro_name} = @create_in_transition(${this.var}, ${fn}, ${snippet});
+							${intro_name}.start();
+						});
+					`;
+	                    block.builders.outro.add_line(`if (${intro_name}) ${intro_name}.invalidate();`);
+	                }
+	                else {
+	                    intro_block = deindent `
+						if (!${intro_name}) {
+							@add_render_callback(() => {
+								${intro_name} = @create_in_transition(${this.var}, ${fn}, ${snippet});
+								${intro_name}.start();
+							});
+						}
+					`;
+	                }
+	                if (intro.is_local) {
+	                    intro_block = deindent `
+						if (#local) {
+							${intro_block}
+						}
+					`;
+	                }
+	                block.builders.intro.add_block(intro_block);
+	            }
+	            if (outro) {
+	                block.add_variable(outro_name);
+	                const snippet = outro.expression
+	                    ? outro.expression.render(block)
+	                    : '{}';
+	                const fn = component.qualify(outro.name);
+	                if (!intro) {
+	                    block.builders.intro.add_block(deindent `
+						if (${outro_name}) ${outro_name}.end(1);
+					`);
+	                }
+	                // TODO hide elements that have outro'd (unless they belong to a still-outroing
+	                // group) prior to their removal from the DOM
+	                let outro_block = deindent `
+					${outro_name} = @create_out_transition(${this.var}, ${fn}, ${snippet});
+				`;
+	                if (outro_block) {
+	                    outro_block = deindent `
+						if (#local) {
+							${outro_block}
+						}
+					`;
+	                }
+	                block.builders.outro.add_block(outro_block);
+	                block.builders.destroy.add_conditional('detaching', `if (${outro_name}) ${outro_name}.end();`);
+	            }
+	        }
+	    }
+	    add_animation(block) {
+	        if (!this.node.animation)
+	            return;
+	        const { component } = this.renderer;
+	        const rect = block.get_unique_name('rect');
+	        const stop_animation = block.get_unique_name('stop_animation');
+	        block.add_variable(rect);
+	        block.add_variable(stop_animation, '@noop');
+	        block.builders.measure.add_block(deindent `
+			${rect} = ${this.var}.getBoundingClientRect();
+		`);
+	        block.builders.fix.add_block(deindent `
+			@fix_position(${this.var});
+			${stop_animation}();
+		`);
+	        const params = this.node.animation.expression ? this.node.animation.expression.render(block) : '{}';
+	        const name = component.qualify(this.node.animation.name);
+	        block.builders.animate.add_block(deindent `
+			${stop_animation}();
+			${stop_animation} = @create_animation(${this.var}, ${rect}, ${name}, ${params});
+		`);
+	    }
+	    add_actions(block) {
+	        add_actions(this.renderer.component, block, this.var, this.node.actions);
+	    }
+	    add_classes(block) {
+	        this.node.classes.forEach(class_directive => {
+	            const { expression, name } = class_directive;
+	            let snippet, dependencies;
+	            if (expression) {
+	                snippet = expression.render(block);
+	                dependencies = expression.dependencies;
+	            }
+	            else {
+	                snippet = `${quote_prop_if_necessary(name)}`;
+	                dependencies = new Set([name]);
+	            }
+	            const updater = `@toggle_class(${this.var}, "${name}", ${snippet});`;
+	            block.builders.hydrate.add_line(updater);
+	            if ((dependencies && dependencies.size > 0) || this.class_dependencies.length) {
+	                const all_dependencies = this.class_dependencies.concat(...dependencies);
+	                const deps = all_dependencies.map(dependency => `changed${quote_prop_if_necessary(dependency)}`).join(' || ');
+	                const condition = all_dependencies.length > 1 ? `(${deps})` : deps;
+	                block.builders.update.add_conditional(condition, updater);
+	            }
+	        });
+	    }
+	}
+
+	class HeadWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.can_use_innerhtml = false;
+	        this.fragment = new FragmentWrapper(renderer, block, node.children, this, strip_whitespace, next_sibling);
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        this.fragment.render(block, 'document.head', 'nodes');
+	    }
+	}
+
+	function is_else_if(node) {
+	    return (node && node.children.length === 1 && node.children[0].type === 'IfBlock');
+	}
+	class IfBlockBranch extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.var = null;
+	        this.condition = node.expression && node.expression.render(block);
+	        this.block = block.child({
+	            comment: create_debugging_comment(node, parent.renderer.component),
+	            name: parent.renderer.component.get_unique_name(node.expression ? `create_if_block` : `create_else_block`)
+	        });
+	        this.fragment = new FragmentWrapper(renderer, this.block, node.children, parent, strip_whitespace, next_sibling);
+	        this.is_dynamic = this.block.dependencies.size > 0;
+	    }
+	}
+	class IfBlockWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.var = 'if_block';
+	        this.cannot_use_innerhtml();
+	        this.branches = [];
+	        const blocks = [];
+	        let is_dynamic = false;
+	        let has_intros = false;
+	        let has_outros = false;
+	        const create_branches = (node) => {
+	            const branch = new IfBlockBranch(renderer, block, this, node, strip_whitespace, next_sibling);
+	            this.branches.push(branch);
+	            blocks.push(branch.block);
+	            block.add_dependencies(node.expression.dependencies);
+	            if (branch.block.dependencies.size > 0) {
+	                is_dynamic = true;
+	                block.add_dependencies(branch.block.dependencies);
+	            }
+	            if (branch.block.has_intros)
+	                has_intros = true;
+	            if (branch.block.has_outros)
+	                has_outros = true;
+	            if (is_else_if(node.else)) {
+	                create_branches(node.else.children[0]);
+	            }
+	            else if (node.else) {
+	                const branch = new IfBlockBranch(renderer, block, this, node.else, strip_whitespace, next_sibling);
+	                this.branches.push(branch);
+	                blocks.push(branch.block);
+	                if (branch.block.dependencies.size > 0) {
+	                    is_dynamic = true;
+	                    block.add_dependencies(branch.block.dependencies);
+	                }
+	                if (branch.block.has_intros)
+	                    has_intros = true;
+	                if (branch.block.has_outros)
+	                    has_outros = true;
+	            }
+	        };
+	        create_branches(this.node);
+	        blocks.forEach(block => {
+	            block.has_update_method = is_dynamic;
+	            block.has_intro_method = has_intros;
+	            block.has_outro_method = has_outros;
+	        });
+	        renderer.blocks.push(...blocks);
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const name = this.var;
+	        const needs_anchor = this.next ? !this.next.is_dom_node() : !parent_node || !this.parent.is_dom_node();
+	        const anchor = needs_anchor
+	            ? block.get_unique_name(`${name}_anchor`)
+	            : (this.next && this.next.var) || 'null';
+	        const has_else = !(this.branches[this.branches.length - 1].condition);
+	        const if_name = has_else ? '' : `if (${name}) `;
+	        const dynamic = this.branches[0].block.has_update_method; // can use [0] as proxy for all, since they necessarily have the same value
+	        const has_intros = this.branches[0].block.has_intro_method;
+	        const has_outros = this.branches[0].block.has_outro_method;
+	        const has_transitions = has_intros || has_outros;
+	        const vars = { name, anchor, if_name, has_else, has_transitions };
+	        const detaching = (parent_node && parent_node !== 'document.head') ? '' : 'detaching';
+	        if (this.node.else) {
+	            if (has_outros) {
+	                this.render_compound_with_outros(block, parent_node, parent_nodes, dynamic, vars, detaching);
+	                block.builders.outro.add_line(`if (${name}) ${name}.o();`);
+	            }
+	            else {
+	                this.render_compound(block, parent_node, parent_nodes, dynamic, vars, detaching);
+	            }
+	        }
+	        else {
+	            this.render_simple(block, parent_node, parent_nodes, dynamic, vars, detaching);
+	            if (has_outros) {
+	                block.builders.outro.add_line(`if (${name}) ${name}.o();`);
+	            }
+	        }
+	        block.builders.create.add_line(`${if_name}${name}.c();`);
+	        if (parent_nodes && this.renderer.options.hydratable) {
+	            block.builders.claim.add_line(`${if_name}${name}.l(${parent_nodes});`);
+	        }
+	        if (has_intros || has_outros) {
+	            block.builders.intro.add_line(`if (${name}) ${name}.i();`);
+	        }
+	        if (needs_anchor) {
+	            block.add_element(anchor, `@empty()`, parent_nodes && `@empty()`, parent_node);
+	        }
+	        this.branches.forEach(branch => {
+	            branch.fragment.render(branch.block, null, 'nodes');
+	        });
+	    }
+	    render_compound(block, parent_node, parent_nodes, dynamic, { name, anchor, has_else, if_name, has_transitions }, detaching) {
+	        const select_block_type = this.renderer.component.get_unique_name(`select_block_type`);
+	        const current_block_type = block.get_unique_name(`current_block_type`);
+	        const current_block_type_and = has_else ? '' : `${current_block_type} && `;
+	        block.builders.init.add_block(deindent `
+			function ${select_block_type}(ctx) {
+				${this.branches
+            .map(({ condition, block }) => `${condition ? `if (${condition}) ` : ''}return ${block.name};`)
+            .join('\n')}
+			}
+		`);
+	        block.builders.init.add_block(deindent `
+			var ${current_block_type} = ${select_block_type}(ctx);
+			var ${name} = ${current_block_type_and}${current_block_type}(ctx);
+		`);
+	        const initial_mount_node = parent_node || '#target';
+	        const anchor_node = parent_node ? 'null' : 'anchor';
+	        block.builders.mount.add_line(`${if_name}${name}.m(${initial_mount_node}, ${anchor_node});`);
+	        const update_mount_node = this.get_update_mount_node(anchor);
+	        const change_block = deindent `
+			${if_name}${name}.d(1);
+			${name} = ${current_block_type_and}${current_block_type}(ctx);
+			if (${name}) {
+				${name}.c();
+				${has_transitions && `${name}.i(1);`}
+				${name}.m(${update_mount_node}, ${anchor});
+			}
+		`;
+	        if (dynamic) {
+	            block.builders.update.add_block(deindent `
+				if (${current_block_type} === (${current_block_type} = ${select_block_type}(ctx)) && ${name}) {
+					${name}.p(changed, ctx);
+				} else {
+					${change_block}
+				}
+			`);
+	        }
+	        else {
+	            block.builders.update.add_block(deindent `
+				if (${current_block_type} !== (${current_block_type} = ${select_block_type}(ctx))) {
+					${change_block}
+				}
+			`);
+	        }
+	        block.builders.destroy.add_line(`${if_name}${name}.d(${detaching});`);
+	    }
+	    // if any of the siblings have outros, we need to keep references to the blocks
+	    // (TODO does this only apply to bidi transitions?)
+	    render_compound_with_outros(block, parent_node, parent_nodes, dynamic, { name, anchor, has_else, has_transitions }, detaching) {
+	        const select_block_type = this.renderer.component.get_unique_name(`select_block_type`);
+	        const current_block_type_index = block.get_unique_name(`current_block_type_index`);
+	        const previous_block_index = block.get_unique_name(`previous_block_index`);
+	        const if_block_creators = block.get_unique_name(`if_block_creators`);
+	        const if_blocks = block.get_unique_name(`if_blocks`);
+	        const if_current_block_type_index = has_else
+	            ? ''
+	            : `if (~${current_block_type_index}) `;
+	        block.add_variable(current_block_type_index);
+	        block.add_variable(name);
+	        block.builders.init.add_block(deindent `
+			var ${if_block_creators} = [
+				${this.branches.map(branch => branch.block.name).join(',\n')}
+			];
+
+			var ${if_blocks} = [];
+
+			function ${select_block_type}(ctx) {
+				${this.branches
+            .map(({ condition }, i) => `${condition ? `if (${condition}) ` : ''}return ${i};`)
+            .join('\n')}
+				${!has_else && `return -1;`}
+			}
+		`);
+	        if (has_else) {
+	            block.builders.init.add_block(deindent `
+				${current_block_type_index} = ${select_block_type}(ctx);
+				${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](ctx);
+			`);
+	        }
+	        else {
+	            block.builders.init.add_block(deindent `
+				if (~(${current_block_type_index} = ${select_block_type}(ctx))) {
+					${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](ctx);
+				}
+			`);
+	        }
+	        const initial_mount_node = parent_node || '#target';
+	        const anchor_node = parent_node ? 'null' : 'anchor';
+	        block.builders.mount.add_line(`${if_current_block_type_index}${if_blocks}[${current_block_type_index}].m(${initial_mount_node}, ${anchor_node});`);
+	        const update_mount_node = this.get_update_mount_node(anchor);
+	        const destroy_old_block = deindent `
+			@group_outros();
+			@on_outro(() => {
+				${if_blocks}[${previous_block_index}].d(1);
+				${if_blocks}[${previous_block_index}] = null;
+			});
+			${name}.o(1);
+			@check_outros();
+		`;
+	        const create_new_block = deindent `
+			${name} = ${if_blocks}[${current_block_type_index}];
+			if (!${name}) {
+				${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](ctx);
+				${name}.c();
+			}
+			${has_transitions && `${name}.i(1);`}
+			${name}.m(${update_mount_node}, ${anchor});
+		`;
+	        const change_block = has_else
+	            ? deindent `
+				${destroy_old_block}
+
+				${create_new_block}
+			`
+	            : deindent `
+				if (${name}) {
+					${destroy_old_block}
+				}
+
+				if (~${current_block_type_index}) {
+					${create_new_block}
+				} else {
+					${name} = null;
+				}
+			`;
+	        if (dynamic) {
+	            block.builders.update.add_block(deindent `
+				var ${previous_block_index} = ${current_block_type_index};
+				${current_block_type_index} = ${select_block_type}(ctx);
+				if (${current_block_type_index} === ${previous_block_index}) {
+					${if_current_block_type_index}${if_blocks}[${current_block_type_index}].p(changed, ctx);
+				} else {
+					${change_block}
+				}
+			`);
+	        }
+	        else {
+	            block.builders.update.add_block(deindent `
+				var ${previous_block_index} = ${current_block_type_index};
+				${current_block_type_index} = ${select_block_type}(ctx);
+				if (${current_block_type_index} !== ${previous_block_index}) {
+					${change_block}
+				}
+			`);
+	        }
+	        block.builders.destroy.add_line(deindent `
+			${if_current_block_type_index}${if_blocks}[${current_block_type_index}].d(${detaching});
+		`);
+	    }
+	    render_simple(block, parent_node, parent_nodes, dynamic, { name, anchor, if_name, has_transitions }, detaching) {
+	        const branch = this.branches[0];
+	        block.builders.init.add_block(deindent `
+			var ${name} = (${branch.condition}) && ${branch.block.name}(ctx);
+		`);
+	        const initial_mount_node = parent_node || '#target';
+	        const anchor_node = parent_node ? 'null' : 'anchor';
+	        block.builders.mount.add_line(`if (${name}) ${name}.m(${initial_mount_node}, ${anchor_node});`);
+	        const update_mount_node = this.get_update_mount_node(anchor);
+	        const enter = dynamic
+	            ? deindent `
+				if (${name}) {
+					${name}.p(changed, ctx);
+					${has_transitions && `${name}.i(1);`}
+				} else {
+					${name} = ${branch.block.name}(ctx);
+					${name}.c();
+					${has_transitions && `${name}.i(1);`}
+					${name}.m(${update_mount_node}, ${anchor});
+				}
+			`
+	            : deindent `
+				if (!${name}) {
+					${name} = ${branch.block.name}(ctx);
+					${name}.c();
+					${has_transitions && `${name}.i(1);`}
+					${name}.m(${update_mount_node}, ${anchor});
+				${has_transitions && `} else {
+					${name}.i(1);`}
+				}
+			`;
+	        // no `p()` here — we don't want to update outroing nodes,
+	        // as that will typically result in glitching
+	        const exit = branch.block.has_outro_method
+	            ? deindent `
+				@group_outros();
+				@on_outro(() => {
+					${name}.d(1);
+					${name} = null;
+				});
+
+				${name}.o(1);
+				@check_outros();
+			`
+	            : deindent `
+				${name}.d(1);
+				${name} = null;
+			`;
+	        block.builders.update.add_block(deindent `
+			if (${branch.condition}) {
+				${enter}
+			} else if (${name}) {
+				${exit}
+			}
+		`);
+	        block.builders.destroy.add_line(`${if_name}${name}.d(${detaching});`);
+	    }
+	}
+
+	function stringify_props(props) {
+	    if (!props.length)
+	        return '{}';
+	    const joined = props.join(', ');
+	    if (joined.length > 40) {
+	        // make larger data objects readable
+	        return `{\n\t${props.join(',\n\t')}\n}`;
+	    }
+	    return `{ ${joined} }`;
+	}
+
+	class InlineComponentWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.slots = new Map();
+	        this.cannot_use_innerhtml();
+	        if (this.node.expression) {
+	            block.add_dependencies(this.node.expression.dependencies);
+	        }
+	        this.node.attributes.forEach(attr => {
+	            block.add_dependencies(attr.dependencies);
+	        });
+	        this.node.bindings.forEach(binding => {
+	            if (binding.is_contextual) {
+	                // we need to ensure that the each block creates a context including
+	                // the list and the index, if they're not otherwise referenced
+	                const { name } = get_object(binding.expression.node);
+	                const each_block = this.node.scope.get_owner(name);
+	                each_block.has_binding = true;
+	            }
+	            block.add_dependencies(binding.expression.dependencies);
+	        });
+	        this.node.handlers.forEach(handler => {
+	            if (handler.expression) {
+	                block.add_dependencies(handler.expression.dependencies);
+	            }
+	        });
+	        this.var = (this.node.name === 'svelte:self' ? renderer.component.name :
+	            this.node.name === 'svelte:component' ? 'switch_instance' :
+	                sanitize(this.node.name)).toLowerCase();
+	        if (this.node.children.length) {
+	            const default_slot = block.child({
+	                comment: create_debugging_comment(node, renderer.component),
+	                name: renderer.component.get_unique_name(`create_default_slot`)
+	            });
+	            this.renderer.blocks.push(default_slot);
+	            const fn = get_context_merger(this.node.lets);
+	            this.slots.set('default', {
+	                block: default_slot,
+	                scope: this.node.scope,
+	                fn
+	            });
+	            this.fragment = new FragmentWrapper(renderer, default_slot, node.children, this, strip_whitespace, next_sibling);
+	            const dependencies = new Set();
+	            // TODO is this filtering necessary? (I *think* so)
+	            default_slot.dependencies.forEach(name => {
+	                if (!this.node.scope.is_let(name)) {
+	                    dependencies.add(name);
+	                }
+	            });
+	            block.add_dependencies(dependencies);
+	        }
+	        block.add_outro();
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const { renderer } = this;
+	        const { component } = renderer;
+	        const name = this.var;
+	        const component_opts = [];
+	        const statements = [];
+	        const updates = [];
+	        let props;
+	        const name_changes = block.get_unique_name(`${name}_changes`);
+	        const uses_spread = !!this.node.attributes.find(a => a.is_spread);
+	        const slot_props = Array.from(this.slots).map(([name, slot]) => `${quote_name_if_necessary(name)}: [${slot.block.name}${slot.fn ? `, ${slot.fn}` : ''}]`);
+	        const initial_props = slot_props.length > 0
+	            ? [`$$slots: ${stringify_props(slot_props)}`, `$$scope: { ctx }`]
+	            : [];
+	        const attribute_object = uses_spread
+	            ? stringify_props(initial_props)
+	            : stringify_props(this.node.attributes.map(attr => `${quote_name_if_necessary(attr.name)}: ${attr.get_value(block)}`).concat(initial_props));
+	        if (this.node.attributes.length || this.node.bindings.length || initial_props.length) {
+	            if (!uses_spread && this.node.bindings.length === 0) {
+	                component_opts.push(`props: ${attribute_object}`);
+	            }
+	            else {
+	                props = block.get_unique_name(`${name}_props`);
+	                component_opts.push(`props: ${props}`);
+	            }
+	        }
+	        if (this.fragment) {
+	            const default_slot = this.slots.get('default');
+	            this.fragment.nodes.forEach((child) => {
+	                child.render(default_slot.block, null, 'nodes');
+	            });
+	        }
+	        if (component.compile_options.dev) {
+	            // TODO this is a terrible hack, but without it the component
+	            // will complain that options.target is missing. This would
+	            // work better if components had separate public and private
+	            // APIs
+	            component_opts.push(`$$inline: true`);
+	        }
+	        const fragment_dependencies = new Set(this.fragment ? ['$$scope'] : []);
+	        this.slots.forEach(slot => {
+	            slot.block.dependencies.forEach(name => {
+	                const is_let = slot.scope.is_let(name);
+	                const variable = renderer.component.var_lookup.get(name);
+	                if (is_let)
+	                    fragment_dependencies.add(name);
+	                if (!variable)
+	                    return;
+	                if (variable.mutated || variable.reassigned)
+	                    fragment_dependencies.add(name);
+	                if (!variable.module && variable.writable && variable.export_name)
+	                    fragment_dependencies.add(name);
+	            });
+	        });
+	        const non_let_dependencies = Array.from(fragment_dependencies).filter(name => !this.node.scope.is_let(name));
+	        if (!uses_spread && (this.node.attributes.filter(a => a.is_dynamic).length || this.node.bindings.length || non_let_dependencies.length > 0)) {
+	            updates.push(`var ${name_changes} = {};`);
+	        }
+	        if (this.node.attributes.length) {
+	            if (uses_spread) {
+	                const levels = block.get_unique_name(`${this.var}_spread_levels`);
+	                const initial_props = [];
+	                const changes = [];
+	                const all_dependencies = new Set();
+	                this.node.attributes.forEach(attr => {
+	                    add_to_set(all_dependencies, attr.dependencies);
+	                });
+	                this.node.attributes.forEach(attr => {
+	                    const { name, dependencies } = attr;
+	                    const condition = dependencies.size > 0 && (dependencies.size !== all_dependencies.size)
+	                        ? `(${Array.from(dependencies).map(d => `changed.${d}`).join(' || ')})`
+	                        : null;
+	                    if (attr.is_spread) {
+	                        const value = attr.expression.render(block);
+	                        initial_props.push(value);
+	                        changes.push(condition ? `${condition} && ${value}` : value);
+	                    }
+	                    else {
+	                        const obj = `{ ${quote_name_if_necessary(name)}: ${attr.get_value(block)} }`;
+	                        initial_props.push(obj);
+	                        changes.push(condition ? `${condition} && ${obj}` : obj);
+	                    }
+	                });
+	                block.builders.init.add_block(deindent `
+					var ${levels} = [
+						${initial_props.join(',\n')}
+					];
+				`);
+	                statements.push(deindent `
+					for (var #i = 0; #i < ${levels}.length; #i += 1) {
+						${props} = @assign(${props}, ${levels}[#i]);
+					}
+				`);
+	                const conditions = Array.from(all_dependencies).map(dep => `changed.${dep}`).join(' || ');
+	                updates.push(deindent `
+					var ${name_changes} = ${all_dependencies.size === 1 ? `${conditions}` : `(${conditions})`} ? @get_spread_update(${levels}, [
+						${changes.join(',\n')}
+					]) : {};
+				`);
+	            }
+	            else {
+	                this.node.attributes
+	                    .filter((attribute) => attribute.is_dynamic)
+	                    .forEach((attribute) => {
+	                    if (attribute.dependencies.size > 0) {
+	                        updates.push(deindent `
+								if (${[...attribute.dependencies]
+                            .map(dependency => `changed.${dependency}`)
+                            .join(' || ')}) ${name_changes}${quote_prop_if_necessary(attribute.name)} = ${attribute.get_value(block)};
+							`);
+	                    }
+	                });
+	            }
+	        }
+	        if (non_let_dependencies.length > 0) {
+	            updates.push(`if (${non_let_dependencies.map(n => `changed.${n}`).join(' || ')}) ${name_changes}.$$scope = { changed, ctx };`);
+	        }
+	        const munged_bindings = this.node.bindings.map(binding => {
+	            component.has_reactive_assignments = true;
+	            if (binding.name === 'this') {
+	                const fn = component.get_unique_name(`${this.var}_binding`);
+	                component.add_var({
+	                    name: fn,
+	                    internal: true,
+	                    referenced: true
+	                });
+	                let lhs;
+	                let object;
+	                if (binding.is_contextual && binding.expression.node.type === 'Identifier') {
+	                    // bind:x={y} — we can't just do `y = x`, we need to
+	                    // to `array[index] = x;
+	                    const { name } = binding.expression.node;
+	                    const { object, property, snippet } = block.bindings.get(name);
+	                    lhs = snippet;
+	                    // TODO we need to invalidate... something
+	                }
+	                else {
+	                    object = flatten_reference(binding.expression.node).name;
+	                    lhs = component.source.slice(binding.expression.node.start, binding.expression.node.end).trim();
+	                }
+	                component.partly_hoisted.push(deindent `
+					function ${fn}($$component) {
+						${lhs} = $$component;
+						${object && component.invalidate(object)}
+					}
+				`);
+	                block.builders.destroy.add_line(`ctx.${fn}(null);`);
+	                return `@add_binding_callback(() => ctx.${fn}(${this.var}));`;
+	            }
+	            const name = component.get_unique_name(`${this.var}_${binding.name}_binding`);
+	            component.add_var({
+	                name,
+	                internal: true,
+	                referenced: true
+	            });
+	            const updating = block.get_unique_name(`updating_${binding.name}`);
+	            block.add_variable(updating);
+	            const snippet = binding.expression.render(block);
+	            statements.push(deindent `
+				if (${snippet} !== void 0) {
+					${props}${quote_prop_if_necessary(binding.name)} = ${snippet};
+				}`);
+	            updates.push(deindent `
+				if (!${updating} && ${[...binding.expression.dependencies].map((dependency) => `changed.${dependency}`).join(' || ')}) {
+					${name_changes}${quote_prop_if_necessary(binding.name)} = ${snippet};
+				}
+			`);
+	            const contextual_dependencies = Array.from(binding.expression.contextual_dependencies);
+	            const dependencies = Array.from(binding.expression.dependencies);
+	            let lhs = component.source.slice(binding.expression.node.start, binding.expression.node.end).trim();
+	            if (binding.is_contextual && binding.expression.node.type === 'Identifier') {
+	                // bind:x={y} — we can't just do `y = x`, we need to
+	                // to `array[index] = x;
+	                const { name } = binding.expression.node;
+	                const { object, property, snippet } = block.bindings.get(name);
+	                lhs = snippet;
+	                contextual_dependencies.push(object, property);
+	            }
+	            const value = block.get_unique_name('value');
+	            const args = [value];
+	            if (contextual_dependencies.length > 0) {
+	                args.push(`{ ${contextual_dependencies.join(', ')} }`);
+	                block.builders.init.add_block(deindent `
+					function ${name}(${value}) {
+						ctx.${name}.call(null, ${value}, ctx);
+						${updating} = true;
+						@add_flush_callback(() => ${updating} = false);
+					}
+				`);
+	                block.maintain_context = true; // TODO put this somewhere more logical
+	            }
+	            else {
+	                block.builders.init.add_block(deindent `
+					function ${name}(${value}) {
+						ctx.${name}.call(null, ${value});
+						${updating} = true;
+						@add_flush_callback(() => ${updating} = false);
+					}
+				`);
+	            }
+	            const body = deindent `
+				function ${name}(${args.join(', ')}) {
+					${lhs} = ${value};
+					${component.invalidate(dependencies[0])};
+				}
+			`;
+	            component.partly_hoisted.push(body);
+	            return `@add_binding_callback(() => @bind(${this.var}, '${binding.name}', ${name}));`;
+	        });
+	        const munged_handlers = this.node.handlers.map(handler => {
+	            const snippet = handler.render(block);
+	            return `${name}.$on("${handler.name}", ${snippet});`;
+	        });
+	        if (this.node.name === 'svelte:component') {
+	            const switch_value = block.get_unique_name('switch_value');
+	            const switch_props = block.get_unique_name('switch_props');
+	            const snippet = this.node.expression.render(block);
+	            block.builders.init.add_block(deindent `
+				var ${switch_value} = ${snippet};
+
+				function ${switch_props}(ctx) {
+					${(this.node.attributes.length || this.node.bindings.length) && deindent `
+					${props && `let ${props} = ${attribute_object};`}`}
+					${statements}
+					return ${stringify_props(component_opts)};
+				}
+
+				if (${switch_value}) {
+					var ${name} = new ${switch_value}(${switch_props}(ctx));
+
+					${munged_bindings}
+					${munged_handlers}
+				}
+			`);
+	            block.builders.create.add_line(`if (${name}) ${name}.$$.fragment.c();`);
+	            if (parent_nodes && this.renderer.options.hydratable) {
+	                block.builders.claim.add_line(`if (${name}) ${name}.$$.fragment.l(${parent_nodes});`);
+	            }
+	            block.builders.mount.add_block(deindent `
+				if (${name}) {
+					@mount_component(${name}, ${parent_node || '#target'}, ${parent_node ? 'null' : 'anchor'});
+				}
+			`);
+	            const anchor = this.get_or_create_anchor(block, parent_node, parent_nodes);
+	            const update_mount_node = this.get_update_mount_node(anchor);
+	            if (updates.length) {
+	                block.builders.update.add_block(deindent `
+					${updates}
+				`);
+	            }
+	            block.builders.update.add_block(deindent `
+				if (${switch_value} !== (${switch_value} = ${snippet})) {
+					if (${name}) {
+						@group_outros();
+						const old_component = ${name};
+						@on_outro(() => {
+							old_component.$destroy();
+						});
+						old_component.$$.fragment.o(1);
+						@check_outros();
+					}
+
+					if (${switch_value}) {
+						${name} = new ${switch_value}(${switch_props}(ctx));
+
+						${munged_bindings}
+						${munged_handlers}
+
+						${name}.$$.fragment.c();
+						${name}.$$.fragment.i(1);
+						@mount_component(${name}, ${update_mount_node}, ${anchor});
+					} else {
+						${name} = null;
+					}
+				}
+			`);
+	            block.builders.intro.add_block(deindent `
+				if (${name}) ${name}.$$.fragment.i(#local);
+			`);
+	            if (updates.length) {
+	                block.builders.update.add_block(deindent `
+					else if (${switch_value}) {
+						${name}.$set(${name_changes});
+					}
+				`);
+	            }
+	            block.builders.outro.add_line(`if (${name}) ${name}.$$.fragment.o(#local);`);
+	            block.builders.destroy.add_line(`if (${name}) ${name}.$destroy(${parent_node ? '' : 'detaching'});`);
+	        }
+	        else {
+	            const expression = this.node.name === 'svelte:self'
+	                ? '__svelte:self__' // TODO conflict-proof this
+	                : component.qualify(this.node.name);
+	            block.builders.init.add_block(deindent `
+				${(this.node.attributes.length || this.node.bindings.length) && deindent `
+				${props && `let ${props} = ${attribute_object};`}`}
+				${statements}
+				var ${name} = new ${expression}(${stringify_props(component_opts)});
+
+				${munged_bindings}
+				${munged_handlers}
+			`);
+	            block.builders.create.add_line(`${name}.$$.fragment.c();`);
+	            if (parent_nodes && this.renderer.options.hydratable) {
+	                block.builders.claim.add_line(`${name}.$$.fragment.l(${parent_nodes});`);
+	            }
+	            block.builders.mount.add_line(`@mount_component(${name}, ${parent_node || '#target'}, ${parent_node ? 'null' : 'anchor'});`);
+	            block.builders.intro.add_block(deindent `
+				${name}.$$.fragment.i(#local);
+			`);
+	            if (updates.length) {
+	                block.builders.update.add_block(deindent `
+					${updates}
+					${name}.$set(${name_changes});
+				`);
+	            }
+	            block.builders.destroy.add_block(deindent `
+				${name}.$destroy(${parent_node ? '' : 'detaching'});
+			`);
+	            block.builders.outro.add_line(`${name}.$$.fragment.o(#local);`);
+	        }
+	    }
+	}
+
+	class Tag extends Wrapper {
+	    constructor(renderer, block, parent, node) {
+	        super(renderer, block, parent, node);
+	        this.cannot_use_innerhtml();
+	        block.add_dependencies(node.expression.dependencies);
+	    }
+	    rename_this_method(block, update) {
+	        const dependencies = this.node.expression.dynamic_dependencies();
+	        const snippet = this.node.expression.render(block);
+	        const value = this.node.should_cache && block.get_unique_name(`${this.var}_value`);
+	        const content = this.node.should_cache ? value : snippet;
+	        if (this.node.should_cache)
+	            block.add_variable(value, snippet);
+	        if (dependencies.length > 0) {
+	            const changed_check = ((block.has_outros ? `!#current || ` : '') +
+	                dependencies.map((dependency) => `changed.${dependency}`).join(' || '));
+	            const update_cached_value = `${value} !== (${value} = ${snippet})`;
+	            const condition = this.node.should_cache
+	                ? `(${changed_check}) && ${update_cached_value}`
+	                : changed_check;
+	            block.builders.update.add_conditional(condition, update(content));
+	        }
+	        return { init: content };
+	    }
+	}
+
+	class MustacheTagWrapper extends Tag {
+	    constructor(renderer, block, parent, node) {
+	        super(renderer, block, parent, node);
+	        this.var = 't';
+	        this.cannot_use_innerhtml();
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const { init } = this.rename_this_method(block, value => `@set_data(${this.var}, ${value});`);
+	        block.add_element(this.var, `@text(${init})`, parent_nodes && `@claim_text(${parent_nodes}, ${init})`, parent_node);
+	    }
+	}
+
+	class RawMustacheTagWrapper extends Tag {
+	    constructor(renderer, block, parent, node) {
+	        super(renderer, block, parent, node);
+	        this.var = 'raw';
+	        this.cannot_use_innerhtml();
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const name = this.var;
+	        const in_head = parent_node === 'document.head';
+	        const needs_anchors = !parent_node || in_head;
+	        // if in head always needs anchors
+	        if (in_head) {
+	            this.prev = null;
+	            this.next = null;
+	        }
+	        // TODO use is_dom_node instead of type === 'Element'?
+	        const needs_anchor_before = this.prev ? this.prev.node.type !== 'Element' : needs_anchors;
+	        const needs_anchor_after = this.next ? this.next.node.type !== 'Element' : needs_anchors;
+	        const anchor_before = needs_anchor_before
+	            ? block.get_unique_name(`${name}_before`)
+	            : (this.prev && this.prev.var) || 'null';
+	        const anchor_after = needs_anchor_after
+	            ? block.get_unique_name(`${name}_after`)
+	            : (this.next && this.next.var) || 'null';
+	        let detach;
+	        let insert;
+	        let use_innerhtml = false;
+	        if (anchor_before === 'null' && anchor_after === 'null') {
+	            use_innerhtml = true;
+	            detach = `${parent_node}.innerHTML = '';`;
+	            insert = content => `${parent_node}.innerHTML = ${content};`;
+	        }
+	        else if (anchor_before === 'null') {
+	            detach = `@detach_before(${anchor_after});`;
+	            insert = content => `${anchor_after}.insertAdjacentHTML("beforebegin", ${content});`;
+	        }
+	        else if (anchor_after === 'null') {
+	            detach = `@detach_after(${anchor_before});`;
+	            insert = content => `${anchor_before}.insertAdjacentHTML("afterend", ${content});`;
+	        }
+	        else {
+	            detach = `@detach_between(${anchor_before}, ${anchor_after});`;
+	            insert = content => `${anchor_before}.insertAdjacentHTML("afterend", ${content});`;
+	        }
+	        const { init } = this.rename_this_method(block, content => deindent `
+				${!use_innerhtml && detach}
+				${insert(content)}
+			`);
+	        // we would have used comments here, but the `insertAdjacentHTML` api only
+	        // exists for `Element`s.
+	        if (needs_anchor_before) {
+	            block.add_element(anchor_before, `@element('noscript')`, parent_nodes && `@element('noscript')`, parent_node, true);
+	        }
+	        function add_anchor_after() {
+	            block.add_element(anchor_after, `@element('noscript')`, parent_nodes && `@element('noscript')`, parent_node);
+	        }
+	        if (needs_anchor_after && anchor_before === 'null') {
+	            // anchor_after needs to be in the DOM before we
+	            // insert the HTML...
+	            add_anchor_after();
+	        }
+	        block.builders.mount.add_line(insert(init));
+	        if (needs_anchors) {
+	            block.builders.destroy.add_conditional('detaching', needs_anchor_before
+	                ? `${detach}\n@detach(${anchor_before});`
+	                : detach);
+	        }
+	        if (needs_anchor_after && anchor_before !== 'null') {
+	            // ...otherwise it should go afterwards
+	            add_anchor_after();
+	        }
+	    }
+	}
+
+	function snip(expression) {
+	    return `[✂${expression.node.start}-${expression.node.end}✂]`;
+	}
+
+	function stringify_attribute(attribute, is_ssr) {
+	    return attribute.chunks
+	        .map((chunk) => {
+	        if (chunk.type === 'Text') {
+	            return escape_template(escape$1(chunk.data).replace(/"/g, '&quot;'));
+	        }
+	        return is_ssr
+	            ? '${@escape(' + snip(chunk) + ')}'
+	            : '${' + snip(chunk) + '}';
+	    })
+	        .join('');
+	}
+
+	function get_slot_data(values, is_ssr) {
+	    return Array.from(values.values())
+	        .filter(attribute => attribute.name !== 'name')
+	        .map(attribute => {
+	        const value = attribute.is_true
+	            ? 'true'
+	            : attribute.chunks.length === 0
+	                ? '""'
+	                : attribute.chunks.length === 1 && attribute.chunks[0].type !== 'Text'
+	                    ? snip(attribute.chunks[0])
+	                    : '`' + stringify_attribute(attribute, is_ssr) + '`';
+	        return `${attribute.name}: ${value}`;
+	    });
+	}
+
+	class SlotWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	        this.var = 'slot';
+	        this.dependencies = new Set(['$$scope']);
+	        this.cannot_use_innerhtml();
+	        this.fragment = new FragmentWrapper(renderer, block, node.children, parent, strip_whitespace, next_sibling);
+	        this.node.values.forEach(attribute => {
+	            add_to_set(this.dependencies, attribute.dependencies);
+	        });
+	        block.add_dependencies(this.dependencies);
+	        // we have to do this, just in case
+	        block.add_intro();
+	        block.add_outro();
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const { renderer } = this;
+	        const { slot_name } = this.node;
+	        let get_slot_changes;
+	        let get_slot_context;
+	        if (this.node.values.size > 0) {
+	            get_slot_changes = renderer.component.get_unique_name(`get_${sanitize(slot_name)}_slot_changes`);
+	            get_slot_context = renderer.component.get_unique_name(`get_${sanitize(slot_name)}_slot_context`);
+	            const context_props = get_slot_data(this.node.values, false);
+	            const changes_props = [];
+	            const dependencies = new Set();
+	            this.node.values.forEach(attribute => {
+	                attribute.chunks.forEach(chunk => {
+	                    if (chunk.dependencies) {
+	                        add_to_set(dependencies, chunk.dependencies);
+	                        add_to_set(dependencies, chunk.contextual_dependencies);
+	                    }
+	                });
+	                if (attribute.dependencies.size > 0) {
+	                    changes_props.push(`${attribute.name}: ${[...attribute.dependencies].join(' || ')}`);
+	                }
+	            });
+	            const arg = dependencies.size > 0 ? `{ ${Array.from(dependencies).join(', ')} }` : '{}';
+	            renderer.blocks.push(deindent `
+				const ${get_slot_changes} = (${arg}) => (${stringify_props(changes_props)});
+				const ${get_slot_context} = (${arg}) => (${stringify_props(context_props)});
+			`);
+	        }
+	        else {
+	            get_slot_changes = 'null';
+	            get_slot_context = 'null';
+	        }
+	        const slot = block.get_unique_name(`${sanitize(slot_name)}_slot`);
+	        const slot_definition = block.get_unique_name(`${sanitize(slot_name)}_slot`);
+	        block.builders.init.add_block(deindent `
+			const ${slot_definition} = ctx.$$slots${quote_prop_if_necessary(slot_name)};
+			const ${slot} = @create_slot(${slot_definition}, ctx, ${get_slot_context});
+		`);
+	        let mount_before = block.builders.mount.toString();
+	        block.builders.create.push_condition(`!${slot}`);
+	        block.builders.claim.push_condition(`!${slot}`);
+	        block.builders.hydrate.push_condition(`!${slot}`);
+	        block.builders.mount.push_condition(`!${slot}`);
+	        block.builders.update.push_condition(`!${slot}`);
+	        block.builders.destroy.push_condition(`!${slot}`);
+	        const listeners = block.event_listeners;
+	        block.event_listeners = [];
+	        this.fragment.render(block, parent_node, parent_nodes);
+	        block.render_listeners(`_${slot}`);
+	        block.event_listeners = listeners;
+	        block.builders.create.pop_condition();
+	        block.builders.claim.pop_condition();
+	        block.builders.hydrate.pop_condition();
+	        block.builders.mount.pop_condition();
+	        block.builders.update.pop_condition();
+	        block.builders.destroy.pop_condition();
+	        block.builders.create.add_line(`if (${slot}) ${slot}.c();`);
+	        block.builders.claim.add_line(`if (${slot}) ${slot}.l(${parent_nodes});`);
+	        const mount_leadin = block.builders.mount.toString() !== mount_before
+	            ? `else`
+	            : `if (${slot})`;
+	        block.builders.mount.add_block(deindent `
+			${mount_leadin} {
+				${slot}.m(${parent_node || '#target'}, ${parent_node ? 'null' : 'anchor'});
+			}
+		`);
+	        block.builders.intro.add_line(`if (${slot} && ${slot}.i) ${slot}.i(#local);`);
+	        block.builders.outro.add_line(`if (${slot} && ${slot}.o) ${slot}.o(#local);`);
+	        let update_conditions = [...this.dependencies].map(name => `changed.${name}`).join(' || ');
+	        if (this.dependencies.size > 1)
+	            update_conditions = `(${update_conditions})`;
+	        block.builders.update.add_block(deindent `
+			if (${slot} && ${slot}.p && ${update_conditions}) {
+				${slot}.p(@get_slot_changes(${slot_definition}, ctx, changed, ${get_slot_changes}), @get_slot_context(${slot_definition}, ctx, ${get_slot_context}));
+			}
+		`);
+	        block.builders.destroy.add_line(`if (${slot}) ${slot}.d(detaching);`);
+	    }
+	}
+
+	// Whitespace inside one of these elements will not result in
+	// a whitespace node being created in any circumstances. (This
+	// list is almost certainly very incomplete)
+	const elements_without_text = new Set([
+	    'audio',
+	    'datalist',
+	    'dl',
+	    'optgroup',
+	    'select',
+	    'video',
+	]);
+	// TODO this should probably be in Fragment
+	function should_skip(node) {
+	    if (/\S/.test(node.data))
+	        return false;
+	    const parent_element = node.find_nearest(/(?:Element|InlineComponent|Head)/);
+	    if (!parent_element)
+	        return false;
+	    if (parent_element.type === 'Head')
+	        return true;
+	    if (parent_element.type === 'InlineComponent')
+	        return parent_element.children.length === 1 && node === parent_element.children[0];
+	    return parent_element.namespace || elements_without_text.has(parent_element.name);
+	}
+	class TextWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, data) {
+	        super(renderer, block, parent, node);
+	        this.skip = should_skip(this.node);
+	        this.data = data;
+	        this.var = this.skip ? null : 't';
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        if (this.skip)
+	            return;
+	        block.add_element(this.var, this.node.use_space ? `@space()` : `@text(${stringify(this.data)})`, parent_nodes && `@claim_text(${parent_nodes}, ${stringify(this.data)})`, parent_node);
+	    }
+	}
+
+	class TitleWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {
+	        super(renderer, block, parent, node);
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const is_dynamic = !!this.node.children.find(node => node.type !== 'Text');
+	        if (is_dynamic) {
+	            let value;
+	            const all_dependencies = new Set();
+	            // TODO some of this code is repeated in Tag.ts — would be good to
+	            // DRY it out if that's possible without introducing crazy indirection
+	            if (this.node.children.length === 1) {
+	                // single {tag} — may be a non-string
+	                // @ts-ignore todo: check this
+	                const { expression } = this.node.children[0];
+	                value = expression.render(block);
+	                add_to_set(all_dependencies, expression.dependencies);
+	            }
+	            else {
+	                // '{foo} {bar}' — treat as string concatenation
+	                value =
+	                    (this.node.children[0].type === 'Text' ? '' : `"" + `) +
+	                        this.node.children
+	                            .map((chunk) => {
+	                            if (chunk.type === 'Text') {
+	                                return stringify(chunk.data);
+	                            }
+	                            else {
+	                                // @ts-ignore todo: check this
+	                                const snippet = chunk.expression.render(block);
+	                                // @ts-ignore todo: check this
+	                                chunk.expression.dependencies.forEach(d => {
+	                                    all_dependencies.add(d);
+	                                });
+	                                // @ts-ignore todo: check this
+	                                return chunk.expression.get_precedence() <= 13 ? `(${snippet})` : snippet;
+	                            }
+	                        })
+	                            .join(' + ');
+	            }
+	            const last = this.node.should_cache && block.get_unique_name(`title_value`);
+	            if (this.node.should_cache)
+	                block.add_variable(last);
+	            let updater;
+	            const init = this.node.should_cache ? `${last} = ${value}` : value;
+	            block.builders.init.add_line(`document.title = ${init};`);
+	            updater = `document.title = ${this.node.should_cache ? last : value};`;
+	            if (all_dependencies.size) {
+	                const dependencies = Array.from(all_dependencies);
+	                const changed_check = ((block.has_outros ? `!#current || ` : '') +
+	                    dependencies.map(dependency => `changed.${dependency}`).join(' || '));
+	                const update_cached_value = `${last} !== (${last} = ${value})`;
+	                const condition = this.node.should_cache ?
+	                    (dependencies.length ? `(${changed_check}) && ${update_cached_value}` : update_cached_value) :
+	                    changed_check;
+	                block.builders.update.add_conditional(condition, updater);
+	            }
+	        }
+	        else {
+	            const value = stringify(this.node.children[0].data);
+	            block.builders.hydrate.add_line(`document.title = ${value};`);
+	        }
+	    }
+	}
+
+	const associated_events = {
+	    innerWidth: 'resize',
+	    innerHeight: 'resize',
+	    outerWidth: 'resize',
+	    outerHeight: 'resize',
+	    scrollX: 'scroll',
+	    scrollY: 'scroll',
+	};
+	const properties = {
+	    scrollX: 'pageXOffset',
+	    scrollY: 'pageYOffset'
+	};
+	const readonly = new Set([
+	    'innerWidth',
+	    'innerHeight',
+	    'outerWidth',
+	    'outerHeight',
+	    'online',
+	]);
+	class WindowWrapper extends Wrapper {
+	    constructor(renderer, block, parent, node) {
+	        super(renderer, block, parent, node);
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        const { renderer } = this;
+	        const { component } = renderer;
+	        const events = {};
+	        const bindings = {};
+	        add_actions(component, block, 'window', this.node.actions);
+	        add_event_handlers(block, 'window', this.node.handlers);
+	        this.node.bindings.forEach(binding => {
+	            // in dev mode, throw if read-only values are written to
+	            if (readonly.has(binding.name)) {
+	                renderer.readonly.add(binding.expression.node.name);
+	            }
+	            bindings[binding.name] = binding.expression.node.name;
+	            // bind:online is a special case, we need to listen for two separate events
+	            if (binding.name === 'online')
+	                return;
+	            const associated_event = associated_events[binding.name];
+	            const property = properties[binding.name] || binding.name;
+	            if (!events[associated_event])
+	                events[associated_event] = [];
+	            events[associated_event].push({
+	                name: binding.expression.node.name,
+	                value: property
+	            });
+	        });
+	        const scrolling = block.get_unique_name(`scrolling`);
+	        const clear_scrolling = block.get_unique_name(`clear_scrolling`);
+	        const scrolling_timeout = block.get_unique_name(`scrolling_timeout`);
+	        Object.keys(events).forEach(event => {
+	            const handler_name = block.get_unique_name(`onwindow${event}`);
+	            const props = events[event];
+	            if (event === 'scroll') {
+	                // TODO other bidirectional bindings...
+	                block.add_variable(scrolling, 'false');
+	                block.add_variable(clear_scrolling, `() => { ${scrolling} = false }`);
+	                block.add_variable(scrolling_timeout);
+	                const condition = [
+	                    bindings.scrollX && `"${bindings.scrollX}" in this._state`,
+	                    bindings.scrollY && `"${bindings.scrollY}" in this._state`
+	                ].filter(Boolean).join(' || ');
+	                const x = bindings.scrollX && `this._state.${bindings.scrollX}`;
+	                const y = bindings.scrollY && `this._state.${bindings.scrollY}`;
+	                renderer.meta_bindings.add_block(deindent `
+					if (${condition}) {
+						window.scrollTo(${x || 'window.pageXOffset'}, ${y || 'window.pageYOffset'});
+					}
+					${x && `${x} = window.pageXOffset;`}
+					${y && `${y} = window.pageYOffset;`}
+				`);
+	                block.event_listeners.push(deindent `
+					@listen(window, "${event}", () => {
+						${scrolling} = true;
+						clearTimeout(${scrolling_timeout});
+						${scrolling_timeout} = setTimeout(${clear_scrolling}, 100);
+						ctx.${handler_name}();
+					})
+				`);
+	            }
+	            else {
+	                props.forEach(prop => {
+	                    renderer.meta_bindings.add_line(`this._state.${prop.name} = window.${prop.value};`);
+	                });
+	                block.event_listeners.push(deindent `
+					@listen(window, "${event}", ctx.${handler_name})
+				`);
+	            }
+	            component.add_var({
+	                name: handler_name,
+	                internal: true,
+	                referenced: true
+	            });
+	            component.partly_hoisted.push(deindent `
+				function ${handler_name}() {
+					${props.map(prop => `${prop.name} = window.${prop.value}; $$invalidate('${prop.name}', ${prop.name});`)}
+				}
+			`);
+	            block.builders.init.add_block(deindent `
+				@add_render_callback(ctx.${handler_name});
+			`);
+	            component.has_reactive_assignments = true;
+	        });
+	        // special case... might need to abstract this out if we add more special cases
+	        if (bindings.scrollX || bindings.scrollY) {
+	            block.builders.update.add_block(deindent `
+				if (${[bindings.scrollX, bindings.scrollY].filter(Boolean).map(b => `changed.${b}`).join(' || ')} && !${scrolling}) {
+					${scrolling} = true;
+					clearTimeout(${scrolling_timeout});
+					window.scrollTo(${bindings.scrollX ? `ctx.${bindings.scrollX}` : `window.pageXOffset`}, ${bindings.scrollY ? `ctx.${bindings.scrollY}` : `window.pageYOffset`});
+					${scrolling_timeout} = setTimeout(${clear_scrolling}, 100);
+				}
+			`);
+	        }
+	        // another special case. (I'm starting to think these are all special cases.)
+	        if (bindings.online) {
+	            const handler_name = block.get_unique_name(`onlinestatuschanged`);
+	            const name = bindings.online;
+	            component.add_var({
+	                name: handler_name,
+	                internal: true,
+	                referenced: true
+	            });
+	            component.partly_hoisted.push(deindent `
+				function ${handler_name}() {
+					${name} = navigator.onLine; $$invalidate('${name}', ${name});
+				}
+			`);
+	            block.builders.init.add_block(deindent `
+				@add_render_callback(ctx.${handler_name});
+			`);
+	            block.event_listeners.push(`@listen(window, "online", ctx.${handler_name})`, `@listen(window, "offline", ctx.${handler_name})`);
+	            component.has_reactive_assignments = true;
+	        }
+	    }
+	}
+
+	const wrappers = {
+	    AwaitBlock: AwaitBlockWrapper,
+	    Body: BodyWrapper,
+	    Comment: null,
+	    DebugTag: DebugTagWrapper,
+	    EachBlock: EachBlockWrapper,
+	    Element: ElementWrapper,
+	    Head: HeadWrapper,
+	    IfBlock: IfBlockWrapper,
+	    InlineComponent: InlineComponentWrapper,
+	    MustacheTag: MustacheTagWrapper,
+	    Options: null,
+	    RawMustacheTag: RawMustacheTagWrapper,
+	    Slot: SlotWrapper,
+	    Text: TextWrapper,
+	    Title: TitleWrapper,
+	    Window: WindowWrapper
+	};
+	function link(next, prev) {
+	    prev.next = next;
+	    if (next)
+	        next.prev = prev;
+	}
+	class FragmentWrapper {
+	    constructor(renderer, block, nodes, parent, strip_whitespace, next_sibling) {
+	        this.nodes = [];
+	        let last_child;
+	        let window_wrapper;
+	        let i = nodes.length;
+	        while (i--) {
+	            const child = nodes[i];
+	            if (!child.type) {
+	                throw new Error(`missing type`);
+	            }
+	            if (!(child.type in wrappers)) {
+	                throw new Error(`TODO implement ${child.type}`);
+	            }
+	            // special case — this is an easy way to remove whitespace surrounding
+	            // <svelte:window/>. lil hacky but it works
+	            if (child.type === 'Window') {
+	                window_wrapper = new WindowWrapper(renderer, block, parent, child);
+	                continue;
+	            }
+	            if (child.type === 'Text') {
+	                let { data } = child;
+	                // We want to remove trailing whitespace inside an element/component/block,
+	                // *unless* there is no whitespace between this node and its next sibling
+	                if (this.nodes.length === 0) {
+	                    const should_trim = (
+	                    // @ts-ignore todo: probably error, should it be next_sibling.node.data?
+	                    next_sibling ? (next_sibling.node.type === 'Text' && /^\s/.test(next_sibling.data)) : !child.has_ancestor('EachBlock'));
+	                    if (should_trim) {
+	                        data = trim_end(data);
+	                        if (!data)
+	                            continue;
+	                    }
+	                }
+	                // glue text nodes (which could e.g. be separated by comments) together
+	                if (last_child && last_child.node.type === 'Text') {
+	                    // @ts-ignore todo: probably error, should it be last_child.node.data?
+	                    last_child.data = data + last_child.data;
+	                    continue;
+	                }
+	                const wrapper = new TextWrapper(renderer, block, parent, child, data);
+	                if (wrapper.skip)
+	                    continue;
+	                this.nodes.unshift(wrapper);
+	                link(last_child, last_child = wrapper);
+	            }
+	            else {
+	                const Wrapper = wrappers[child.type];
+	                if (!Wrapper)
+	                    continue;
+	                const wrapper = new Wrapper(renderer, block, parent, child, strip_whitespace, last_child || next_sibling);
+	                this.nodes.unshift(wrapper);
+	                link(last_child, last_child = wrapper);
+	            }
+	        }
+	        if (strip_whitespace) {
+	            const first = this.nodes[0];
+	            if (first && first.node.type === 'Text') {
+	                first.data = trim_start(first.data);
+	                if (!first.data) {
+	                    first.var = null;
+	                    this.nodes.shift();
+	                    if (this.nodes[0]) {
+	                        this.nodes[0].prev = null;
+	                    }
+	                }
+	            }
+	        }
+	        if (window_wrapper) {
+	            this.nodes.unshift(window_wrapper);
+	            link(last_child, window_wrapper);
+	        }
+	    }
+	    render(block, parent_node, parent_nodes) {
+	        for (let i = 0; i < this.nodes.length; i += 1) {
+	            this.nodes[i].render(block, parent_node, parent_nodes);
+	        }
+	    }
+	}
+
+	class Renderer {
+	    constructor(component, options) {
+	        this.blocks = [];
+	        this.readonly = new Set();
+	        this.meta_bindings = new CodeBuilder(); // initial values for e.g. window.innerWidth, if there's a <svelte:window> meta tag
+	        this.binding_groups = [];
+	        this.component = component;
+	        this.options = options;
+	        this.locate = component.locate; // TODO messy
+	        this.file_var = options.dev && this.component.get_unique_name('file');
+	        // main block
+	        this.block = new Block$1({
+	            renderer: this,
+	            name: null,
+	            key: null,
+	            bindings: new Map(),
+	            dependencies: new Set(),
+	        });
+	        this.block.has_update_method = true;
+	        this.fragment = new FragmentWrapper(this, this.block, component.fragment.children, null, true, null);
+	        this.blocks.forEach(block => {
+	            if (typeof block !== 'string') {
+	                block.assign_variable_names();
+	            }
+	        });
+	        this.block.assign_variable_names();
+	        this.fragment.render(this.block, null, 'nodes');
+	    }
+	}
+
+	function isReference(node, parent) {
+	    if (node.type === 'MemberExpression') {
+	        return !node.computed && isReference(node.object, node);
+	    }
+	    if (node.type === 'Identifier') {
+	        // the only time we could have an identifier node without a parent is
+	        // if it's the entire body of a function without a block statement –
+	        // i.e. an arrow function expression like `a => a`
+	        if (!parent)
+	            return true;
+	        if (parent.type === 'MemberExpression')
+	            return parent.computed || node === parent.object;
+	        if (parent.type === 'MethodDefinition')
+	            return parent.computed;
+	        // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`
+	        if (parent.type === 'Property')
+	            return parent.computed || node === parent.value;
+	        // disregard the `bar` in `export { foo as bar }`
+	        if (parent.type === 'ExportSpecifier' && node !== parent.local)
+	            return false;
+	        // disregard the foo in `foo: bar`
+	        if (parent.type === 'LabeledStatement')
+	            return false;
+	        return true;
+	    }
+	    return false;
+	}
+
+	function create_scopes(expression) {
+	    const map = new WeakMap();
+	    const globals = new Map();
+	    let scope = new Scope$1(null, false);
+	    walk(expression, {
+	        enter(node, parent) {
+	            if (node.type === 'ImportDeclaration') {
+	                node.specifiers.forEach(specifier => {
+	                    scope.declarations.set(specifier.local.name, specifier);
+	                });
+	            }
+	            else if (/Function/.test(node.type)) {
+	                if (node.type === 'FunctionDeclaration') {
+	                    scope.declarations.set(node.id.name, node);
+	                    scope = new Scope$1(scope, false);
+	                    map.set(node, scope);
+	                }
+	                else {
+	                    scope = new Scope$1(scope, false);
+	                    map.set(node, scope);
+	                    if (node.id)
+	                        scope.declarations.set(node.id.name, node);
+	                }
+	                node.params.forEach((param) => {
+	                    extract_names(param).forEach(name => {
+	                        scope.declarations.set(name, node);
+	                    });
+	                });
+	            }
+	            else if (/For(?:In|Of)?Statement/.test(node.type)) {
+	                scope = new Scope$1(scope, true);
+	                map.set(node, scope);
+	            }
+	            else if (node.type === 'BlockStatement') {
+	                scope = new Scope$1(scope, true);
+	                map.set(node, scope);
+	            }
+	            else if (/(Class|Variable)Declaration/.test(node.type)) {
+	                scope.add_declaration(node);
+	            }
+	            else if (node.type === 'Identifier' && isReference(node, parent)) {
+	                if (!scope.has(node.name) && !globals.has(node.name)) {
+	                    globals.set(node.name, node);
+	                }
+	            }
+	        },
+	        leave(node) {
+	            if (map.has(node)) {
+	                scope = scope.parent;
+	            }
+	        },
+	    });
+	    scope.declarations.forEach((node, name) => {
+	        globals.delete(name);
+	    });
+	    return { map, scope, globals };
+	}
+	class Scope$1 {
+	    constructor(parent, block) {
+	        this.declarations = new Map();
+	        this.initialised_declarations = new Set();
+	        this.parent = parent;
+	        this.block = block;
+	    }
+	    add_declaration(node) {
+	        if (node.kind === 'var' && this.block && this.parent) {
+	            this.parent.add_declaration(node);
+	        }
+	        else if (node.type === 'VariableDeclaration') {
+	            node.declarations.forEach((declarator) => {
+	                extract_names(declarator.id).forEach(name => {
+	                    this.declarations.set(name, node);
+	                    if (declarator.init)
+	                        this.initialised_declarations.add(name);
+	                });
+	            });
+	        }
+	        else {
+	            this.declarations.set(node.id.name, node);
+	        }
+	    }
+	    find_owner(name) {
+	        if (this.declarations.has(name))
+	            return this;
+	        return this.parent && this.parent.find_owner(name);
+	    }
+	    has(name) {
+	        return (this.declarations.has(name) || (this.parent && this.parent.has(name)));
+	    }
+	}
+	function extract_names(param) {
+	    return extract_identifiers(param).map(node => node.name);
+	}
+	function extract_identifiers(param) {
+	    const nodes = [];
+	    extractors[param.type] && extractors[param.type](nodes, param);
+	    return nodes;
+	}
+	const extractors = {
+	    Identifier(nodes, param) {
+	        nodes.push(param);
+	    },
+	    ObjectPattern(nodes, param) {
+	        param.properties.forEach((prop) => {
+	            if (prop.type === 'RestElement') {
+	                nodes.push(prop.argument);
+	            }
+	            else {
+	                extractors[prop.value.type](nodes, prop.value);
+	            }
+	        });
+	    },
+	    ArrayPattern(nodes, param) {
+	        param.elements.forEach((element) => {
+	            if (element)
+	                extractors[element.type](nodes, element);
+	        });
+	    },
+	    RestElement(nodes, param) {
+	        extractors[param.argument.type](nodes, param.argument);
+	    },
+	    AssignmentPattern(nodes, param) {
+	        extractors[param.left.type](nodes, param.left);
+	    }
+	};
+
+	function nodes_match(a, b) {
+	    if (!!a !== !!b)
+	        return false;
+	    if (Array.isArray(a) !== Array.isArray(b))
+	        return false;
+	    if (a && typeof a === 'object') {
+	        if (Array.isArray(a)) {
+	            if (a.length !== b.length)
+	                return false;
+	            return a.every((child, i) => nodes_match(child, b[i]));
+	        }
+	        const a_keys = Object.keys(a).sort();
+	        const b_keys = Object.keys(b).sort();
+	        if (a_keys.length !== b_keys.length)
+	            return false;
+	        let i = a_keys.length;
+	        while (i--) {
+	            const key = a_keys[i];
+	            if (b_keys[i] !== key)
+	                return false;
+	            if (key === 'start' || key === 'end')
+	                continue;
+	            if (!nodes_match(a[key], b[key])) {
+	                return false;
+	            }
+	        }
+	        return true;
+	    }
+	    return a === b;
+	}
+
+	function dom(component, options) {
+	    const { name, code } = component;
+	    const renderer = new Renderer(component, options);
+	    const { block } = renderer;
+	    block.has_outro_method = true;
+	    // prevent fragment being created twice (#1063)
+	    if (options.customElement)
+	        block.builders.create.add_line(`this.c = @noop;`);
+	    const builder = new CodeBuilder();
+	    if (component.compile_options.dev) {
+	        builder.add_line(`const ${renderer.file_var} = ${JSON.stringify(component.file)};`);
+	    }
+	    const css = component.stylesheet.render(options.filename, !options.customElement);
+	    const styles = component.stylesheet.has_styles && stringify(options.dev ?
+	        `${css.code}\n/*# sourceMappingURL=${css.map.toUrl()} */` :
+	        css.code, { only_escape_at_symbol: true });
+	    if (styles && component.compile_options.css !== false && !options.customElement) {
+	        builder.add_block(deindent `
+			function @add_css() {
+				var style = @element("style");
+				style.id = '${component.stylesheet.id}-style';
+				style.textContent = ${styles};
+				@append(document.head, style);
+			}
+		`);
+	    }
+	    // fix order
+	    // TODO the deconflicted names of blocks are reversed... should set them here
+	    const blocks = renderer.blocks.slice().reverse();
+	    blocks.forEach(block => {
+	        builder.add_block(block.toString());
+	    });
+	    if (options.dev && !options.hydratable) {
+	        block.builders.claim.add_line('throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");');
+	    }
+	    // TODO injecting CSS this way is kinda dirty. Maybe it should be an
+	    // explicit opt-in, or something?
+	    const should_add_css = (!options.customElement &&
+	        component.stylesheet.has_styles &&
+	        options.css !== false);
+	    const uses_props = component.var_lookup.has('$$props');
+	    const $$props = uses_props ? `$$new_props` : `$$props`;
+	    const props = component.vars.filter(variable => !variable.module && variable.export_name);
+	    const writable_props = props.filter(variable => variable.writable);
+	    const set = (uses_props || writable_props.length > 0 || component.slots.size > 0)
+	        ? deindent `
+			${$$props} => {
+				${uses_props && component.invalidate('$$props', `$$props = @assign(@assign({}, $$props), $$new_props)`)}
+				${writable_props.map(prop => `if ('${prop.export_name}' in $$props) ${component.invalidate(prop.name, `${prop.name} = $$props.${prop.export_name}`)};`)}
+				${component.slots.size > 0 &&
+            `if ('$$scope' in ${$$props}) ${component.invalidate('$$scope', `$$scope = ${$$props}.$$scope`)};`}
+			}
+		`
+	        : null;
+	    const body = [];
+	    const not_equal = component.component_options.immutable ? `@not_equal` : `@safe_not_equal`;
+	    let dev_props_check;
+	    props.forEach(x => {
+	        const variable = component.var_lookup.get(x.name);
+	        if (!variable.writable || component.component_options.accessors) {
+	            body.push(deindent `
+				get ${x.export_name}() {
+					return ${x.hoistable ? x.name : 'this.$$.ctx.' + x.name};
+				}
+			`);
+	        }
+	        else if (component.compile_options.dev) {
+	            body.push(deindent `
+				get ${x.export_name}() {
+					throw new Error("<${component.tag}>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
+				}
+			`);
+	        }
+	        if (component.component_options.accessors) {
+	            if (variable.writable && !renderer.readonly.has(x.name)) {
+	                body.push(deindent `
+					set ${x.export_name}(${x.name}) {
+						this.$set({ ${x.name === x.export_name ? x.name : `${x.export_name}: ${x.name}`} });
+						@flush();
+					}
+				`);
+	            }
+	            else if (component.compile_options.dev) {
+	                body.push(deindent `
+					set ${x.export_name}(value) {
+						throw new Error("<${component.tag}>: Cannot set read-only property '${x.export_name}'");
+					}
+				`);
+	            }
+	        }
+	        else if (component.compile_options.dev) {
+	            body.push(deindent `
+				set ${x.export_name}(value) {
+					throw new Error("<${component.tag}>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
+				}
+			`);
+	        }
+	    });
+	    if (component.compile_options.dev) {
+	        // checking that expected ones were passed
+	        const expected = props.filter(prop => !prop.initialised);
+	        if (expected.length) {
+	            dev_props_check = deindent `
+				const { ctx } = this.$$;
+				const props = ${options.customElement ? `this.attributes` : `options.props || {}`};
+				${expected.map(prop => deindent `
+				if (ctx.${prop.name} === undefined && !('${prop.export_name}' in props)) {
+					console.warn("<${component.tag}> was created without expected prop '${prop.export_name}'");
+				}`)}
+			`;
+	        }
+	    }
+	    // instrument assignments
+	    if (component.ast.instance) {
+	        let scope = component.instance_scope;
+	        let map = component.instance_scope_map;
+	        let pending_assignments = new Set();
+	        walk(component.ast.instance.content, {
+	            enter: (node, parent) => {
+	                if (map.has(node)) {
+	                    scope = map.get(node);
+	                }
+	            },
+	            leave(node, parent) {
+	                if (map.has(node)) {
+	                    scope = scope.parent;
+	                }
+	                if (node.type === 'AssignmentExpression' || node.type === 'UpdateExpression') {
+	                    const assignee = node.type === 'AssignmentExpression' ? node.left : node.argument;
+	                    let names = [];
+	                    if (assignee.type === 'MemberExpression') {
+	                        const left_object_name = get_object(assignee).name;
+	                        left_object_name && (names = [left_object_name]);
+	                    }
+	                    else {
+	                        names = extract_names(assignee);
+	                    }
+	                    if (node.operator === '=' && nodes_match(node.left, node.right)) {
+	                        const dirty = names.filter(name => {
+	                            return name[0] === '$' || scope.find_owner(name) === component.instance_scope;
+	                        });
+	                        if (dirty.length)
+	                            component.has_reactive_assignments = true;
+	                        code.overwrite(node.start, node.end, dirty.map(n => component.invalidate(n)).join('; '));
+	                    }
+	                    else {
+	                        const single = (node.type === 'AssignmentExpression' &&
+	                            assignee.type === 'Identifier' &&
+	                            parent.type === 'ExpressionStatement' &&
+	                            assignee.name[0] !== '$');
+	                        names.forEach(name => {
+	                            const owner = scope.find_owner(name);
+	                            if (owner && owner !== component.instance_scope)
+	                                return;
+	                            const variable = component.var_lookup.get(name);
+	                            if (variable && (variable.hoistable || variable.global || variable.module))
+	                                return;
+	                            if (single && !(variable.subscribable && variable.reassigned)) {
+	                                if (variable.referenced || variable.is_reactive_dependency || variable.export_name) {
+	                                    code.prependRight(node.start, `$$invalidate('${name}', `);
+	                                    code.appendLeft(node.end, `)`);
+	                                }
+	                            }
+	                            else {
+	                                pending_assignments.add(name);
+	                            }
+	                            component.has_reactive_assignments = true;
+	                        });
+	                    }
+	                }
+	                if (pending_assignments.size > 0) {
+	                    if (node.type === 'ArrowFunctionExpression') {
+	                        const insert = Array.from(pending_assignments).map(name => component.invalidate(name)).join('; ');
+	                        pending_assignments = new Set();
+	                        code.prependRight(node.body.start, `{ const $$result = `);
+	                        code.appendLeft(node.body.end, `; ${insert}; return $$result; }`);
+	                        pending_assignments = new Set();
+	                    }
+	                    else if (/Statement/.test(node.type)) {
+	                        const insert = Array.from(pending_assignments).map(name => component.invalidate(name)).join('; ');
+	                        if (/^(Break|Continue|Return)Statement/.test(node.type)) {
+	                            if (node.argument) {
+	                                code.overwrite(node.start, node.argument.start, `var $$result = `);
+	                                code.appendLeft(node.argument.end, `; ${insert}; return $$result`);
+	                            }
+	                            else {
+	                                code.prependRight(node.start, `${insert}; `);
+	                            }
+	                        }
+	                        else if (parent && /(If|For(In|Of)?|While)Statement/.test(parent.type) && node.type !== 'BlockStatement') {
+	                            code.prependRight(node.start, '{ ');
+	                            code.appendLeft(node.end, `${code.original[node.end - 1] === ';' ? '' : ';'} ${insert}; }`);
+	                        }
+	                        else {
+	                            code.appendLeft(node.end, `${code.original[node.end - 1] === ';' ? '' : ';'} ${insert};`);
+	                        }
+	                        pending_assignments = new Set();
+	                    }
+	                }
+	            }
+	        });
+	        if (pending_assignments.size > 0) {
+	            throw new Error(`TODO this should not happen!`);
+	        }
+	        component.rewrite_props(({ name, reassigned }) => {
+	            const value = `$${name}`;
+	            const callback = `$value => { ${value} = $$value; $$invalidate('${value}', ${value}) }`;
+	            if (reassigned) {
+	                return `$$subscribe_${name}()`;
+	            }
+	            const subscribe = component.helper('subscribe');
+	            let insert = `${subscribe}($$self, ${name}, $${callback})`;
+	            if (component.compile_options.dev) {
+	                const validate_store = component.helper('validate_store');
+	                insert = `${validate_store}(${name}, '${name}'); ${insert}`;
+	            }
+	            return insert;
+	        });
+	    }
+	    const args = ['$$self'];
+	    if (props.length > 0 || component.has_reactive_assignments || component.slots.size > 0) {
+	        args.push('$$props', '$$invalidate');
+	    }
+	    builder.add_block(deindent `
+		function create_fragment(ctx) {
+			${block.get_contents()}
+		}
+
+		${component.module_javascript}
+
+		${component.fully_hoisted.length > 0 && component.fully_hoisted.join('\n\n')}
+	`);
+	    const filtered_declarations = component.vars
+	        .filter(v => ((v.referenced || v.export_name) && !v.hoistable))
+	        .map(v => v.name);
+	    if (uses_props)
+	        filtered_declarations.push(`$$props: $$props = ${component.helper('exclude_internal_props')}($$props)`);
+	    const filtered_props = props.filter(prop => {
+	        const variable = component.var_lookup.get(prop.name);
+	        if (variable.hoistable)
+	            return false;
+	        if (prop.name[0] === '$')
+	            return false;
+	        return true;
+	    });
+	    const reactive_stores = component.vars.filter(variable => variable.name[0] === '$' && variable.name[1] !== '$');
+	    if (component.slots.size > 0) {
+	        filtered_declarations.push('$$slots', '$$scope');
+	    }
+	    if (renderer.binding_groups.length > 0) {
+	        filtered_declarations.push(`$$binding_groups`);
+	    }
+	    const has_definition = (component.javascript ||
+	        filtered_props.length > 0 ||
+	        uses_props ||
+	        component.partly_hoisted.length > 0 ||
+	        filtered_declarations.length > 0 ||
+	        component.reactive_declarations.length > 0);
+	    const definition = has_definition
+	        ? component.alias('instance')
+	        : 'null';
+	    const all_reactive_dependencies = new Set();
+	    component.reactive_declarations.forEach(d => {
+	        add_to_set(all_reactive_dependencies, d.dependencies);
+	    });
+	    const reactive_store_subscriptions = reactive_stores
+	        .filter(store => {
+	        const variable = component.var_lookup.get(store.name.slice(1));
+	        return !variable || variable.hoistable;
+	    })
+	        .map(({ name }) => deindent `
+			${component.compile_options.dev && `@validate_store(${name.slice(1)}, '${name.slice(1)}');`}
+			@subscribe($$self, ${name.slice(1)}, $$value => { ${name} = $$value; $$invalidate('${name}', ${name}); });
+		`);
+	    const resubscribable_reactive_store_unsubscribers = reactive_stores
+	        .filter(store => {
+	        const variable = component.var_lookup.get(store.name.slice(1));
+	        return variable && variable.reassigned;
+	    })
+	        .map(({ name }) => `$$self.$$.on_destroy.push(() => $$unsubscribe_${name.slice(1)}());`);
+	    if (has_definition) {
+	        const reactive_declarations = [];
+	        const fixed_reactive_declarations = []; // not really 'reactive' but whatever
+	        component.reactive_declarations
+	            .forEach(d => {
+	            let uses_props;
+	            const condition = Array.from(d.dependencies)
+	                .filter(n => {
+	                if (n === '$$props') {
+	                    uses_props = true;
+	                    return false;
+	                }
+	                const variable = component.var_lookup.get(n);
+	                return variable && (variable.writable || variable.mutated);
+	            })
+	                .map(n => `$$dirty.${n}`).join(' || ');
+	            let snippet = `[✂${d.node.body.start}-${d.node.end}✂]`;
+	            if (condition)
+	                snippet = `if (${condition}) { ${snippet} }`;
+	            if (condition || uses_props) {
+	                reactive_declarations.push(snippet);
+	            }
+	            else {
+	                fixed_reactive_declarations.push(snippet);
+	            }
+	        });
+	        const injected = Array.from(component.injected_reactive_declaration_vars).filter(name => {
+	            const variable = component.var_lookup.get(name);
+	            return variable.injected && variable.name[0] !== '$';
+	        });
+	        const reactive_store_declarations = reactive_stores.map(variable => {
+	            const $name = variable.name;
+	            const name = $name.slice(1);
+	            const store = component.var_lookup.get(name);
+	            if (store && store.reassigned) {
+	                return `${$name}, $$unsubscribe_${name} = @noop, $$subscribe_${name} = () => { $$unsubscribe_${name}(); $$unsubscribe_${name} = ${name}.subscribe($$value => { ${$name} = $$value; $$invalidate('${$name}', ${$name}); }) }`;
+	            }
+	            return $name;
+	        });
+	        let unknown_props_check;
+	        if (component.compile_options.dev && !component.var_lookup.has('$$props') && writable_props.length) {
+	            unknown_props_check = deindent `
+				const writable_props = [${writable_props.map(prop => `'${prop.export_name}'`).join(', ')}];
+				Object.keys($$props).forEach(key => {
+					if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(\`<${component.tag}> was created with unknown prop '\${key}'\`);
+				});
+			`;
+	        }
+	        builder.add_block(deindent `
+			function ${definition}(${args.join(', ')}) {
+				${reactive_store_declarations.length > 0 && `let ${reactive_store_declarations.join(', ')};`}
+
+				${reactive_store_subscriptions}
+
+				${resubscribable_reactive_store_unsubscribers}
+
+				${component.javascript}
+
+				${unknown_props_check}
+
+				${component.slots.size && `let { $$slots = {}, $$scope } = $$props;`}
+
+				${renderer.binding_groups.length > 0 && `const $$binding_groups = [${renderer.binding_groups.map(_ => `[]`).join(', ')}];`}
+
+				${component.partly_hoisted.length > 0 && component.partly_hoisted.join('\n\n')}
+
+				${set && `$$self.$set = ${set};`}
+
+				${injected.length && `let ${injected.join(', ')};`}
+
+				${reactive_declarations.length > 0 && deindent `
+				$$self.$$.update = ($$dirty = { ${Array.from(all_reactive_dependencies).map(n => `${n}: 1`).join(', ')} }) => {
+					${reactive_declarations}
+				};
+				`}
+
+				${fixed_reactive_declarations}
+
+				return ${stringify_props(filtered_declarations)};
+			}
+		`);
+	    }
+	    const prop_names = `[${props.map(v => JSON.stringify(v.export_name)).join(', ')}]`;
+	    if (options.customElement) {
+	        builder.add_block(deindent `
+			class ${name} extends @SvelteElement {
+				constructor(options) {
+					super();
+
+					${css.code && `this.shadowRoot.innerHTML = \`<style>${escape$1(css.code, { only_escape_at_symbol: true }).replace(/\\/g, '\\\\')}${options.dev ? `\n/*# sourceMappingURL=${css.map.toUrl()} */` : ''}</style>\`;`}
+
+					@init(this, { target: this.shadowRoot }, ${definition}, create_fragment, ${not_equal}, ${prop_names});
+
+					${dev_props_check}
+
+					if (options) {
+						if (options.target) {
+							@insert(options.target, this, options.anchor);
+						}
+
+						${(props.length > 0 || uses_props) && deindent `
+						if (options.props) {
+							this.$set(options.props);
+							@flush();
+						}`}
+					}
+				}
+
+				${props.length > 0 && deindent `
+				static get observedAttributes() {
+					return ${JSON.stringify(props.map(x => x.export_name))};
+				}`}
+
+				${body.length > 0 && body.join('\n\n')}
+			}
+		`);
+	        if (component.tag != null) {
+	            builder.add_block(deindent `
+				customElements.define("${component.tag}", ${name});
+			`);
+	        }
+	    }
+	    else {
+	        const superclass = options.dev ? 'SvelteComponentDev' : 'SvelteComponent';
+	        builder.add_block(deindent `
+			class ${name} extends @${superclass} {
+				constructor(options) {
+					super(${options.dev && `options`});
+					${should_add_css && `if (!document.getElementById("${component.stylesheet.id}-style")) @add_css();`}
+					@init(this, options, ${definition}, create_fragment, ${not_equal}, ${prop_names});
+
+					${dev_props_check}
+				}
+
+				${body.length > 0 && body.join('\n\n')}
+			}
+		`);
+	    }
+	    return builder.toString();
+	}
+
+	function AwaitBlock (node, renderer, options) {
+	    renderer.append('${(function(__value) { if(@is_promise(__value)) return `');
+	    renderer.render(node.pending.children, options);
+	    renderer.append('`; return function(' + (node.value || '') + ') { return `');
+	    renderer.render(node.then.children, options);
+	    const snippet = snip(node.expression);
+	    renderer.append(`\`;}(__value);}(${snippet})) }`);
+	}
+
+	function Comment$1 (node, renderer, options) {
+	    if (options.preserveComments) {
+	        renderer.append(`<!--${node.data}-->`);
+	    }
+	}
+
+	function DebugTag (node, renderer, options) {
+	    if (!options.dev)
+	        return;
+	    const filename = options.filename || null;
+	    const { line, column } = options.locate(node.start + 1);
+	    const obj = node.expressions.length === 0
+	        ? `{}`
+	        : `{ ${node.expressions
+            .map(e => e.node.name)
+            .join(', ')} }`;
+	    const str = '${@debug(' + `${filename && stringify(filename)}, ${line}, ${column}, ${obj})}`;
+	    renderer.append(str);
+	}
+
+	function EachBlock (node, renderer, options) {
+	    const snippet = snip(node.expression);
+	    const { start, end } = node.context_node;
+	    const ctx = node.index
+	        ? `([✂${start}-${end}✂], ${node.index})`
+	        : `([✂${start}-${end}✂])`;
+	    const open = `\${${node.else ? `${snippet}.length ? ` : ''}@each(${snippet}, ${ctx} => \``;
+	    renderer.append(open);
+	    renderer.render(node.children, options);
+	    const close = `\`)`;
+	    renderer.append(close);
+	    if (node.else) {
+	        renderer.append(` : \``);
+	        renderer.render(node.else.children, options);
+	        renderer.append(`\``);
+	    }
+	    renderer.append('}');
+	}
+
+	function get_slot_scope(lets) {
+	    if (lets.length === 0)
+	        return '';
+	    return `{ ${lets.map(l => l.value ? `${l.name}: ${l.value}` : l.name).join(', ')} }`;
+	}
+
+	// source: https://gist.github.com/ArjanSchouten/0b8574a6ad7f5065a5e7
+	const boolean_attributes = new Set([
+	    'async',
+	    'autocomplete',
+	    'autofocus',
+	    'autoplay',
+	    'border',
+	    'challenge',
+	    'checked',
+	    'compact',
+	    'contenteditable',
+	    'controls',
+	    'default',
+	    'defer',
+	    'disabled',
+	    'formnovalidate',
+	    'frameborder',
+	    'hidden',
+	    'indeterminate',
+	    'ismap',
+	    'loop',
+	    'multiple',
+	    'muted',
+	    'nohref',
+	    'noresize',
+	    'noshade',
+	    'novalidate',
+	    'nowrap',
+	    'open',
+	    'readonly',
+	    'required',
+	    'reversed',
+	    'scoped',
+	    'scrolling',
+	    'seamless',
+	    'selected',
+	    'sortable',
+	    'spellcheck',
+	    'translate'
+	]);
+	function Element (node, renderer, options) {
+	    let opening_tag = `<${node.name}`;
+	    let textarea_contents; // awkward special case
+	    const slot = node.get_static_attribute_value('slot');
+	    const component = node.find_nearest(/InlineComponent/);
+	    if (slot && component) {
+	        const slot = node.attributes.find((attribute) => attribute.name === 'slot');
+	        const slot_name = slot.chunks[0].data;
+	        const target = renderer.targets[renderer.targets.length - 1];
+	        target.slot_stack.push(slot_name);
+	        target.slots[slot_name] = '';
+	        const lets = node.lets;
+	        const seen = new Set(lets.map(l => l.name));
+	        component.lets.forEach(l => {
+	            if (!seen.has(l.name))
+	                lets.push(l);
+	        });
+	        options.slot_scopes.set(slot_name, get_slot_scope(node.lets));
+	    }
+	    const class_expression = node.classes.map((class_directive) => {
+	        const { expression, name } = class_directive;
+	        const snippet = expression ? snip(expression) : `ctx${quote_prop_if_necessary(name)}`;
+	        return `${snippet} ? "${name}" : ""`;
+	    }).join(', ');
+	    let add_class_attribute = class_expression ? true : false;
+	    if (node.attributes.find(attr => attr.is_spread)) {
+	        // TODO dry this out
+	        const args = [];
+	        node.attributes.forEach(attribute => {
+	            if (attribute.is_spread) {
+	                args.push(snip(attribute.expression));
+	            }
+	            else {
+	                if (attribute.name === 'value' && node.name === 'textarea') {
+	                    textarea_contents = stringify_attribute(attribute, true);
+	                }
+	                else if (attribute.is_true) {
+	                    args.push(`{ ${quote_name_if_necessary(attribute.name)}: true }`);
+	                }
+	                else if (boolean_attributes.has(attribute.name) &&
+	                    attribute.chunks.length === 1 &&
+	                    attribute.chunks[0].type !== 'Text') {
+	                    // a boolean attribute with one non-Text chunk
+	                    args.push(`{ ${quote_name_if_necessary(attribute.name)}: ${snip(attribute.chunks[0])} }`);
+	                }
+	                else {
+	                    args.push(`{ ${quote_name_if_necessary(attribute.name)}: \`${stringify_attribute(attribute, true)}\` }`);
+	                }
+	            }
+	        });
+	        opening_tag += "${@spread([" + args.join(', ') + "])}";
+	    }
+	    else {
+	        node.attributes.forEach((attribute) => {
+	            if (attribute.type !== 'Attribute')
+	                return;
+	            if (attribute.name === 'value' && node.name === 'textarea') {
+	                textarea_contents = stringify_attribute(attribute, true);
+	            }
+	            else if (attribute.is_true) {
+	                opening_tag += ` ${attribute.name}`;
+	            }
+	            else if (boolean_attributes.has(attribute.name) &&
+	                attribute.chunks.length === 1 &&
+	                attribute.chunks[0].type !== 'Text') {
+	                // a boolean attribute with one non-Text chunk
+	                opening_tag += '${' + snip(attribute.chunks[0]) + ' ? " ' + attribute.name + '" : "" }';
+	            }
+	            else if (attribute.name === 'class' && class_expression) {
+	                add_class_attribute = false;
+	                opening_tag += ` class="\${[\`${stringify_attribute(attribute, true)}\`, ${class_expression}].join(' ').trim() }"`;
+	            }
+	            else if (attribute.chunks.length === 1 && attribute.chunks[0].type !== 'Text') {
+	                const { name } = attribute;
+	                const snippet = snip(attribute.chunks[0]);
+	                opening_tag += '${(v => v == null ? "" : ` ' + name + '="${@escape(' + snippet + ')}"`)(' + snippet + ')}';
+	            }
+	            else {
+	                opening_tag += ` ${attribute.name}="${stringify_attribute(attribute, true)}"`;
+	            }
+	        });
+	    }
+	    node.bindings.forEach(binding => {
+	        const { name, expression } = binding;
+	        if (binding.is_readonly) {
+	            return;
+	        }
+	        if (name === 'group') ;
+	        else {
+	            const snippet = snip(expression);
+	            opening_tag += ' ${(v => v ? ("' + name + '" + (v === true ? "" : "=" + JSON.stringify(v))) : "")(' + snippet + ')}';
+	        }
+	    });
+	    if (add_class_attribute) {
+	        opening_tag += `\${((v) => v ? ' class="' + v + '"' : '')([${class_expression}].join(' ').trim())}`;
+	    }
+	    opening_tag += '>';
+	    renderer.append(opening_tag);
+	    if (node.name === 'textarea' && textarea_contents !== undefined) {
+	        renderer.append(textarea_contents);
+	    }
+	    else {
+	        renderer.render(node.children, options);
+	    }
+	    if (!is_void(node.name)) {
+	        renderer.append(`</${node.name}>`);
+	    }
+	}
+
+	function Head (node, renderer, options) {
+	    renderer.append('${($$result.head += `');
+	    renderer.render(node.children, options);
+	    renderer.append('`, "")}');
+	}
+
+	function HtmlTag (node, renderer, options) {
+	    renderer.append('${' + snip(node.expression) + '}');
+	}
+
+	function IfBlock (node, renderer, options) {
+	    const snippet = snip(node.expression);
+	    renderer.append('${ ' + snippet + ' ? `');
+	    renderer.render(node.children, options);
+	    renderer.append('` : `');
+	    if (node.else) {
+	        renderer.render(node.else.children, options);
+	    }
+	    renderer.append('` }');
+	}
+
+	function stringify_attribute$1(chunk) {
+	    if (chunk.type === 'Text') {
+	        return escape_template(escape$1(chunk.data));
+	    }
+	    return '${@escape(' + snip(chunk) + ')}';
+	}
+	function get_attribute_value(attribute) {
+	    if (attribute.is_true)
+	        return `true`;
+	    if (attribute.chunks.length === 0)
+	        return `''`;
+	    if (attribute.chunks.length === 1) {
+	        const chunk = attribute.chunks[0];
+	        if (chunk.type === 'Text') {
+	            return stringify(chunk.data);
+	        }
+	        return snip(chunk);
+	    }
+	    return '`' + attribute.chunks.map(stringify_attribute$1).join('') + '`';
+	}
+	function InlineComponent (node, renderer, options) {
+	    const binding_props = [];
+	    const binding_fns = [];
+	    node.bindings.forEach(binding => {
+	        renderer.has_bindings = true;
+	        // TODO this probably won't work for contextual bindings
+	        const snippet = snip(binding.expression);
+	        binding_props.push(`${binding.name}: ${snippet}`);
+	        binding_fns.push(`${binding.name}: $$value => { ${snippet} = $$value; $$settled = false }`);
+	    });
+	    const uses_spread = node.attributes.find(attr => attr.is_spread);
+	    let props;
+	    if (uses_spread) {
+	        props = `Object.assign(${node.attributes
+            .map(attribute => {
+            if (attribute.is_spread) {
+                return snip(attribute.expression);
+            }
+            else {
+                return `{ ${attribute.name}: ${get_attribute_value(attribute)} }`;
+            }
+        })
+            .concat(binding_props.map(p => `{ ${p} }`))
+            .join(', ')})`;
+	    }
+	    else {
+	        props = stringify_props(node.attributes
+	            .map(attribute => `${attribute.name}: ${get_attribute_value(attribute)}`)
+	            .concat(binding_props));
+	    }
+	    const bindings = stringify_props(binding_fns);
+	    const expression = (node.name === 'svelte:self'
+	        ? '__svelte:self__' // TODO conflict-proof this
+	        : node.name === 'svelte:component'
+	            ? `((${snip(node.expression)}) || @missing_component)`
+	            : node.name);
+	    const slot_fns = [];
+	    if (node.children.length) {
+	        const target = {
+	            slots: { default: '' },
+	            slot_stack: ['default']
+	        };
+	        renderer.targets.push(target);
+	        const slot_scopes = new Map();
+	        slot_scopes.set('default', get_slot_scope(node.lets));
+	        renderer.render(node.children, Object.assign({}, options, {
+	            slot_scopes
+	        }));
+	        Object.keys(target.slots).forEach(name => {
+	            const slot_scope = slot_scopes.get(name);
+	            slot_fns.push(`${quote_name_if_necessary(name)}: (${slot_scope}) => \`${target.slots[name]}\``);
+	        });
+	        renderer.targets.pop();
+	    }
+	    const slots = stringify_props(slot_fns);
+	    renderer.append(`\${@validate_component(${expression}, '${node.name}').$$render($$result, ${props}, ${bindings}, ${slots})}`);
+	}
+
+	function Slot (node, renderer, options) {
+	    const prop = quote_prop_if_necessary(node.slot_name);
+	    const slot_data = get_slot_data(node.values, true);
+	    const arg = slot_data.length > 0 ? `{ ${slot_data.join(', ')} }` : '';
+	    renderer.append(`\${$$slots${prop} ? $$slots${prop}(${arg}) : \``);
+	    renderer.render(node.children, options);
+	    renderer.append(`\`}`);
+	}
+
+	function Tag$1 (node, renderer, options) {
+	    const snippet = snip(node.expression);
+	    renderer.append(node.parent &&
+	        node.parent.type === 'Element' &&
+	        node.parent.name === 'style'
+	        ? '${' + snippet + '}'
+	        : '${@escape(' + snippet + ')}');
+	}
+
+	function Text (node, renderer, options) {
+	    let text = node.data;
+	    if (!node.parent ||
+	        node.parent.type !== 'Element' ||
+	        (node.parent.name !== 'script' && node.parent.name !== 'style')) {
+	        // unless this Text node is inside a <script> or <style> element, escape &,<,>
+	        text = escape_html(text);
+	    }
+	    renderer.append(escape$1(escape_template(text)));
+	}
+
+	function Title (node, renderer, options) {
+	    renderer.append(`<title>`);
+	    renderer.render(node.children, options);
+	    renderer.append(`</title>`);
+	}
+
+	function noop$2() { }
+	const handlers = {
+	    AwaitBlock,
+	    Body: noop$2,
+	    Comment: Comment$1,
+	    DebugTag,
+	    EachBlock,
+	    Element,
+	    Head,
+	    IfBlock,
+	    InlineComponent,
+	    MustacheTag: Tag$1,
+	    Options: noop$2,
+	    RawMustacheTag: HtmlTag,
+	    Slot,
+	    Text,
+	    Title,
+	    Window: noop$2
+	};
+	class Renderer$1 {
+	    constructor() {
+	        this.has_bindings = false;
+	        this.code = '';
+	        this.targets = [];
+	    }
+	    append(code) {
+	        if (this.targets.length) {
+	            const target = this.targets[this.targets.length - 1];
+	            const slot_name = target.slot_stack[target.slot_stack.length - 1];
+	            target.slots[slot_name] += code;
+	        }
+	        else {
+	            this.code += code;
+	        }
+	    }
+	    render(nodes, options) {
+	        nodes.forEach(node => {
+	            const handler = handlers[node.type];
+	            if (!handler) {
+	                throw new Error(`No handler for '${node.type}' nodes`);
+	            }
+	            handler(node, this, options);
+	        });
+	    }
+	}
+
+	function ssr(component, options) {
+	    const renderer = new Renderer$1();
+	    const { name } = component;
+	    // create $$render function
+	    renderer.render(trim(component.fragment.children), Object.assign({
+	        locate: component.locate
+	    }, options));
+	    // TODO concatenate CSS maps
+	    const css = options.customElement ?
+	        { code: null, map: null } :
+	        component.stylesheet.render(options.filename, true);
+	    const reactive_stores = component.vars.filter(variable => variable.name[0] === '$' && variable.name[1] !== '$');
+	    const reactive_store_values = reactive_stores
+	        .map(({ name }) => {
+	        const store_name = name.slice(1);
+	        const store = component.var_lookup.get(store_name);
+	        if (store && store.hoistable)
+	            return;
+	        const assignment = `${name} = @get_store_value(${store_name});`;
+	        return component.compile_options.dev
+	            ? `@validate_store(${store_name}, '${store_name}'); ${assignment}`
+	            : assignment;
+	    });
+	    // TODO remove this, just use component.vars everywhere
+	    const props = component.vars.filter(variable => !variable.module && variable.export_name);
+	    if (component.javascript) {
+	        component.rewrite_props(({ name }) => {
+	            const value = `$${name}`;
+	            const get_store_value = component.helper('get_store_value');
+	            let insert = `${value} = ${get_store_value}(${name})`;
+	            if (component.compile_options.dev) {
+	                const validate_store = component.helper('validate_store');
+	                insert = `${validate_store}(${name}, '${name}'); ${insert}`;
+	            }
+	            return insert;
+	        });
+	    }
+	    // TODO only do this for props with a default value
+	    const parent_bindings = component.javascript
+	        ? props.map(prop => {
+	            return `if ($$props.${prop.export_name} === void 0 && $$bindings.${prop.export_name} && ${prop.name} !== void 0) $$bindings.${prop.export_name}(${prop.name});`;
+	        })
+	        : [];
+	    const reactive_declarations = component.reactive_declarations.map(d => {
+	        let snippet = `[✂${d.node.body.start}-${d.node.end}✂]`;
+	        if (d.declaration) {
+	            const declared = extract_names(d.declaration);
+	            const injected = declared.filter(name => {
+	                return name[0] !== '$' && component.var_lookup.get(name).injected;
+	            });
+	            const self_dependencies = injected.filter(name => d.dependencies.has(name));
+	            if (injected.length) {
+	                // in some cases we need to do `let foo; [expression]`, in
+	                // others we can do `let [expression]`
+	                const separate = (self_dependencies.length > 0 ||
+	                    declared.length > injected.length ||
+	                    d.node.body.expression.type === 'ParenthesizedExpression');
+	                snippet = separate
+	                    ? `let ${injected.join(', ')}; ${snippet}`
+	                    : `let ${snippet}`;
+	            }
+	        }
+	        return snippet;
+	    });
+	    const main = renderer.has_bindings
+	        ? deindent `
+			let $$settled;
+			let $$rendered;
+
+			do {
+				$$settled = true;
+
+				${reactive_store_values}
+
+				${reactive_declarations}
+
+				$$rendered = \`${renderer.code}\`;
+			} while (!$$settled);
+
+			return $$rendered;
+		`
+	        : deindent `
+			${reactive_store_values}
+
+			${reactive_declarations}
+
+			return \`${renderer.code}\`;`;
+	    const blocks = [
+	        reactive_stores.length > 0 && `let ${reactive_stores
+            .map(({ name }) => {
+            const store_name = name.slice(1);
+            const store = component.var_lookup.get(store_name);
+            if (store && store.hoistable) {
+                const get_store_value = component.helper('get_store_value');
+                return `${name} = ${get_store_value}(${store_name})`;
+            }
+            return name;
+        })
+            .join(', ')};`,
+	        component.javascript,
+	        parent_bindings.join('\n'),
+	        css.code && `$$result.css.add(#css);`,
+	        main
+	    ].filter(Boolean);
+	    return (deindent `
+		${css.code && deindent `
+		const #css = {
+			code: ${css.code ? stringify(css.code) : `''`},
+			map: ${css.map ? stringify(css.map.toString()) : 'null'}
+		};`}
+
+		${component.module_javascript}
+
+		${component.fully_hoisted.length > 0 && component.fully_hoisted.join('\n\n')}
+
+		const ${name} = @create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
+			${blocks.join('\n\n')}
+		});
+	`).trim();
+	}
+	function trim(nodes) {
+	    let start = 0;
+	    for (; start < nodes.length; start += 1) {
+	        const node = nodes[start];
+	        if (node.type !== 'Text')
+	            break;
+	        node.data = node.data.replace(/^\s+/, '');
+	        if (node.data)
+	            break;
+	    }
+	    let end = nodes.length;
+	    for (; end > start; end -= 1) {
+	        const node = nodes[end - 1];
+	        if (node.type !== 'Text')
+	            break;
+	        node.data = node.data.replace(/\s+$/, '');
+	        if (node.data)
+	            break;
+	    }
+	    return nodes.slice(start, end);
+	}
+
+	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
+	function encode(decoded) {
+	    var sourceFileIndex = 0; // second field
+	    var sourceCodeLine = 0; // third field
+	    var sourceCodeColumn = 0; // fourth field
+	    var nameIndex = 0; // fifth field
+	    var mappings = '';
+	    for (var i = 0; i < decoded.length; i++) {
+	        var line = decoded[i];
+	        if (i > 0)
+	            mappings += ';';
+	        if (line.length === 0)
+	            continue;
+	        var generatedCodeColumn = 0; // first field
+	        var lineMappings = [];
+	        for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {
+	            var segment = line_1[_i];
+	            var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);
+	            generatedCodeColumn = segment[0];
+	            if (segment.length > 1) {
+	                segmentMappings +=
+	                    encodeInteger(segment[1] - sourceFileIndex) +
+	                        encodeInteger(segment[2] - sourceCodeLine) +
+	                        encodeInteger(segment[3] - sourceCodeColumn);
+	                sourceFileIndex = segment[1];
+	                sourceCodeLine = segment[2];
+	                sourceCodeColumn = segment[3];
+	            }
+	            if (segment.length === 5) {
+	                segmentMappings += encodeInteger(segment[4] - nameIndex);
+	                nameIndex = segment[4];
+	            }
+	            lineMappings.push(segmentMappings);
+	        }
+	        mappings += lineMappings.join(',');
+	    }
+	    return mappings;
+	}
+	function encodeInteger(num) {
+	    var result = '';
+	    num = num < 0 ? (-num << 1) | 1 : num << 1;
+	    do {
+	        var clamped = num & 31;
+	        num >>= 5;
+	        if (num > 0) {
+	            clamped |= 32;
+	        }
+	        result += chars[clamped];
+	    } while (num > 0);
+	    return result;
+	}
+
+	var Chunk = function Chunk(start, end, content) {
+		this.start = start;
+		this.end = end;
+		this.original = content;
+
+		this.intro = '';
+		this.outro = '';
+
+		this.content = content;
+		this.storeName = false;
+		this.edited = false;
+
+		// we make these non-enumerable, for sanity while debugging
+		Object.defineProperties(this, {
+			previous: { writable: true, value: null },
+			next:     { writable: true, value: null }
+		});
+	};
+
+	Chunk.prototype.appendLeft = function appendLeft (content) {
+		this.outro += content;
+	};
+
+	Chunk.prototype.appendRight = function appendRight (content) {
+		this.intro = this.intro + content;
+	};
+
+	Chunk.prototype.clone = function clone () {
+		var chunk = new Chunk(this.start, this.end, this.original);
+
+		chunk.intro = this.intro;
+		chunk.outro = this.outro;
+		chunk.content = this.content;
+		chunk.storeName = this.storeName;
+		chunk.edited = this.edited;
+
+		return chunk;
+	};
+
+	Chunk.prototype.contains = function contains (index) {
+		return this.start < index && index < this.end;
+	};
+
+	Chunk.prototype.eachNext = function eachNext (fn) {
+		var chunk = this;
+		while (chunk) {
+			fn(chunk);
+			chunk = chunk.next;
+		}
+	};
+
+	Chunk.prototype.eachPrevious = function eachPrevious (fn) {
+		var chunk = this;
+		while (chunk) {
+			fn(chunk);
+			chunk = chunk.previous;
+		}
+	};
+
+	Chunk.prototype.edit = function edit (content, storeName, contentOnly) {
+		this.content = content;
+		if (!contentOnly) {
+			this.intro = '';
+			this.outro = '';
+		}
+		this.storeName = storeName;
+
+		this.edited = true;
+
+		return this;
+	};
+
+	Chunk.prototype.prependLeft = function prependLeft (content) {
+		this.outro = content + this.outro;
+	};
+
+	Chunk.prototype.prependRight = function prependRight (content) {
+		this.intro = content + this.intro;
+	};
+
+	Chunk.prototype.split = function split (index) {
+		var sliceIndex = index - this.start;
+
+		var originalBefore = this.original.slice(0, sliceIndex);
+		var originalAfter = this.original.slice(sliceIndex);
+
+		this.original = originalBefore;
+
+		var newChunk = new Chunk(index, this.end, originalAfter);
+		newChunk.outro = this.outro;
+		this.outro = '';
+
+		this.end = index;
+
+		if (this.edited) {
+			// TODO is this block necessary?...
+			newChunk.edit('', false);
+			this.content = '';
+		} else {
+			this.content = originalBefore;
+		}
+
+		newChunk.next = this.next;
+		if (newChunk.next) { newChunk.next.previous = newChunk; }
+		newChunk.previous = this;
+		this.next = newChunk;
+
+		return newChunk;
+	};
+
+	Chunk.prototype.toString = function toString () {
+		return this.intro + this.content + this.outro;
+	};
+
+	Chunk.prototype.trimEnd = function trimEnd (rx) {
+		this.outro = this.outro.replace(rx, '');
+		if (this.outro.length) { return true; }
+
+		var trimmed = this.content.replace(rx, '');
+
+		if (trimmed.length) {
+			if (trimmed !== this.content) {
+				this.split(this.start + trimmed.length).edit('', undefined, true);
+			}
+			return true;
+
+		} else {
+			this.edit('', undefined, true);
+
+			this.intro = this.intro.replace(rx, '');
+			if (this.intro.length) { return true; }
+		}
+	};
+
+	Chunk.prototype.trimStart = function trimStart (rx) {
+		this.intro = this.intro.replace(rx, '');
+		if (this.intro.length) { return true; }
+
+		var trimmed = this.content.replace(rx, '');
+
+		if (trimmed.length) {
+			if (trimmed !== this.content) {
+				this.split(this.end - trimmed.length);
+				this.edit('', undefined, true);
+			}
+			return true;
+
+		} else {
+			this.edit('', undefined, true);
+
+			this.outro = this.outro.replace(rx, '');
+			if (this.outro.length) { return true; }
+		}
+	};
+
+	var btoa = function () {
+		throw new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');
+	};
+	if (typeof window !== 'undefined' && typeof window.btoa === 'function') {
+		btoa = function (str) { return window.btoa(unescape(encodeURIComponent(str))); };
+	} else if (typeof Buffer === 'function') {
+		btoa = function (str) { return Buffer.from(str, 'utf-8').toString('base64'); };
+	}
+
+	var SourceMap = function SourceMap(properties) {
+		this.version = 3;
+		this.file = properties.file;
+		this.sources = properties.sources;
+		this.sourcesContent = properties.sourcesContent;
+		this.names = properties.names;
+		this.mappings = encode(properties.mappings);
+	};
+
+	SourceMap.prototype.toString = function toString () {
+		return JSON.stringify(this);
+	};
+
+	SourceMap.prototype.toUrl = function toUrl () {
+		return 'data:application/json;charset=utf-8;base64,' + btoa(this.toString());
+	};
+
+	function guessIndent(code) {
+		var lines = code.split('\n');
+
+		var tabbed = lines.filter(function (line) { return /^\t+/.test(line); });
+		var spaced = lines.filter(function (line) { return /^ {2,}/.test(line); });
+
+		if (tabbed.length === 0 && spaced.length === 0) {
+			return null;
+		}
+
+		// More lines tabbed than spaced? Assume tabs, and
+		// default to tabs in the case of a tie (or nothing
+		// to go on)
+		if (tabbed.length >= spaced.length) {
+			return '\t';
+		}
+
+		// Otherwise, we need to guess the multiple
+		var min = spaced.reduce(function (previous, current) {
+			var numSpaces = /^ +/.exec(current)[0].length;
+			return Math.min(numSpaces, previous);
+		}, Infinity);
+
+		return new Array(min + 1).join(' ');
+	}
+
+	function getRelativePath(from, to) {
+		var fromParts = from.split(/[/\\]/);
+		var toParts = to.split(/[/\\]/);
+
+		fromParts.pop(); // get dirname
+
+		while (fromParts[0] === toParts[0]) {
+			fromParts.shift();
+			toParts.shift();
+		}
+
+		if (fromParts.length) {
+			var i = fromParts.length;
+			while (i--) { fromParts[i] = '..'; }
+		}
+
+		return fromParts.concat(toParts).join('/');
+	}
+
+	var toString$2 = Object.prototype.toString;
+
+	function isObject(thing) {
+		return toString$2.call(thing) === '[object Object]';
+	}
+
+	function getLocator$1(source) {
+		var originalLines = source.split('\n');
+		var lineOffsets = [];
+
+		for (var i = 0, pos = 0; i < originalLines.length; i++) {
+			lineOffsets.push(pos);
+			pos += originalLines[i].length + 1;
+		}
+
+		return function locate(index) {
+			var i = 0;
+			var j = lineOffsets.length;
+			while (i < j) {
+				var m = (i + j) >> 1;
+				if (index < lineOffsets[m]) {
+					j = m;
+				} else {
+					i = m + 1;
+				}
+			}
+			var line = i - 1;
+			var column = index - lineOffsets[line];
+			return { line: line, column: column };
+		};
+	}
+
+	var Mappings = function Mappings(hires) {
+		this.hires = hires;
+		this.generatedCodeLine = 0;
+		this.generatedCodeColumn = 0;
+		this.raw = [];
+		this.rawSegments = this.raw[this.generatedCodeLine] = [];
+		this.pending = null;
+	};
+
+	Mappings.prototype.addEdit = function addEdit (sourceIndex, content, loc, nameIndex) {
+		if (content.length) {
+			var segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];
+			if (nameIndex >= 0) {
+				segment.push(nameIndex);
+			}
+			this.rawSegments.push(segment);
+		} else if (this.pending) {
+			this.rawSegments.push(this.pending);
+		}
+
+		this.advance(content);
+		this.pending = null;
+	};
+
+	Mappings.prototype.addUneditedChunk = function addUneditedChunk (sourceIndex, chunk, original, loc, sourcemapLocations) {
+		var originalCharIndex = chunk.start;
+		var first = true;
+
+		while (originalCharIndex < chunk.end) {
+			if (this.hires || first || sourcemapLocations[originalCharIndex]) {
+				this.rawSegments.push([this.generatedCodeColumn, sourceIndex, loc.line, loc.column]);
+			}
+
+			if (original[originalCharIndex] === '\n') {
+				loc.line += 1;
+				loc.column = 0;
+				this.generatedCodeLine += 1;
+				this.raw[this.generatedCodeLine] = this.rawSegments = [];
+				this.generatedCodeColumn = 0;
+			} else {
+				loc.column += 1;
+				this.generatedCodeColumn += 1;
+			}
+
+			originalCharIndex += 1;
+			first = false;
+		}
+
+		this.pending = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];
+	};
+
+	Mappings.prototype.advance = function advance (str) {
+		if (!str) { return; }
+
+		var lines = str.split('\n');
+
+		if (lines.length > 1) {
+			for (var i = 0; i < lines.length - 1; i++) {
+				this.generatedCodeLine++;
+				this.raw[this.generatedCodeLine] = this.rawSegments = [];
+			}
+			this.generatedCodeColumn = 0;
+		}
+
+		this.generatedCodeColumn += lines[lines.length - 1].length;
+	};
+
+	var n = '\n';
+
+	var warned = {
+		insertLeft: false,
+		insertRight: false,
+		storeName: false
+	};
+
+	var MagicString = function MagicString(string, options) {
+		if ( options === void 0 ) options = {};
+
+		var chunk = new Chunk(0, string.length, string);
+
+		Object.defineProperties(this, {
+			original:              { writable: true, value: string },
+			outro:                 { writable: true, value: '' },
+			intro:                 { writable: true, value: '' },
+			firstChunk:            { writable: true, value: chunk },
+			lastChunk:             { writable: true, value: chunk },
+			lastSearchedChunk:     { writable: true, value: chunk },
+			byStart:               { writable: true, value: {} },
+			byEnd:                 { writable: true, value: {} },
+			filename:              { writable: true, value: options.filename },
+			indentExclusionRanges: { writable: true, value: options.indentExclusionRanges },
+			sourcemapLocations:    { writable: true, value: {} },
+			storedNames:           { writable: true, value: {} },
+			indentStr:             { writable: true, value: guessIndent(string) }
+		});
+
+		this.byStart[0] = chunk;
+		this.byEnd[string.length] = chunk;
+	};
+
+	MagicString.prototype.addSourcemapLocation = function addSourcemapLocation (char) {
+		this.sourcemapLocations[char] = true;
+	};
+
+	MagicString.prototype.append = function append (content) {
+		if (typeof content !== 'string') { throw new TypeError('outro content must be a string'); }
+
+		this.outro += content;
+		return this;
+	};
+
+	MagicString.prototype.appendLeft = function appendLeft (index, content) {
+		if (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }
+
+		this._split(index);
+
+		var chunk = this.byEnd[index];
+
+		if (chunk) {
+			chunk.appendLeft(content);
+		} else {
+			this.intro += content;
+		}
+		return this;
+	};
+
+	MagicString.prototype.appendRight = function appendRight (index, content) {
+		if (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }
+
+		this._split(index);
+
+		var chunk = this.byStart[index];
+
+		if (chunk) {
+			chunk.appendRight(content);
+		} else {
+			this.outro += content;
+		}
+		return this;
+	};
+
+	MagicString.prototype.clone = function clone () {
+		var cloned = new MagicString(this.original, { filename: this.filename });
+
+		var originalChunk = this.firstChunk;
+		var clonedChunk = (cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone());
+
+		while (originalChunk) {
+			cloned.byStart[clonedChunk.start] = clonedChunk;
+			cloned.byEnd[clonedChunk.end] = clonedChunk;
+
+			var nextOriginalChunk = originalChunk.next;
+			var nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();
+
+			if (nextClonedChunk) {
+				clonedChunk.next = nextClonedChunk;
+				nextClonedChunk.previous = clonedChunk;
+
+				clonedChunk = nextClonedChunk;
+			}
+
+			originalChunk = nextOriginalChunk;
+		}
+
+		cloned.lastChunk = clonedChunk;
+
+		if (this.indentExclusionRanges) {
+			cloned.indentExclusionRanges = this.indentExclusionRanges.slice();
+		}
+
+		Object.keys(this.sourcemapLocations).forEach(function (loc) {
+			cloned.sourcemapLocations[loc] = true;
+		});
+
+		return cloned;
+	};
+
+	MagicString.prototype.generateDecodedMap = function generateDecodedMap (options) {
+			var this$1 = this;
+
+		options = options || {};
+
+		var sourceIndex = 0;
+		var names = Object.keys(this.storedNames);
+		var mappings = new Mappings(options.hires);
+
+		var locate = getLocator$1(this.original);
+
+		if (this.intro) {
+			mappings.advance(this.intro);
+		}
+
+		this.firstChunk.eachNext(function (chunk) {
+			var loc = locate(chunk.start);
+
+			if (chunk.intro.length) { mappings.advance(chunk.intro); }
+
+			if (chunk.edited) {
+				mappings.addEdit(
+					sourceIndex,
+					chunk.content,
+					loc,
+					chunk.storeName ? names.indexOf(chunk.original) : -1
+				);
+			} else {
+				mappings.addUneditedChunk(sourceIndex, chunk, this$1.original, loc, this$1.sourcemapLocations);
+			}
+
+			if (chunk.outro.length) { mappings.advance(chunk.outro); }
+		});
+
+		return {
+			file: options.file ? options.file.split(/[/\\]/).pop() : null,
+			sources: [options.source ? getRelativePath(options.file || '', options.source) : null],
+			sourcesContent: options.includeContent ? [this.original] : [null],
+			names: names,
+			mappings: mappings.raw
+		};
+	};
+
+	MagicString.prototype.generateMap = function generateMap (options) {
+		return new SourceMap(this.generateDecodedMap(options));
+	};
+
+	MagicString.prototype.getIndentString = function getIndentString () {
+		return this.indentStr === null ? '\t' : this.indentStr;
+	};
+
+	MagicString.prototype.indent = function indent (indentStr, options) {
+		var pattern = /^[^\r\n]/gm;
+
+		if (isObject(indentStr)) {
+			options = indentStr;
+			indentStr = undefined;
+		}
+
+		indentStr = indentStr !== undefined ? indentStr : this.indentStr || '\t';
+
+		if (indentStr === '') { return this; } // noop
+
+		options = options || {};
+
+		// Process exclusion ranges
+		var isExcluded = {};
+
+		if (options.exclude) {
+			var exclusions =
+				typeof options.exclude[0] === 'number' ? [options.exclude] : options.exclude;
+			exclusions.forEach(function (exclusion) {
+				for (var i = exclusion[0]; i < exclusion[1]; i += 1) {
+					isExcluded[i] = true;
+				}
+			});
+		}
+
+		var shouldIndentNextCharacter = options.indentStart !== false;
+		var replacer = function (match) {
+			if (shouldIndentNextCharacter) { return ("" + indentStr + match); }
+			shouldIndentNextCharacter = true;
+			return match;
+		};
+
+		this.intro = this.intro.replace(pattern, replacer);
+
+		var charIndex = 0;
+		var chunk = this.firstChunk;
+
+		while (chunk) {
+			var end = chunk.end;
+
+			if (chunk.edited) {
+				if (!isExcluded[charIndex]) {
+					chunk.content = chunk.content.replace(pattern, replacer);
+
+					if (chunk.content.length) {
+						shouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === '\n';
+					}
+				}
+			} else {
+				charIndex = chunk.start;
+
+				while (charIndex < end) {
+					if (!isExcluded[charIndex]) {
+						var char = this.original[charIndex];
+
+						if (char === '\n') {
+							shouldIndentNextCharacter = true;
+						} else if (char !== '\r' && shouldIndentNextCharacter) {
+							shouldIndentNextCharacter = false;
+
+							if (charIndex === chunk.start) {
+								chunk.prependRight(indentStr);
+							} else {
+								this._splitChunk(chunk, charIndex);
+								chunk = chunk.next;
+								chunk.prependRight(indentStr);
+							}
+						}
+					}
+
+					charIndex += 1;
+				}
+			}
+
+			charIndex = chunk.end;
+			chunk = chunk.next;
+		}
+
+		this.outro = this.outro.replace(pattern, replacer);
+
+		return this;
+	};
+
+	MagicString.prototype.insert = function insert () {
+		throw new Error('magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)');
+	};
+
+	MagicString.prototype.insertLeft = function insertLeft (index, content) {
+		if (!warned.insertLeft) {
+			console.warn('magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead'); // eslint-disable-line no-console
+			warned.insertLeft = true;
+		}
+
+		return this.appendLeft(index, content);
+	};
+
+	MagicString.prototype.insertRight = function insertRight (index, content) {
+		if (!warned.insertRight) {
+			console.warn('magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead'); // eslint-disable-line no-console
+			warned.insertRight = true;
+		}
+
+		return this.prependRight(index, content);
+	};
+
+	MagicString.prototype.move = function move (start, end, index) {
+		if (index >= start && index <= end) { throw new Error('Cannot move a selection inside itself'); }
+
+		this._split(start);
+		this._split(end);
+		this._split(index);
+
+		var first = this.byStart[start];
+		var last = this.byEnd[end];
+
+		var oldLeft = first.previous;
+		var oldRight = last.next;
+
+		var newRight = this.byStart[index];
+		if (!newRight && last === this.lastChunk) { return this; }
+		var newLeft = newRight ? newRight.previous : this.lastChunk;
+
+		if (oldLeft) { oldLeft.next = oldRight; }
+		if (oldRight) { oldRight.previous = oldLeft; }
+
+		if (newLeft) { newLeft.next = first; }
+		if (newRight) { newRight.previous = last; }
+
+		if (!first.previous) { this.firstChunk = last.next; }
+		if (!last.next) {
+			this.lastChunk = first.previous;
+			this.lastChunk.next = null;
+		}
+
+		first.previous = newLeft;
+		last.next = newRight || null;
+
+		if (!newLeft) { this.firstChunk = first; }
+		if (!newRight) { this.lastChunk = last; }
+		return this;
+	};
+
+	MagicString.prototype.overwrite = function overwrite (start, end, content, options) {
+		if (typeof content !== 'string') { throw new TypeError('replacement content must be a string'); }
+
+		while (start < 0) { start += this.original.length; }
+		while (end < 0) { end += this.original.length; }
+
+		if (end > this.original.length) { throw new Error('end is out of bounds'); }
+		if (start === end)
+			{ throw new Error('Cannot overwrite a zero-length range – use appendLeft or prependRight instead'); }
+
+		this._split(start);
+		this._split(end);
+
+		if (options === true) {
+			if (!warned.storeName) {
+				console.warn('The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string'); // eslint-disable-line no-console
+				warned.storeName = true;
+			}
+
+			options = { storeName: true };
+		}
+		var storeName = options !== undefined ? options.storeName : false;
+		var contentOnly = options !== undefined ? options.contentOnly : false;
+
+		if (storeName) {
+			var original = this.original.slice(start, end);
+			this.storedNames[original] = true;
+		}
+
+		var first = this.byStart[start];
+		var last = this.byEnd[end];
+
+		if (first) {
+			if (end > first.end && first.next !== this.byStart[first.end]) {
+				throw new Error('Cannot overwrite across a split point');
+			}
+
+			first.edit(content, storeName, contentOnly);
+
+			if (first !== last) {
+				var chunk = first.next;
+				while (chunk !== last) {
+					chunk.edit('', false);
+					chunk = chunk.next;
+				}
+
+				chunk.edit('', false);
+			}
+		} else {
+			// must be inserting at the end
+			var newChunk = new Chunk(start, end, '').edit(content, storeName);
+
+			// TODO last chunk in the array may not be the last chunk, if it's moved...
+			last.next = newChunk;
+			newChunk.previous = last;
+		}
+		return this;
+	};
+
+	MagicString.prototype.prepend = function prepend (content) {
+		if (typeof content !== 'string') { throw new TypeError('outro content must be a string'); }
+
+		this.intro = content + this.intro;
+		return this;
+	};
+
+	MagicString.prototype.prependLeft = function prependLeft (index, content) {
+		if (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }
+
+		this._split(index);
+
+		var chunk = this.byEnd[index];
+
+		if (chunk) {
+			chunk.prependLeft(content);
+		} else {
+			this.intro = content + this.intro;
+		}
+		return this;
+	};
+
+	MagicString.prototype.prependRight = function prependRight (index, content) {
+		if (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }
+
+		this._split(index);
+
+		var chunk = this.byStart[index];
+
+		if (chunk) {
+			chunk.prependRight(content);
+		} else {
+			this.outro = content + this.outro;
+		}
+		return this;
+	};
+
+	MagicString.prototype.remove = function remove (start, end) {
+		while (start < 0) { start += this.original.length; }
+		while (end < 0) { end += this.original.length; }
+
+		if (start === end) { return this; }
+
+		if (start < 0 || end > this.original.length) { throw new Error('Character is out of bounds'); }
+		if (start > end) { throw new Error('end must be greater than start'); }
+
+		this._split(start);
+		this._split(end);
+
+		var chunk = this.byStart[start];
+
+		while (chunk) {
+			chunk.intro = '';
+			chunk.outro = '';
+			chunk.edit('');
+
+			chunk = end > chunk.end ? this.byStart[chunk.end] : null;
+		}
+		return this;
+	};
+
+	MagicString.prototype.lastChar = function lastChar () {
+		if (this.outro.length)
+			{ return this.outro[this.outro.length - 1]; }
+		var chunk = this.lastChunk;
+		do {
+			if (chunk.outro.length)
+				{ return chunk.outro[chunk.outro.length - 1]; }
+			if (chunk.content.length)
+				{ return chunk.content[chunk.content.length - 1]; }
+			if (chunk.intro.length)
+				{ return chunk.intro[chunk.intro.length - 1]; }
+		} while (chunk = chunk.previous);
+		if (this.intro.length)
+			{ return this.intro[this.intro.length - 1]; }
+		return '';
+	};
+
+	MagicString.prototype.lastLine = function lastLine () {
+		var lineIndex = this.outro.lastIndexOf(n);
+		if (lineIndex !== -1)
+			{ return this.outro.substr(lineIndex + 1); }
+		var lineStr = this.outro;
+		var chunk = this.lastChunk;
+		do {
+			if (chunk.outro.length > 0) {
+				lineIndex = chunk.outro.lastIndexOf(n);
+				if (lineIndex !== -1)
+					{ return chunk.outro.substr(lineIndex + 1) + lineStr; }
+				lineStr = chunk.outro + lineStr;
+			}
+
+			if (chunk.content.length > 0) {
+				lineIndex = chunk.content.lastIndexOf(n);
+				if (lineIndex !== -1)
+					{ return chunk.content.substr(lineIndex + 1) + lineStr; }
+				lineStr = chunk.content + lineStr;
+			}
+
+			if (chunk.intro.length > 0) {
+				lineIndex = chunk.intro.lastIndexOf(n);
+				if (lineIndex !== -1)
+					{ return chunk.intro.substr(lineIndex + 1) + lineStr; }
+				lineStr = chunk.intro + lineStr;
+			}
+		} while (chunk = chunk.previous);
+		lineIndex = this.intro.lastIndexOf(n);
+		if (lineIndex !== -1)
+			{ return this.intro.substr(lineIndex + 1) + lineStr; }
+		return this.intro + lineStr;
+	};
+
+	MagicString.prototype.slice = function slice (start, end) {
+			if ( start === void 0 ) start = 0;
+			if ( end === void 0 ) end = this.original.length;
+
+		while (start < 0) { start += this.original.length; }
+		while (end < 0) { end += this.original.length; }
+
+		var result = '';
+
+		// find start chunk
+		var chunk = this.firstChunk;
+		while (chunk && (chunk.start > start || chunk.end <= start)) {
+			// found end chunk before start
+			if (chunk.start < end && chunk.end >= end) {
+				return result;
+			}
+
+			chunk = chunk.next;
+		}
+
+		if (chunk && chunk.edited && chunk.start !== start)
+			{ throw new Error(("Cannot use replaced character " + start + " as slice start anchor.")); }
+
+		var startChunk = chunk;
+		while (chunk) {
+			if (chunk.intro && (startChunk !== chunk || chunk.start === start)) {
+				result += chunk.intro;
+			}
+
+			var containsEnd = chunk.start < end && chunk.end >= end;
+			if (containsEnd && chunk.edited && chunk.end !== end)
+				{ throw new Error(("Cannot use replaced character " + end + " as slice end anchor.")); }
+
+			var sliceStart = startChunk === chunk ? start - chunk.start : 0;
+			var sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;
+
+			result += chunk.content.slice(sliceStart, sliceEnd);
+
+			if (chunk.outro && (!containsEnd || chunk.end === end)) {
+				result += chunk.outro;
+			}
+
+			if (containsEnd) {
+				break;
+			}
+
+			chunk = chunk.next;
+		}
+
+		return result;
+	};
+
+	// TODO deprecate this? not really very useful
+	MagicString.prototype.snip = function snip (start, end) {
+		var clone = this.clone();
+		clone.remove(0, start);
+		clone.remove(end, clone.original.length);
+
+		return clone;
+	};
+
+	MagicString.prototype._split = function _split (index) {
+		if (this.byStart[index] || this.byEnd[index]) { return; }
+
+		var chunk = this.lastSearchedChunk;
+		var searchForward = index > chunk.end;
+
+		while (chunk) {
+			if (chunk.contains(index)) { return this._splitChunk(chunk, index); }
+
+			chunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];
+		}
+	};
+
+	MagicString.prototype._splitChunk = function _splitChunk (chunk, index) {
+		if (chunk.edited && chunk.content.length) {
+			// zero-length edited chunks are a special case (overlapping replacements)
+			var loc = getLocator$1(this.original)(index);
+			throw new Error(
+				("Cannot split a chunk that has already been edited (" + (loc.line) + ":" + (loc.column) + " – \"" + (chunk.original) + "\")")
+			);
+		}
+
+		var newChunk = chunk.split(index);
+
+		this.byEnd[index] = chunk;
+		this.byStart[index] = newChunk;
+		this.byEnd[newChunk.end] = newChunk;
+
+		if (chunk === this.lastChunk) { this.lastChunk = newChunk; }
+
+		this.lastSearchedChunk = chunk;
+		return true;
+	};
+
+	MagicString.prototype.toString = function toString () {
+		var str = this.intro;
+
+		var chunk = this.firstChunk;
+		while (chunk) {
+			str += chunk.toString();
+			chunk = chunk.next;
+		}
+
+		return str + this.outro;
+	};
+
+	MagicString.prototype.isEmpty = function isEmpty () {
+		var chunk = this.firstChunk;
+		do {
+			if (chunk.intro.length && chunk.intro.trim() ||
+					chunk.content.length && chunk.content.trim() ||
+					chunk.outro.length && chunk.outro.trim())
+				{ return false; }
+		} while (chunk = chunk.next);
+		return true;
+	};
+
+	MagicString.prototype.length = function length () {
+		var chunk = this.firstChunk;
+		var length = 0;
+		do {
+			length += chunk.intro.length + chunk.content.length + chunk.outro.length;
+		} while (chunk = chunk.next);
+		return length;
+	};
+
+	MagicString.prototype.trimLines = function trimLines () {
+		return this.trim('[\\r\\n]');
+	};
+
+	MagicString.prototype.trim = function trim (charType) {
+		return this.trimStart(charType).trimEnd(charType);
+	};
+
+	MagicString.prototype.trimEndAborted = function trimEndAborted (charType) {
+		var rx = new RegExp((charType || '\\s') + '+$');
+
+		this.outro = this.outro.replace(rx, '');
+		if (this.outro.length) { return true; }
+
+		var chunk = this.lastChunk;
+
+		do {
+			var end = chunk.end;
+			var aborted = chunk.trimEnd(rx);
+
+			// if chunk was trimmed, we have a new lastChunk
+			if (chunk.end !== end) {
+				if (this.lastChunk === chunk) {
+					this.lastChunk = chunk.next;
+				}
+
+				this.byEnd[chunk.end] = chunk;
+				this.byStart[chunk.next.start] = chunk.next;
+				this.byEnd[chunk.next.end] = chunk.next;
+			}
+
+			if (aborted) { return true; }
+			chunk = chunk.previous;
+		} while (chunk);
+
+		return false;
+	};
+
+	MagicString.prototype.trimEnd = function trimEnd (charType) {
+		this.trimEndAborted(charType);
+		return this;
+	};
+	MagicString.prototype.trimStartAborted = function trimStartAborted (charType) {
+		var rx = new RegExp('^' + (charType || '\\s') + '+');
+
+		this.intro = this.intro.replace(rx, '');
+		if (this.intro.length) { return true; }
+
+		var chunk = this.firstChunk;
+
+		do {
+			var end = chunk.end;
+			var aborted = chunk.trimStart(rx);
+
+			if (chunk.end !== end) {
+				// special case...
+				if (chunk === this.lastChunk) { this.lastChunk = chunk.next; }
+
+				this.byEnd[chunk.end] = chunk;
+				this.byStart[chunk.next.start] = chunk.next;
+				this.byEnd[chunk.next.end] = chunk.next;
+			}
+
+			if (aborted) { return true; }
+			chunk = chunk.next;
+		} while (chunk);
+
+		return false;
+	};
+
+	MagicString.prototype.trimStart = function trimStart (charType) {
+		this.trimStartAborted(charType);
+		return this;
+	};
+
+	var hasOwnProp = Object.prototype.hasOwnProperty;
+
+	var Bundle = function Bundle(options) {
+		if ( options === void 0 ) options = {};
+
+		this.intro = options.intro || '';
+		this.separator = options.separator !== undefined ? options.separator : '\n';
+		this.sources = [];
+		this.uniqueSources = [];
+		this.uniqueSourceIndexByFilename = {};
+	};
+
+	Bundle.prototype.addSource = function addSource (source) {
+		if (source instanceof MagicString) {
+			return this.addSource({
+				content: source,
+				filename: source.filename,
+				separator: this.separator
+			});
+		}
+
+		if (!isObject(source) || !source.content) {
+			throw new Error('bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`');
+		}
+
+		['filename', 'indentExclusionRanges', 'separator'].forEach(function (option) {
+			if (!hasOwnProp.call(source, option)) { source[option] = source.content[option]; }
+		});
+
+		if (source.separator === undefined) {
+			// TODO there's a bunch of this sort of thing, needs cleaning up
+			source.separator = this.separator;
+		}
+
+		if (source.filename) {
+			if (!hasOwnProp.call(this.uniqueSourceIndexByFilename, source.filename)) {
+				this.uniqueSourceIndexByFilename[source.filename] = this.uniqueSources.length;
+				this.uniqueSources.push({ filename: source.filename, content: source.content.original });
+			} else {
+				var uniqueSource = this.uniqueSources[this.uniqueSourceIndexByFilename[source.filename]];
+				if (source.content.original !== uniqueSource.content) {
+					throw new Error(("Illegal source: same filename (" + (source.filename) + "), different contents"));
+				}
+			}
+		}
+
+		this.sources.push(source);
+		return this;
+	};
+
+	Bundle.prototype.append = function append (str, options) {
+		this.addSource({
+			content: new MagicString(str),
+			separator: (options && options.separator) || ''
+		});
+
+		return this;
+	};
+
+	Bundle.prototype.clone = function clone () {
+		var bundle = new Bundle({
+			intro: this.intro,
+			separator: this.separator
+		});
+
+		this.sources.forEach(function (source) {
+			bundle.addSource({
+				filename: source.filename,
+				content: source.content.clone(),
+				separator: source.separator
+			});
+		});
+
+		return bundle;
+	};
+
+	Bundle.prototype.generateDecodedMap = function generateDecodedMap (options) {
+			var this$1 = this;
+			if ( options === void 0 ) options = {};
+
+		var names = [];
+		this.sources.forEach(function (source) {
+			Object.keys(source.content.storedNames).forEach(function (name) {
+				if (!~names.indexOf(name)) { names.push(name); }
+			});
+		});
+
+		var mappings = new Mappings(options.hires);
+
+		if (this.intro) {
+			mappings.advance(this.intro);
+		}
+
+		this.sources.forEach(function (source, i) {
+			if (i > 0) {
+				mappings.advance(this$1.separator);
+			}
+
+			var sourceIndex = source.filename ? this$1.uniqueSourceIndexByFilename[source.filename] : -1;
+			var magicString = source.content;
+			var locate = getLocator$1(magicString.original);
+
+			if (magicString.intro) {
+				mappings.advance(magicString.intro);
+			}
+
+			magicString.firstChunk.eachNext(function (chunk) {
+				var loc = locate(chunk.start);
+
+				if (chunk.intro.length) { mappings.advance(chunk.intro); }
+
+				if (source.filename) {
+					if (chunk.edited) {
+						mappings.addEdit(
+							sourceIndex,
+							chunk.content,
+							loc,
+							chunk.storeName ? names.indexOf(chunk.original) : -1
+						);
+					} else {
+						mappings.addUneditedChunk(
+							sourceIndex,
+							chunk,
+							magicString.original,
+							loc,
+							magicString.sourcemapLocations
+						);
+					}
+				} else {
+					mappings.advance(chunk.content);
+				}
+
+				if (chunk.outro.length) { mappings.advance(chunk.outro); }
+			});
+
+			if (magicString.outro) {
+				mappings.advance(magicString.outro);
+			}
+		});
+
+		return {
+			file: options.file ? options.file.split(/[/\\]/).pop() : null,
+			sources: this.uniqueSources.map(function (source) {
+				return options.file ? getRelativePath(options.file, source.filename) : source.filename;
+			}),
+			sourcesContent: this.uniqueSources.map(function (source) {
+				return options.includeContent ? source.content : null;
+			}),
+			names: names,
+			mappings: mappings.raw
+		};
+	};
+
+	Bundle.prototype.generateMap = function generateMap (options) {
+		return new SourceMap(this.generateDecodedMap(options));
+	};
+
+	Bundle.prototype.getIndentString = function getIndentString () {
+		var indentStringCounts = {};
+
+		this.sources.forEach(function (source) {
+			var indentStr = source.content.indentStr;
+
+			if (indentStr === null) { return; }
+
+			if (!indentStringCounts[indentStr]) { indentStringCounts[indentStr] = 0; }
+			indentStringCounts[indentStr] += 1;
+		});
+
+		return (
+			Object.keys(indentStringCounts).sort(function (a, b) {
+				return indentStringCounts[a] - indentStringCounts[b];
+			})[0] || '\t'
+		);
+	};
+
+	Bundle.prototype.indent = function indent (indentStr) {
+			var this$1 = this;
+
+		if (!arguments.length) {
+			indentStr = this.getIndentString();
+		}
+
+		if (indentStr === '') { return this; } // noop
+
+		var trailingNewline = !this.intro || this.intro.slice(-1) === '\n';
+
+		this.sources.forEach(function (source, i) {
+			var separator = source.separator !== undefined ? source.separator : this$1.separator;
+			var indentStart = trailingNewline || (i > 0 && /\r?\n$/.test(separator));
+
+			source.content.indent(indentStr, {
+				exclude: source.indentExclusionRanges,
+				indentStart: indentStart //: trailingNewline || /\r?\n$/.test( separator )  //true///\r?\n/.test( separator )
+			});
+
+			trailingNewline = source.content.lastChar() === '\n';
+		});
+
+		if (this.intro) {
+			this.intro =
+				indentStr +
+				this.intro.replace(/^[^\n]/gm, function (match, index) {
+					return index > 0 ? indentStr + match : match;
+				});
+		}
+
+		return this;
+	};
+
+	Bundle.prototype.prepend = function prepend (str) {
+		this.intro = str + this.intro;
+		return this;
+	};
+
+	Bundle.prototype.toString = function toString () {
+			var this$1 = this;
+
+		var body = this.sources
+			.map(function (source, i) {
+				var separator = source.separator !== undefined ? source.separator : this$1.separator;
+				var str = (i > 0 ? separator : '') + source.content.toString();
+
+				return str;
+			})
+			.join('');
+
+		return this.intro + body;
+	};
+
+	Bundle.prototype.isEmpty = function isEmpty () {
+		if (this.intro.length && this.intro.trim())
+			{ return false; }
+		if (this.sources.some(function (source) { return !source.content.isEmpty(); }))
+			{ return false; }
+		return true;
+	};
+
+	Bundle.prototype.length = function length () {
+		return this.sources.reduce(function (length, source) { return length + source.content.length(); }, this.intro.length);
+	};
+
+	Bundle.prototype.trimLines = function trimLines () {
+		return this.trim('[\\r\\n]');
+	};
+
+	Bundle.prototype.trim = function trim (charType) {
+		return this.trimStart(charType).trimEnd(charType);
+	};
+
+	Bundle.prototype.trimStart = function trimStart (charType) {
+		var rx = new RegExp('^' + (charType || '\\s') + '+');
+		this.intro = this.intro.replace(rx, '');
+
+		if (!this.intro) {
+			var source;
+			var i = 0;
+
+			do {
+				source = this.sources[i++];
+				if (!source) {
+					break;
+				}
+			} while (!source.content.trimStartAborted(charType));
+		}
+
+		return this;
+	};
+
+	Bundle.prototype.trimEnd = function trimEnd (charType) {
+		var rx = new RegExp((charType || '\\s') + '+$');
+
+		var source;
+		var i = this.sources.length - 1;
+
+		do {
+			source = this.sources[i--];
+			if (!source) {
+				this.intro = this.intro.replace(rx, '');
+				break;
+			}
+		} while (!source.content.trimEndAborted(charType));
+
+		return this;
+	};
+
+	const wrappers$1 = { esm, cjs };
+	function create_module(code, format, name, banner, sveltePath = 'svelte', helpers, imports, module_exports, source) {
+	    const internal_path = `${sveltePath}/internal`;
+	    if (format === 'esm') {
+	        return esm(code, name, banner, sveltePath, internal_path, helpers, imports, module_exports, source);
+	    }
+	    if (format === 'cjs')
+	        return cjs(code, name, banner, sveltePath, internal_path, helpers, imports, module_exports);
+	    throw new Error(`options.format is invalid (must be ${list$1(Object.keys(wrappers$1))})`);
+	}
+	function edit_source(source, sveltePath) {
+	    return source === 'svelte' || source.startsWith('svelte/')
+	        ? source.replace('svelte', sveltePath)
+	        : source;
+	}
+	function esm(code, name, banner, sveltePath, internal_path, helpers, imports, module_exports, source) {
+	    const internal_imports = helpers.length > 0 && (`import ${stringify_props(helpers.map(h => h.name === h.alias ? h.name : `${h.name} as ${h.alias}`).sort())} from ${JSON.stringify(internal_path)};`);
+	    const user_imports = imports.length > 0 && (imports
+	        .map((declaration) => {
+	        const import_source = edit_source(declaration.source.value, sveltePath);
+	        return (source.slice(declaration.start, declaration.source.start) +
+	            JSON.stringify(import_source) +
+	            source.slice(declaration.source.end, declaration.end));
+	    })
+	        .join('\n'));
+	    return deindent `
+		${banner}
+		${internal_imports}
+		${user_imports}
+
+		${code}
+
+		export default ${name};
+		${module_exports.length > 0 && `export { ${module_exports.map(e => e.name === e.as ? e.name : `${e.name} as ${e.as}`).join(', ')} };`}`;
+	}
+	function cjs(code, name, banner, sveltePath, internal_path, helpers, imports, module_exports) {
+	    const declarations = helpers.map(h => `${h.alias === h.name ? h.name : `${h.name}: ${h.alias}`}`).sort();
+	    const internal_imports = helpers.length > 0 && (`const ${stringify_props(declarations)} = require(${JSON.stringify(internal_path)});\n`);
+	    const requires = imports.map(node => {
+	        let lhs;
+	        if (node.specifiers[0].type === 'ImportNamespaceSpecifier') {
+	            lhs = node.specifiers[0].local.name;
+	        }
+	        else {
+	            const properties = node.specifiers.map(s => {
+	                if (s.type === 'ImportDefaultSpecifier') {
+	                    return `default: ${s.local.name}`;
+	                }
+	                return s.local.name === s.imported.name
+	                    ? s.local.name
+	                    : `${s.imported.name}: ${s.local.name}`;
+	            });
+	            lhs = `{ ${properties.join(', ')} }`;
+	        }
+	        const source = edit_source(node.source.value, sveltePath);
+	        return `const ${lhs} = require("${source}");`;
+	    });
+	    const exports = [`exports.default = ${name};`].concat(module_exports.map(x => `exports.${x.as} = ${x.name};`));
+	    return deindent `
+		${banner}
+		"use strict";
+
+		${internal_imports}
+		${requires}
+
+		${code}
+
+		${exports}`;
+	}
+
+	const UNKNOWN = {};
+	function gather_possible_values(node, set) {
+	    if (node.type === 'Literal') {
+	        set.add(node.value);
+	    }
+	    else if (node.type === 'ConditionalExpression') {
+	        gather_possible_values(node.consequent, set);
+	        gather_possible_values(node.alternate, set);
+	    }
+	    else {
+	        set.add(UNKNOWN);
+	    }
+	}
+
+	class Selector$1 {
+	    constructor(node, stylesheet) {
+	        this.node = node;
+	        this.stylesheet = stylesheet;
+	        this.blocks = group_selectors(node);
+	        // take trailing :global(...) selectors out of consideration
+	        let i = this.blocks.length;
+	        while (i > 0) {
+	            if (!this.blocks[i - 1].global)
+	                break;
+	            i -= 1;
+	        }
+	        this.local_blocks = this.blocks.slice(0, i);
+	        this.used = this.blocks[0].global;
+	    }
+	    apply(node, stack) {
+	        const to_encapsulate = [];
+	        apply_selector(this.stylesheet, this.local_blocks.slice(), node, stack.slice(), to_encapsulate);
+	        if (to_encapsulate.length > 0) {
+	            to_encapsulate.filter((_, i) => i === 0 || i === to_encapsulate.length - 1).forEach(({ node, block }) => {
+	                this.stylesheet.nodes_with_css_class.add(node);
+	                block.should_encapsulate = true;
+	            });
+	            this.used = true;
+	        }
+	    }
+	    minify(code) {
+	        let c = null;
+	        this.blocks.forEach((block, i) => {
+	            if (i > 0) {
+	                if (block.start - c > 1) {
+	                    code.overwrite(c, block.start, block.combinator.name || ' ');
+	                }
+	            }
+	            c = block.end;
+	        });
+	    }
+	    transform(code, attr) {
+	        function encapsulate_block(block) {
+	            let i = block.selectors.length;
+	            while (i--) {
+	                const selector = block.selectors[i];
+	                if (selector.type === 'PseudoElementSelector' || selector.type === 'PseudoClassSelector')
+	                    continue;
+	                if (selector.type === 'TypeSelector' && selector.name === '*') {
+	                    code.overwrite(selector.start, selector.end, attr);
+	                }
+	                else {
+	                    code.appendLeft(selector.end, attr);
+	                }
+	                break;
+	            }
+	        }
+	        this.blocks.forEach((block, i) => {
+	            if (block.global) {
+	                const selector = block.selectors[0];
+	                const first = selector.children[0];
+	                const last = selector.children[selector.children.length - 1];
+	                code.remove(selector.start, first.start).remove(last.end, selector.end);
+	            }
+	            if (block.should_encapsulate)
+	                encapsulate_block(block);
+	        });
+	    }
+	    validate(component) {
+	        this.blocks.forEach((block) => {
+	            let i = block.selectors.length;
+	            while (i-- > 1) {
+	                const selector = block.selectors[i];
+	                if (selector.type === 'PseudoClassSelector' && selector.name === 'global') {
+	                    component.error(selector, {
+	                        code: `css-invalid-global`,
+	                        message: `:global(...) must be the first element in a compound selector`
+	                    });
+	                }
+	            }
+	        });
+	        let start = 0;
+	        let end = this.blocks.length;
+	        for (; start < end; start += 1) {
+	            if (!this.blocks[start].global)
+	                break;
+	        }
+	        for (; end > start; end -= 1) {
+	            if (!this.blocks[end - 1].global)
+	                break;
+	        }
+	        for (let i = start; i < end; i += 1) {
+	            if (this.blocks[i].global) {
+	                component.error(this.blocks[i].selectors[0], {
+	                    code: `css-invalid-global`,
+	                    message: `:global(...) can be at the start or end of a selector sequence, but not in the middle`
+	                });
+	            }
+	        }
+	    }
+	}
+	function apply_selector(stylesheet, blocks, node, stack, to_encapsulate) {
+	    const block = blocks.pop();
+	    if (!block)
+	        return false;
+	    if (!node) {
+	        return blocks.every(block => block.global);
+	    }
+	    let i = block.selectors.length;
+	    while (i--) {
+	        const selector = block.selectors[i];
+	        if (selector.type === 'PseudoClassSelector' && selector.name === 'global') {
+	            // TODO shouldn't see this here... maybe we should enforce that :global(...)
+	            // cannot be sandwiched between non-global selectors?
+	            return false;
+	        }
+	        if (selector.type === 'PseudoClassSelector' || selector.type === 'PseudoElementSelector') {
+	            continue;
+	        }
+	        if (selector.type === 'ClassSelector') {
+	            if (!attribute_matches(node, 'class', selector.name, '~=', false) && !class_matches(node, selector.name))
+	                return false;
+	        }
+	        else if (selector.type === 'IdSelector') {
+	            if (!attribute_matches(node, 'id', selector.name, '=', false))
+	                return false;
+	        }
+	        else if (selector.type === 'AttributeSelector') {
+	            if (!attribute_matches(node, selector.name.name, selector.value && unquote(selector.value), selector.matcher, selector.flags))
+	                return false;
+	        }
+	        else if (selector.type === 'TypeSelector') {
+	            // remove toLowerCase() in v2, when uppercase elements will be forbidden
+	            if (node.name.toLowerCase() !== selector.name.toLowerCase() && selector.name !== '*')
+	                return false;
+	        }
+	        else {
+	            // bail. TODO figure out what these could be
+	            to_encapsulate.push({ node, block });
+	            return true;
+	        }
+	    }
+	    if (block.combinator) {
+	        if (block.combinator.type === 'WhiteSpace') {
+	            while (stack.length) {
+	                if (apply_selector(stylesheet, blocks.slice(), stack.pop(), stack, to_encapsulate)) {
+	                    to_encapsulate.push({ node, block });
+	                    return true;
+	                }
+	            }
+	            if (blocks.every(block => block.global)) {
+	                to_encapsulate.push({ node, block });
+	                return true;
+	            }
+	            return false;
+	        }
+	        else if (block.combinator.name === '>') {
+	            if (apply_selector(stylesheet, blocks, stack.pop(), stack, to_encapsulate)) {
+	                to_encapsulate.push({ node, block });
+	                return true;
+	            }
+	            return false;
+	        }
+	        // TODO other combinators
+	        to_encapsulate.push({ node, block });
+	        return true;
+	    }
+	    to_encapsulate.push({ node, block });
+	    return true;
+	}
+	const operators = {
+	    '=': (value, flags) => new RegExp(`^${value}$`, flags),
+	    '~=': (value, flags) => new RegExp(`\\b${value}\\b`, flags),
+	    '|=': (value, flags) => new RegExp(`^${value}(-.+)?$`, flags),
+	    '^=': (value, flags) => new RegExp(`^${value}`, flags),
+	    '$=': (value, flags) => new RegExp(`${value}$`, flags),
+	    '*=': (value, flags) => new RegExp(value, flags)
+	};
+	function attribute_matches(node, name, expected_value, operator, case_insensitive) {
+	    const spread = node.attributes.find(attr => attr.type === 'Spread');
+	    if (spread)
+	        return true;
+	    const attr = node.attributes.find((attr) => attr.name === name);
+	    if (!attr)
+	        return false;
+	    if (attr.is_true)
+	        return operator === null;
+	    if (attr.chunks.length > 1)
+	        return true;
+	    if (!expected_value)
+	        return true;
+	    const pattern = operators[operator](expected_value, case_insensitive ? 'i' : '');
+	    const value = attr.chunks[0];
+	    if (!value)
+	        return false;
+	    if (value.type === 'Text')
+	        return pattern.test(value.data);
+	    const possible_values = new Set();
+	    gather_possible_values(value.node, possible_values);
+	    if (possible_values.has(UNKNOWN))
+	        return true;
+	    for (const x of Array.from(possible_values)) { // TypeScript for-of is slightly unlike JS
+	        if (pattern.test(x))
+	            return true;
+	    }
+	    return false;
+	}
+	function class_matches(node, name) {
+	    return node.classes.some(function (class_directive) {
+	        return class_directive.name === name;
+	    });
+	}
+	function unquote(value) {
+	    if (value.type === 'Identifier')
+	        return value.name;
+	    const str = value.value;
+	    if (str[0] === str[str.length - 1] && str[0] === "'" || str[0] === '"') {
+	        return str.slice(1, str.length - 1);
+	    }
+	    return str;
+	}
+	class Block$2 {
+	    constructor(combinator) {
+	        this.combinator = combinator;
+	        this.global = false;
+	        this.selectors = [];
+	        this.start = null;
+	        this.end = null;
+	        this.should_encapsulate = false;
+	    }
+	    add(selector) {
+	        if (this.selectors.length === 0) {
+	            this.start = selector.start;
+	            this.global = selector.type === 'PseudoClassSelector' && selector.name === 'global';
+	        }
+	        this.selectors.push(selector);
+	        this.end = selector.end;
+	    }
+	}
+	function group_selectors(selector) {
+	    let block = new Block$2(null);
+	    const blocks = [block];
+	    selector.children.forEach((child, i) => {
+	        if (child.type === 'WhiteSpace' || child.type === 'Combinator') {
+	            block = new Block$2(child);
+	            blocks.push(block);
+	        }
+	        else {
+	            block.add(child);
+	        }
+	    });
+	    return blocks;
+	}
+
+	function remove_css_prefix(name) {
+	    return name.replace(/^-((webkit)|(moz)|(o)|(ms))-/, '');
+	}
+	const is_keyframes_node = (node) => remove_css_prefix(node.name) === 'keyframes';
+	// https://github.com/darkskyapp/string-hash/blob/master/index.js
+	function hash$1(str) {
+	    let hash = 5381;
+	    let i = str.length;
+	    while (i--)
+	        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
+	    return (hash >>> 0).toString(36);
+	}
+	class Rule$1 {
+	    constructor(node, stylesheet, parent) {
+	        this.node = node;
+	        this.parent = parent;
+	        this.selectors = node.selector.children.map((node) => new Selector$1(node, stylesheet));
+	        this.declarations = node.block.children.map((node) => new Declaration$1(node));
+	    }
+	    apply(node, stack) {
+	        this.selectors.forEach(selector => selector.apply(node, stack)); // TODO move the logic in here?
+	    }
+	    is_used(dev) {
+	        if (this.parent && this.parent.node.type === 'Atrule' && is_keyframes_node(this.parent.node))
+	            return true;
+	        if (this.declarations.length === 0)
+	            return dev;
+	        return this.selectors.some(s => s.used);
+	    }
+	    minify(code, dev) {
+	        let c = this.node.start;
+	        let started = false;
+	        this.selectors.forEach((selector, i) => {
+	            if (selector.used) {
+	                const separator = started ? ',' : '';
+	                if ((selector.node.start - c) > separator.length) {
+	                    code.overwrite(c, selector.node.start, separator);
+	                }
+	                selector.minify(code);
+	                c = selector.node.end;
+	                started = true;
+	            }
+	        });
+	        code.remove(c, this.node.block.start);
+	        c = this.node.block.start + 1;
+	        this.declarations.forEach((declaration, i) => {
+	            const separator = i > 0 ? ';' : '';
+	            if ((declaration.node.start - c) > separator.length) {
+	                code.overwrite(c, declaration.node.start, separator);
+	            }
+	            declaration.minify(code);
+	            c = declaration.node.end;
+	        });
+	        code.remove(c, this.node.block.end - 1);
+	    }
+	    transform(code, id, keyframes) {
+	        if (this.parent && this.parent.node.type === 'Atrule' && is_keyframes_node(this.parent.node))
+	            return true;
+	        const attr = `.${id}`;
+	        this.selectors.forEach(selector => selector.transform(code, attr));
+	        this.declarations.forEach(declaration => declaration.transform(code, keyframes));
+	    }
+	    validate(component) {
+	        this.selectors.forEach(selector => {
+	            selector.validate(component);
+	        });
+	    }
+	    warn_on_unused_selector(handler) {
+	        this.selectors.forEach(selector => {
+	            if (!selector.used)
+	                handler(selector);
+	        });
+	    }
+	}
+	class Declaration$1 {
+	    constructor(node) {
+	        this.node = node;
+	    }
+	    transform(code, keyframes) {
+	        const property = this.node.property && remove_css_prefix(this.node.property.toLowerCase());
+	        if (property === 'animation' || property === 'animation-name') {
+	            this.node.value.children.forEach((block) => {
+	                if (block.type === 'Identifier') {
+	                    const name = block.name;
+	                    if (keyframes.has(name)) {
+	                        code.overwrite(block.start, block.end, keyframes.get(name));
+	                    }
+	                }
+	            });
+	        }
+	    }
+	    minify(code) {
+	        if (!this.node.property)
+	            return; // @apply, and possibly other weird cases?
+	        const c = this.node.start + this.node.property.length;
+	        const first = this.node.value.children
+	            ? this.node.value.children[0]
+	            : this.node.value;
+	        let start = first.start;
+	        while (/\s/.test(code.original[start]))
+	            start += 1;
+	        if (start - c > 1) {
+	            code.overwrite(c, start, ':');
+	        }
+	    }
+	}
+	class Atrule$1 {
+	    constructor(node) {
+	        this.node = node;
+	        this.children = [];
+	    }
+	    apply(node, stack) {
+	        if (this.node.name === 'media' || this.node.name === 'supports') {
+	            this.children.forEach(child => {
+	                child.apply(node, stack);
+	            });
+	        }
+	        else if (is_keyframes_node(this.node)) {
+	            this.children.forEach((rule) => {
+	                rule.selectors.forEach(selector => {
+	                    selector.used = true;
+	                });
+	            });
+	        }
+	    }
+	    is_used(dev) {
+	        return true; // TODO
+	    }
+	    minify(code, dev) {
+	        if (this.node.name === 'media') {
+	            const expression_char = code.original[this.node.expression.start];
+	            let c = this.node.start + (expression_char === '(' ? 6 : 7);
+	            if (this.node.expression.start > c)
+	                code.remove(c, this.node.expression.start);
+	            this.node.expression.children.forEach((query) => {
+	                // TODO minify queries
+	                c = query.end;
+	            });
+	            code.remove(c, this.node.block.start);
+	        }
+	        else if (is_keyframes_node(this.node)) {
+	            let c = this.node.start + this.node.name.length + 1;
+	            if (this.node.expression.start - c > 1)
+	                code.overwrite(c, this.node.expression.start, ' ');
+	            c = this.node.expression.end;
+	            if (this.node.block.start - c > 0)
+	                code.remove(c, this.node.block.start);
+	        }
+	        else if (this.node.name === 'supports') {
+	            let c = this.node.start + 9;
+	            if (this.node.expression.start - c > 1)
+	                code.overwrite(c, this.node.expression.start, ' ');
+	            this.node.expression.children.forEach((query) => {
+	                // TODO minify queries
+	                c = query.end;
+	            });
+	            code.remove(c, this.node.block.start);
+	        }
+	        // TODO other atrules
+	        if (this.node.block) {
+	            let c = this.node.block.start + 1;
+	            this.children.forEach(child => {
+	                if (child.is_used(dev)) {
+	                    code.remove(c, child.node.start);
+	                    child.minify(code, dev);
+	                    c = child.node.end;
+	                }
+	            });
+	            code.remove(c, this.node.block.end - 1);
+	        }
+	    }
+	    transform(code, id, keyframes) {
+	        if (is_keyframes_node(this.node)) {
+	            this.node.expression.children.forEach(({ type, name, start, end }) => {
+	                if (type === 'Identifier') {
+	                    if (name.startsWith('-global-')) {
+	                        code.remove(start, start + 8);
+	                    }
+	                    else {
+	                        code.overwrite(start, end, keyframes.get(name));
+	                    }
+	                }
+	            });
+	        }
+	        this.children.forEach(child => {
+	            child.transform(code, id, keyframes);
+	        });
+	    }
+	    validate(component) {
+	        this.children.forEach(child => {
+	            child.validate(component);
+	        });
+	    }
+	    warn_on_unused_selector(handler) {
+	        if (this.node.name !== 'media')
+	            return;
+	        this.children.forEach(child => {
+	            child.warn_on_unused_selector(handler);
+	        });
+	    }
+	}
+	class Stylesheet {
+	    constructor(source, ast, filename, dev) {
+	        this.children = [];
+	        this.keyframes = new Map();
+	        this.nodes_with_css_class = new Set();
+	        this.source = source;
+	        this.ast = ast;
+	        this.filename = filename;
+	        this.dev = dev;
+	        if (ast.css && ast.css.children.length) {
+	            this.id = `svelte-${hash$1(ast.css.content.styles)}`;
+	            this.has_styles = true;
+	            const stack = [];
+	            let current_atrule = null;
+	            walk(ast.css, {
+	                enter: (node) => {
+	                    if (node.type === 'Atrule') {
+	                        const last = stack[stack.length - 1];
+	                        const atrule = new Atrule$1(node);
+	                        stack.push(atrule);
+	                        // this is an awkward special case — @apply (and
+	                        // possibly other future constructs)
+	                        if (last && !(last instanceof Atrule$1))
+	                            return;
+	                        if (current_atrule) {
+	                            current_atrule.children.push(atrule);
+	                        }
+	                        else {
+	                            this.children.push(atrule);
+	                        }
+	                        if (is_keyframes_node(node)) {
+	                            node.expression.children.forEach((expression) => {
+	                                if (expression.type === 'Identifier' && !expression.name.startsWith('-global-')) {
+	                                    this.keyframes.set(expression.name, `${this.id}-${expression.name}`);
+	                                }
+	                            });
+	                        }
+	                        current_atrule = atrule;
+	                    }
+	                    if (node.type === 'Rule') {
+	                        const rule = new Rule$1(node, this, current_atrule);
+	                        stack.push(rule);
+	                        if (current_atrule) {
+	                            current_atrule.children.push(rule);
+	                        }
+	                        else {
+	                            this.children.push(rule);
+	                        }
+	                    }
+	                },
+	                leave: (node) => {
+	                    if (node.type === 'Rule' || node.type === 'Atrule')
+	                        stack.pop();
+	                    if (node.type === 'Atrule')
+	                        current_atrule = stack[stack.length - 1];
+	                }
+	            });
+	        }
+	        else {
+	            this.has_styles = false;
+	        }
+	    }
+	    apply(node) {
+	        if (!this.has_styles)
+	            return;
+	        const stack = [];
+	        let parent = node;
+	        while (parent = parent.parent) {
+	            if (parent.type === 'Element')
+	                stack.unshift(parent);
+	        }
+	        for (let i = 0; i < this.children.length; i += 1) {
+	            const child = this.children[i];
+	            child.apply(node, stack);
+	        }
+	    }
+	    reify() {
+	        this.nodes_with_css_class.forEach((node) => {
+	            node.add_css_class();
+	        });
+	    }
+	    render(file, should_transform_selectors) {
+	        if (!this.has_styles) {
+	            return { code: null, map: null };
+	        }
+	        const code = new MagicString(this.source);
+	        walk(this.ast.css, {
+	            enter: (node) => {
+	                code.addSourcemapLocation(node.start);
+	                code.addSourcemapLocation(node.end);
+	            }
+	        });
+	        if (should_transform_selectors) {
+	            this.children.forEach((child) => {
+	                child.transform(code, this.id, this.keyframes);
+	            });
+	        }
+	        let c = 0;
+	        this.children.forEach(child => {
+	            if (child.is_used(this.dev)) {
+	                code.remove(c, child.node.start);
+	                child.minify(code, this.dev);
+	                c = child.node.end;
+	            }
+	        });
+	        code.remove(c, this.source.length);
+	        return {
+	            code: code.toString(),
+	            map: code.generateMap({
+	                includeContent: true,
+	                source: this.filename,
+	                file
+	            })
+	        };
+	    }
+	    validate(component) {
+	        this.children.forEach(child => {
+	            child.validate(component);
+	        });
+	    }
+	    warn_on_unused_selectors(component) {
+	        this.children.forEach(child => {
+	            child.warn_on_unused_selector((selector) => {
+	                component.warn(selector.node, {
+	                    code: `css-unused-selector`,
+	                    message: `Unused CSS selector`
+	                });
+	            });
+	        });
+	    }
+	}
+
+	const test = typeof process !== 'undefined' && process.env.TEST;
+
+	class Node$1 {
+	    constructor(component, parent, scope, info) {
+	        this.start = info.start;
+	        this.end = info.end;
+	        this.type = info.type;
+	        // this makes properties non-enumerable, which makes logging
+	        // bearable. might have a performance cost. TODO remove in prod?
+	        Object.defineProperties(this, {
+	            component: {
+	                value: component
+	            },
+	            parent: {
+	                value: parent
+	            }
+	        });
+	    }
+	    cannot_use_innerhtml() {
+	        if (this.can_use_innerhtml !== false) {
+	            this.can_use_innerhtml = false;
+	            if (this.parent)
+	                this.parent.cannot_use_innerhtml();
+	        }
+	    }
+	    find_nearest(selector) {
+	        if (selector.test(this.type))
+	            return this;
+	        if (this.parent)
+	            return this.parent.find_nearest(selector);
+	    }
+	    get_static_attribute_value(name) {
+	        const attribute = this.attributes && this.attributes.find((attr) => attr.type === 'Attribute' && attr.name.toLowerCase() === name);
+	        if (!attribute)
+	            return null;
+	        if (attribute.is_true)
+	            return true;
+	        if (attribute.chunks.length === 0)
+	            return '';
+	        if (attribute.chunks.length === 1 && attribute.chunks[0].type === 'Text') {
+	            return attribute.chunks[0].data;
+	        }
+	        return null;
+	    }
+	    has_ancestor(type) {
+	        return this.parent ?
+	            this.parent.type === type || this.parent.has_ancestor(type) :
+	            false;
+	    }
+	}
+
+	class AbstractBlock extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	    }
+	    warn_if_empty_block() {
+	        if (!this.children || this.children.length > 1)
+	            return;
+	        const child = this.children[0];
+	        if (!child || (child.type === 'Text' && !/[^ \r\n\f\v\t]/.test(child.data))) {
+	            this.component.warn(this, {
+	                code: 'empty-block',
+	                message: 'Empty block'
+	            });
+	        }
+	    }
+	}
+
+	class PendingBlock extends AbstractBlock {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.children = map_children(component, parent, scope, info.children);
+	        if (!info.skip) {
+	            this.warn_if_empty_block();
+	        }
+	    }
+	}
+
+	class ThenBlock extends AbstractBlock {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.scope = scope.child();
+	        this.scope.add(parent.value, parent.expression.dependencies, this);
+	        this.children = map_children(component, parent, this.scope, info.children);
+	        if (!info.skip) {
+	            this.warn_if_empty_block();
+	        }
+	    }
+	}
+
+	class CatchBlock extends AbstractBlock {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.scope = scope.child();
+	        this.scope.add(parent.error, parent.expression.dependencies, this);
+	        this.children = map_children(component, parent, this.scope, info.children);
+	        if (!info.skip) {
+	            this.warn_if_empty_block();
+	        }
+	    }
+	}
+
+	const binary_operators = {
+	    '**': 15,
+	    '*': 14,
+	    '/': 14,
+	    '%': 14,
+	    '+': 13,
+	    '-': 13,
+	    '<<': 12,
+	    '>>': 12,
+	    '>>>': 12,
+	    '<': 11,
+	    '<=': 11,
+	    '>': 11,
+	    '>=': 11,
+	    'in': 11,
+	    'instanceof': 11,
+	    '==': 10,
+	    '!=': 10,
+	    '===': 10,
+	    '!==': 10,
+	    '&': 9,
+	    '^': 8,
+	    '|': 7
+	};
+	const logical_operators = {
+	    '&&': 6,
+	    '||': 5
+	};
+	const precedence = {
+	    Literal: () => 21,
+	    Identifier: () => 21,
+	    ParenthesizedExpression: () => 20,
+	    MemberExpression: () => 19,
+	    NewExpression: () => 19,
+	    CallExpression: () => 19,
+	    UpdateExpression: () => 17,
+	    UnaryExpression: () => 16,
+	    BinaryExpression: (node) => binary_operators[node.operator],
+	    LogicalExpression: (node) => logical_operators[node.operator],
+	    ConditionalExpression: () => 4,
+	    AssignmentExpression: () => 3,
+	    YieldExpression: () => 2,
+	    SpreadElement: () => 1,
+	    SequenceExpression: () => 0
+	};
+	class Expression {
+	    // todo: owner type
+	    constructor(component, owner, template_scope, info) {
+	        this.type = 'Expression';
+	        this.dependencies = new Set();
+	        this.contextual_dependencies = new Set();
+	        this.declarations = [];
+	        this.uses_context = false;
+	        // TODO revert to direct property access in prod?
+	        Object.defineProperties(this, {
+	            component: {
+	                value: component
+	            }
+	        });
+	        this.node = info;
+	        this.template_scope = template_scope;
+	        this.owner = owner;
+	        // @ts-ignore
+	        this.is_synthetic = owner.is_synthetic;
+	        const { dependencies, contextual_dependencies } = this;
+	        let { map, scope } = create_scopes(info);
+	        this.scope = scope;
+	        this.scope_map = map;
+	        const expression = this;
+	        let function_expression;
+	        // discover dependencies, but don't change the code yet
+	        walk(info, {
+	            enter(node, parent, key) {
+	                // don't manipulate shorthand props twice
+	                if (key === 'value' && parent.shorthand)
+	                    return;
+	                if (map.has(node)) {
+	                    scope = map.get(node);
+	                }
+	                if (!function_expression && /FunctionExpression/.test(node.type)) {
+	                    function_expression = node;
+	                }
+	                if (isReference(node, parent)) {
+	                    const { name, nodes } = flatten_reference(node);
+	                    if (scope.has(name))
+	                        return;
+	                    if (globals.has(name) && !component.var_lookup.has(name))
+	                        return;
+	                    if (name[0] === '$' && template_scope.names.has(name.slice(1))) {
+	                        component.error(node, {
+	                            code: `contextual-store`,
+	                            message: `Stores must be declared at the top level of the component (this may change in a future version of Svelte)`
+	                        });
+	                    }
+	                    if (template_scope.is_let(name)) {
+	                        if (!function_expression) {
+	                            dependencies.add(name);
+	                        }
+	                    }
+	                    else if (template_scope.names.has(name)) {
+	                        expression.uses_context = true;
+	                        contextual_dependencies.add(name);
+	                        if (!function_expression) {
+	                            template_scope.dependencies_for_name.get(name).forEach(name => dependencies.add(name));
+	                        }
+	                    }
+	                    else {
+	                        if (!function_expression) {
+	                            dependencies.add(name);
+	                        }
+	                        component.add_reference(name);
+	                        component.warn_if_undefined(name, nodes[0], template_scope);
+	                    }
+	                    this.skip();
+	                }
+	                // track any assignments from template expressions as mutable
+	                let names;
+	                let deep = false;
+	                if (function_expression) {
+	                    if (node.type === 'AssignmentExpression') {
+	                        deep = node.left.type === 'MemberExpression';
+	                        names = deep
+	                            ? [get_object(node.left).name]
+	                            : extract_names(node.left);
+	                    }
+	                    else if (node.type === 'UpdateExpression') {
+	                        const { name } = get_object(node.argument);
+	                        names = [name];
+	                    }
+	                }
+	                if (names) {
+	                    names.forEach(name => {
+	                        if (template_scope.names.has(name)) {
+	                            template_scope.dependencies_for_name.get(name).forEach(name => {
+	                                const variable = component.var_lookup.get(name);
+	                                if (variable)
+	                                    variable[deep ? 'mutated' : 'reassigned'] = true;
+	                            });
+	                        }
+	                        else {
+	                            component.add_reference(name);
+	                            const variable = component.var_lookup.get(name);
+	                            if (variable)
+	                                variable[deep ? 'mutated' : 'reassigned'] = true;
+	                        }
+	                    });
+	                }
+	            },
+	            leave(node) {
+	                if (map.has(node)) {
+	                    scope = scope.parent;
+	                }
+	                if (node === function_expression) {
+	                    function_expression = null;
+	                }
+	            }
+	        });
+	    }
+	    dynamic_dependencies() {
+	        return Array.from(this.dependencies).filter(name => {
+	            if (this.template_scope.is_let(name))
+	                return true;
+	            if (name === '$$props')
+	                return true;
+	            const variable = this.component.var_lookup.get(name);
+	            if (!variable)
+	                return false;
+	            if (variable.mutated || variable.reassigned)
+	                return true; // dynamic internal state
+	            if (!variable.module && variable.writable && variable.export_name)
+	                return true; // writable props
+	        });
+	    }
+	    get_precedence() {
+	        return this.node.type in precedence ? precedence[this.node.type](this.node) : 0;
+	    }
+	    // TODO move this into a render-dom wrapper?
+	    render(block) {
+	        if (this.rendered)
+	            return this.rendered;
+	        const { component, declarations, scope_map: map, template_scope, owner, is_synthetic } = this;
+	        let scope = this.scope;
+	        const { code } = component;
+	        let function_expression;
+	        let pending_assignments = new Set();
+	        let dependencies;
+	        let contextual_dependencies;
+	        // rewrite code as appropriate
+	        walk(this.node, {
+	            enter(node, parent, key) {
+	                // don't manipulate shorthand props twice
+	                if (key === 'value' && parent.shorthand)
+	                    return;
+	                code.addSourcemapLocation(node.start);
+	                code.addSourcemapLocation(node.end);
+	                if (map.has(node)) {
+	                    scope = map.get(node);
+	                }
+	                if (isReference(node, parent)) {
+	                    const { name, nodes } = flatten_reference(node);
+	                    if (scope.has(name))
+	                        return;
+	                    if (globals.has(name) && !component.var_lookup.has(name))
+	                        return;
+	                    if (function_expression) {
+	                        if (template_scope.names.has(name)) {
+	                            contextual_dependencies.add(name);
+	                            template_scope.dependencies_for_name.get(name).forEach(dependency => {
+	                                dependencies.add(dependency);
+	                            });
+	                        }
+	                        else {
+	                            dependencies.add(name);
+	                            component.add_reference(name);
+	                        }
+	                    }
+	                    else if (!is_synthetic && is_contextual(component, template_scope, name)) {
+	                        code.prependRight(node.start, key === 'key' && parent.shorthand
+	                            ? `${name}: ctx.`
+	                            : 'ctx.');
+	                    }
+	                    if (node.type === 'MemberExpression') {
+	                        nodes.forEach(node => {
+	                            code.addSourcemapLocation(node.start);
+	                            code.addSourcemapLocation(node.end);
+	                        });
+	                    }
+	                    this.skip();
+	                }
+	                if (function_expression) {
+	                    if (node.type === 'AssignmentExpression') {
+	                        const names = node.left.type === 'MemberExpression'
+	                            ? [get_object(node.left).name]
+	                            : extract_names(node.left);
+	                        if (node.operator === '=' && nodes_match(node.left, node.right)) {
+	                            const dirty = names.filter(name => {
+	                                return !scope.declarations.has(name);
+	                            });
+	                            if (dirty.length)
+	                                component.has_reactive_assignments = true;
+	                            code.overwrite(node.start, node.end, dirty.map(n => component.invalidate(n)).join('; '));
+	                        }
+	                        else {
+	                            names.forEach(name => {
+	                                if (scope.declarations.has(name))
+	                                    return;
+	                                const variable = component.var_lookup.get(name);
+	                                if (variable && variable.hoistable)
+	                                    return;
+	                                pending_assignments.add(name);
+	                            });
+	                        }
+	                    }
+	                    else if (node.type === 'UpdateExpression') {
+	                        const { name } = get_object(node.argument);
+	                        if (scope.declarations.has(name))
+	                            return;
+	                        const variable = component.var_lookup.get(name);
+	                        if (variable && variable.hoistable)
+	                            return;
+	                        pending_assignments.add(name);
+	                    }
+	                }
+	                else {
+	                    if (node.type === 'AssignmentExpression') ;
+	                    if (node.type === 'FunctionExpression' || node.type === 'ArrowFunctionExpression') {
+	                        function_expression = node;
+	                        dependencies = new Set();
+	                        contextual_dependencies = new Set();
+	                    }
+	                }
+	            },
+	            leave(node, parent) {
+	                if (map.has(node))
+	                    scope = scope.parent;
+	                if (node === function_expression) {
+	                    if (pending_assignments.size > 0) {
+	                        if (node.type !== 'ArrowFunctionExpression') {
+	                            // this should never happen!
+	                            throw new Error(`Well that's odd`);
+	                        }
+	                        // TOOD optimisation — if this is an event handler,
+	                        // the return value doesn't matter
+	                    }
+	                    const name = component.get_unique_name(sanitize(get_function_name(node, owner)));
+	                    const args = contextual_dependencies.size > 0
+	                        ? [`{ ${Array.from(contextual_dependencies).join(', ')} }`]
+	                        : [];
+	                    let original_params;
+	                    if (node.params.length > 0) {
+	                        original_params = code.slice(node.params[0].start, node.params[node.params.length - 1].end);
+	                        args.push(original_params);
+	                    }
+	                    let body = code.slice(node.body.start, node.body.end).trim();
+	                    if (node.body.type !== 'BlockStatement') {
+	                        if (pending_assignments.size > 0) {
+	                            const dependencies = new Set();
+	                            pending_assignments.forEach(name => {
+	                                if (template_scope.names.has(name)) {
+	                                    template_scope.dependencies_for_name.get(name).forEach(dependency => {
+	                                        dependencies.add(dependency);
+	                                    });
+	                                }
+	                                else {
+	                                    dependencies.add(name);
+	                                }
+	                            });
+	                            const insert = Array.from(dependencies).map(name => component.invalidate(name)).join('; ');
+	                            pending_assignments = new Set();
+	                            component.has_reactive_assignments = true;
+	                            body = deindent `
+								{
+									const $$result = ${body};
+									${insert};
+									return $$result;
+								}
+							`;
+	                        }
+	                        else {
+	                            body = `{\n\treturn ${body};\n}`;
+	                        }
+	                    }
+	                    const fn = deindent `
+						function ${name}(${args.join(', ')}) ${body}
+					`;
+	                    if (dependencies.size === 0 && contextual_dependencies.size === 0) {
+	                        // we can hoist this out of the component completely
+	                        component.fully_hoisted.push(fn);
+	                        code.overwrite(node.start, node.end, name);
+	                        component.add_var({
+	                            name,
+	                            internal: true,
+	                            hoistable: true,
+	                            referenced: true
+	                        });
+	                    }
+	                    else if (contextual_dependencies.size === 0) {
+	                        // function can be hoisted inside the component init
+	                        component.partly_hoisted.push(fn);
+	                        code.overwrite(node.start, node.end, `ctx.${name}`);
+	                        component.add_var({
+	                            name,
+	                            internal: true,
+	                            referenced: true
+	                        });
+	                    }
+	                    else {
+	                        // we need a combo block/init recipe
+	                        component.partly_hoisted.push(fn);
+	                        code.overwrite(node.start, node.end, name);
+	                        component.add_var({
+	                            name,
+	                            internal: true,
+	                            referenced: true
+	                        });
+	                        declarations.push(deindent `
+							function ${name}(${original_params ? '...args' : ''}) {
+								return ctx.${name}(ctx${original_params ? ', ...args' : ''});
+							}
+						`);
+	                    }
+	                    function_expression = null;
+	                    dependencies = null;
+	                    contextual_dependencies = null;
+	                }
+	                if (/Statement/.test(node.type)) {
+	                    if (pending_assignments.size > 0) {
+	                        const has_semi = code.original[node.end - 1] === ';';
+	                        const insert = ((has_semi ? ' ' : '; ') +
+	                            Array.from(pending_assignments).map(name => component.invalidate(name)).join('; '));
+	                        if (/^(Break|Continue|Return)Statement/.test(node.type)) {
+	                            if (node.argument) {
+	                                code.overwrite(node.start, node.argument.start, `var $$result = `);
+	                                code.appendLeft(node.argument.end, `${insert}; return $$result`);
+	                            }
+	                            else {
+	                                code.prependRight(node.start, `${insert}; `);
+	                            }
+	                        }
+	                        else if (parent && /(If|For(In|Of)?|While)Statement/.test(parent.type) && node.type !== 'BlockStatement') {
+	                            code.prependRight(node.start, '{ ');
+	                            code.appendLeft(node.end, `${insert}; }`);
+	                        }
+	                        else {
+	                            code.appendLeft(node.end, `${insert};`);
+	                        }
+	                        component.has_reactive_assignments = true;
+	                        pending_assignments = new Set();
+	                    }
+	                }
+	            }
+	        });
+	        if (declarations.length > 0) {
+	            block.maintain_context = true;
+	            declarations.forEach(declaration => {
+	                block.builders.init.add_block(declaration);
+	            });
+	        }
+	        return this.rendered = `[✂${this.node.start}-${this.node.end}✂]`;
+	    }
+	}
+	function get_function_name(node, parent) {
+	    if (parent.type === 'EventHandler') {
+	        return `${parent.name}_handler`;
+	    }
+	    if (parent.type === 'Action') {
+	        return `${parent.name}_function`;
+	    }
+	    return 'func';
+	}
+	function is_contextual(component, scope, name) {
+	    if (name === '$$props')
+	        return true;
+	    // if it's a name below root scope, it's contextual
+	    if (!scope.is_top_level(name))
+	        return true;
+	    const variable = component.var_lookup.get(name);
+	    // hoistables, module declarations, and imports are non-contextual
+	    if (!variable || variable.hoistable)
+	        return false;
+	    // assume contextual
+	    return true;
+	}
+
+	class AwaitBlock$1 extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.expression = new Expression(component, this, scope, info.expression);
+	        this.value = info.value;
+	        this.error = info.error;
+	        this.pending = new PendingBlock(component, this, scope, info.pending);
+	        this.then = new ThenBlock(component, this, scope, info.then);
+	        this.catch = new CatchBlock(component, this, scope, info.catch);
+	    }
+	}
+
+	class EventHandler extends Node$1 {
+	    constructor(component, parent, template_scope, info) {
+	        super(component, parent, template_scope, info);
+	        this.uses_context = false;
+	        this.can_make_passive = false;
+	        this.name = info.name;
+	        this.modifiers = new Set(info.modifiers);
+	        if (info.expression) {
+	            this.expression = new Expression(component, this, template_scope, info.expression);
+	            this.uses_context = this.expression.uses_context;
+	            if (/FunctionExpression/.test(info.expression.type) && info.expression.params.length === 0) {
+	                // TODO make this detection more accurate — if `event.preventDefault` isn't called, and
+	                // `event` is passed to another function, we can make it passive
+	                this.can_make_passive = true;
+	            }
+	            else if (info.expression.type === 'Identifier') {
+	                let node = component.node_for_declaration.get(info.expression.name);
+	                if (node && node.type === 'VariableDeclaration') {
+	                    // for `const handleClick = () => {...}`, we want the [arrow] function expression node
+	                    const declarator = node.declarations.find(d => d.id.name === info.expression.name);
+	                    node = declarator && declarator.init;
+	                }
+	                if (node && /Function/.test(node.type) && node.params.length === 0) {
+	                    this.can_make_passive = true;
+	                }
+	            }
+	        }
+	        else {
+	            const name = component.get_unique_name(`${this.name}_handler`);
+	            component.add_var({
+	                name,
+	                internal: true,
+	                referenced: true
+	            });
+	            component.partly_hoisted.push(deindent `
+				function ${name}(event) {
+					@bubble($$self, event);
+				}
+			`);
+	            this.handler_name = name;
+	        }
+	    }
+	    // TODO move this? it is specific to render-dom
+	    render(block) {
+	        if (this.expression)
+	            return this.expression.render(block);
+	        // this.component.add_reference(this.handler_name);
+	        return `ctx.${this.handler_name}`;
+	    }
+	}
+
+	class Body extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.handlers = [];
+	        info.attributes.forEach(node => {
+	            if (node.type === 'EventHandler') {
+	                this.handlers.push(new EventHandler(component, this, scope, node));
+	            }
+	        });
+	    }
+	}
+
+	class Comment$2 extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.data = info.data;
+	    }
+	}
+
+	class ElseBlock extends AbstractBlock {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.children = map_children(component, this, scope, info.children);
+	        this.warn_if_empty_block();
+	    }
+	}
+
+	function unpack_destructuring(contexts, node, tail) {
+	    if (!node)
+	        return;
+	    if (node.type === 'Identifier' || node.type === 'RestIdentifier') {
+	        contexts.push({
+	            key: node,
+	            tail
+	        });
+	    }
+	    else if (node.type === 'ArrayPattern') {
+	        node.elements.forEach((element, i) => {
+	            if (element && element.type === 'RestIdentifier') {
+	                unpack_destructuring(contexts, element, `${tail}.slice(${i})`);
+	            }
+	            else {
+	                unpack_destructuring(contexts, element, `${tail}[${i}]`);
+	            }
+	        });
+	    }
+	    else if (node.type === 'ObjectPattern') {
+	        const used_properties = [];
+	        node.properties.forEach((property) => {
+	            if (property.kind === 'rest') {
+	                unpack_destructuring(contexts, property.value, `@object_without_properties(${tail}, ${JSON.stringify(used_properties)})`);
+	            }
+	            else {
+	                used_properties.push(property.key.name);
+	                unpack_destructuring(contexts, property.value, `${tail}.${property.key.name}`);
+	            }
+	        });
+	    }
+	}
+	class EachBlock$1 extends AbstractBlock {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.has_binding = false;
+	        this.expression = new Expression(component, this, scope, info.expression);
+	        this.context = info.context.name || 'each'; // TODO this is used to facilitate binding; currently fails with destructuring
+	        this.context_node = info.context;
+	        this.index = info.index;
+	        this.scope = scope.child();
+	        this.contexts = [];
+	        unpack_destructuring(this.contexts, info.context, new_tail());
+	        this.contexts.forEach(context => {
+	            this.scope.add(context.key.name, this.expression.dependencies, this);
+	        });
+	        this.key = info.key
+	            ? new Expression(component, this, this.scope, info.key)
+	            : null;
+	        if (this.index) {
+	            // index can only change if this is a keyed each block
+	            const dependencies = this.key ? this.expression.dependencies : new Set([]);
+	            this.scope.add(this.index, dependencies, this);
+	        }
+	        this.has_animation = false;
+	        this.children = map_children(component, this, this.scope, info.children);
+	        if (this.has_animation) {
+	            if (this.children.length !== 1) {
+	                const child = this.children.find(child => !!child.animation);
+	                component.error(child.animation, {
+	                    code: `invalid-animation`,
+	                    message: `An element that use the animate directive must be the sole child of a keyed each block`
+	                });
+	            }
+	        }
+	        this.warn_if_empty_block();
+	        this.else = info.else
+	            ? new ElseBlock(component, this, this.scope, info.else)
+	            : null;
+	    }
+	}
+
+	class Attribute extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        if (info.type === 'Spread') {
+	            this.name = null;
+	            this.is_spread = true;
+	            this.is_true = false;
+	            this.is_synthetic = false;
+	            this.expression = new Expression(component, this, scope, info.expression);
+	            this.dependencies = this.expression.dependencies;
+	            this.chunks = null;
+	            this.is_dynamic = true; // TODO not necessarily
+	            this.is_static = false;
+	            this.should_cache = false; // TODO does this mean anything here?
+	        }
+	        else {
+	            this.name = info.name;
+	            this.is_true = info.value === true;
+	            this.is_static = true;
+	            this.is_synthetic = info.synthetic;
+	            this.dependencies = new Set();
+	            this.chunks = this.is_true
+	                ? []
+	                : info.value.map(node => {
+	                    if (node.type === 'Text')
+	                        return node;
+	                    this.is_static = false;
+	                    const expression = new Expression(component, this, scope, node.expression);
+	                    add_to_set(this.dependencies, expression.dependencies);
+	                    return expression;
+	                });
+	            this.is_dynamic = this.dependencies.size > 0;
+	            this.should_cache = this.is_dynamic
+	                ? this.chunks.length === 1
+	                    // @ts-ignore todo: probably error
+	                    ? this.chunks[0].node.type !== 'Identifier' || scope.names.has(this.chunks[0].node.name)
+	                    : true
+	                : false;
+	        }
+	    }
+	    get_dependencies() {
+	        if (this.is_spread)
+	            return this.expression.dynamic_dependencies();
+	        const dependencies = new Set();
+	        this.chunks.forEach(chunk => {
+	            if (chunk.type === 'Expression') {
+	                add_to_set(dependencies, chunk.dynamic_dependencies());
+	            }
+	        });
+	        return Array.from(dependencies);
+	    }
+	    get_value(block) {
+	        if (this.is_true)
+	            return true;
+	        if (this.chunks.length === 0)
+	            return `""`;
+	        if (this.chunks.length === 1) {
+	            return this.chunks[0].type === 'Text'
+	                ? stringify(this.chunks[0].data)
+	                // @ts-ignore todo: probably error
+	                : this.chunks[0].render(block);
+	        }
+	        return (this.chunks[0].type === 'Text' ? '' : `"" + `) +
+	            this.chunks
+	                .map(chunk => {
+	                if (chunk.type === 'Text') {
+	                    return stringify(chunk.data);
+	                }
+	                else {
+	                    // @ts-ignore todo: probably error
+	                    return chunk.get_precedence() <= 13 ? `(${chunk.render()})` : chunk.render();
+	                }
+	            })
+	                .join(' + ');
+	    }
+	    get_static_value() {
+	        if (this.is_spread || this.is_dynamic)
+	            return null;
+	        return this.is_true
+	            ? true
+	            : this.chunks[0]
+	                // method should be called only when `is_static = true`
+	                ? this.chunks[0].data
+	                : '';
+	    }
+	}
+
+	// TODO this should live in a specific binding
+	const read_only_media_attributes = new Set([
+	    'duration',
+	    'buffered',
+	    'seekable',
+	    'played'
+	]);
+	class Binding extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        if (info.expression.type !== 'Identifier' && info.expression.type !== 'MemberExpression') {
+	            component.error(info, {
+	                code: 'invalid-directive-value',
+	                message: 'Can only bind to an identifier (e.g. `foo`) or a member expression (e.g. `foo.bar` or `foo[baz]`)'
+	            });
+	        }
+	        this.name = info.name;
+	        this.expression = new Expression(component, this, scope, info.expression);
+	        let obj;
+	        let prop;
+	        const { name } = get_object(this.expression.node);
+	        this.is_contextual = scope.names.has(name);
+	        // make sure we track this as a mutable ref
+	        if (scope.is_let(name)) {
+	            component.error(this, {
+	                code: 'invalid-binding',
+	                message: 'Cannot bind to a variable declared with the let: directive'
+	            });
+	        }
+	        else if (this.is_contextual) {
+	            scope.dependencies_for_name.get(name).forEach(name => {
+	                const variable = component.var_lookup.get(name);
+	                variable[this.expression.node.type === 'MemberExpression' ? 'mutated' : 'reassigned'] = true;
+	            });
+	        }
+	        else {
+	            const variable = component.var_lookup.get(name);
+	            if (!variable || variable.global)
+	                component.error(this.expression.node, {
+	                    code: 'binding-undeclared',
+	                    message: `${name} is not declared`
+	                });
+	            variable[this.expression.node.type === 'MemberExpression' ? 'mutated' : 'reassigned'] = true;
+	        }
+	        if (this.expression.node.type === 'MemberExpression') {
+	            prop = `[✂${this.expression.node.property.start}-${this.expression.node.property.end}✂]`;
+	            if (!this.expression.node.computed)
+	                prop = `'${prop}'`;
+	            obj = `[✂${this.expression.node.object.start}-${this.expression.node.object.end}✂]`;
+	        }
+	        else {
+	            obj = 'ctx';
+	            prop = `'${name}'`;
+	        }
+	        this.obj = obj;
+	        this.prop = prop;
+	        const type = parent.get_static_attribute_value('type');
+	        this.is_readonly = (dimensions.test(this.name) ||
+	            (parent.is_media_node && parent.is_media_node() && read_only_media_attributes.has(this.name)) ||
+	            (parent.name === 'input' && type === 'file') // TODO others?
+	        );
+	    }
+	    is_readonly_media_attribute() {
+	        return read_only_media_attributes.has(this.name);
+	    }
+	}
+
+	class Transition extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        component.warn_if_undefined(info.name, info, scope);
+	        this.name = info.name;
+	        component.qualify(info.name);
+	        this.directive = info.intro && info.outro ? 'transition' : info.intro ? 'in' : 'out';
+	        this.is_local = info.modifiers.includes('local');
+	        if ((info.intro && parent.intro) || (info.outro && parent.outro)) {
+	            const parent_transition = (parent.intro || parent.outro);
+	            const message = this.directive === parent_transition.directive
+	                ? `An element can only have one '${this.directive}' directive`
+	                : `An element cannot have both ${describe(parent_transition)} directive and ${describe(this)} directive`;
+	            component.error(info, {
+	                code: `duplicate-transition`,
+	                message
+	            });
+	        }
+	        this.expression = info.expression
+	            ? new Expression(component, this, scope, info.expression)
+	            : null;
+	    }
+	}
+	function describe(transition) {
+	    return transition.directive === 'transition'
+	        ? `a 'transition'`
+	        : `an '${transition.directive}'`;
+	}
+
+	class Animation extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        component.warn_if_undefined(info.name, info, scope);
+	        this.name = info.name;
+	        component.qualify(info.name);
+	        if (parent.animation) {
+	            component.error(this, {
+	                code: `duplicate-animation`,
+	                message: `An element can only have one 'animate' directive`
+	            });
+	        }
+	        const block = parent.parent;
+	        if (!block || block.type !== 'EachBlock' || !block.key) {
+	            // TODO can we relax the 'immediate child' rule?
+	            component.error(this, {
+	                code: `invalid-animation`,
+	                message: `An element that use the animate directive must be the immediate child of a keyed each block`
+	            });
+	        }
+	        block.has_animation = true;
+	        this.expression = info.expression
+	            ? new Expression(component, this, scope, info.expression)
+	            : null;
+	    }
+	}
+
+	class Action extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        component.warn_if_undefined(info.name, info, scope);
+	        this.name = info.name;
+	        component.qualify(info.name);
+	        this.expression = info.expression
+	            ? new Expression(component, this, scope, info.expression)
+	            : null;
+	        this.uses_context = this.expression && this.expression.uses_context;
+	    }
+	}
+
+	class Class extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.name = info.name;
+	        this.expression = info.expression
+	            ? new Expression(component, this, scope, info.expression)
+	            : null;
+	    }
+	}
+
+	class Text$1 extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.use_space = false;
+	        this.data = info.data;
+	        if (!component.component_options.preserveWhitespace && !/\S/.test(info.data)) {
+	            let node = parent;
+	            while (node) {
+	                if (node.type === 'Element' && node.name === 'pre') {
+	                    return;
+	                }
+	                node = node.parent;
+	            }
+	            this.use_space = true;
+	        }
+	    }
+	}
+
+	const applicable = new Set(['Identifier', 'ObjectExpression', 'ArrayExpression', 'Property']);
+	class Let extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.names = [];
+	        this.name = info.name;
+	        this.value = info.expression && `[✂${info.expression.start}-${info.expression.end}✂]`;
+	        if (info.expression) {
+	            walk(info.expression, {
+	                enter: node => {
+	                    if (!applicable.has(node.type)) {
+	                        component.error(node, {
+	                            code: 'invalid-let',
+	                            message: `let directive value must be an identifier or an object/array pattern`
+	                        });
+	                    }
+	                    if (node.type === 'Identifier') {
+	                        this.names.push(node.name);
+	                    }
+	                }
+	            });
+	        }
+	        else {
+	            this.names.push(this.name);
+	        }
+	    }
+	}
+
+	const svg$1 = /^(?:altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform|circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix|feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting|feSpotLight|feTile|feTurbulence|filter|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern|image|line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata|missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor|stop|svg|switch|symbol|text|textPath|tref|tspan|unknown|use|view|vkern)$/;
+	const aria_attributes = 'activedescendant atomic autocomplete busy checked colindex controls current describedby details disabled dropeffect errormessage expanded flowto grabbed haspopup hidden invalid keyshortcuts label labelledby level live modal multiline multiselectable orientation owns placeholder posinset pressed readonly relevant required roledescription rowindex selected setsize sort valuemax valuemin valuenow valuetext'.split(' ');
+	const aria_attribute_set = new Set(aria_attributes);
+	const aria_roles = 'alert alertdialog application article banner button cell checkbox columnheader combobox command complementary composite contentinfo definition dialog directory document feed figure form grid gridcell group heading img input landmark link list listbox listitem log main marquee math menu menubar menuitem menuitemcheckbox menuitemradio navigation none note option presentation progressbar radio radiogroup range region roletype row rowgroup rowheader scrollbar search searchbox section sectionhead select separator slider spinbutton status structure switch tab table tablist tabpanel term textbox timer toolbar tooltip tree treegrid treeitem widget window'.split(' ');
+	const aria_role_set = new Set(aria_roles);
+	const a11y_required_attributes = {
+	    a: ['href'],
+	    area: ['alt', 'aria-label', 'aria-labelledby'],
+	    // html-has-lang
+	    html: ['lang'],
+	    // iframe-has-title
+	    iframe: ['title'],
+	    img: ['alt'],
+	    object: ['title', 'aria-label', 'aria-labelledby']
+	};
+	const a11y_distracting_elements = new Set([
+	    'blink',
+	    'marquee'
+	]);
+	const a11y_required_content = new Set([
+	    // anchor-has-content
+	    'a',
+	    // heading-has-content
+	    'h1',
+	    'h2',
+	    'h3',
+	    'h4',
+	    'h5',
+	    'h6'
+	]);
+	const invisible_elements = new Set(['meta', 'html', 'script', 'style']);
+	const valid_modifiers = new Set([
+	    'preventDefault',
+	    'stopPropagation',
+	    'capture',
+	    'once',
+	    'passive'
+	]);
+	const passive_events = new Set([
+	    'wheel',
+	    'touchstart',
+	    'touchmove',
+	    'touchend',
+	    'touchcancel'
+	]);
+	function get_namespace(parent, element, explicit_namespace) {
+	    const parent_element = parent.find_nearest(/^Element/);
+	    if (!parent_element) {
+	        return explicit_namespace || (svg$1.test(element.name)
+	            ? namespaces.svg
+	            : null);
+	    }
+	    if (element.name.toLowerCase() === 'svg')
+	        return namespaces.svg;
+	    if (parent_element.name.toLowerCase() === 'foreignobject')
+	        return null;
+	    return parent_element.namespace;
+	}
+	class Element$1 extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.attributes = [];
+	        this.actions = [];
+	        this.bindings = [];
+	        this.classes = [];
+	        this.handlers = [];
+	        this.lets = [];
+	        this.intro = null;
+	        this.outro = null;
+	        this.animation = null;
+	        this.name = info.name;
+	        this.namespace = get_namespace(parent, this, component.namespace);
+	        if (this.name === 'textarea') {
+	            if (info.children.length > 0) {
+	                const value_attribute = info.attributes.find(node => node.name === 'value');
+	                if (value_attribute) {
+	                    component.error(value_attribute, {
+	                        code: `textarea-duplicate-value`,
+	                        message: `A <textarea> can have either a value attribute or (equivalently) child content, but not both`
+	                    });
+	                }
+	                // this is an egregious hack, but it's the easiest way to get <textarea>
+	                // children treated the same way as a value attribute
+	                info.attributes.push({
+	                    type: 'Attribute',
+	                    name: 'value',
+	                    value: info.children
+	                });
+	                info.children = [];
+	            }
+	        }
+	        if (this.name === 'option') {
+	            // Special case — treat these the same way:
+	            //   <option>{foo}</option>
+	            //   <option value={foo}>{foo}</option>
+	            const value_attribute = info.attributes.find(attribute => attribute.name === 'value');
+	            if (!value_attribute) {
+	                info.attributes.push({
+	                    type: 'Attribute',
+	                    name: 'value',
+	                    value: info.children,
+	                    synthetic: true
+	                });
+	            }
+	        }
+	        info.attributes.forEach(node => {
+	            switch (node.type) {
+	                case 'Action':
+	                    this.actions.push(new Action(component, this, scope, node));
+	                    break;
+	                case 'Attribute':
+	                case 'Spread':
+	                    // special case
+	                    if (node.name === 'xmlns')
+	                        this.namespace = node.value[0].data;
+	                    this.attributes.push(new Attribute(component, this, scope, node));
+	                    break;
+	                case 'Binding':
+	                    this.bindings.push(new Binding(component, this, scope, node));
+	                    break;
+	                case 'Class':
+	                    this.classes.push(new Class(component, this, scope, node));
+	                    break;
+	                case 'EventHandler':
+	                    this.handlers.push(new EventHandler(component, this, scope, node));
+	                    break;
+	                case 'Let':
+	                    this.lets.push(new Let(component, this, scope, node));
+	                    break;
+	                case 'Transition':
+	                    const transition = new Transition(component, this, scope, node);
+	                    if (node.intro)
+	                        this.intro = transition;
+	                    if (node.outro)
+	                        this.outro = transition;
+	                    break;
+	                case 'Animation':
+	                    this.animation = new Animation(component, this, scope, node);
+	                    break;
+	                default:
+	                    throw new Error(`Not implemented: ${node.type}`);
+	            }
+	        });
+	        if (this.lets.length > 0) {
+	            this.scope = scope.child();
+	            this.lets.forEach(l => {
+	                const dependencies = new Set([l.name]);
+	                l.names.forEach(name => {
+	                    this.scope.add(name, dependencies, this);
+	                });
+	            });
+	        }
+	        else {
+	            this.scope = scope;
+	        }
+	        this.children = map_children(component, this, this.scope, info.children);
+	        this.validate();
+	        component.stylesheet.apply(this);
+	    }
+	    validate() {
+	        if (a11y_distracting_elements.has(this.name)) {
+	            // no-distracting-elements
+	            this.component.warn(this, {
+	                code: `a11y-distracting-elements`,
+	                message: `A11y: Avoid <${this.name}> elements`
+	            });
+	        }
+	        if (this.name === 'figcaption') {
+	            let { parent } = this;
+	            let is_figure_parent = false;
+	            while (parent) {
+	                if (parent.name === 'figure') {
+	                    is_figure_parent = true;
+	                    break;
+	                }
+	                if (parent.type === 'Element') {
+	                    break;
+	                }
+	                parent = parent.parent;
+	            }
+	            if (!is_figure_parent) {
+	                this.component.warn(this, {
+	                    code: `a11y-structure`,
+	                    message: `A11y: <figcaption> must be an immediate child of <figure>`
+	                });
+	            }
+	        }
+	        if (this.name === 'figure') {
+	            const children = this.children.filter(node => {
+	                if (node.type === 'Comment')
+	                    return false;
+	                if (node.type === 'Text')
+	                    return /\S/.test(node.data);
+	                return true;
+	            });
+	            const index = children.findIndex(child => child.name === 'figcaption');
+	            if (index !== -1 && (index !== 0 && index !== children.length - 1)) {
+	                this.component.warn(children[index], {
+	                    code: `a11y-structure`,
+	                    message: `A11y: <figcaption> must be first or last child of <figure>`
+	                });
+	            }
+	        }
+	        this.validate_attributes();
+	        this.validate_bindings();
+	        this.validate_content();
+	        this.validate_event_handlers();
+	    }
+	    validate_attributes() {
+	        const { component } = this;
+	        const attribute_map = new Map();
+	        this.attributes.forEach(attribute => {
+	            if (attribute.is_spread)
+	                return;
+	            const name = attribute.name.toLowerCase();
+	            // aria-props
+	            if (name.startsWith('aria-')) {
+	                if (invisible_elements.has(this.name)) {
+	                    // aria-unsupported-elements
+	                    component.warn(attribute, {
+	                        code: `a11y-aria-attributes`,
+	                        message: `A11y: <${this.name}> should not have aria-* attributes`
+	                    });
+	                }
+	                const type = name.slice(5);
+	                if (!aria_attribute_set.has(type)) {
+	                    const match = fuzzymatch(type, aria_attributes);
+	                    let message = `A11y: Unknown aria attribute 'aria-${type}'`;
+	                    if (match)
+	                        message += ` (did you mean '${match}'?)`;
+	                    component.warn(attribute, {
+	                        code: `a11y-unknown-aria-attribute`,
+	                        message
+	                    });
+	                }
+	                if (name === 'aria-hidden' && /^h[1-6]$/.test(this.name)) {
+	                    component.warn(attribute, {
+	                        code: `a11y-hidden`,
+	                        message: `A11y: <${this.name}> element should not be hidden`
+	                    });
+	                }
+	            }
+	            // aria-role
+	            if (name === 'role') {
+	                if (invisible_elements.has(this.name)) {
+	                    // aria-unsupported-elements
+	                    component.warn(attribute, {
+	                        code: `a11y-misplaced-role`,
+	                        message: `A11y: <${this.name}> should not have role attribute`
+	                    });
+	                }
+	                const value = attribute.get_static_value();
+	                // @ts-ignore
+	                if (value && !aria_role_set.has(value)) {
+	                    // @ts-ignore
+	                    const match = fuzzymatch(value, aria_roles);
+	                    let message = `A11y: Unknown role '${value}'`;
+	                    if (match)
+	                        message += ` (did you mean '${match}'?)`;
+	                    component.warn(attribute, {
+	                        code: `a11y-unknown-role`,
+	                        message
+	                    });
+	                }
+	            }
+	            // no-access-key
+	            if (name === 'accesskey') {
+	                component.warn(attribute, {
+	                    code: `a11y-accesskey`,
+	                    message: `A11y: Avoid using accesskey`
+	                });
+	            }
+	            // no-autofocus
+	            if (name === 'autofocus') {
+	                component.warn(attribute, {
+	                    code: `a11y-autofocus`,
+	                    message: `A11y: Avoid using autofocus`
+	                });
+	            }
+	            // scope
+	            if (name === 'scope' && this.name !== 'th') {
+	                component.warn(attribute, {
+	                    code: `a11y-misplaced-scope`,
+	                    message: `A11y: The scope attribute should only be used with <th> elements`
+	                });
+	            }
+	            // tabindex-no-positive
+	            if (name === 'tabindex') {
+	                const value = attribute.get_static_value();
+	                // @ts-ignore todo is tabindex=true correct case?
+	                if (!isNaN(value) && +value > 0) {
+	                    component.warn(attribute, {
+	                        code: `a11y-positive-tabindex`,
+	                        message: `A11y: avoid tabindex values above zero`
+	                    });
+	                }
+	            }
+	            if (name === 'slot') {
+	                if (!attribute.is_static) {
+	                    component.error(attribute, {
+	                        code: `invalid-slot-attribute`,
+	                        message: `slot attribute cannot have a dynamic value`
+	                    });
+	                }
+	                if (component.slot_outlets.has(name)) {
+	                    component.error(attribute, {
+	                        code: `duplicate-slot-attribute`,
+	                        message: `Duplicate '${name}' slot`
+	                    });
+	                    component.slot_outlets.add(name);
+	                }
+	                let ancestor = this.parent;
+	                do {
+	                    if (ancestor.type === 'InlineComponent')
+	                        break;
+	                    if (ancestor.type === 'Element' && /-/.test(ancestor.name))
+	                        break;
+	                    if (ancestor.type === 'IfBlock' || ancestor.type === 'EachBlock') {
+	                        const type = ancestor.type === 'IfBlock' ? 'if' : 'each';
+	                        const message = `Cannot place slotted elements inside an ${type}-block`;
+	                        component.error(attribute, {
+	                            code: `invalid-slotted-content`,
+	                            message
+	                        });
+	                    }
+	                } while (ancestor = ancestor.parent);
+	                if (!ancestor) {
+	                    component.error(attribute, {
+	                        code: `invalid-slotted-content`,
+	                        message: `Element with a slot='...' attribute must be a descendant of a component or custom element`
+	                    });
+	                }
+	            }
+	            attribute_map.set(attribute.name, attribute);
+	        });
+	        // handle special cases
+	        if (this.name === 'a') {
+	            const attribute = attribute_map.get('href') || attribute_map.get('xlink:href');
+	            if (attribute) {
+	                const value = attribute.get_static_value();
+	                if (value === '' || value === '#') {
+	                    component.warn(attribute, {
+	                        code: `a11y-invalid-attribute`,
+	                        message: `A11y: '${value}' is not a valid ${attribute.name} attribute`
+	                    });
+	                }
+	            }
+	            else {
+	                component.warn(this, {
+	                    code: `a11y-missing-attribute`,
+	                    message: `A11y: <a> element should have an href attribute`
+	                });
+	            }
+	        }
+	        else {
+	            const required_attributes = a11y_required_attributes[this.name];
+	            if (required_attributes) {
+	                const has_attribute = required_attributes.some(name => attribute_map.has(name));
+	                if (!has_attribute) {
+	                    should_have_attribute(this, required_attributes);
+	                }
+	            }
+	            if (this.name === 'input') {
+	                const type = attribute_map.get('type');
+	                if (type && type.get_static_value() === 'image') {
+	                    should_have_attribute(this, ['alt', 'aria-label', 'aria-labelledby'], 'input type="image"');
+	                }
+	            }
+	        }
+	    }
+	    validate_bindings() {
+	        const { component } = this;
+	        const check_type_attribute = () => {
+	            const attribute = this.attributes.find((attribute) => attribute.name === 'type');
+	            if (!attribute)
+	                return null;
+	            if (!attribute.is_static) {
+	                component.error(attribute, {
+	                    code: `invalid-type`,
+	                    message: `'type' attribute cannot be dynamic if input uses two-way binding`
+	                });
+	            }
+	            const value = attribute.get_static_value();
+	            if (value === true) {
+	                component.error(attribute, {
+	                    code: `missing-type`,
+	                    message: `'type' attribute must be specified`
+	                });
+	            }
+	            return value;
+	        };
+	        this.bindings.forEach(binding => {
+	            const { name } = binding;
+	            if (name === 'value') {
+	                if (this.name !== 'input' &&
+	                    this.name !== 'textarea' &&
+	                    this.name !== 'select') {
+	                    component.error(binding, {
+	                        code: `invalid-binding`,
+	                        message: `'value' is not a valid binding on <${this.name}> elements`
+	                    });
+	                }
+	                if (this.name === 'select') {
+	                    const attribute = this.attributes.find((attribute) => attribute.name === 'multiple');
+	                    if (attribute && !attribute.is_static) {
+	                        component.error(attribute, {
+	                            code: `dynamic-multiple-attribute`,
+	                            message: `'multiple' attribute cannot be dynamic if select uses two-way binding`
+	                        });
+	                    }
+	                }
+	                else {
+	                    check_type_attribute();
+	                }
+	            }
+	            else if (name === 'checked' || name === 'indeterminate') {
+	                if (this.name !== 'input') {
+	                    component.error(binding, {
+	                        code: `invalid-binding`,
+	                        message: `'${name}' is not a valid binding on <${this.name}> elements`
+	                    });
+	                }
+	                const type = check_type_attribute();
+	                if (type !== 'checkbox') {
+	                    let message = `'${name}' binding can only be used with <input type="checkbox">`;
+	                    if (type === 'radio')
+	                        message += ` — for <input type="radio">, use 'group' binding`;
+	                    component.error(binding, { code: `invalid-binding`, message });
+	                }
+	            }
+	            else if (name === 'group') {
+	                if (this.name !== 'input') {
+	                    component.error(binding, {
+	                        code: `invalid-binding`,
+	                        message: `'group' is not a valid binding on <${this.name}> elements`
+	                    });
+	                }
+	                const type = check_type_attribute();
+	                if (type !== 'checkbox' && type !== 'radio') {
+	                    component.error(binding, {
+	                        code: `invalid-binding`,
+	                        message: `'group' binding can only be used with <input type="checkbox"> or <input type="radio">`
+	                    });
+	                }
+	            }
+	            else if (name === 'files') {
+	                if (this.name !== 'input') {
+	                    component.error(binding, {
+	                        code: `invalid-binding`,
+	                        message: `'files' is not a valid binding on <${this.name}> elements`
+	                    });
+	                }
+	                const type = check_type_attribute();
+	                if (type !== 'file') {
+	                    component.error(binding, {
+	                        code: `invalid-binding`,
+	                        message: `'files' binding can only be used with <input type="file">`
+	                    });
+	                }
+	            }
+	            else if (name === 'open') {
+	                if (this.name !== 'details') {
+	                    component.error(binding, {
+	                        code: `invalid-binding`,
+	                        message: `'${name}' binding can only be used with <details>`
+	                    });
+	                }
+	            }
+	            else if (name === 'currentTime' ||
+	                name === 'duration' ||
+	                name === 'paused' ||
+	                name === 'buffered' ||
+	                name === 'seekable' ||
+	                name === 'played' ||
+	                name === 'volume' ||
+	                name === 'playbackRate') {
+	                if (this.name !== 'audio' && this.name !== 'video') {
+	                    component.error(binding, {
+	                        code: `invalid-binding`,
+	                        message: `'${name}' binding can only be used with <audio> or <video>`
+	                    });
+	                }
+	            }
+	            else if (dimensions.test(name)) {
+	                if (this.name === 'svg' && (name === 'offsetWidth' || name === 'offsetHeight')) {
+	                    component.error(binding, {
+	                        code: 'invalid-binding',
+	                        message: `'${binding.name}' is not a valid binding on <svg>. Use '${name.replace('offset', 'client')}' instead`
+	                    });
+	                }
+	                else if (svg$1.test(this.name)) {
+	                    component.error(binding, {
+	                        code: 'invalid-binding',
+	                        message: `'${binding.name}' is not a valid binding on SVG elements`
+	                    });
+	                }
+	                else if (is_void(this.name)) {
+	                    component.error(binding, {
+	                        code: 'invalid-binding',
+	                        message: `'${binding.name}' is not a valid binding on void elements like <${this.name}>. Use a wrapper element instead`
+	                    });
+	                }
+	            }
+	            else if (name !== 'this') {
+	                component.error(binding, {
+	                    code: `invalid-binding`,
+	                    message: `'${binding.name}' is not a valid binding`
+	                });
+	            }
+	        });
+	    }
+	    validate_content() {
+	        if (!a11y_required_content.has(this.name))
+	            return;
+	        if (this.children.length === 0) {
+	            this.component.warn(this, {
+	                code: `a11y-missing-content`,
+	                message: `A11y: <${this.name}> element should have child content`
+	            });
+	        }
+	    }
+	    validate_event_handlers() {
+	        const { component } = this;
+	        this.handlers.forEach(handler => {
+	            if (handler.modifiers.has('passive') && handler.modifiers.has('preventDefault')) {
+	                component.error(handler, {
+	                    code: 'invalid-event-modifier',
+	                    message: `The 'passive' and 'preventDefault' modifiers cannot be used together`
+	                });
+	            }
+	            handler.modifiers.forEach(modifier => {
+	                if (!valid_modifiers.has(modifier)) {
+	                    component.error(handler, {
+	                        code: 'invalid-event-modifier',
+	                        message: `Valid event modifiers are ${list$1(Array.from(valid_modifiers))}`
+	                    });
+	                }
+	                if (modifier === 'passive') {
+	                    if (passive_events.has(handler.name)) {
+	                        if (handler.can_make_passive) {
+	                            component.warn(handler, {
+	                                code: 'redundant-event-modifier',
+	                                message: `Touch event handlers that don't use the 'event' object are passive by default`
+	                            });
+	                        }
+	                    }
+	                    else {
+	                        component.warn(handler, {
+	                            code: 'redundant-event-modifier',
+	                            message: `The passive modifier only works with wheel and touch events`
+	                        });
+	                    }
+	                }
+	                if (component.compile_options.legacy && (modifier === 'once' || modifier === 'passive')) {
+	                    // TODO this could be supported, but it would need a few changes to
+	                    // how event listeners work
+	                    component.error(handler, {
+	                        code: 'invalid-event-modifier',
+	                        message: `The '${modifier}' modifier cannot be used in legacy mode`
+	                    });
+	                }
+	            });
+	            if (passive_events.has(handler.name) && handler.can_make_passive && !handler.modifiers.has('preventDefault')) {
+	                // touch/wheel events should be passive by default
+	                handler.modifiers.add('passive');
+	            }
+	        });
+	    }
+	    is_media_node() {
+	        return this.name === 'audio' || this.name === 'video';
+	    }
+	    add_css_class(class_name = this.component.stylesheet.id) {
+	        const class_attribute = this.attributes.find(a => a.name === 'class');
+	        if (class_attribute && !class_attribute.is_true) {
+	            if (class_attribute.chunks.length === 1 && class_attribute.chunks[0].type === 'Text') {
+	                class_attribute.chunks[0].data += ` ${class_name}`;
+	            }
+	            else {
+	                class_attribute.chunks.push(new Text$1(this.component, this, this.scope, {
+	                    type: 'Text',
+	                    data: ` ${class_name}`
+	                }));
+	            }
+	        }
+	        else {
+	            this.attributes.push(new Attribute(this.component, this, this.scope, {
+	                type: 'Attribute',
+	                name: 'class',
+	                value: [{ type: 'Text', data: class_name }]
+	            }));
+	        }
+	    }
+	}
+	function should_have_attribute(node, attributes, name = node.name) {
+	    const article = /^[aeiou]/.test(attributes[0]) ? 'an' : 'a';
+	    const sequence = attributes.length > 1 ?
+	        attributes.slice(0, -1).join(', ') + ` or ${attributes[attributes.length - 1]}` :
+	        attributes[0];
+	    node.component.warn(node, {
+	        code: `a11y-missing-attribute`,
+	        message: `A11y: <${name}> element should have ${article} ${sequence} attribute`
+	    });
+	}
+
+	class Head$1 extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        if (info.attributes.length) {
+	            component.error(info.attributes[0], {
+	                code: `invalid-attribute`,
+	                message: `<svelte:head> should not have any attributes or directives`
+	            });
+	        }
+	        this.children = map_children(component, parent, scope, info.children.filter(child => {
+	            return (child.type !== 'Text' || /\S/.test(child.data));
+	        }));
+	    }
+	}
+
+	class IfBlock$1 extends AbstractBlock {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.expression = new Expression(component, this, scope, info.expression);
+	        this.children = map_children(component, this, scope, info.children);
+	        this.else = info.else
+	            ? new ElseBlock(component, this, scope, info.else)
+	            : null;
+	        this.warn_if_empty_block();
+	    }
+	}
+
+	class InlineComponent$1 extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.attributes = [];
+	        this.bindings = [];
+	        this.handlers = [];
+	        this.lets = [];
+	        if (info.name !== 'svelte:component' && info.name !== 'svelte:self') {
+	            const name = info.name.split('.')[0]; // accommodate namespaces
+	            component.warn_if_undefined(name, info, scope);
+	            component.add_reference(name);
+	        }
+	        this.name = info.name;
+	        this.expression = this.name === 'svelte:component'
+	            ? new Expression(component, this, scope, info.expression)
+	            : null;
+	        info.attributes.forEach(node => {
+	            switch (node.type) {
+	                case 'Action':
+	                    component.error(node, {
+	                        code: `invalid-action`,
+	                        message: `Actions can only be applied to DOM elements, not components`
+	                    });
+	                case 'Attribute':
+	                    if (node.name === 'slot') {
+	                        component.error(node, {
+	                            code: `invalid-prop`,
+	                            message: `'slot' is reserved for future use in named slots`
+	                        });
+	                    }
+	                // fallthrough
+	                case 'Spread':
+	                    this.attributes.push(new Attribute(component, this, scope, node));
+	                    break;
+	                case 'Binding':
+	                    this.bindings.push(new Binding(component, this, scope, node));
+	                    break;
+	                case 'Class':
+	                    component.error(node, {
+	                        code: `invalid-class`,
+	                        message: `Classes can only be applied to DOM elements, not components`
+	                    });
+	                case 'EventHandler':
+	                    this.handlers.push(new EventHandler(component, this, scope, node));
+	                    break;
+	                case 'Let':
+	                    this.lets.push(new Let(component, this, scope, node));
+	                    break;
+	                case 'Transition':
+	                    component.error(node, {
+	                        code: `invalid-transition`,
+	                        message: `Transitions can only be applied to DOM elements, not components`
+	                    });
+	                default:
+	                    throw new Error(`Not implemented: ${node.type}`);
+	            }
+	        });
+	        if (this.lets.length > 0) {
+	            this.scope = scope.child();
+	            this.lets.forEach(l => {
+	                const dependencies = new Set([l.name]);
+	                l.names.forEach(name => {
+	                    this.scope.add(name, dependencies, this);
+	                });
+	            });
+	        }
+	        else {
+	            this.scope = scope;
+	        }
+	        this.children = map_children(component, this, this.scope, info.children);
+	    }
+	}
+
+	class Tag$2 extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.expression = new Expression(component, this, scope, info.expression);
+	        this.should_cache = (info.expression.type !== 'Identifier' ||
+	            (this.expression.dependencies.size && scope.names.has(info.expression.name)));
+	    }
+	}
+
+	class MustacheTag extends Tag$2 {
+	}
+
+	class Options extends Node$1 {
+	}
+
+	class RawMustacheTag extends Tag$2 {
+	}
+
+	class DebugTag$1 extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.expressions = info.identifiers.map(node => {
+	            return new Expression(component, parent, scope, node);
+	        });
+	    }
+	}
+
+	class Slot$1 extends Element$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.values = new Map();
+	        info.attributes.forEach(attr => {
+	            if (attr.type !== 'Attribute') {
+	                component.error(attr, {
+	                    code: `invalid-slot-directive`,
+	                    message: `<slot> cannot have directives`
+	                });
+	            }
+	            if (attr.name === 'name') {
+	                if (attr.value.length !== 1 || attr.value[0].type !== 'Text') {
+	                    component.error(attr, {
+	                        code: `dynamic-slot-name`,
+	                        message: `<slot> name cannot be dynamic`
+	                    });
+	                }
+	                this.slot_name = attr.value[0].data;
+	                if (this.slot_name === 'default') {
+	                    component.error(attr, {
+	                        code: `invalid-slot-name`,
+	                        message: `default is a reserved word — it cannot be used as a slot name`
+	                    });
+	                }
+	            }
+	            this.values.set(attr.name, new Attribute(component, this, scope, attr));
+	        });
+	        if (!this.slot_name)
+	            this.slot_name = 'default';
+	        if (this.slot_name === 'default') {
+	            // if this is the default slot, add our dependencies to any
+	            // other slots (which inherit our slot values) that were
+	            // previously encountered
+	            component.slots.forEach((slot) => {
+	                this.values.forEach((attribute, name) => {
+	                    if (!slot.values.has(name)) {
+	                        slot.values.set(name, attribute);
+	                    }
+	                });
+	            });
+	        }
+	        else if (component.slots.has('default')) {
+	            // otherwise, go the other way — inherit values from
+	            // a previously encountered default slot
+	            const default_slot = component.slots.get('default');
+	            default_slot.values.forEach((attribute, name) => {
+	                if (!this.values.has(name)) {
+	                    this.values.set(name, attribute);
+	                }
+	            });
+	        }
+	        component.slots.set(this.slot_name, this);
+	    }
+	}
+
+	class Title$1 extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.children = map_children(component, parent, scope, info.children);
+	        if (info.attributes.length > 0) {
+	            component.error(info.attributes[0], {
+	                code: `illegal-attribute`,
+	                message: `<title> cannot have attributes`
+	            });
+	        }
+	        info.children.forEach(child => {
+	            if (child.type !== 'Text' && child.type !== 'MustacheTag') {
+	                component.error(child, {
+	                    code: 'illegal-structure',
+	                    message: `<title> can only contain text and {tags}`
+	                });
+	            }
+	        });
+	        this.should_cache = info.children.length === 1
+	            ? (info.children[0].type !== 'Identifier' ||
+	                scope.names.has(info.children[0].name))
+	            : true;
+	    }
+	}
+
+	const valid_bindings = [
+	    'innerWidth',
+	    'innerHeight',
+	    'outerWidth',
+	    'outerHeight',
+	    'scrollX',
+	    'scrollY',
+	    'online'
+	];
+	class Window extends Node$1 {
+	    constructor(component, parent, scope, info) {
+	        super(component, parent, scope, info);
+	        this.handlers = [];
+	        this.bindings = [];
+	        this.actions = [];
+	        info.attributes.forEach(node => {
+	            if (node.type === 'EventHandler') {
+	                this.handlers.push(new EventHandler(component, this, scope, node));
+	            }
+	            else if (node.type === 'Binding') {
+	                if (node.expression.type !== 'Identifier') {
+	                    const { parts } = flatten_reference(node.expression);
+	                    // TODO is this constraint necessary?
+	                    component.error(node.expression, {
+	                        code: `invalid-binding`,
+	                        message: `Bindings on <svelte:window> must be to top-level properties, e.g. '${parts[parts.length - 1]}' rather than '${parts.join('.')}'`
+	                    });
+	                }
+	                if (!~valid_bindings.indexOf(node.name)) {
+	                    const match = (node.name === 'width' ? 'innerWidth' :
+	                        node.name === 'height' ? 'innerHeight' :
+	                            fuzzymatch(node.name, valid_bindings));
+	                    const message = `'${node.name}' is not a valid binding on <svelte:window>`;
+	                    if (match) {
+	                        component.error(node, {
+	                            code: `invalid-binding`,
+	                            message: `${message} (did you mean '${match}'?)`
+	                        });
+	                    }
+	                    else {
+	                        component.error(node, {
+	                            code: `invalid-binding`,
+	                            message: `${message} — valid bindings are ${list$1(valid_bindings)}`
+	                        });
+	                    }
+	                }
+	                this.bindings.push(new Binding(component, this, scope, node));
+	            }
+	            else if (node.type === 'Action') {
+	                this.actions.push(new Action(component, this, scope, node));
+	            }
+	        });
+	    }
+	}
+
+	function get_constructor(type) {
+	    switch (type) {
+	        case 'AwaitBlock': return AwaitBlock$1;
+	        case 'Body': return Body;
+	        case 'Comment': return Comment$2;
+	        case 'EachBlock': return EachBlock$1;
+	        case 'Element': return Element$1;
+	        case 'Head': return Head$1;
+	        case 'IfBlock': return IfBlock$1;
+	        case 'InlineComponent': return InlineComponent$1;
+	        case 'MustacheTag': return MustacheTag;
+	        case 'Options': return Options;
+	        case 'RawMustacheTag': return RawMustacheTag;
+	        case 'DebugTag': return DebugTag$1;
+	        case 'Slot': return Slot$1;
+	        case 'Text': return Text$1;
+	        case 'Title': return Title$1;
+	        case 'Window': return Window;
+	        default: throw new Error(`Not implemented: ${type}`);
+	    }
+	}
+	function map_children(component, parent, scope, children) {
+	    let last = null;
+	    return children.map(child => {
+	        const constructor = get_constructor(child.type);
+	        const node = new constructor(component, parent, scope, child);
+	        if (last)
+	            last.next = node;
+	        node.prev = last;
+	        last = node;
+	        return node;
+	    });
+	}
+
+	class TemplateScope {
+	    constructor(parent) {
+	        this.owners = new Map();
+	        this.parent = parent;
+	        this.names = new Set(parent ? parent.names : []);
+	        this.dependencies_for_name = new Map(parent ? parent.dependencies_for_name : []);
+	    }
+	    add(name, dependencies, owner) {
+	        this.names.add(name);
+	        this.dependencies_for_name.set(name, dependencies);
+	        this.owners.set(name, owner);
+	        return this;
+	    }
+	    child() {
+	        const child = new TemplateScope(this);
+	        return child;
+	    }
+	    is_top_level(name) {
+	        return !this.parent || !this.names.has(name) && this.parent.is_top_level(name);
+	    }
+	    get_owner(name) {
+	        return this.owners.get(name) || (this.parent && this.parent.get_owner(name));
+	    }
+	    is_let(name) {
+	        const owner = this.get_owner(name);
+	        return owner && (owner.type === 'Element' || owner.type === 'InlineComponent');
+	    }
+	}
+
+	class Fragment extends Node$1 {
+	    constructor(component, info) {
+	        const scope = new TemplateScope();
+	        super(component, null, scope, info);
+	        this.scope = scope;
+	        this.children = map_children(component, this, scope, info.children);
+	    }
+	}
+
+	// This file is automatically generated
+	var internal_exports = new Set(["create_animation", "fix_position", "handle_promise", "append", "insert", "detach", "detach_between", "detach_before", "detach_after", "destroy_each", "element", "object_without_properties", "svg_element", "text", "space", "empty", "listen", "prevent_default", "stop_propagation", "attr", "set_attributes", "set_custom_element_data", "xlink_attr", "get_binding_group_value", "to_number", "time_ranges_to_array", "children", "claim_element", "claim_text", "set_data", "set_input_type", "set_style", "select_option", "select_options", "select_value", "select_multiple_value", "add_resize_listener", "toggle_class", "custom_event", "destroy_block", "outro_and_destroy_block", "fix_and_outro_and_destroy_block", "update_keyed_each", "measure", "current_component", "set_current_component", "beforeUpdate", "onMount", "afterUpdate", "onDestroy", "createEventDispatcher", "setContext", "getContext", "bubble", "clear_loops", "loop", "dirty_components", "intros", "schedule_update", "tick", "add_binding_callback", "add_render_callback", "add_flush_callback", "flush", "get_spread_update", "invalid_attribute_name_character", "spread", "escaped", "escape", "each", "missing_component", "validate_component", "debug", "create_ssr_component", "get_store_value", "group_outros", "check_outros", "on_outro", "create_in_transition", "create_out_transition", "create_bidirectional_transition", "noop", "identity", "assign", "is_promise", "add_location", "run", "blank_object", "run_all", "is_function", "safe_not_equal", "not_equal", "validate_store", "subscribe", "create_slot", "get_slot_context", "get_slot_changes", "exclude_internal_props", "now", "raf", "set_now", "set_raf", "bind", "mount_component", "init", "SvelteElement", "SvelteComponent", "SvelteComponentDev"]);
+
+	function remove_indentation(code, node) {
+	    const indent = code.getIndentString();
+	    const pattern = new RegExp(`^${indent}`, 'gm');
+	    const excluded = [];
+	    walk(node, {
+	        enter(node) {
+	            if (node.type === 'TemplateElement') {
+	                excluded.push(node);
+	            }
+	        }
+	    });
+	    const str = code.original.slice(node.start, node.end);
+	    let match;
+	    while (match = pattern.exec(str)) {
+	        const index = node.start + match.index;
+	        while (excluded[0] && excluded[0].end < index)
+	            excluded.shift();
+	        if (excluded[0] && excluded[0].start < index)
+	            continue;
+	        code.remove(index, index + indent.length);
+	    }
+	}
+	function add_indentation(code, node, levels = 1) {
+	    const base_indent = code.getIndentString();
+	    const indent = repeat(base_indent, levels);
+	    const pattern = /\n/gm;
+	    const excluded = [];
+	    walk(node, {
+	        enter(node) {
+	            if (node.type === 'TemplateElement') {
+	                excluded.push(node);
+	            }
+	        }
+	    });
+	    const str = code.original.slice(node.start, node.end);
+	    let match;
+	    while (match = pattern.exec(str)) {
+	        const index = node.start + match.index;
+	        while (excluded[0] && excluded[0].end < index)
+	            excluded.shift();
+	        if (excluded[0] && excluded[0].start < index)
+	            continue;
+	        code.appendLeft(index + 1, indent);
+	    }
+	}
+
+	// We need to tell estree-walker that it should always
+	// look for an `else` block, otherwise it might get
+	// the wrong idea about the shape of each/if blocks
+	childKeys.EachBlock = childKeys.IfBlock = ['children', 'else'];
+	childKeys.Attribute = ['value'];
+	childKeys.ExportNamedDeclaration = ['declaration', 'specifiers'];
+	function remove_node(code, start, end, body, node) {
+	    const i = body.indexOf(node);
+	    if (i === -1)
+	        throw new Error('node not in list');
+	    let a;
+	    let b;
+	    if (body.length === 1) {
+	        // remove everything, leave {}
+	        a = start;
+	        b = end;
+	    }
+	    else if (i === 0) {
+	        // remove everything before second node, including comments
+	        a = start;
+	        while (/\s/.test(code.original[a]))
+	            a += 1;
+	        b = body[i].end;
+	        while (/[\s,]/.test(code.original[b]))
+	            b += 1;
+	    }
+	    else {
+	        // remove the end of the previous node to the end of this one
+	        a = body[i - 1].end;
+	        b = node.end;
+	    }
+	    code.remove(a, b);
+	    return;
+	}
+	class Component {
+	    constructor(ast, source, name, compile_options, stats, warnings) {
+	        this.vars = [];
+	        this.var_lookup = new Map();
+	        this.imports = [];
+	        this.hoistable_nodes = new Set();
+	        this.node_for_declaration = new Map();
+	        this.partly_hoisted = [];
+	        this.fully_hoisted = [];
+	        this.reactive_declarations = [];
+	        this.reactive_declaration_nodes = new Set();
+	        this.has_reactive_assignments = false;
+	        this.injected_reactive_declaration_vars = new Set();
+	        this.helpers = new Set();
+	        this.indirect_dependencies = new Map();
+	        this.aliases = new Map();
+	        this.used_names = new Set();
+	        this.globally_used_names = new Set();
+	        this.slots = new Map();
+	        this.slot_outlets = new Set();
+	        this.name = name;
+	        this.stats = stats;
+	        this.warnings = warnings;
+	        this.ast = ast;
+	        this.source = source;
+	        this.compile_options = compile_options;
+	        this.file = compile_options.filename && (typeof process !== 'undefined' ? compile_options.filename.replace(process.cwd(), '').replace(/^[\/\\]/, '') : compile_options.filename);
+	        this.locate = getLocator(this.source);
+	        this.code = new MagicString(source);
+	        // styles
+	        this.stylesheet = new Stylesheet(source, ast, compile_options.filename, compile_options.dev);
+	        this.stylesheet.validate(this);
+	        this.component_options = process_component_options(this, this.ast.html.children);
+	        this.namespace = namespaces[this.component_options.namespace] || this.component_options.namespace;
+	        if (compile_options.customElement) {
+	            if (this.component_options.tag === undefined && compile_options.tag === undefined) {
+	                const svelteOptions = ast.html.children.find(child => child.name === 'svelte:options') || { start: 0, end: 0 };
+	                this.warn(svelteOptions, {
+	                    code: 'custom-element-no-tag',
+	                    message: `No custom element 'tag' option was specified. To automatically register a custom element, specify a name with a hyphen in it, e.g. <svelte:options tag="my-thing"/>. To hide this warning, use <svelte:options tag={null}/>`
+	                });
+	            }
+	            this.tag = this.component_options.tag || compile_options.tag;
+	        }
+	        else {
+	            this.tag = this.name;
+	        }
+	        this.walk_module_js();
+	        this.walk_instance_js_pre_template();
+	        this.fragment = new Fragment(this, ast.html);
+	        this.name = this.get_unique_name(name);
+	        this.walk_instance_js_post_template();
+	        if (!compile_options.customElement)
+	            this.stylesheet.reify();
+	        this.stylesheet.warn_on_unused_selectors(this);
+	    }
+	    add_var(variable) {
+	        this.vars.push(variable);
+	        this.var_lookup.set(variable.name, variable);
+	    }
+	    add_reference(name) {
+	        const variable = this.var_lookup.get(name);
+	        if (variable) {
+	            variable.referenced = true;
+	        }
+	        else if (name === '$$props') {
+	            this.add_var({
+	                name,
+	                injected: true,
+	                referenced: true
+	            });
+	        }
+	        else if (name[0] === '$') {
+	            this.add_var({
+	                name,
+	                injected: true,
+	                referenced: true,
+	                mutated: true,
+	                writable: true
+	            });
+	            const subscribable_name = name.slice(1);
+	            this.add_reference(subscribable_name);
+	            const variable = this.var_lookup.get(subscribable_name);
+	            if (variable)
+	                variable.subscribable = true;
+	        }
+	        else {
+	            this.used_names.add(name);
+	        }
+	    }
+	    add_sourcemap_locations(node) {
+	        walk(node, {
+	            enter: (node) => {
+	                this.code.addSourcemapLocation(node.start);
+	                this.code.addSourcemapLocation(node.end);
+	            },
+	        });
+	    }
+	    alias(name) {
+	        if (!this.aliases.has(name)) {
+	            this.aliases.set(name, this.get_unique_name(name));
+	        }
+	        return this.aliases.get(name);
+	    }
+	    helper(name) {
+	        this.helpers.add(name);
+	        return this.alias(name);
+	    }
+	    generate(result) {
+	        let js = null;
+	        let css = null;
+	        if (result) {
+	            const { compile_options, name } = this;
+	            const { format = 'esm' } = compile_options;
+	            const banner = `/* ${this.file ? `${this.file} ` : ``}generated by Svelte v${"3.4.4"} */`;
+	            result = result
+	                .replace(/__svelte:self__/g, this.name)
+	                .replace(compile_options.generate === 'ssr' ? /(@+|#+)(\w*(?:-\w*)?)/g : /(@+)(\w*(?:-\w*)?)/g, (match, sigil, name) => {
+	                if (sigil === '@') {
+	                    if (internal_exports.has(name)) {
+	                        if (compile_options.dev && internal_exports.has(`${name}Dev`))
+	                            name = `${name}Dev`;
+	                        this.helpers.add(name);
+	                    }
+	                    return this.alias(name);
+	                }
+	                return sigil.slice(1) + name;
+	            });
+	            const imported_helpers = Array.from(this.helpers)
+	                .sort()
+	                .map(name => {
+	                const alias = this.alias(name);
+	                return { name, alias };
+	            });
+	            const module = create_module(result, format, name, banner, compile_options.sveltePath, imported_helpers, this.imports, this.vars.filter(variable => variable.module && variable.export_name).map(variable => ({
+	                name: variable.name,
+	                as: variable.export_name
+	            })), this.source);
+	            const parts = module.split('✂]');
+	            const final_chunk = parts.pop();
+	            const compiled = new Bundle({ separator: '' });
+	            function add_string(str) {
+	                compiled.addSource({
+	                    content: new MagicString(str),
+	                });
+	            }
+	            const { filename } = compile_options;
+	            // special case — the source file doesn't actually get used anywhere. we need
+	            // to add an empty file to populate map.sources and map.sourcesContent
+	            if (!parts.length) {
+	                compiled.addSource({
+	                    filename,
+	                    content: new MagicString(this.source).remove(0, this.source.length),
+	                });
+	            }
+	            const pattern = /\[✂(\d+)-(\d+)$/;
+	            parts.forEach((str) => {
+	                const chunk = str.replace(pattern, '');
+	                if (chunk)
+	                    add_string(chunk);
+	                const match = pattern.exec(str);
+	                const snippet = this.code.snip(+match[1], +match[2]);
+	                compiled.addSource({
+	                    filename,
+	                    content: snippet,
+	                });
+	            });
+	            add_string(final_chunk);
+	            css = compile_options.customElement ?
+	                { code: null, map: null } :
+	                this.stylesheet.render(compile_options.cssOutputFilename, true);
+	            js = {
+	                code: compiled.toString(),
+	                map: compiled.generateMap({
+	                    includeContent: true,
+	                    file: compile_options.outputFilename,
+	                })
+	            };
+	        }
+	        return {
+	            js,
+	            css,
+	            ast: this.ast,
+	            warnings: this.warnings,
+	            vars: this.vars.filter(v => !v.global && !v.internal).map(v => ({
+	                name: v.name,
+	                export_name: v.export_name || null,
+	                injected: v.injected || false,
+	                module: v.module || false,
+	                mutated: v.mutated || false,
+	                reassigned: v.reassigned || false,
+	                referenced: v.referenced || false,
+	                writable: v.writable || false
+	            })),
+	            stats: this.stats.render()
+	        };
+	    }
+	    get_unique_name(name) {
+	        if (test)
+	            name = `${name}$`;
+	        let alias = name;
+	        for (let i = 1; reserved.has(alias) ||
+	            this.var_lookup.has(alias) ||
+	            this.used_names.has(alias) ||
+	            this.globally_used_names.has(alias); alias = `${name}_${i++}`)
+	            ;
+	        this.used_names.add(alias);
+	        return alias;
+	    }
+	    get_unique_name_maker() {
+	        const local_used_names = new Set();
+	        function add(name) {
+	            local_used_names.add(name);
+	        }
+	        reserved.forEach(add);
+	        internal_exports.forEach(add);
+	        this.var_lookup.forEach((value, key) => add(key));
+	        return (name) => {
+	            if (test)
+	                name = `${name}$`;
+	            let alias = name;
+	            for (let i = 1; this.used_names.has(alias) ||
+	                local_used_names.has(alias); alias = `${name}_${i++}`)
+	                ;
+	            local_used_names.add(alias);
+	            this.globally_used_names.add(alias);
+	            return alias;
+	        };
+	    }
+	    error(pos, e) {
+	        error$1(e.message, {
+	            name: 'ValidationError',
+	            code: e.code,
+	            source: this.source,
+	            start: pos.start,
+	            end: pos.end,
+	            filename: this.compile_options.filename
+	        });
+	    }
+	    warn(pos, warning) {
+	        if (!this.locator) {
+	            this.locator = getLocator(this.source, { offsetLine: 1 });
+	        }
+	        const start = this.locator(pos.start);
+	        const end = this.locator(pos.end);
+	        const frame = get_code_frame(this.source, start.line - 1, start.column);
+	        this.warnings.push({
+	            code: warning.code,
+	            message: warning.message,
+	            frame,
+	            start,
+	            end,
+	            pos: pos.start,
+	            filename: this.compile_options.filename,
+	            toString: () => `${warning.message} (${start.line + 1}:${start.column})\n${frame}`,
+	        });
+	    }
+	    extract_imports(content) {
+	        const { code } = this;
+	        content.body.forEach(node => {
+	            if (node.type === 'ImportDeclaration') {
+	                // imports need to be hoisted out of the IIFE
+	                remove_node(code, content.start, content.end, content.body, node);
+	                this.imports.push(node);
+	            }
+	        });
+	    }
+	    extract_exports(content) {
+	        const { code } = this;
+	        content.body.forEach(node => {
+	            if (node.type === 'ExportDefaultDeclaration') {
+	                this.error(node, {
+	                    code: `default-export`,
+	                    message: `A component cannot have a default export`
+	                });
+	            }
+	            if (node.type === 'ExportNamedDeclaration') {
+	                if (node.source) {
+	                    this.error(node, {
+	                        code: `not-implemented`,
+	                        message: `A component currently cannot have an export ... from`
+	                    });
+	                }
+	                if (node.declaration) {
+	                    if (node.declaration.type === 'VariableDeclaration') {
+	                        node.declaration.declarations.forEach(declarator => {
+	                            extract_names(declarator.id).forEach(name => {
+	                                const variable = this.var_lookup.get(name);
+	                                variable.export_name = name;
+	                            });
+	                        });
+	                    }
+	                    else {
+	                        const { name } = node.declaration.id;
+	                        const variable = this.var_lookup.get(name);
+	                        variable.export_name = name;
+	                    }
+	                    code.remove(node.start, node.declaration.start);
+	                }
+	                else {
+	                    remove_node(code, content.start, content.end, content.body, node);
+	                    node.specifiers.forEach(specifier => {
+	                        const variable = this.var_lookup.get(specifier.local.name);
+	                        if (variable) {
+	                            variable.export_name = specifier.exported.name;
+	                        }
+	                    });
+	                }
+	            }
+	        });
+	    }
+	    extract_javascript(script) {
+	        const nodes_to_include = script.content.body.filter(node => {
+	            if (this.hoistable_nodes.has(node))
+	                return false;
+	            if (this.reactive_declaration_nodes.has(node))
+	                return false;
+	            if (node.type === 'ImportDeclaration')
+	                return false;
+	            if (node.type === 'ExportDeclaration' && node.specifiers.length > 0)
+	                return false;
+	            return true;
+	        });
+	        if (nodes_to_include.length === 0)
+	            return null;
+	        let a = script.content.start;
+	        while (/\s/.test(this.source[a]))
+	            a += 1;
+	        let b = a;
+	        let result = '';
+	        script.content.body.forEach((node, i) => {
+	            if (this.hoistable_nodes.has(node) || this.reactive_declaration_nodes.has(node)) {
+	                if (a !== b)
+	                    result += `[✂${a}-${b}✂]`;
+	                a = node.end;
+	            }
+	            b = node.end;
+	        });
+	        // while (/\s/.test(this.source[a - 1])) a -= 1;
+	        b = script.content.end;
+	        while (/\s/.test(this.source[b - 1]))
+	            b -= 1;
+	        if (a < b)
+	            result += `[✂${a}-${b}✂]`;
+	        return result || null;
+	    }
+	    walk_module_js() {
+	        const component = this;
+	        const script = this.ast.module;
+	        if (!script)
+	            return;
+	        walk(script.content, {
+	            enter(node) {
+	                if (node.type === 'LabeledStatement' && node.label.name === '$') {
+	                    component.warn(node, {
+	                        code: 'module-script-reactive-declaration',
+	                        message: '$: has no effect in a module script'
+	                    });
+	                }
+	            }
+	        });
+	        this.add_sourcemap_locations(script.content);
+	        let { scope, globals: globals$$1 } = create_scopes(script.content);
+	        this.module_scope = scope;
+	        scope.declarations.forEach((node, name) => {
+	            if (name[0] === '$') {
+	                this.error(node, {
+	                    code: 'illegal-declaration',
+	                    message: `The $ prefix is reserved, and cannot be used for variable and import names`
+	                });
+	            }
+	            this.add_var({
+	                name,
+	                module: true,
+	                hoistable: true,
+	                writable: node.kind === 'var' || node.kind === 'let'
+	            });
+	        });
+	        globals$$1.forEach((node, name) => {
+	            if (name[0] === '$') {
+	                this.error(node, {
+	                    code: 'illegal-subscription',
+	                    message: `Cannot reference store value inside <script context="module">`
+	                });
+	            }
+	            else {
+	                this.add_var({
+	                    name,
+	                    global: true
+	                });
+	            }
+	        });
+	        this.extract_imports(script.content);
+	        this.extract_exports(script.content);
+	        remove_indentation(this.code, script.content);
+	        this.module_javascript = this.extract_javascript(script);
+	    }
+	    walk_instance_js_pre_template() {
+	        const script = this.ast.instance;
+	        if (!script)
+	            return;
+	        this.add_sourcemap_locations(script.content);
+	        // inject vars for reactive declarations
+	        script.content.body.forEach(node => {
+	            if (node.type !== 'LabeledStatement')
+	                return;
+	            if (node.body.type !== 'ExpressionStatement')
+	                return;
+	            const expression = unwrap_parens(node.body.expression);
+	            if (expression.type !== 'AssignmentExpression')
+	                return;
+	            extract_names(expression.left).forEach(name => {
+	                if (!this.var_lookup.has(name) && name[0] !== '$') {
+	                    this.injected_reactive_declaration_vars.add(name);
+	                }
+	            });
+	        });
+	        let { scope: instance_scope, map, globals: globals$$1 } = create_scopes(script.content);
+	        this.instance_scope = instance_scope;
+	        this.instance_scope_map = map;
+	        instance_scope.declarations.forEach((node, name) => {
+	            if (name[0] === '$') {
+	                this.error(node, {
+	                    code: 'illegal-declaration',
+	                    message: `The $ prefix is reserved, and cannot be used for variable and import names`
+	                });
+	            }
+	            this.add_var({
+	                name,
+	                initialised: instance_scope.initialised_declarations.has(name),
+	                hoistable: /^Import/.test(node.type),
+	                writable: node.kind === 'var' || node.kind === 'let'
+	            });
+	            this.node_for_declaration.set(name, node);
+	        });
+	        globals$$1.forEach((node, name) => {
+	            if (this.var_lookup.has(name))
+	                return;
+	            if (this.injected_reactive_declaration_vars.has(name)) {
+	                this.add_var({
+	                    name,
+	                    injected: true,
+	                    writable: true,
+	                    reassigned: true,
+	                    initialised: true
+	                });
+	            }
+	            else if (name === '$$props') {
+	                this.add_var({
+	                    name,
+	                    injected: true
+	                });
+	            }
+	            else if (name[0] === '$') {
+	                this.add_var({
+	                    name,
+	                    injected: true,
+	                    mutated: true,
+	                    writable: true
+	                });
+	                this.add_reference(name.slice(1));
+	                const variable = this.var_lookup.get(name.slice(1));
+	                if (variable)
+	                    variable.subscribable = true;
+	            }
+	            else {
+	                this.add_var({
+	                    name,
+	                    global: true
+	                });
+	            }
+	        });
+	        this.extract_imports(script.content);
+	        this.extract_exports(script.content);
+	        this.track_mutations();
+	    }
+	    walk_instance_js_post_template() {
+	        const script = this.ast.instance;
+	        if (!script)
+	            return;
+	        this.hoist_instance_declarations();
+	        this.extract_reactive_declarations();
+	        this.extract_reactive_store_references();
+	        this.javascript = this.extract_javascript(script);
+	    }
+	    // TODO merge this with other walks that are independent
+	    track_mutations() {
+	        const component = this;
+	        const { instance_scope, instance_scope_map: map } = this;
+	        let scope = instance_scope;
+	        walk(this.ast.instance.content, {
+	            enter(node, parent) {
+	                if (map.has(node)) {
+	                    scope = map.get(node);
+	                }
+	                let names;
+	                let deep = false;
+	                if (node.type === 'AssignmentExpression') {
+	                    deep = node.left.type === 'MemberExpression';
+	                    names = deep
+	                        ? [get_object(node.left).name]
+	                        : extract_names(node.left);
+	                }
+	                else if (node.type === 'UpdateExpression') {
+	                    names = [get_object(node.argument).name];
+	                }
+	                if (names) {
+	                    names.forEach(name => {
+	                        if (scope.find_owner(name) === instance_scope) {
+	                            const variable = component.var_lookup.get(name);
+	                            variable[deep ? 'mutated' : 'reassigned'] = true;
+	                        }
+	                    });
+	                }
+	            },
+	            leave(node) {
+	                if (map.has(node)) {
+	                    scope = scope.parent;
+	                }
+	            }
+	        });
+	    }
+	    extract_reactive_store_references() {
+	        // TODO this pattern happens a lot... can we abstract it
+	        // (or better still, do fewer AST walks)?
+	        const component = this;
+	        let { instance_scope: scope, instance_scope_map: map } = this;
+	        walk(this.ast.instance.content, {
+	            enter(node, parent) {
+	                if (map.has(node)) {
+	                    scope = map.get(node);
+	                }
+	                if (node.type === 'LabeledStatement' && node.label.name === '$' && parent.type !== 'Program') {
+	                    component.warn(node, {
+	                        code: 'non-top-level-reactive-declaration',
+	                        message: '$: has no effect outside of the top-level'
+	                    });
+	                }
+	                if (isReference(node, parent)) {
+	                    const object = get_object(node);
+	                    const { name } = object;
+	                    if (name[0] === '$' && !scope.has(name)) {
+	                        component.warn_if_undefined(name, object, null);
+	                    }
+	                }
+	            },
+	            leave(node) {
+	                if (map.has(node)) {
+	                    scope = scope.parent;
+	                }
+	            }
+	        });
+	    }
+	    invalidate(name, value) {
+	        const variable = this.var_lookup.get(name);
+	        if (variable && (variable.subscribable && variable.reassigned)) {
+	            return `$$subscribe_${name}(), $$invalidate('${name}', ${value || name})`;
+	        }
+	        if (name[0] === '$' && name[1] !== '$') {
+	            return `${name.slice(1)}.set(${name})`;
+	        }
+	        if (variable && !variable.referenced && !variable.is_reactive_dependency && !variable.export_name && !name.startsWith('$$')) {
+	            return value || name;
+	        }
+	        if (value) {
+	            return `$$invalidate('${name}', ${value})`;
+	        }
+	        // if this is a reactive declaration, invalidate dependencies recursively
+	        const deps = new Set([name]);
+	        deps.forEach(name => {
+	            const reactive_declarations = this.reactive_declarations.filter(x => x.assignees.has(name));
+	            reactive_declarations.forEach(declaration => {
+	                declaration.dependencies.forEach(name => {
+	                    deps.add(name);
+	                });
+	            });
+	        });
+	        return Array.from(deps).map(n => `$$invalidate('${n}', ${n})`).join(', ');
+	    }
+	    rewrite_props(get_insert) {
+	        const component = this;
+	        const { code, instance_scope, instance_scope_map: map } = this;
+	        let scope = instance_scope;
+	        const coalesced_declarations = [];
+	        let current_group;
+	        walk(this.ast.instance.content, {
+	            enter(node, parent) {
+	                if (/Function/.test(node.type)) {
+	                    current_group = null;
+	                    return this.skip();
+	                }
+	                if (map.has(node)) {
+	                    scope = map.get(node);
+	                }
+	                if (node.type === 'VariableDeclaration') {
+	                    if (node.kind === 'var' || scope === instance_scope) {
+	                        node.declarations.forEach((declarator, i) => {
+	                            const next = node.declarations[i + 1];
+	                            if (declarator.id.type !== 'Identifier') {
+	                                const inserts = [];
+	                                extract_names(declarator.id).forEach(name => {
+	                                    const variable = component.var_lookup.get(name);
+	                                    if (variable.export_name) {
+	                                        component.error(declarator, {
+	                                            code: 'destructured-prop',
+	                                            message: `Cannot declare props in destructured declaration`
+	                                        });
+	                                    }
+	                                    if (variable.subscribable) {
+	                                        inserts.push(get_insert(variable));
+	                                    }
+	                                });
+	                                if (inserts.length > 0) {
+	                                    if (next) {
+	                                        code.overwrite(declarator.end, next.start, `; ${inserts.join('; ')}; ${node.kind} `);
+	                                    }
+	                                    else {
+	                                        code.appendLeft(declarator.end, `; ${inserts.join('; ')}`);
+	                                    }
+	                                }
+	                                return;
+	                            }
+	                            const { name } = declarator.id;
+	                            const variable = component.var_lookup.get(name);
+	                            if (variable.export_name) {
+	                                if (current_group && current_group.kind !== node.kind) {
+	                                    current_group = null;
+	                                }
+	                                const insert = variable.subscribable
+	                                    ? get_insert(variable)
+	                                    : null;
+	                                if (!current_group || (current_group.insert && insert)) {
+	                                    current_group = { kind: node.kind, declarators: [declarator], insert };
+	                                    coalesced_declarations.push(current_group);
+	                                }
+	                                else if (insert) {
+	                                    current_group.insert = insert;
+	                                    current_group.declarators.push(declarator);
+	                                }
+	                                else {
+	                                    current_group.declarators.push(declarator);
+	                                }
+	                                if (variable.writable && variable.name !== variable.export_name) {
+	                                    code.prependRight(declarator.id.start, `${variable.export_name}: `);
+	                                }
+	                                if (next) {
+	                                    const next_variable = component.var_lookup.get(next.id.name);
+	                                    const new_declaration = !next_variable.export_name
+	                                        || (current_group.insert && next_variable.subscribable);
+	                                    if (new_declaration) {
+	                                        code.overwrite(declarator.end, next.start, ` ${node.kind} `);
+	                                    }
+	                                }
+	                            }
+	                            else {
+	                                current_group = null;
+	                                if (variable.subscribable) {
+	                                    let insert = get_insert(variable);
+	                                    if (next) {
+	                                        code.overwrite(declarator.end, next.start, `; ${insert}; ${node.kind} `);
+	                                    }
+	                                    else {
+	                                        code.appendLeft(declarator.end, `; ${insert}`);
+	                                    }
+	                                }
+	                            }
+	                        });
+	                    }
+	                }
+	                else {
+	                    if (node.type !== 'ExportNamedDeclaration') {
+	                        if (!parent || parent.type === 'Program')
+	                            current_group = null;
+	                    }
+	                }
+	            },
+	            leave(node) {
+	                if (map.has(node)) {
+	                    scope = scope.parent;
+	                }
+	            }
+	        });
+	        coalesced_declarations.forEach(group => {
+	            const writable = group.kind === 'var' || group.kind === 'let';
+	            let c = 0;
+	            let combining = false;
+	            group.declarators.forEach(declarator => {
+	                const { id } = declarator;
+	                if (combining) {
+	                    code.overwrite(c, id.start, ', ');
+	                }
+	                else {
+	                    if (writable)
+	                        code.appendLeft(id.start, '{ ');
+	                    combining = true;
+	                }
+	                c = declarator.end;
+	            });
+	            if (combining) {
+	                const insert = group.insert
+	                    ? `; ${group.insert}`
+	                    : '';
+	                const suffix = `${writable ? ` } = $$props` : ``}${insert}` + (code.original[c] === ';' ? `` : `;`);
+	                code.appendLeft(c, suffix);
+	            }
+	        });
+	    }
+	    hoist_instance_declarations() {
+	        // we can safely hoist variable declarations that are
+	        // initialised to literals, and functions that don't
+	        // reference instance variables other than other
+	        // hoistable functions. TODO others?
+	        const { hoistable_nodes, var_lookup, injected_reactive_declaration_vars } = this;
+	        const top_level_function_declarations = new Map();
+	        this.ast.instance.content.body.forEach(node => {
+	            if (node.type === 'VariableDeclaration') {
+	                const all_hoistable = node.declarations.every(d => {
+	                    if (!d.init)
+	                        return false;
+	                    if (d.init.type !== 'Literal')
+	                        return false;
+	                    const v = this.var_lookup.get(d.id.name);
+	                    if (v.reassigned)
+	                        return false;
+	                    if (v.export_name)
+	                        return false;
+	                    if (this.var_lookup.get(d.id.name).reassigned)
+	                        return false;
+	                    if (this.vars.find(variable => variable.name === d.id.name && variable.module))
+	                        return false;
+	                    return true;
+	                });
+	                if (all_hoistable) {
+	                    node.declarations.forEach(d => {
+	                        const variable = this.var_lookup.get(d.id.name);
+	                        variable.hoistable = true;
+	                    });
+	                    hoistable_nodes.add(node);
+	                    this.fully_hoisted.push(`[✂${node.start}-${node.end}✂]`);
+	                }
+	            }
+	            if (node.type === 'ExportNamedDeclaration' && node.declaration && node.declaration.type === 'FunctionDeclaration') {
+	                top_level_function_declarations.set(node.declaration.id.name, node);
+	            }
+	            if (node.type === 'FunctionDeclaration') {
+	                top_level_function_declarations.set(node.id.name, node);
+	            }
+	        });
+	        const checked = new Set();
+	        let walking = new Set();
+	        const is_hoistable = fn_declaration => {
+	            if (fn_declaration.type === 'ExportNamedDeclaration') {
+	                fn_declaration = fn_declaration.declaration;
+	            }
+	            const instance_scope = this.instance_scope;
+	            let scope = this.instance_scope;
+	            let map = this.instance_scope_map;
+	            let hoistable = true;
+	            // handle cycles
+	            walking.add(fn_declaration);
+	            walk(fn_declaration, {
+	                enter(node, parent) {
+	                    if (map.has(node)) {
+	                        scope = map.get(node);
+	                    }
+	                    if (isReference(node, parent)) {
+	                        const { name } = flatten_reference(node);
+	                        const owner = scope.find_owner(name);
+	                        if (node.type === 'Identifier' && injected_reactive_declaration_vars.has(name)) {
+	                            hoistable = false;
+	                        }
+	                        else if (name[0] === '$' && !owner) {
+	                            hoistable = false;
+	                        }
+	                        else if (owner === instance_scope) {
+	                            if (name === fn_declaration.id.name)
+	                                return;
+	                            const variable = var_lookup.get(name);
+	                            if (variable.hoistable)
+	                                return;
+	                            if (top_level_function_declarations.has(name)) {
+	                                const other_declaration = top_level_function_declarations.get(name);
+	                                if (walking.has(other_declaration)) {
+	                                    hoistable = false;
+	                                }
+	                                else if (other_declaration.type === 'ExportNamedDeclaration' && walking.has(other_declaration.declaration)) {
+	                                    hoistable = false;
+	                                }
+	                                else if (!is_hoistable(other_declaration)) {
+	                                    hoistable = false;
+	                                }
+	                            }
+	                            else {
+	                                hoistable = false;
+	                            }
+	                        }
+	                        this.skip();
+	                    }
+	                },
+	                leave(node) {
+	                    if (map.has(node)) {
+	                        scope = scope.parent;
+	                    }
+	                }
+	            });
+	            checked.add(fn_declaration);
+	            walking.delete(fn_declaration);
+	            return hoistable;
+	        };
+	        for (const [name, node] of top_level_function_declarations) {
+	            if (is_hoistable(node)) {
+	                const variable = this.var_lookup.get(name);
+	                variable.hoistable = true;
+	                hoistable_nodes.add(node);
+	                remove_indentation(this.code, node);
+	                this.fully_hoisted.push(`[✂${node.start}-${node.end}✂]`);
+	            }
+	        }
+	    }
+	    extract_reactive_declarations() {
+	        const component = this;
+	        const unsorted_reactive_declarations = [];
+	        this.ast.instance.content.body.forEach(node => {
+	            if (node.type === 'LabeledStatement' && node.label.name === '$') {
+	                this.reactive_declaration_nodes.add(node);
+	                const assignees = new Set();
+	                const assignee_nodes = new Set();
+	                const dependencies = new Set();
+	                let scope = this.instance_scope;
+	                let map = this.instance_scope_map;
+	                walk(node.body, {
+	                    enter(node, parent) {
+	                        if (map.has(node)) {
+	                            scope = map.get(node);
+	                        }
+	                        if (node.type === 'AssignmentExpression') {
+	                            extract_identifiers(get_object(node.left)).forEach(node => {
+	                                assignee_nodes.add(node);
+	                                assignees.add(node.name);
+	                            });
+	                        }
+	                        else if (node.type === 'UpdateExpression') {
+	                            const identifier = get_object(node.argument);
+	                            assignees.add(identifier.name);
+	                        }
+	                        else if (isReference(node, parent)) {
+	                            const identifier = get_object(node);
+	                            if (!assignee_nodes.has(identifier)) {
+	                                const { name } = identifier;
+	                                const owner = scope.find_owner(name);
+	                                const variable = component.var_lookup.get(name);
+	                                if (variable)
+	                                    variable.is_reactive_dependency = true;
+	                                const is_writable_or_mutated = variable && (variable.writable || variable.mutated);
+	                                if ((!owner || owner === component.instance_scope) &&
+	                                    (name[0] === '$' || is_writable_or_mutated)) {
+	                                    dependencies.add(name);
+	                                }
+	                            }
+	                            this.skip();
+	                        }
+	                    },
+	                    leave(node) {
+	                        if (map.has(node)) {
+	                            scope = scope.parent;
+	                        }
+	                    }
+	                });
+	                add_indentation(this.code, node.body, 2);
+	                const expression = node.body.expression && unwrap_parens(node.body.expression);
+	                const declaration = expression && expression.left;
+	                unsorted_reactive_declarations.push({ assignees, dependencies, node, declaration });
+	            }
+	        });
+	        const lookup = new Map();
+	        let seen;
+	        unsorted_reactive_declarations.forEach(declaration => {
+	            declaration.assignees.forEach(name => {
+	                if (!lookup.has(name)) {
+	                    lookup.set(name, []);
+	                }
+	                // TODO warn or error if a name is assigned to in
+	                // multiple reactive declarations?
+	                lookup.get(name).push(declaration);
+	            });
+	        });
+	        const add_declaration = declaration => {
+	            if (seen.has(declaration)) {
+	                this.error(declaration.node, {
+	                    code: 'cyclical-reactive-declaration',
+	                    message: 'Cyclical dependency detected'
+	                });
+	            }
+	            if (this.reactive_declarations.indexOf(declaration) !== -1) {
+	                return;
+	            }
+	            seen.add(declaration);
+	            declaration.dependencies.forEach(name => {
+	                if (declaration.assignees.has(name))
+	                    return;
+	                const earlier_declarations = lookup.get(name);
+	                if (earlier_declarations)
+	                    earlier_declarations.forEach(declaration => {
+	                        add_declaration(declaration);
+	                    });
+	            });
+	            this.reactive_declarations.push(declaration);
+	        };
+	        unsorted_reactive_declarations.forEach(declaration => {
+	            seen = new Set();
+	            add_declaration(declaration);
+	        });
+	    }
+	    qualify(name) {
+	        if (name === `$$props`)
+	            return `ctx.$$props`;
+	        const variable = this.var_lookup.get(name);
+	        if (!variable)
+	            return name;
+	        this.add_reference(name); // TODO we can probably remove most other occurrences of this
+	        if (variable.hoistable)
+	            return name;
+	        return `ctx.${name}`;
+	    }
+	    warn_if_undefined(name, node, template_scope) {
+	        if (name[0] === '$') {
+	            name = name.slice(1);
+	            this.has_reactive_assignments = true; // TODO does this belong here?
+	            if (name[0] === '$')
+	                return; // $$props
+	        }
+	        if (this.var_lookup.has(name) && !this.var_lookup.get(name).global)
+	            return;
+	        if (template_scope && template_scope.names.has(name))
+	            return;
+	        if (globals.has(name))
+	            return;
+	        let message = `'${name}' is not defined`;
+	        if (!this.ast.instance)
+	            message += `. Consider adding a <script> block with 'export let ${name}' to declare a prop`;
+	        this.warn(node, {
+	            code: 'missing-declaration',
+	            message
+	        });
+	    }
+	}
+	function process_component_options(component, nodes) {
+	    const component_options = {
+	        immutable: component.compile_options.immutable || false,
+	        accessors: 'accessors' in component.compile_options
+	            ? component.compile_options.accessors
+	            : !!component.compile_options.customElement,
+	        preserveWhitespace: !!component.compile_options.preserveWhitespace
+	    };
+	    const node = nodes.find(node => node.name === 'svelte:options');
+	    function get_value(attribute, code, message) {
+	        const { value } = attribute;
+	        const chunk = value[0];
+	        if (!chunk)
+	            return true;
+	        if (value.length > 1) {
+	            component.error(attribute, { code, message });
+	        }
+	        if (chunk.type === 'Text')
+	            return chunk.data;
+	        if (chunk.expression.type !== 'Literal') {
+	            component.error(attribute, { code, message });
+	        }
+	        return chunk.expression.value;
+	    }
+	    if (node) {
+	        node.attributes.forEach(attribute => {
+	            if (attribute.type === 'Attribute') {
+	                const { name } = attribute;
+	                switch (name) {
+	                    case 'tag': {
+	                        const code = 'invalid-tag-attribute';
+	                        const message = `'tag' must be a string literal`;
+	                        const tag = get_value(attribute, code, message);
+	                        if (typeof tag !== 'string' && tag !== null)
+	                            component.error(attribute, { code, message });
+	                        if (tag && !/^[a-zA-Z][a-zA-Z0-9]*-[a-zA-Z0-9-]+$/.test(tag)) {
+	                            component.error(attribute, {
+	                                code: `invalid-tag-property`,
+	                                message: `tag name must be two or more words joined by the '-' character`
+	                            });
+	                        }
+	                        component_options.tag = tag;
+	                        break;
+	                    }
+	                    case 'namespace': {
+	                        const code = 'invalid-namespace-attribute';
+	                        const message = `The 'namespace' attribute must be a string literal representing a valid namespace`;
+	                        const ns = get_value(attribute, code, message);
+	                        if (typeof ns !== 'string')
+	                            component.error(attribute, { code, message });
+	                        if (valid_namespaces.indexOf(ns) === -1) {
+	                            const match = fuzzymatch(ns, valid_namespaces);
+	                            if (match) {
+	                                component.error(attribute, {
+	                                    code: `invalid-namespace-property`,
+	                                    message: `Invalid namespace '${ns}' (did you mean '${match}'?)`
+	                                });
+	                            }
+	                            else {
+	                                component.error(attribute, {
+	                                    code: `invalid-namespace-property`,
+	                                    message: `Invalid namespace '${ns}'`
+	                                });
+	                            }
+	                        }
+	                        component_options.namespace = ns;
+	                        break;
+	                    }
+	                    case 'accessors':
+	                    case 'immutable':
+	                    case 'preserveWhitespace':
+	                        const code = `invalid-${name}-value`;
+	                        const message = `${name} attribute must be true or false`;
+	                        const value = get_value(attribute, code, message);
+	                        if (typeof value !== 'boolean')
+	                            component.error(attribute, { code, message });
+	                        component_options[name] = value;
+	                        break;
+	                    default:
+	                        component.error(attribute, {
+	                            code: `invalid-options-attribute`,
+	                            message: `<svelte:options> unknown attribute`
+	                        });
+	                }
+	            }
+	            else {
+	                component.error(attribute, {
+	                    code: `invalid-options-attribute`,
+	                    message: `<svelte:options> can only have static 'tag', 'namespace', 'accessors', 'immutable' and 'preserveWhitespace' attributes`
+	                });
+	            }
+	        });
+	    }
+	    return component_options;
+	}
+
+	const valid_options = [
+	    'format',
+	    'name',
+	    'filename',
+	    'generate',
+	    'outputFilename',
+	    'cssOutputFilename',
+	    'sveltePath',
+	    'dev',
+	    'accessors',
+	    'immutable',
+	    'hydratable',
+	    'legacy',
+	    'customElement',
+	    'tag',
+	    'css',
+	    'preserveComments',
+	    'preserveWhitespace'
+	];
+	function validate_options(options, warnings) {
+	    const { name, filename } = options;
+	    Object.keys(options).forEach(key => {
+	        if (valid_options.indexOf(key) === -1) {
+	            const match = fuzzymatch(key, valid_options);
+	            let message = `Unrecognized option '${key}'`;
+	            if (match)
+	                message += ` (did you mean '${match}'?)`;
+	            throw new Error(message);
+	        }
+	    });
+	    if (name && !/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(name)) {
+	        throw new Error(`options.name must be a valid identifier (got '${name}')`);
+	    }
+	    if (name && /^[a-z]/.test(name)) {
+	        const message = `options.name should be capitalised`;
+	        warnings.push({
+	            code: `options-lowercase-name`,
+	            message,
+	            filename,
+	            toString: () => message,
+	        });
+	    }
+	}
+	function get_name(filename) {
+	    if (!filename)
+	        return null;
+	    const parts = filename.split(/[\/\\]/);
+	    if (parts.length > 1 && /^index\.\w+/.test(parts[parts.length - 1])) {
+	        parts.pop();
+	    }
+	    const base = parts.pop()
+	        .replace(/\..+/, "")
+	        .replace(/[^a-zA-Z_$0-9]+/g, '_')
+	        .replace(/^_/, '')
+	        .replace(/_$/, '')
+	        .replace(/^(\d)/, '_$1');
+	    return base[0].toUpperCase() + base.slice(1);
+	}
+	function compile(source, options = {}) {
+	    options = assign({ generate: 'dom', dev: false }, options);
+	    const stats = new Stats();
+	    const warnings = [];
+	    let ast;
+	    validate_options(options, warnings);
+	    stats.start('parse');
+	    ast = parse$2(source, options);
+	    stats.stop('parse');
+	    stats.start('create component');
+	    const component = new Component(ast, source, options.name || get_name(options.filename) || 'Component', options, stats, warnings);
+	    stats.stop('create component');
+	    const js = options.generate === false
+	        ? null
+	        : options.generate === 'ssr'
+	            ? ssr(component, options)
+	            : dom(component, options);
+	    return component.generate(js);
+	}
+
+	/*! *****************************************************************************
+	Copyright (c) Microsoft Corporation. All rights reserved.
+	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
+	this file except in compliance with the License. You may obtain a copy of the
+	License at http://www.apache.org/licenses/LICENSE-2.0
+
+	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+	MERCHANTABLITY OR NON-INFRINGEMENT.
+
+	See the Apache Version 2.0 License for specific language governing permissions
+	and limitations under the License.
+	***************************************************************************** */
+
+	function __awaiter(thisArg, _arguments, P, generator) {
+	    return new (P || (P = Promise))(function (resolve, reject) {
+	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
+	        step((generator = generator.apply(thisArg, _arguments || [])).next());
+	    });
+	}
+
+	function parse_attribute_value(value) {
+	    return /^['"]/.test(value) ?
+	        value.slice(1, -1) :
+	        value;
+	}
+	function parse_attributes(str) {
+	    const attrs = {};
+	    str.split(/\s+/).filter(Boolean).forEach(attr => {
+	        const [name, value] = attr.split('=');
+	        attrs[name] = value ? parse_attribute_value(value) : true;
+	    });
+	    return attrs;
+	}
+	function replace_async(str, re, func) {
+	    return __awaiter(this, void 0, void 0, function* () {
+	        const replacements = [];
+	        str.replace(re, (...args) => {
+	            replacements.push(func(...args).then(res => ({
+	                offset: args[args.length - 2],
+	                length: args[0].length,
+	                replacement: res,
+	            })));
+	            return '';
+	        });
+	        let out = '';
+	        let last_end = 0;
+	        for (const { offset, length, replacement } of yield Promise.all(replacements)) {
+	            out += str.slice(last_end, offset) + replacement;
+	            last_end = offset + length;
+	        }
+	        out += str.slice(last_end);
+	        return out;
+	    });
+	}
+	function preprocess(source, preprocessor, options) {
+	    return __awaiter(this, void 0, void 0, function* () {
+	        // @ts-ignore todo: doublecheck
+	        const filename = (options && options.filename) || preprocessor.filename; // legacy
+	        const dependencies = [];
+	        const preprocessors = Array.isArray(preprocessor) ? preprocessor : [preprocessor];
+	        const markup = preprocessors.map(p => p.markup).filter(Boolean);
+	        const script = preprocessors.map(p => p.script).filter(Boolean);
+	        const style = preprocessors.map(p => p.style).filter(Boolean);
+	        for (const fn of markup) {
+	            const processed = yield fn({
+	                content: source,
+	                filename
+	            });
+	            if (processed && processed.dependencies)
+	                dependencies.push(...processed.dependencies);
+	            source = processed ? processed.code : source;
+	        }
+	        for (const fn of script) {
+	            source = yield replace_async(source, /<script(\s[^]*?)?>([^]*?)<\/script>/gi, (match, attributes = '', content) => __awaiter(this, void 0, void 0, function* () {
+	                const processed = yield fn({
+	                    content,
+	                    attributes: parse_attributes(attributes),
+	                    filename
+	                });
+	                if (processed && processed.dependencies)
+	                    dependencies.push(...processed.dependencies);
+	                return processed ? `<script${attributes}>${processed.code}</script>` : match;
+	            }));
+	        }
+	        for (const fn of style) {
+	            source = yield replace_async(source, /<style(\s[^]*?)?>([^]*?)<\/style>/gi, (match, attributes = '', content) => __awaiter(this, void 0, void 0, function* () {
+	                const processed = yield fn({
+	                    content,
+	                    attributes: parse_attributes(attributes),
+	                    filename
+	                });
+	                if (processed && processed.dependencies)
+	                    dependencies.push(...processed.dependencies);
+	                return processed ? `<style${attributes}>${processed.code}</style>` : match;
+	            }));
+	        }
+	        return {
+	            // TODO return separated output, in future version where svelte.compile supports it:
+	            // style: { code: styleCode, map: styleMap },
+	            // script { code: scriptCode, map: scriptMap },
+	            // markup { code: markupCode, map: markupMap },
+	            code: source,
+	            dependencies: [...new Set(dependencies)],
+	            toString() {
+	                return source;
+	            }
+	        };
+	    });
+	}
+
+	const VERSION = '3.4.4';
+
+	exports.VERSION = VERSION;
+	exports.compile = compile;
+	exports.parse = parse$2;
+	exports.preprocess = preprocess;
+	exports.walk = walk;
+
+	Object.defineProperty(exports, '__esModule', { value: true });
+
+}));
+//# sourceMappingURL=compiler.js.map
diff --git a/node_modules/svelte/compiler/svelte.js b/node_modules/svelte/compiler/svelte.js
deleted file mode 100644
index f3aba46..0000000
--- a/node_modules/svelte/compiler/svelte.js
+++ /dev/null
@@ -1,23103 +0,0 @@
-(function (global, factory) {
-	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
-	typeof define === 'function' && define.amd ? define(['exports'], factory) :
-	(factory((global.svelte = {})));
-}(this, (function (exports) { 'use strict';
-
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
-function __awaiter(thisArg, _arguments, P, generator) {
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-}
-
-// Reserved word lists for various dialects of the language
-
-var reservedWords = {
-  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
-  5: "class enum extends super const export import",
-  6: "enum",
-  strict: "implements interface let package private protected public static yield",
-  strictBind: "eval arguments"
-};
-
-// And the keywords
-
-var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
-
-var keywords = {
-  5: ecma5AndLessKeywords,
-  6: ecma5AndLessKeywords + " const class extends export import super"
-};
-
-var keywordRelationalOperator = /^in(stanceof)?$/;
-
-// ## Character categories
-
-// Big ugly regular expressions that match characters in the
-// whitespace, identifier, and identifier-start categories. These
-// are only applied when a character is found to actually have a
-// code point above 128.
-// Generated by `bin/generate-identifier-regex.js`.
-
-var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312e\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fea\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ae\ua7b0-\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
-var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d4-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
-
-var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
-var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
-
-nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
-
-// These are a run-length and offset encoded representation of the
-// >0xffff code points that are a valid part of identifiers. The
-// offset starts at 0x10000, and each pair of numbers represents an
-// offset to the next range, and then a size of the range. They were
-// generated by bin/generate-identifier-regex.js
-
-// eslint-disable-next-line comma-spacing
-var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,55,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,698,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,1,31,6124,20,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];
-
-// eslint-disable-next-line comma-spacing
-var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,19719,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];
-
-// This has a complexity linear to the value of the code. The
-// assumption is that looking up astral identifier characters is
-// rare.
-function isInAstralSet(code, set) {
-  var pos = 0x10000;
-  for (var i = 0; i < set.length; i += 2) {
-    pos += set[i];
-    if (pos > code) { return false }
-    pos += set[i + 1];
-    if (pos >= code) { return true }
-  }
-}
-
-// Test whether a given character code starts an identifier.
-
-function isIdentifierStart(code, astral) {
-  if (code < 65) { return code === 36 }
-  if (code < 91) { return true }
-  if (code < 97) { return code === 95 }
-  if (code < 123) { return true }
-  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }
-  if (astral === false) { return false }
-  return isInAstralSet(code, astralIdentifierStartCodes)
-}
-
-// Test whether a given character is part of an identifier.
-
-function isIdentifierChar(code, astral) {
-  if (code < 48) { return code === 36 }
-  if (code < 58) { return true }
-  if (code < 65) { return false }
-  if (code < 91) { return true }
-  if (code < 97) { return code === 95 }
-  if (code < 123) { return true }
-  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }
-  if (astral === false) { return false }
-  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
-}
-
-// ## Token types
-
-// The assignment of fine-grained, information-carrying type objects
-// allows the tokenizer to store the information it has about a
-// token in a way that is very cheap for the parser to look up.
-
-// All token type variables start with an underscore, to make them
-// easy to recognize.
-
-// The `beforeExpr` property is used to disambiguate between regular
-// expressions and divisions. It is set on all token types that can
-// be followed by an expression (thus, a slash after them would be a
-// regular expression).
-//
-// The `startsExpr` property is used to check if the token ends a
-// `yield` expression. It is set on all token types that either can
-// directly start an expression (like a quotation mark) or can
-// continue an expression (like the body of a string).
-//
-// `isLoop` marks a keyword as starting a loop, which is important
-// to know when parsing a label, in order to allow or disallow
-// continue jumps to that label.
-
-var TokenType = function TokenType(label, conf) {
-  if ( conf === void 0 ) conf = {};
-
-  this.label = label;
-  this.keyword = conf.keyword;
-  this.beforeExpr = !!conf.beforeExpr;
-  this.startsExpr = !!conf.startsExpr;
-  this.isLoop = !!conf.isLoop;
-  this.isAssign = !!conf.isAssign;
-  this.prefix = !!conf.prefix;
-  this.postfix = !!conf.postfix;
-  this.binop = conf.binop || null;
-  this.updateContext = null;
-};
-
-function binop(name, prec) {
-  return new TokenType(name, {beforeExpr: true, binop: prec})
-}
-var beforeExpr = {beforeExpr: true};
-var startsExpr = {startsExpr: true};
-
-// Map keyword names to token types.
-
-var keywords$1 = {};
-
-// Succinct definitions of keyword token types
-function kw(name, options) {
-  if ( options === void 0 ) options = {};
-
-  options.keyword = name;
-  return keywords$1[name] = new TokenType(name, options)
-}
-
-var types = {
-  num: new TokenType("num", startsExpr),
-  regexp: new TokenType("regexp", startsExpr),
-  string: new TokenType("string", startsExpr),
-  name: new TokenType("name", startsExpr),
-  eof: new TokenType("eof"),
-
-  // Punctuation token types.
-  bracketL: new TokenType("[", {beforeExpr: true, startsExpr: true}),
-  bracketR: new TokenType("]"),
-  braceL: new TokenType("{", {beforeExpr: true, startsExpr: true}),
-  braceR: new TokenType("}"),
-  parenL: new TokenType("(", {beforeExpr: true, startsExpr: true}),
-  parenR: new TokenType(")"),
-  comma: new TokenType(",", beforeExpr),
-  semi: new TokenType(";", beforeExpr),
-  colon: new TokenType(":", beforeExpr),
-  dot: new TokenType("."),
-  question: new TokenType("?", beforeExpr),
-  arrow: new TokenType("=>", beforeExpr),
-  template: new TokenType("template"),
-  invalidTemplate: new TokenType("invalidTemplate"),
-  ellipsis: new TokenType("...", beforeExpr),
-  backQuote: new TokenType("`", startsExpr),
-  dollarBraceL: new TokenType("${", {beforeExpr: true, startsExpr: true}),
-
-  // Operators. These carry several kinds of properties to help the
-  // parser use them properly (the presence of these properties is
-  // what categorizes them as operators).
-  //
-  // `binop`, when present, specifies that this operator is a binary
-  // operator, and will refer to its precedence.
-  //
-  // `prefix` and `postfix` mark the operator as a prefix or postfix
-  // unary operator.
-  //
-  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
-  // binary operators with a very low precedence, that should result
-  // in AssignmentExpression nodes.
-
-  eq: new TokenType("=", {beforeExpr: true, isAssign: true}),
-  assign: new TokenType("_=", {beforeExpr: true, isAssign: true}),
-  incDec: new TokenType("++/--", {prefix: true, postfix: true, startsExpr: true}),
-  prefix: new TokenType("!/~", {beforeExpr: true, prefix: true, startsExpr: true}),
-  logicalOR: binop("||", 1),
-  logicalAND: binop("&&", 2),
-  bitwiseOR: binop("|", 3),
-  bitwiseXOR: binop("^", 4),
-  bitwiseAND: binop("&", 5),
-  equality: binop("==/!=/===/!==", 6),
-  relational: binop("</>/<=/>=", 7),
-  bitShift: binop("<</>>/>>>", 8),
-  plusMin: new TokenType("+/-", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),
-  modulo: binop("%", 10),
-  star: binop("*", 10),
-  slash: binop("/", 10),
-  starstar: new TokenType("**", {beforeExpr: true}),
-
-  // Keyword token types.
-  _break: kw("break"),
-  _case: kw("case", beforeExpr),
-  _catch: kw("catch"),
-  _continue: kw("continue"),
-  _debugger: kw("debugger"),
-  _default: kw("default", beforeExpr),
-  _do: kw("do", {isLoop: true, beforeExpr: true}),
-  _else: kw("else", beforeExpr),
-  _finally: kw("finally"),
-  _for: kw("for", {isLoop: true}),
-  _function: kw("function", startsExpr),
-  _if: kw("if"),
-  _return: kw("return", beforeExpr),
-  _switch: kw("switch"),
-  _throw: kw("throw", beforeExpr),
-  _try: kw("try"),
-  _var: kw("var"),
-  _const: kw("const"),
-  _while: kw("while", {isLoop: true}),
-  _with: kw("with"),
-  _new: kw("new", {beforeExpr: true, startsExpr: true}),
-  _this: kw("this", startsExpr),
-  _super: kw("super", startsExpr),
-  _class: kw("class", startsExpr),
-  _extends: kw("extends", beforeExpr),
-  _export: kw("export"),
-  _import: kw("import"),
-  _null: kw("null", startsExpr),
-  _true: kw("true", startsExpr),
-  _false: kw("false", startsExpr),
-  _in: kw("in", {beforeExpr: true, binop: 7}),
-  _instanceof: kw("instanceof", {beforeExpr: true, binop: 7}),
-  _typeof: kw("typeof", {beforeExpr: true, prefix: true, startsExpr: true}),
-  _void: kw("void", {beforeExpr: true, prefix: true, startsExpr: true}),
-  _delete: kw("delete", {beforeExpr: true, prefix: true, startsExpr: true})
-};
-
-// Matches a whole line break (where CRLF is considered a single
-// line break). Used to count lines.
-
-var lineBreak = /\r\n?|\n|\u2028|\u2029/;
-var lineBreakG = new RegExp(lineBreak.source, "g");
-
-function isNewLine(code) {
-  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029
-}
-
-var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
-
-var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
-
-var ref = Object.prototype;
-var hasOwnProperty = ref.hasOwnProperty;
-var toString = ref.toString;
-
-// Checks if an object has a property.
-
-function has(obj, propName) {
-  return hasOwnProperty.call(obj, propName)
-}
-
-var isArray = Array.isArray || (function (obj) { return (
-  toString.call(obj) === "[object Array]"
-); });
-
-// These are used when `options.locations` is on, for the
-// `startLoc` and `endLoc` properties.
-
-var Position = function Position(line, col) {
-  this.line = line;
-  this.column = col;
-};
-
-Position.prototype.offset = function offset (n) {
-  return new Position(this.line, this.column + n)
-};
-
-var SourceLocation = function SourceLocation(p, start, end) {
-  this.start = start;
-  this.end = end;
-  if (p.sourceFile !== null) { this.source = p.sourceFile; }
-};
-
-// The `getLineInfo` function is mostly useful when the
-// `locations` option is off (for performance reasons) and you
-// want to find the line/column position for a given character
-// offset. `input` should be the code string that the offset refers
-// into.
-
-function getLineInfo(input, offset) {
-  for (var line = 1, cur = 0;;) {
-    lineBreakG.lastIndex = cur;
-    var match = lineBreakG.exec(input);
-    if (match && match.index < offset) {
-      ++line;
-      cur = match.index + match[0].length;
-    } else {
-      return new Position(line, offset - cur)
-    }
-  }
-}
-
-// A second optional argument can be given to further configure
-// the parser process. These options are recognized:
-
-var defaultOptions = {
-  // `ecmaVersion` indicates the ECMAScript version to parse. Must
-  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support
-  // for strict mode, the set of reserved words, and support for
-  // new syntax features. The default is 7.
-  ecmaVersion: 7,
-  // `sourceType` indicates the mode the code should be parsed in.
-  // Can be either `"script"` or `"module"`. This influences global
-  // strict mode and parsing of `import` and `export` declarations.
-  sourceType: "script",
-  // `onInsertedSemicolon` can be a callback that will be called
-  // when a semicolon is automatically inserted. It will be passed
-  // th position of the comma as an offset, and if `locations` is
-  // enabled, it is given the location as a `{line, column}` object
-  // as second argument.
-  onInsertedSemicolon: null,
-  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
-  // trailing commas.
-  onTrailingComma: null,
-  // By default, reserved words are only enforced if ecmaVersion >= 5.
-  // Set `allowReserved` to a boolean value to explicitly turn this on
-  // an off. When this option has the value "never", reserved words
-  // and keywords can also not be used as property names.
-  allowReserved: null,
-  // When enabled, a return at the top level is not considered an
-  // error.
-  allowReturnOutsideFunction: false,
-  // When enabled, import/export statements are not constrained to
-  // appearing at the top of the program.
-  allowImportExportEverywhere: false,
-  // When enabled, hashbang directive in the beginning of file
-  // is allowed and treated as a line comment.
-  allowHashBang: false,
-  // When `locations` is on, `loc` properties holding objects with
-  // `start` and `end` properties in `{line, column}` form (with
-  // line being 1-based and column 0-based) will be attached to the
-  // nodes.
-  locations: false,
-  // A function can be passed as `onToken` option, which will
-  // cause Acorn to call that function with object in the same
-  // format as tokens returned from `tokenizer().getToken()`. Note
-  // that you are not allowed to call the parser from the
-  // callback—that will corrupt its internal state.
-  onToken: null,
-  // A function can be passed as `onComment` option, which will
-  // cause Acorn to call that function with `(block, text, start,
-  // end)` parameters whenever a comment is skipped. `block` is a
-  // boolean indicating whether this is a block (`/* */`) comment,
-  // `text` is the content of the comment, and `start` and `end` are
-  // character offsets that denote the start and end of the comment.
-  // When the `locations` option is on, two more parameters are
-  // passed, the full `{line, column}` locations of the start and
-  // end of the comments. Note that you are not allowed to call the
-  // parser from the callback—that will corrupt its internal state.
-  onComment: null,
-  // Nodes have their start and end characters offsets recorded in
-  // `start` and `end` properties (directly on the node, rather than
-  // the `loc` object, which holds line/column data. To also add a
-  // [semi-standardized][range] `range` property holding a `[start,
-  // end]` array with the same numbers, set the `ranges` option to
-  // `true`.
-  //
-  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
-  ranges: false,
-  // It is possible to parse multiple files into a single AST by
-  // passing the tree produced by parsing the first file as
-  // `program` option in subsequent parses. This will add the
-  // toplevel forms of the parsed file to the `Program` (top) node
-  // of an existing parse tree.
-  program: null,
-  // When `locations` is on, you can pass this to record the source
-  // file in every node's `loc` object.
-  sourceFile: null,
-  // This value, if given, is stored in every node, whether
-  // `locations` is on or off.
-  directSourceFile: null,
-  // When enabled, parenthesized expressions are represented by
-  // (non-standard) ParenthesizedExpression nodes
-  preserveParens: false,
-  plugins: {}
-};
-
-// Interpret and default an options object
-
-function getOptions(opts) {
-  var options = {};
-
-  for (var opt in defaultOptions)
-    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }
-
-  if (options.ecmaVersion >= 2015)
-    { options.ecmaVersion -= 2009; }
-
-  if (options.allowReserved == null)
-    { options.allowReserved = options.ecmaVersion < 5; }
-
-  if (isArray(options.onToken)) {
-    var tokens = options.onToken;
-    options.onToken = function (token) { return tokens.push(token); };
-  }
-  if (isArray(options.onComment))
-    { options.onComment = pushComment(options, options.onComment); }
-
-  return options
-}
-
-function pushComment(options, array) {
-  return function(block, text, start, end, startLoc, endLoc) {
-    var comment = {
-      type: block ? "Block" : "Line",
-      value: text,
-      start: start,
-      end: end
-    };
-    if (options.locations)
-      { comment.loc = new SourceLocation(this, startLoc, endLoc); }
-    if (options.ranges)
-      { comment.range = [start, end]; }
-    array.push(comment);
-  }
-}
-
-// Registered plugins
-var plugins = {};
-
-function keywordRegexp(words) {
-  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")
-}
-
-var Parser = function Parser(options, input, startPos) {
-  this.options = options = getOptions(options);
-  this.sourceFile = options.sourceFile;
-  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);
-  var reserved = "";
-  if (!options.allowReserved) {
-    for (var v = options.ecmaVersion;; v--)
-      { if (reserved = reservedWords[v]) { break } }
-    if (options.sourceType == "module") { reserved += " await"; }
-  }
-  this.reservedWords = keywordRegexp(reserved);
-  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
-  this.reservedWordsStrict = keywordRegexp(reservedStrict);
-  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + " " + reservedWords.strictBind);
-  this.input = String(input);
-
-  // Used to signal to callers of `readWord1` whether the word
-  // contained any escape sequences. This is needed because words with
-  // escape sequences must not be interpreted as keywords.
-  this.containsEsc = false;
-
-  // Load plugins
-  this.loadPlugins(options.plugins);
-
-  // Set up token state
-
-  // The current position of the tokenizer in the input.
-  if (startPos) {
-    this.pos = startPos;
-    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
-    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
-  } else {
-    this.pos = this.lineStart = 0;
-    this.curLine = 1;
-  }
-
-  // Properties of the current token:
-  // Its type
-  this.type = types.eof;
-  // For tokens that include more information than their type, the value
-  this.value = null;
-  // Its start and end offset
-  this.start = this.end = this.pos;
-  // And, if locations are used, the {line, column} object
-  // corresponding to those offsets
-  this.startLoc = this.endLoc = this.curPosition();
-
-  // Position information for the previous token
-  this.lastTokEndLoc = this.lastTokStartLoc = null;
-  this.lastTokStart = this.lastTokEnd = this.pos;
-
-  // The context stack is used to superficially track syntactic
-  // context to predict whether a regular expression is allowed in a
-  // given position.
-  this.context = this.initialContext();
-  this.exprAllowed = true;
-
-  // Figure out if it's a module code.
-  this.inModule = options.sourceType === "module";
-  this.strict = this.inModule || this.strictDirective(this.pos);
-
-  // Used to signify the start of a potential arrow function
-  this.potentialArrowAt = -1;
-
-  // Flags to track whether we are in a function, a generator, an async function.
-  this.inFunction = this.inGenerator = this.inAsync = false;
-  // Positions to delayed-check that yield/await does not exist in default parameters.
-  this.yieldPos = this.awaitPos = 0;
-  // Labels in scope.
-  this.labels = [];
-
-  // If enabled, skip leading hashbang line.
-  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!")
-    { this.skipLineComment(2); }
-
-  // Scope tracking for duplicate variable names (see scope.js)
-  this.scopeStack = [];
-  this.enterFunctionScope();
-
-  // For RegExp validation
-  this.regexpState = null;
-};
-
-// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them
-Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };
-Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };
-
-Parser.prototype.extend = function extend (name, f) {
-  this[name] = f(this[name]);
-};
-
-Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {
-    var this$1 = this;
-
-  for (var name in pluginConfigs) {
-    var plugin = plugins[name];
-    if (!plugin) { throw new Error("Plugin '" + name + "' not found") }
-    plugin(this$1, pluginConfigs[name]);
-  }
-};
-
-Parser.prototype.parse = function parse () {
-  var node = this.options.program || this.startNode();
-  this.nextToken();
-  return this.parseTopLevel(node)
-};
-
-var pp = Parser.prototype;
-
-// ## Parser utilities
-
-var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)"|;)/;
-pp.strictDirective = function(start) {
-  var this$1 = this;
-
-  for (;;) {
-    skipWhiteSpace.lastIndex = start;
-    start += skipWhiteSpace.exec(this$1.input)[0].length;
-    var match = literal.exec(this$1.input.slice(start));
-    if (!match) { return false }
-    if ((match[1] || match[2]) == "use strict") { return true }
-    start += match[0].length;
-  }
-};
-
-// Predicate that tests whether the next token is of the given
-// type, and if yes, consumes it as a side effect.
-
-pp.eat = function(type) {
-  if (this.type === type) {
-    this.next();
-    return true
-  } else {
-    return false
-  }
-};
-
-// Tests whether parsed token is a contextual keyword.
-
-pp.isContextual = function(name) {
-  return this.type === types.name && this.value === name && !this.containsEsc
-};
-
-// Consumes contextual keyword if possible.
-
-pp.eatContextual = function(name) {
-  if (!this.isContextual(name)) { return false }
-  this.next();
-  return true
-};
-
-// Asserts that following token is given contextual keyword.
-
-pp.expectContextual = function(name) {
-  if (!this.eatContextual(name)) { this.unexpected(); }
-};
-
-// Test whether a semicolon can be inserted at the current position.
-
-pp.canInsertSemicolon = function() {
-  return this.type === types.eof ||
-    this.type === types.braceR ||
-    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
-};
-
-pp.insertSemicolon = function() {
-  if (this.canInsertSemicolon()) {
-    if (this.options.onInsertedSemicolon)
-      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }
-    return true
-  }
-};
-
-// Consume a semicolon, or, failing that, see if we are allowed to
-// pretend that there is a semicolon at this position.
-
-pp.semicolon = function() {
-  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }
-};
-
-pp.afterTrailingComma = function(tokType, notNext) {
-  if (this.type == tokType) {
-    if (this.options.onTrailingComma)
-      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }
-    if (!notNext)
-      { this.next(); }
-    return true
-  }
-};
-
-// Expect a token of a given type. If found, consume it, otherwise,
-// raise an unexpected token error.
-
-pp.expect = function(type) {
-  this.eat(type) || this.unexpected();
-};
-
-// Raise an unexpected token error.
-
-pp.unexpected = function(pos) {
-  this.raise(pos != null ? pos : this.start, "Unexpected token");
-};
-
-function DestructuringErrors() {
-  this.shorthandAssign =
-  this.trailingComma =
-  this.parenthesizedAssign =
-  this.parenthesizedBind =
-  this.doubleProto =
-    -1;
-}
-
-pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {
-  if (!refDestructuringErrors) { return }
-  if (refDestructuringErrors.trailingComma > -1)
-    { this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element"); }
-  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
-  if (parens > -1) { this.raiseRecoverable(parens, "Parenthesized pattern"); }
-};
-
-pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
-  if (!refDestructuringErrors) { return false }
-  var shorthandAssign = refDestructuringErrors.shorthandAssign;
-  var doubleProto = refDestructuringErrors.doubleProto;
-  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }
-  if (shorthandAssign >= 0)
-    { this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"); }
-  if (doubleProto >= 0)
-    { this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property"); }
-};
-
-pp.checkYieldAwaitInDefaultParams = function() {
-  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))
-    { this.raise(this.yieldPos, "Yield expression cannot be a default value"); }
-  if (this.awaitPos)
-    { this.raise(this.awaitPos, "Await expression cannot be a default value"); }
-};
-
-pp.isSimpleAssignTarget = function(expr) {
-  if (expr.type === "ParenthesizedExpression")
-    { return this.isSimpleAssignTarget(expr.expression) }
-  return expr.type === "Identifier" || expr.type === "MemberExpression"
-};
-
-var pp$1 = Parser.prototype;
-
-// ### Statement parsing
-
-// Parse a program. Initializes the parser, reads any number of
-// statements, and wraps them in a Program node.  Optionally takes a
-// `program` argument.  If present, the statements will be appended
-// to its body instead of creating a new node.
-
-pp$1.parseTopLevel = function(node) {
-  var this$1 = this;
-
-  var exports = {};
-  if (!node.body) { node.body = []; }
-  while (this.type !== types.eof) {
-    var stmt = this$1.parseStatement(true, true, exports);
-    node.body.push(stmt);
-  }
-  this.adaptDirectivePrologue(node.body);
-  this.next();
-  if (this.options.ecmaVersion >= 6) {
-    node.sourceType = this.options.sourceType;
-  }
-  return this.finishNode(node, "Program")
-};
-
-var loopLabel = {kind: "loop"};
-var switchLabel = {kind: "switch"};
-
-pp$1.isLet = function() {
-  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) { return false }
-  skipWhiteSpace.lastIndex = this.pos;
-  var skip = skipWhiteSpace.exec(this.input);
-  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
-  if (nextCh === 91 || nextCh == 123) { return true } // '{' and '['
-  if (isIdentifierStart(nextCh, true)) {
-    var pos = next + 1;
-    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }
-    var ident = this.input.slice(next, pos);
-    if (!keywordRelationalOperator.test(ident)) { return true }
-  }
-  return false
-};
-
-// check 'async [no LineTerminator here] function'
-// - 'async /*foo*/ function' is OK.
-// - 'async /*\n*/ function' is invalid.
-pp$1.isAsyncFunction = function() {
-  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
-    { return false }
-
-  skipWhiteSpace.lastIndex = this.pos;
-  var skip = skipWhiteSpace.exec(this.input);
-  var next = this.pos + skip[0].length;
-  return !lineBreak.test(this.input.slice(this.pos, next)) &&
-    this.input.slice(next, next + 8) === "function" &&
-    (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))
-};
-
-// Parse a single statement.
-//
-// If expecting a statement and finding a slash operator, parse a
-// regular expression literal. This is to handle cases like
-// `if (foo) /blah/.exec(foo)`, where looking at the previous token
-// does not help.
-
-pp$1.parseStatement = function(declaration, topLevel, exports) {
-  var starttype = this.type, node = this.startNode(), kind;
-
-  if (this.isLet()) {
-    starttype = types._var;
-    kind = "let";
-  }
-
-  // Most types of statements are recognized by the keyword they
-  // start with. Many are trivial to parse, some require a bit of
-  // complexity.
-
-  switch (starttype) {
-  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
-  case types._debugger: return this.parseDebuggerStatement(node)
-  case types._do: return this.parseDoStatement(node)
-  case types._for: return this.parseForStatement(node)
-  case types._function:
-    if (!declaration && this.options.ecmaVersion >= 6) { this.unexpected(); }
-    return this.parseFunctionStatement(node, false)
-  case types._class:
-    if (!declaration) { this.unexpected(); }
-    return this.parseClass(node, true)
-  case types._if: return this.parseIfStatement(node)
-  case types._return: return this.parseReturnStatement(node)
-  case types._switch: return this.parseSwitchStatement(node)
-  case types._throw: return this.parseThrowStatement(node)
-  case types._try: return this.parseTryStatement(node)
-  case types._const: case types._var:
-    kind = kind || this.value;
-    if (!declaration && kind != "var") { this.unexpected(); }
-    return this.parseVarStatement(node, kind)
-  case types._while: return this.parseWhileStatement(node)
-  case types._with: return this.parseWithStatement(node)
-  case types.braceL: return this.parseBlock()
-  case types.semi: return this.parseEmptyStatement(node)
-  case types._export:
-  case types._import:
-    if (!this.options.allowImportExportEverywhere) {
-      if (!topLevel)
-        { this.raise(this.start, "'import' and 'export' may only appear at the top level"); }
-      if (!this.inModule)
-        { this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'"); }
-    }
-    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)
-
-    // If the statement does not start with a statement keyword or a
-    // brace, it's an ExpressionStatement or LabeledStatement. We
-    // simply start parsing an expression, and afterwards, if the
-    // next token is a colon and the expression was a simple
-    // Identifier node, we switch to interpreting it as a label.
-  default:
-    if (this.isAsyncFunction()) {
-      if (!declaration) { this.unexpected(); }
-      this.next();
-      return this.parseFunctionStatement(node, true)
-    }
-
-    var maybeName = this.value, expr = this.parseExpression();
-    if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon))
-      { return this.parseLabeledStatement(node, maybeName, expr) }
-    else { return this.parseExpressionStatement(node, expr) }
-  }
-};
-
-pp$1.parseBreakContinueStatement = function(node, keyword) {
-  var this$1 = this;
-
-  var isBreak = keyword == "break";
-  this.next();
-  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }
-  else if (this.type !== types.name) { this.unexpected(); }
-  else {
-    node.label = this.parseIdent();
-    this.semicolon();
-  }
-
-  // Verify that there is an actual destination to break or
-  // continue to.
-  var i = 0;
-  for (; i < this.labels.length; ++i) {
-    var lab = this$1.labels[i];
-    if (node.label == null || lab.name === node.label.name) {
-      if (lab.kind != null && (isBreak || lab.kind === "loop")) { break }
-      if (node.label && isBreak) { break }
-    }
-  }
-  if (i === this.labels.length) { this.raise(node.start, "Unsyntactic " + keyword); }
-  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
-};
-
-pp$1.parseDebuggerStatement = function(node) {
-  this.next();
-  this.semicolon();
-  return this.finishNode(node, "DebuggerStatement")
-};
-
-pp$1.parseDoStatement = function(node) {
-  this.next();
-  this.labels.push(loopLabel);
-  node.body = this.parseStatement(false);
-  this.labels.pop();
-  this.expect(types._while);
-  node.test = this.parseParenExpression();
-  if (this.options.ecmaVersion >= 6)
-    { this.eat(types.semi); }
-  else
-    { this.semicolon(); }
-  return this.finishNode(node, "DoWhileStatement")
-};
-
-// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
-// loop is non-trivial. Basically, we have to parse the init `var`
-// statement or expression, disallowing the `in` operator (see
-// the second parameter to `parseExpression`), and then check
-// whether the next token is `in` or `of`. When there is no init
-// part (semicolon immediately after the opening parenthesis), it
-// is a regular `for` loop.
-
-pp$1.parseForStatement = function(node) {
-  this.next();
-  var awaitAt = (this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual("await")) ? this.lastTokStart : -1;
-  this.labels.push(loopLabel);
-  this.enterLexicalScope();
-  this.expect(types.parenL);
-  if (this.type === types.semi) {
-    if (awaitAt > -1) { this.unexpected(awaitAt); }
-    return this.parseFor(node, null)
-  }
-  var isLet = this.isLet();
-  if (this.type === types._var || this.type === types._const || isLet) {
-    var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
-    this.next();
-    this.parseVar(init$1, true, kind);
-    this.finishNode(init$1, "VariableDeclaration");
-    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1 &&
-        !(kind !== "var" && init$1.declarations[0].init)) {
-      if (this.options.ecmaVersion >= 9) {
-        if (this.type === types._in) {
-          if (awaitAt > -1) { this.unexpected(awaitAt); }
-        } else { node.await = awaitAt > -1; }
-      }
-      return this.parseForIn(node, init$1)
-    }
-    if (awaitAt > -1) { this.unexpected(awaitAt); }
-    return this.parseFor(node, init$1)
-  }
-  var refDestructuringErrors = new DestructuringErrors;
-  var init = this.parseExpression(true, refDestructuringErrors);
-  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
-    if (this.options.ecmaVersion >= 9) {
-      if (this.type === types._in) {
-        if (awaitAt > -1) { this.unexpected(awaitAt); }
-      } else { node.await = awaitAt > -1; }
-    }
-    this.toAssignable(init, false, refDestructuringErrors);
-    this.checkLVal(init);
-    return this.parseForIn(node, init)
-  } else {
-    this.checkExpressionErrors(refDestructuringErrors, true);
-  }
-  if (awaitAt > -1) { this.unexpected(awaitAt); }
-  return this.parseFor(node, init)
-};
-
-pp$1.parseFunctionStatement = function(node, isAsync) {
-  this.next();
-  return this.parseFunction(node, true, false, isAsync)
-};
-
-pp$1.parseIfStatement = function(node) {
-  this.next();
-  node.test = this.parseParenExpression();
-  // allow function declarations in branches, but only in non-strict mode
-  node.consequent = this.parseStatement(!this.strict && this.type == types._function);
-  node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.type == types._function) : null;
-  return this.finishNode(node, "IfStatement")
-};
-
-pp$1.parseReturnStatement = function(node) {
-  if (!this.inFunction && !this.options.allowReturnOutsideFunction)
-    { this.raise(this.start, "'return' outside of function"); }
-  this.next();
-
-  // In `return` (and `break`/`continue`), the keywords with
-  // optional arguments, we eagerly look for a semicolon or the
-  // possibility to insert one.
-
-  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }
-  else { node.argument = this.parseExpression(); this.semicolon(); }
-  return this.finishNode(node, "ReturnStatement")
-};
-
-pp$1.parseSwitchStatement = function(node) {
-  var this$1 = this;
-
-  this.next();
-  node.discriminant = this.parseParenExpression();
-  node.cases = [];
-  this.expect(types.braceL);
-  this.labels.push(switchLabel);
-  this.enterLexicalScope();
-
-  // Statements under must be grouped (by label) in SwitchCase
-  // nodes. `cur` is used to keep the node that we are currently
-  // adding statements to.
-
-  var cur;
-  for (var sawDefault = false; this.type != types.braceR;) {
-    if (this$1.type === types._case || this$1.type === types._default) {
-      var isCase = this$1.type === types._case;
-      if (cur) { this$1.finishNode(cur, "SwitchCase"); }
-      node.cases.push(cur = this$1.startNode());
-      cur.consequent = [];
-      this$1.next();
-      if (isCase) {
-        cur.test = this$1.parseExpression();
-      } else {
-        if (sawDefault) { this$1.raiseRecoverable(this$1.lastTokStart, "Multiple default clauses"); }
-        sawDefault = true;
-        cur.test = null;
-      }
-      this$1.expect(types.colon);
-    } else {
-      if (!cur) { this$1.unexpected(); }
-      cur.consequent.push(this$1.parseStatement(true));
-    }
-  }
-  this.exitLexicalScope();
-  if (cur) { this.finishNode(cur, "SwitchCase"); }
-  this.next(); // Closing brace
-  this.labels.pop();
-  return this.finishNode(node, "SwitchStatement")
-};
-
-pp$1.parseThrowStatement = function(node) {
-  this.next();
-  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
-    { this.raise(this.lastTokEnd, "Illegal newline after throw"); }
-  node.argument = this.parseExpression();
-  this.semicolon();
-  return this.finishNode(node, "ThrowStatement")
-};
-
-// Reused empty array added for node fields that are always empty.
-
-var empty = [];
-
-pp$1.parseTryStatement = function(node) {
-  this.next();
-  node.block = this.parseBlock();
-  node.handler = null;
-  if (this.type === types._catch) {
-    var clause = this.startNode();
-    this.next();
-    this.expect(types.parenL);
-    clause.param = this.parseBindingAtom();
-    this.enterLexicalScope();
-    this.checkLVal(clause.param, "let");
-    this.expect(types.parenR);
-    clause.body = this.parseBlock(false);
-    this.exitLexicalScope();
-    node.handler = this.finishNode(clause, "CatchClause");
-  }
-  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
-  if (!node.handler && !node.finalizer)
-    { this.raise(node.start, "Missing catch or finally clause"); }
-  return this.finishNode(node, "TryStatement")
-};
-
-pp$1.parseVarStatement = function(node, kind) {
-  this.next();
-  this.parseVar(node, false, kind);
-  this.semicolon();
-  return this.finishNode(node, "VariableDeclaration")
-};
-
-pp$1.parseWhileStatement = function(node) {
-  this.next();
-  node.test = this.parseParenExpression();
-  this.labels.push(loopLabel);
-  node.body = this.parseStatement(false);
-  this.labels.pop();
-  return this.finishNode(node, "WhileStatement")
-};
-
-pp$1.parseWithStatement = function(node) {
-  if (this.strict) { this.raise(this.start, "'with' in strict mode"); }
-  this.next();
-  node.object = this.parseParenExpression();
-  node.body = this.parseStatement(false);
-  return this.finishNode(node, "WithStatement")
-};
-
-pp$1.parseEmptyStatement = function(node) {
-  this.next();
-  return this.finishNode(node, "EmptyStatement")
-};
-
-pp$1.parseLabeledStatement = function(node, maybeName, expr) {
-  var this$1 = this;
-
-  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1)
-    {
-    var label = list[i$1];
-
-    if (label.name === maybeName)
-      { this$1.raise(expr.start, "Label '" + maybeName + "' is already declared");
-  } }
-  var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
-  for (var i = this.labels.length - 1; i >= 0; i--) {
-    var label$1 = this$1.labels[i];
-    if (label$1.statementStart == node.start) {
-      // Update information about previous labels on this node
-      label$1.statementStart = this$1.start;
-      label$1.kind = kind;
-    } else { break }
-  }
-  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});
-  node.body = this.parseStatement(true);
-  if (node.body.type == "ClassDeclaration" ||
-      node.body.type == "VariableDeclaration" && node.body.kind != "var" ||
-      node.body.type == "FunctionDeclaration" && (this.strict || node.body.generator))
-    { this.raiseRecoverable(node.body.start, "Invalid labeled declaration"); }
-  this.labels.pop();
-  node.label = expr;
-  return this.finishNode(node, "LabeledStatement")
-};
-
-pp$1.parseExpressionStatement = function(node, expr) {
-  node.expression = expr;
-  this.semicolon();
-  return this.finishNode(node, "ExpressionStatement")
-};
-
-// Parse a semicolon-enclosed block of statements, handling `"use
-// strict"` declarations when `allowStrict` is true (used for
-// function bodies).
-
-pp$1.parseBlock = function(createNewLexicalScope) {
-  var this$1 = this;
-  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;
-
-  var node = this.startNode();
-  node.body = [];
-  this.expect(types.braceL);
-  if (createNewLexicalScope) {
-    this.enterLexicalScope();
-  }
-  while (!this.eat(types.braceR)) {
-    var stmt = this$1.parseStatement(true);
-    node.body.push(stmt);
-  }
-  if (createNewLexicalScope) {
-    this.exitLexicalScope();
-  }
-  return this.finishNode(node, "BlockStatement")
-};
-
-// Parse a regular `for` loop. The disambiguation code in
-// `parseStatement` will already have parsed the init statement or
-// expression.
-
-pp$1.parseFor = function(node, init) {
-  node.init = init;
-  this.expect(types.semi);
-  node.test = this.type === types.semi ? null : this.parseExpression();
-  this.expect(types.semi);
-  node.update = this.type === types.parenR ? null : this.parseExpression();
-  this.expect(types.parenR);
-  this.exitLexicalScope();
-  node.body = this.parseStatement(false);
-  this.labels.pop();
-  return this.finishNode(node, "ForStatement")
-};
-
-// Parse a `for`/`in` and `for`/`of` loop, which are almost
-// same from parser's perspective.
-
-pp$1.parseForIn = function(node, init) {
-  var type = this.type === types._in ? "ForInStatement" : "ForOfStatement";
-  this.next();
-  if (type == "ForInStatement") {
-    if (init.type === "AssignmentPattern" ||
-      (init.type === "VariableDeclaration" && init.declarations[0].init != null &&
-       (this.strict || init.declarations[0].id.type !== "Identifier")))
-      { this.raise(init.start, "Invalid assignment in for-in loop head"); }
-  }
-  node.left = init;
-  node.right = type == "ForInStatement" ? this.parseExpression() : this.parseMaybeAssign();
-  this.expect(types.parenR);
-  this.exitLexicalScope();
-  node.body = this.parseStatement(false);
-  this.labels.pop();
-  return this.finishNode(node, type)
-};
-
-// Parse a list of variable declarations.
-
-pp$1.parseVar = function(node, isFor, kind) {
-  var this$1 = this;
-
-  node.declarations = [];
-  node.kind = kind;
-  for (;;) {
-    var decl = this$1.startNode();
-    this$1.parseVarId(decl, kind);
-    if (this$1.eat(types.eq)) {
-      decl.init = this$1.parseMaybeAssign(isFor);
-    } else if (kind === "const" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual("of")))) {
-      this$1.unexpected();
-    } else if (decl.id.type != "Identifier" && !(isFor && (this$1.type === types._in || this$1.isContextual("of")))) {
-      this$1.raise(this$1.lastTokEnd, "Complex binding patterns require an initialization value");
-    } else {
-      decl.init = null;
-    }
-    node.declarations.push(this$1.finishNode(decl, "VariableDeclarator"));
-    if (!this$1.eat(types.comma)) { break }
-  }
-  return node
-};
-
-pp$1.parseVarId = function(decl, kind) {
-  decl.id = this.parseBindingAtom(kind);
-  this.checkLVal(decl.id, kind, false);
-};
-
-// Parse a function declaration or literal (depending on the
-// `isStatement` parameter).
-
-pp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {
-  this.initFunction(node);
-  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync)
-    { node.generator = this.eat(types.star); }
-  if (this.options.ecmaVersion >= 8)
-    { node.async = !!isAsync; }
-
-  if (isStatement) {
-    node.id = isStatement === "nullableID" && this.type != types.name ? null : this.parseIdent();
-    if (node.id) {
-      this.checkLVal(node.id, "var");
-    }
-  }
-
-  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,
-      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;
-  this.inGenerator = node.generator;
-  this.inAsync = node.async;
-  this.yieldPos = 0;
-  this.awaitPos = 0;
-  this.inFunction = true;
-  this.enterFunctionScope();
-
-  if (!isStatement)
-    { node.id = this.type == types.name ? this.parseIdent() : null; }
-
-  this.parseFunctionParams(node);
-  this.parseFunctionBody(node, allowExpressionBody);
-
-  this.inGenerator = oldInGen;
-  this.inAsync = oldInAsync;
-  this.yieldPos = oldYieldPos;
-  this.awaitPos = oldAwaitPos;
-  this.inFunction = oldInFunc;
-  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression")
-};
-
-pp$1.parseFunctionParams = function(node) {
-  this.expect(types.parenL);
-  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
-  this.checkYieldAwaitInDefaultParams();
-};
-
-// Parse a class declaration or literal (depending on the
-// `isStatement` parameter).
-
-pp$1.parseClass = function(node, isStatement) {
-  var this$1 = this;
-
-  this.next();
-
-  this.parseClassId(node, isStatement);
-  this.parseClassSuper(node);
-  var classBody = this.startNode();
-  var hadConstructor = false;
-  classBody.body = [];
-  this.expect(types.braceL);
-  while (!this.eat(types.braceR)) {
-    var member = this$1.parseClassMember(classBody);
-    if (member && member.type === "MethodDefinition" && member.kind === "constructor") {
-      if (hadConstructor) { this$1.raise(member.start, "Duplicate constructor in the same class"); }
-      hadConstructor = true;
-    }
-  }
-  node.body = this.finishNode(classBody, "ClassBody");
-  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
-};
-
-pp$1.parseClassMember = function(classBody) {
-  var this$1 = this;
-
-  if (this.eat(types.semi)) { return null }
-
-  var method = this.startNode();
-  var tryContextual = function (k, noLineBreak) {
-    if ( noLineBreak === void 0 ) noLineBreak = false;
-
-    var start = this$1.start, startLoc = this$1.startLoc;
-    if (!this$1.eatContextual(k)) { return false }
-    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }
-    if (method.key) { this$1.unexpected(); }
-    method.computed = false;
-    method.key = this$1.startNodeAt(start, startLoc);
-    method.key.name = k;
-    this$1.finishNode(method.key, "Identifier");
-    return false
-  };
-
-  method.kind = "method";
-  method.static = tryContextual("static");
-  var isGenerator = this.eat(types.star);
-  var isAsync = false;
-  if (!isGenerator) {
-    if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
-      isAsync = true;
-      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
-    } else if (tryContextual("get")) {
-      method.kind = "get";
-    } else if (tryContextual("set")) {
-      method.kind = "set";
-    }
-  }
-  if (!method.key) { this.parsePropertyName(method); }
-  var key = method.key;
-  if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" ||
-      key.type === "Literal" && key.value === "constructor")) {
-    if (method.kind !== "method") { this.raise(key.start, "Constructor can't have get/set modifier"); }
-    if (isGenerator) { this.raise(key.start, "Constructor can't be a generator"); }
-    if (isAsync) { this.raise(key.start, "Constructor can't be an async method"); }
-    method.kind = "constructor";
-  } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
-    this.raise(key.start, "Classes may not have a static property named prototype");
-  }
-  this.parseClassMethod(classBody, method, isGenerator, isAsync);
-  if (method.kind === "get" && method.value.params.length !== 0)
-    { this.raiseRecoverable(method.value.start, "getter should have no params"); }
-  if (method.kind === "set" && method.value.params.length !== 1)
-    { this.raiseRecoverable(method.value.start, "setter should have exactly one param"); }
-  if (method.kind === "set" && method.value.params[0].type === "RestElement")
-    { this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params"); }
-  return method
-};
-
-pp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {
-  method.value = this.parseMethod(isGenerator, isAsync);
-  classBody.body.push(this.finishNode(method, "MethodDefinition"));
-};
-
-pp$1.parseClassId = function(node, isStatement) {
-  node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;
-};
-
-pp$1.parseClassSuper = function(node) {
-  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
-};
-
-// Parses module export declaration.
-
-pp$1.parseExport = function(node, exports) {
-  var this$1 = this;
-
-  this.next();
-  // export * from '...'
-  if (this.eat(types.star)) {
-    this.expectContextual("from");
-    if (this.type !== types.string) { this.unexpected(); }
-    node.source = this.parseExprAtom();
-    this.semicolon();
-    return this.finishNode(node, "ExportAllDeclaration")
-  }
-  if (this.eat(types._default)) { // export default ...
-    this.checkExport(exports, "default", this.lastTokStart);
-    var isAsync;
-    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
-      var fNode = this.startNode();
-      this.next();
-      if (isAsync) { this.next(); }
-      node.declaration = this.parseFunction(fNode, "nullableID", false, isAsync);
-    } else if (this.type === types._class) {
-      var cNode = this.startNode();
-      node.declaration = this.parseClass(cNode, "nullableID");
-    } else {
-      node.declaration = this.parseMaybeAssign();
-      this.semicolon();
-    }
-    return this.finishNode(node, "ExportDefaultDeclaration")
-  }
-  // export var|const|let|function|class ...
-  if (this.shouldParseExportStatement()) {
-    node.declaration = this.parseStatement(true);
-    if (node.declaration.type === "VariableDeclaration")
-      { this.checkVariableExport(exports, node.declaration.declarations); }
-    else
-      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }
-    node.specifiers = [];
-    node.source = null;
-  } else { // export { x, y as z } [from '...']
-    node.declaration = null;
-    node.specifiers = this.parseExportSpecifiers(exports);
-    if (this.eatContextual("from")) {
-      if (this.type !== types.string) { this.unexpected(); }
-      node.source = this.parseExprAtom();
-    } else {
-      // check for keywords used as local names
-      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
-        var spec = list[i];
-
-        this$1.checkUnreserved(spec.local);
-      }
-
-      node.source = null;
-    }
-    this.semicolon();
-  }
-  return this.finishNode(node, "ExportNamedDeclaration")
-};
-
-pp$1.checkExport = function(exports, name, pos) {
-  if (!exports) { return }
-  if (has(exports, name))
-    { this.raiseRecoverable(pos, "Duplicate export '" + name + "'"); }
-  exports[name] = true;
-};
-
-pp$1.checkPatternExport = function(exports, pat) {
-  var this$1 = this;
-
-  var type = pat.type;
-  if (type == "Identifier")
-    { this.checkExport(exports, pat.name, pat.start); }
-  else if (type == "ObjectPattern")
-    { for (var i = 0, list = pat.properties; i < list.length; i += 1)
-      {
-        var prop = list[i];
-
-        this$1.checkPatternExport(exports, prop);
-      } }
-  else if (type == "ArrayPattern")
-    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
-      var elt = list$1[i$1];
-
-        if (elt) { this$1.checkPatternExport(exports, elt); }
-    } }
-  else if (type == "Property")
-    { this.checkPatternExport(exports, pat.value); }
-  else if (type == "AssignmentPattern")
-    { this.checkPatternExport(exports, pat.left); }
-  else if (type == "RestElement")
-    { this.checkPatternExport(exports, pat.argument); }
-  else if (type == "ParenthesizedExpression")
-    { this.checkPatternExport(exports, pat.expression); }
-};
-
-pp$1.checkVariableExport = function(exports, decls) {
-  var this$1 = this;
-
-  if (!exports) { return }
-  for (var i = 0, list = decls; i < list.length; i += 1)
-    {
-    var decl = list[i];
-
-    this$1.checkPatternExport(exports, decl.id);
-  }
-};
-
-pp$1.shouldParseExportStatement = function() {
-  return this.type.keyword === "var" ||
-    this.type.keyword === "const" ||
-    this.type.keyword === "class" ||
-    this.type.keyword === "function" ||
-    this.isLet() ||
-    this.isAsyncFunction()
-};
-
-// Parses a comma-separated list of module exports.
-
-pp$1.parseExportSpecifiers = function(exports) {
-  var this$1 = this;
-
-  var nodes = [], first = true;
-  // export { x, y as z } [from '...']
-  this.expect(types.braceL);
-  while (!this.eat(types.braceR)) {
-    if (!first) {
-      this$1.expect(types.comma);
-      if (this$1.afterTrailingComma(types.braceR)) { break }
-    } else { first = false; }
-
-    var node = this$1.startNode();
-    node.local = this$1.parseIdent(true);
-    node.exported = this$1.eatContextual("as") ? this$1.parseIdent(true) : node.local;
-    this$1.checkExport(exports, node.exported.name, node.exported.start);
-    nodes.push(this$1.finishNode(node, "ExportSpecifier"));
-  }
-  return nodes
-};
-
-// Parses import declaration.
-
-pp$1.parseImport = function(node) {
-  this.next();
-  // import '...'
-  if (this.type === types.string) {
-    node.specifiers = empty;
-    node.source = this.parseExprAtom();
-  } else {
-    node.specifiers = this.parseImportSpecifiers();
-    this.expectContextual("from");
-    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
-  }
-  this.semicolon();
-  return this.finishNode(node, "ImportDeclaration")
-};
-
-// Parses a comma-separated list of module imports.
-
-pp$1.parseImportSpecifiers = function() {
-  var this$1 = this;
-
-  var nodes = [], first = true;
-  if (this.type === types.name) {
-    // import defaultObj, { x, y as z } from '...'
-    var node = this.startNode();
-    node.local = this.parseIdent();
-    this.checkLVal(node.local, "let");
-    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
-    if (!this.eat(types.comma)) { return nodes }
-  }
-  if (this.type === types.star) {
-    var node$1 = this.startNode();
-    this.next();
-    this.expectContextual("as");
-    node$1.local = this.parseIdent();
-    this.checkLVal(node$1.local, "let");
-    nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
-    return nodes
-  }
-  this.expect(types.braceL);
-  while (!this.eat(types.braceR)) {
-    if (!first) {
-      this$1.expect(types.comma);
-      if (this$1.afterTrailingComma(types.braceR)) { break }
-    } else { first = false; }
-
-    var node$2 = this$1.startNode();
-    node$2.imported = this$1.parseIdent(true);
-    if (this$1.eatContextual("as")) {
-      node$2.local = this$1.parseIdent();
-    } else {
-      this$1.checkUnreserved(node$2.imported);
-      node$2.local = node$2.imported;
-    }
-    this$1.checkLVal(node$2.local, "let");
-    nodes.push(this$1.finishNode(node$2, "ImportSpecifier"));
-  }
-  return nodes
-};
-
-// Set `ExpressionStatement#directive` property for directive prologues.
-pp$1.adaptDirectivePrologue = function(statements) {
-  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
-    statements[i].directive = statements[i].expression.raw.slice(1, -1);
-  }
-};
-pp$1.isDirectiveCandidate = function(statement) {
-  return (
-    statement.type === "ExpressionStatement" &&
-    statement.expression.type === "Literal" &&
-    typeof statement.expression.value === "string" &&
-    // Reject parenthesized strings.
-    (this.input[statement.start] === "\"" || this.input[statement.start] === "'")
-  )
-};
-
-var pp$2 = Parser.prototype;
-
-// Convert existing expression atom to assignable pattern
-// if possible.
-
-pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {
-  var this$1 = this;
-
-  if (this.options.ecmaVersion >= 6 && node) {
-    switch (node.type) {
-    case "Identifier":
-      if (this.inAsync && node.name === "await")
-        { this.raise(node.start, "Can not use 'await' as identifier inside an async function"); }
-      break
-
-    case "ObjectPattern":
-    case "ArrayPattern":
-    case "RestElement":
-      break
-
-    case "ObjectExpression":
-      node.type = "ObjectPattern";
-      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
-      for (var i = 0, list = node.properties; i < list.length; i += 1) {
-        var prop = list[i];
-
-      this$1.toAssignable(prop, isBinding);
-        // Early error:
-        //   AssignmentRestProperty[Yield, Await] :
-        //     `...` DestructuringAssignmentTarget[Yield, Await]
-        //
-        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
-        if (
-          prop.type === "RestElement" &&
-          (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")
-        ) {
-          this$1.raise(prop.argument.start, "Unexpected token");
-        }
-      }
-      break
-
-    case "Property":
-      // AssignmentProperty has type == "Property"
-      if (node.kind !== "init") { this.raise(node.key.start, "Object pattern can't contain getter or setter"); }
-      this.toAssignable(node.value, isBinding);
-      break
-
-    case "ArrayExpression":
-      node.type = "ArrayPattern";
-      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
-      this.toAssignableList(node.elements, isBinding);
-      break
-
-    case "SpreadElement":
-      node.type = "RestElement";
-      this.toAssignable(node.argument, isBinding);
-      if (node.argument.type === "AssignmentPattern")
-        { this.raise(node.argument.start, "Rest elements cannot have a default value"); }
-      break
-
-    case "AssignmentExpression":
-      if (node.operator !== "=") { this.raise(node.left.end, "Only '=' operator can be used for specifying default value."); }
-      node.type = "AssignmentPattern";
-      delete node.operator;
-      this.toAssignable(node.left, isBinding);
-      // falls through to AssignmentPattern
-
-    case "AssignmentPattern":
-      break
-
-    case "ParenthesizedExpression":
-      this.toAssignable(node.expression, isBinding);
-      break
-
-    case "MemberExpression":
-      if (!isBinding) { break }
-
-    default:
-      this.raise(node.start, "Assigning to rvalue");
-    }
-  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
-  return node
-};
-
-// Convert list of expression atoms to binding list.
-
-pp$2.toAssignableList = function(exprList, isBinding) {
-  var this$1 = this;
-
-  var end = exprList.length;
-  for (var i = 0; i < end; i++) {
-    var elt = exprList[i];
-    if (elt) { this$1.toAssignable(elt, isBinding); }
-  }
-  if (end) {
-    var last = exprList[end - 1];
-    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
-      { this.unexpected(last.argument.start); }
-  }
-  return exprList
-};
-
-// Parses spread element.
-
-pp$2.parseSpread = function(refDestructuringErrors) {
-  var node = this.startNode();
-  this.next();
-  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
-  return this.finishNode(node, "SpreadElement")
-};
-
-pp$2.parseRestBinding = function() {
-  var node = this.startNode();
-  this.next();
-
-  // RestElement inside of a function parameter must be an identifier
-  if (this.options.ecmaVersion === 6 && this.type !== types.name)
-    { this.unexpected(); }
-
-  node.argument = this.parseBindingAtom();
-
-  return this.finishNode(node, "RestElement")
-};
-
-// Parses lvalue (assignable) atom.
-
-pp$2.parseBindingAtom = function() {
-  if (this.options.ecmaVersion >= 6) {
-    switch (this.type) {
-    case types.bracketL:
-      var node = this.startNode();
-      this.next();
-      node.elements = this.parseBindingList(types.bracketR, true, true);
-      return this.finishNode(node, "ArrayPattern")
-
-    case types.braceL:
-      return this.parseObj(true)
-    }
-  }
-  return this.parseIdent()
-};
-
-pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
-  var this$1 = this;
-
-  var elts = [], first = true;
-  while (!this.eat(close)) {
-    if (first) { first = false; }
-    else { this$1.expect(types.comma); }
-    if (allowEmpty && this$1.type === types.comma) {
-      elts.push(null);
-    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {
-      break
-    } else if (this$1.type === types.ellipsis) {
-      var rest = this$1.parseRestBinding();
-      this$1.parseBindingListItem(rest);
-      elts.push(rest);
-      if (this$1.type === types.comma) { this$1.raise(this$1.start, "Comma is not permitted after the rest element"); }
-      this$1.expect(close);
-      break
-    } else {
-      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);
-      this$1.parseBindingListItem(elem);
-      elts.push(elem);
-    }
-  }
-  return elts
-};
-
-pp$2.parseBindingListItem = function(param) {
-  return param
-};
-
-// Parses assignment pattern around given atom if possible.
-
-pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
-  left = left || this.parseBindingAtom();
-  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }
-  var node = this.startNodeAt(startPos, startLoc);
-  node.left = left;
-  node.right = this.parseMaybeAssign();
-  return this.finishNode(node, "AssignmentPattern")
-};
-
-// Verify that a node is an lval — something that can be assigned
-// to.
-// bindingType can be either:
-// 'var' indicating that the lval creates a 'var' binding
-// 'let' indicating that the lval creates a lexical ('let' or 'const') binding
-// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references
-
-pp$2.checkLVal = function(expr, bindingType, checkClashes) {
-  var this$1 = this;
-
-  switch (expr.type) {
-  case "Identifier":
-    if (this.strict && this.reservedWordsStrictBind.test(expr.name))
-      { this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode"); }
-    if (checkClashes) {
-      if (has(checkClashes, expr.name))
-        { this.raiseRecoverable(expr.start, "Argument name clash"); }
-      checkClashes[expr.name] = true;
-    }
-    if (bindingType && bindingType !== "none") {
-      if (
-        bindingType === "var" && !this.canDeclareVarName(expr.name) ||
-        bindingType !== "var" && !this.canDeclareLexicalName(expr.name)
-      ) {
-        this.raiseRecoverable(expr.start, ("Identifier '" + (expr.name) + "' has already been declared"));
-      }
-      if (bindingType === "var") {
-        this.declareVarName(expr.name);
-      } else {
-        this.declareLexicalName(expr.name);
-      }
-    }
-    break
-
-  case "MemberExpression":
-    if (bindingType) { this.raiseRecoverable(expr.start, "Binding member expression"); }
-    break
-
-  case "ObjectPattern":
-    for (var i = 0, list = expr.properties; i < list.length; i += 1)
-      {
-    var prop = list[i];
-
-    this$1.checkLVal(prop, bindingType, checkClashes);
-  }
-    break
-
-  case "Property":
-    // AssignmentProperty has type == "Property"
-    this.checkLVal(expr.value, bindingType, checkClashes);
-    break
-
-  case "ArrayPattern":
-    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
-      var elem = list$1[i$1];
-
-    if (elem) { this$1.checkLVal(elem, bindingType, checkClashes); }
-    }
-    break
-
-  case "AssignmentPattern":
-    this.checkLVal(expr.left, bindingType, checkClashes);
-    break
-
-  case "RestElement":
-    this.checkLVal(expr.argument, bindingType, checkClashes);
-    break
-
-  case "ParenthesizedExpression":
-    this.checkLVal(expr.expression, bindingType, checkClashes);
-    break
-
-  default:
-    this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
-  }
-};
-
-// A recursive descent parser operates by defining functions for all
-// syntactic elements, and recursively calling those, each function
-// advancing the input stream and returning an AST node. Precedence
-// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
-// instead of `(!x)[1]` is handled by the fact that the parser
-// function that parses unary prefix operators is called first, and
-// in turn calls the function that parses `[]` subscripts — that
-// way, it'll receive the node for `x[1]` already parsed, and wraps
-// *that* in the unary operator node.
-//
-// Acorn uses an [operator precedence parser][opp] to handle binary
-// operator precedence, because it is much more compact than using
-// the technique outlined above, which uses different, nesting
-// functions to specify precedence, for all of the ten binary
-// precedence levels that JavaScript defines.
-//
-// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser
-
-var pp$3 = Parser.prototype;
-
-// Check if property name clashes with already added.
-// Object/class getters and setters are not allowed to clash —
-// either with each other or with an init property — and in
-// strict mode, init properties are also not allowed to be repeated.
-
-pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {
-  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement")
-    { return }
-  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
-    { return }
-  var key = prop.key;
-  var name;
-  switch (key.type) {
-  case "Identifier": name = key.name; break
-  case "Literal": name = String(key.value); break
-  default: return
-  }
-  var kind = prop.kind;
-  if (this.options.ecmaVersion >= 6) {
-    if (name === "__proto__" && kind === "init") {
-      if (propHash.proto) {
-        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }
-        // Backwards-compat kludge. Can be removed in version 6.0
-        else { this.raiseRecoverable(key.start, "Redefinition of __proto__ property"); }
-      }
-      propHash.proto = true;
-    }
-    return
-  }
-  name = "$" + name;
-  var other = propHash[name];
-  if (other) {
-    var redefinition;
-    if (kind === "init") {
-      redefinition = this.strict && other.init || other.get || other.set;
-    } else {
-      redefinition = other.init || other[kind];
-    }
-    if (redefinition)
-      { this.raiseRecoverable(key.start, "Redefinition of property"); }
-  } else {
-    other = propHash[name] = {
-      init: false,
-      get: false,
-      set: false
-    };
-  }
-  other[kind] = true;
-};
-
-// ### Expression parsing
-
-// These nest, from the most general expression type at the top to
-// 'atomic', nondivisible expression types at the bottom. Most of
-// the functions will simply let the function(s) below them parse,
-// and, *if* the syntactic construct they handle is present, wrap
-// the AST node that the inner parser gave them in another node.
-
-// Parse a full expression. The optional arguments are used to
-// forbid the `in` operator (in for loops initalization expressions)
-// and provide reference for storing '=' operator inside shorthand
-// property assignment in contexts where both object expression
-// and object pattern might appear (so it's possible to raise
-// delayed syntax error at correct position).
-
-pp$3.parseExpression = function(noIn, refDestructuringErrors) {
-  var this$1 = this;
-
-  var startPos = this.start, startLoc = this.startLoc;
-  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
-  if (this.type === types.comma) {
-    var node = this.startNodeAt(startPos, startLoc);
-    node.expressions = [expr];
-    while (this.eat(types.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors)); }
-    return this.finishNode(node, "SequenceExpression")
-  }
-  return expr
-};
-
-// Parse an assignment expression. This includes applications of
-// operators like `+=`.
-
-pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {
-  if (this.inGenerator && this.isContextual("yield")) { return this.parseYield() }
-
-  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
-  if (refDestructuringErrors) {
-    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
-    oldTrailingComma = refDestructuringErrors.trailingComma;
-    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
-  } else {
-    refDestructuringErrors = new DestructuringErrors;
-    ownDestructuringErrors = true;
-  }
-
-  var startPos = this.start, startLoc = this.startLoc;
-  if (this.type == types.parenL || this.type == types.name)
-    { this.potentialArrowAt = this.start; }
-  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
-  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }
-  if (this.type.isAssign) {
-    var node = this.startNodeAt(startPos, startLoc);
-    node.operator = this.value;
-    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
-    if (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }
-    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly
-    this.checkLVal(left);
-    this.next();
-    node.right = this.parseMaybeAssign(noIn);
-    return this.finishNode(node, "AssignmentExpression")
-  } else {
-    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }
-  }
-  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }
-  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }
-  return left
-};
-
-// Parse a ternary conditional (`?:`) operator.
-
-pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {
-  var startPos = this.start, startLoc = this.startLoc;
-  var expr = this.parseExprOps(noIn, refDestructuringErrors);
-  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
-  if (this.eat(types.question)) {
-    var node = this.startNodeAt(startPos, startLoc);
-    node.test = expr;
-    node.consequent = this.parseMaybeAssign();
-    this.expect(types.colon);
-    node.alternate = this.parseMaybeAssign(noIn);
-    return this.finishNode(node, "ConditionalExpression")
-  }
-  return expr
-};
-
-// Start the precedence parser.
-
-pp$3.parseExprOps = function(noIn, refDestructuringErrors) {
-  var startPos = this.start, startLoc = this.startLoc;
-  var expr = this.parseMaybeUnary(refDestructuringErrors, false);
-  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
-  return expr.start == startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)
-};
-
-// Parse binary operators with the operator precedence parsing
-// algorithm. `left` is the left-hand side of the operator.
-// `minPrec` provides context that allows the function to stop and
-// defer further parser to one of its callers when it encounters an
-// operator that has a lower precedence than the set it is parsing.
-
-pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
-  var prec = this.type.binop;
-  if (prec != null && (!noIn || this.type !== types._in)) {
-    if (prec > minPrec) {
-      var logical = this.type === types.logicalOR || this.type === types.logicalAND;
-      var op = this.value;
-      this.next();
-      var startPos = this.start, startLoc = this.startLoc;
-      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
-      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
-      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)
-    }
-  }
-  return left
-};
-
-pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
-  var node = this.startNodeAt(startPos, startLoc);
-  node.left = left;
-  node.operator = op;
-  node.right = right;
-  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
-};
-
-// Parse unary operators, both prefix and postfix.
-
-pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {
-  var this$1 = this;
-
-  var startPos = this.start, startLoc = this.startLoc, expr;
-  if (this.inAsync && this.isContextual("await")) {
-    expr = this.parseAwait();
-    sawUnary = true;
-  } else if (this.type.prefix) {
-    var node = this.startNode(), update = this.type === types.incDec;
-    node.operator = this.value;
-    node.prefix = true;
-    this.next();
-    node.argument = this.parseMaybeUnary(null, true);
-    this.checkExpressionErrors(refDestructuringErrors, true);
-    if (update) { this.checkLVal(node.argument); }
-    else if (this.strict && node.operator === "delete" &&
-             node.argument.type === "Identifier")
-      { this.raiseRecoverable(node.start, "Deleting local variable in strict mode"); }
-    else { sawUnary = true; }
-    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
-  } else {
-    expr = this.parseExprSubscripts(refDestructuringErrors);
-    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
-    while (this.type.postfix && !this.canInsertSemicolon()) {
-      var node$1 = this$1.startNodeAt(startPos, startLoc);
-      node$1.operator = this$1.value;
-      node$1.prefix = false;
-      node$1.argument = expr;
-      this$1.checkLVal(expr);
-      this$1.next();
-      expr = this$1.finishNode(node$1, "UpdateExpression");
-    }
-  }
-
-  if (!sawUnary && this.eat(types.starstar))
-    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false) }
-  else
-    { return expr }
-};
-
-// Parse call, dot, and `[]`-subscript expressions.
-
-pp$3.parseExprSubscripts = function(refDestructuringErrors) {
-  var startPos = this.start, startLoc = this.startLoc;
-  var expr = this.parseExprAtom(refDestructuringErrors);
-  var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
-  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }
-  var result = this.parseSubscripts(expr, startPos, startLoc);
-  if (refDestructuringErrors && result.type === "MemberExpression") {
-    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }
-    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }
-  }
-  return result
-};
-
-pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {
-  var this$1 = this;
-
-  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&
-      this.lastTokEnd == base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === "async";
-  for (var computed = (void 0);;) {
-    if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {
-      var node = this$1.startNodeAt(startPos, startLoc);
-      node.object = base;
-      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);
-      node.computed = !!computed;
-      if (computed) { this$1.expect(types.bracketR); }
-      base = this$1.finishNode(node, "MemberExpression");
-    } else if (!noCalls && this$1.eat(types.parenL)) {
-      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos;
-      this$1.yieldPos = 0;
-      this$1.awaitPos = 0;
-      var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);
-      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {
-        this$1.checkPatternErrors(refDestructuringErrors, false);
-        this$1.checkYieldAwaitInDefaultParams();
-        this$1.yieldPos = oldYieldPos;
-        this$1.awaitPos = oldAwaitPos;
-        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)
-      }
-      this$1.checkExpressionErrors(refDestructuringErrors, true);
-      this$1.yieldPos = oldYieldPos || this$1.yieldPos;
-      this$1.awaitPos = oldAwaitPos || this$1.awaitPos;
-      var node$1 = this$1.startNodeAt(startPos, startLoc);
-      node$1.callee = base;
-      node$1.arguments = exprList;
-      base = this$1.finishNode(node$1, "CallExpression");
-    } else if (this$1.type === types.backQuote) {
-      var node$2 = this$1.startNodeAt(startPos, startLoc);
-      node$2.tag = base;
-      node$2.quasi = this$1.parseTemplate({isTagged: true});
-      base = this$1.finishNode(node$2, "TaggedTemplateExpression");
-    } else {
-      return base
-    }
-  }
-};
-
-// Parse an atomic expression — either a single token that is an
-// expression, an expression started by a keyword like `function` or
-// `new`, or an expression wrapped in punctuation like `()`, `[]`,
-// or `{}`.
-
-pp$3.parseExprAtom = function(refDestructuringErrors) {
-  var node, canBeArrow = this.potentialArrowAt == this.start;
-  switch (this.type) {
-  case types._super:
-    if (!this.inFunction)
-      { this.raise(this.start, "'super' outside of function or class"); }
-    node = this.startNode();
-    this.next();
-    // The `super` keyword can appear at below:
-    // SuperProperty:
-    //     super [ Expression ]
-    //     super . IdentifierName
-    // SuperCall:
-    //     super Arguments
-    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)
-      { this.unexpected(); }
-    return this.finishNode(node, "Super")
-
-  case types._this:
-    node = this.startNode();
-    this.next();
-    return this.finishNode(node, "ThisExpression")
-
-  case types.name:
-    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
-    var id = this.parseIdent(this.type !== types.name);
-    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function))
-      { return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true) }
-    if (canBeArrow && !this.canInsertSemicolon()) {
-      if (this.eat(types.arrow))
-        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }
-      if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
-        id = this.parseIdent();
-        if (this.canInsertSemicolon() || !this.eat(types.arrow))
-          { this.unexpected(); }
-        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)
-      }
-    }
-    return id
-
-  case types.regexp:
-    var value = this.value;
-    node = this.parseLiteral(value.value);
-    node.regex = {pattern: value.pattern, flags: value.flags};
-    return node
-
-  case types.num: case types.string:
-    return this.parseLiteral(this.value)
-
-  case types._null: case types._true: case types._false:
-    node = this.startNode();
-    node.value = this.type === types._null ? null : this.type === types._true;
-    node.raw = this.type.keyword;
-    this.next();
-    return this.finishNode(node, "Literal")
-
-  case types.parenL:
-    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
-    if (refDestructuringErrors) {
-      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))
-        { refDestructuringErrors.parenthesizedAssign = start; }
-      if (refDestructuringErrors.parenthesizedBind < 0)
-        { refDestructuringErrors.parenthesizedBind = start; }
-    }
-    return expr
-
-  case types.bracketL:
-    node = this.startNode();
-    this.next();
-    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
-    return this.finishNode(node, "ArrayExpression")
-
-  case types.braceL:
-    return this.parseObj(false, refDestructuringErrors)
-
-  case types._function:
-    node = this.startNode();
-    this.next();
-    return this.parseFunction(node, false)
-
-  case types._class:
-    return this.parseClass(this.startNode(), false)
-
-  case types._new:
-    return this.parseNew()
-
-  case types.backQuote:
-    return this.parseTemplate()
-
-  default:
-    this.unexpected();
-  }
-};
-
-pp$3.parseLiteral = function(value) {
-  var node = this.startNode();
-  node.value = value;
-  node.raw = this.input.slice(this.start, this.end);
-  this.next();
-  return this.finishNode(node, "Literal")
-};
-
-pp$3.parseParenExpression = function() {
-  this.expect(types.parenL);
-  var val = this.parseExpression();
-  this.expect(types.parenR);
-  return val
-};
-
-pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
-  var this$1 = this;
-
-  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
-  if (this.options.ecmaVersion >= 6) {
-    this.next();
-
-    var innerStartPos = this.start, innerStartLoc = this.startLoc;
-    var exprList = [], first = true, lastIsComma = false;
-    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
-    this.yieldPos = 0;
-    this.awaitPos = 0;
-    while (this.type !== types.parenR) {
-      first ? first = false : this$1.expect(types.comma);
-      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {
-        lastIsComma = true;
-        break
-      } else if (this$1.type === types.ellipsis) {
-        spreadStart = this$1.start;
-        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));
-        if (this$1.type === types.comma) { this$1.raise(this$1.start, "Comma is not permitted after the rest element"); }
-        break
-      } else {
-        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));
-      }
-    }
-    var innerEndPos = this.start, innerEndLoc = this.startLoc;
-    this.expect(types.parenR);
-
-    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
-      this.checkPatternErrors(refDestructuringErrors, false);
-      this.checkYieldAwaitInDefaultParams();
-      this.yieldPos = oldYieldPos;
-      this.awaitPos = oldAwaitPos;
-      return this.parseParenArrowList(startPos, startLoc, exprList)
-    }
-
-    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }
-    if (spreadStart) { this.unexpected(spreadStart); }
-    this.checkExpressionErrors(refDestructuringErrors, true);
-    this.yieldPos = oldYieldPos || this.yieldPos;
-    this.awaitPos = oldAwaitPos || this.awaitPos;
-
-    if (exprList.length > 1) {
-      val = this.startNodeAt(innerStartPos, innerStartLoc);
-      val.expressions = exprList;
-      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
-    } else {
-      val = exprList[0];
-    }
-  } else {
-    val = this.parseParenExpression();
-  }
-
-  if (this.options.preserveParens) {
-    var par = this.startNodeAt(startPos, startLoc);
-    par.expression = val;
-    return this.finishNode(par, "ParenthesizedExpression")
-  } else {
-    return val
-  }
-};
-
-pp$3.parseParenItem = function(item) {
-  return item
-};
-
-pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
-  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)
-};
-
-// New's precedence is slightly tricky. It must allow its argument to
-// be a `[]` or dot subscript expression, but not a call — at least,
-// not without wrapping it in parentheses. Thus, it uses the noCalls
-// argument to parseSubscripts to prevent it from consuming the
-// argument list.
-
-var empty$1 = [];
-
-pp$3.parseNew = function() {
-  var node = this.startNode();
-  var meta = this.parseIdent(true);
-  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
-    node.meta = meta;
-    var containsEsc = this.containsEsc;
-    node.property = this.parseIdent(true);
-    if (node.property.name !== "target" || containsEsc)
-      { this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target"); }
-    if (!this.inFunction)
-      { this.raiseRecoverable(node.start, "new.target can only be used in functions"); }
-    return this.finishNode(node, "MetaProperty")
-  }
-  var startPos = this.start, startLoc = this.startLoc;
-  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
-  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }
-  else { node.arguments = empty$1; }
-  return this.finishNode(node, "NewExpression")
-};
-
-// Parse template expression.
-
-pp$3.parseTemplateElement = function(ref) {
-  var isTagged = ref.isTagged;
-
-  var elem = this.startNode();
-  if (this.type === types.invalidTemplate) {
-    if (!isTagged) {
-      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
-    }
-    elem.value = {
-      raw: this.value,
-      cooked: null
-    };
-  } else {
-    elem.value = {
-      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
-      cooked: this.value
-    };
-  }
-  this.next();
-  elem.tail = this.type === types.backQuote;
-  return this.finishNode(elem, "TemplateElement")
-};
-
-pp$3.parseTemplate = function(ref) {
-  var this$1 = this;
-  if ( ref === void 0 ) ref = {};
-  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;
-
-  var node = this.startNode();
-  this.next();
-  node.expressions = [];
-  var curElt = this.parseTemplateElement({isTagged: isTagged});
-  node.quasis = [curElt];
-  while (!curElt.tail) {
-    this$1.expect(types.dollarBraceL);
-    node.expressions.push(this$1.parseExpression());
-    this$1.expect(types.braceR);
-    node.quasis.push(curElt = this$1.parseTemplateElement({isTagged: isTagged}));
-  }
-  this.next();
-  return this.finishNode(node, "TemplateLiteral")
-};
-
-pp$3.isAsyncProp = function(prop) {
-  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" &&
-    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&
-    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
-};
-
-// Parse an object literal or binding pattern.
-
-pp$3.parseObj = function(isPattern, refDestructuringErrors) {
-  var this$1 = this;
-
-  var node = this.startNode(), first = true, propHash = {};
-  node.properties = [];
-  this.next();
-  while (!this.eat(types.braceR)) {
-    if (!first) {
-      this$1.expect(types.comma);
-      if (this$1.afterTrailingComma(types.braceR)) { break }
-    } else { first = false; }
-
-    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);
-    if (!isPattern) { this$1.checkPropClash(prop, propHash, refDestructuringErrors); }
-    node.properties.push(prop);
-  }
-  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
-};
-
-pp$3.parseProperty = function(isPattern, refDestructuringErrors) {
-  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
-  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
-    if (isPattern) {
-      prop.argument = this.parseIdent(false);
-      if (this.type === types.comma) {
-        this.raise(this.start, "Comma is not permitted after the rest element");
-      }
-      return this.finishNode(prop, "RestElement")
-    }
-    // To disallow parenthesized identifier via `this.toAssignable()`.
-    if (this.type === types.parenL && refDestructuringErrors) {
-      if (refDestructuringErrors.parenthesizedAssign < 0) {
-        refDestructuringErrors.parenthesizedAssign = this.start;
-      }
-      if (refDestructuringErrors.parenthesizedBind < 0) {
-        refDestructuringErrors.parenthesizedBind = this.start;
-      }
-    }
-    // Parse argument.
-    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
-    // To disallow trailing comma via `this.toAssignable()`.
-    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
-      refDestructuringErrors.trailingComma = this.start;
-    }
-    // Finish
-    return this.finishNode(prop, "SpreadElement")
-  }
-  if (this.options.ecmaVersion >= 6) {
-    prop.method = false;
-    prop.shorthand = false;
-    if (isPattern || refDestructuringErrors) {
-      startPos = this.start;
-      startLoc = this.startLoc;
-    }
-    if (!isPattern)
-      { isGenerator = this.eat(types.star); }
-  }
-  var containsEsc = this.containsEsc;
-  this.parsePropertyName(prop);
-  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
-    isAsync = true;
-    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
-    this.parsePropertyName(prop, refDestructuringErrors);
-  } else {
-    isAsync = false;
-  }
-  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
-  return this.finishNode(prop, "Property")
-};
-
-pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
-  if ((isGenerator || isAsync) && this.type === types.colon)
-    { this.unexpected(); }
-
-  if (this.eat(types.colon)) {
-    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
-    prop.kind = "init";
-  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
-    if (isPattern) { this.unexpected(); }
-    prop.kind = "init";
-    prop.method = true;
-    prop.value = this.parseMethod(isGenerator, isAsync);
-  } else if (!isPattern && !containsEsc &&
-             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
-             (prop.key.name === "get" || prop.key.name === "set") &&
-             (this.type != types.comma && this.type != types.braceR)) {
-    if (isGenerator || isAsync) { this.unexpected(); }
-    prop.kind = prop.key.name;
-    this.parsePropertyName(prop);
-    prop.value = this.parseMethod(false);
-    var paramCount = prop.kind === "get" ? 0 : 1;
-    if (prop.value.params.length !== paramCount) {
-      var start = prop.value.start;
-      if (prop.kind === "get")
-        { this.raiseRecoverable(start, "getter should have no params"); }
-      else
-        { this.raiseRecoverable(start, "setter should have exactly one param"); }
-    } else {
-      if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
-        { this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params"); }
-    }
-  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
-    this.checkUnreserved(prop.key);
-    prop.kind = "init";
-    if (isPattern) {
-      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
-    } else if (this.type === types.eq && refDestructuringErrors) {
-      if (refDestructuringErrors.shorthandAssign < 0)
-        { refDestructuringErrors.shorthandAssign = this.start; }
-      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
-    } else {
-      prop.value = prop.key;
-    }
-    prop.shorthand = true;
-  } else { this.unexpected(); }
-};
-
-pp$3.parsePropertyName = function(prop) {
-  if (this.options.ecmaVersion >= 6) {
-    if (this.eat(types.bracketL)) {
-      prop.computed = true;
-      prop.key = this.parseMaybeAssign();
-      this.expect(types.bracketR);
-      return prop.key
-    } else {
-      prop.computed = false;
-    }
-  }
-  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)
-};
-
-// Initialize empty function node.
-
-pp$3.initFunction = function(node) {
-  node.id = null;
-  if (this.options.ecmaVersion >= 6) {
-    node.generator = false;
-    node.expression = false;
-  }
-  if (this.options.ecmaVersion >= 8)
-    { node.async = false; }
-};
-
-// Parse object or class method.
-
-pp$3.parseMethod = function(isGenerator, isAsync) {
-  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync,
-      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;
-
-  this.initFunction(node);
-  if (this.options.ecmaVersion >= 6)
-    { node.generator = isGenerator; }
-  if (this.options.ecmaVersion >= 8)
-    { node.async = !!isAsync; }
-
-  this.inGenerator = node.generator;
-  this.inAsync = node.async;
-  this.yieldPos = 0;
-  this.awaitPos = 0;
-  this.inFunction = true;
-  this.enterFunctionScope();
-
-  this.expect(types.parenL);
-  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
-  this.checkYieldAwaitInDefaultParams();
-  this.parseFunctionBody(node, false);
-
-  this.inGenerator = oldInGen;
-  this.inAsync = oldInAsync;
-  this.yieldPos = oldYieldPos;
-  this.awaitPos = oldAwaitPos;
-  this.inFunction = oldInFunc;
-  return this.finishNode(node, "FunctionExpression")
-};
-
-// Parse arrow function expression with given parameters.
-
-pp$3.parseArrowExpression = function(node, params, isAsync) {
-  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,
-      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;
-
-  this.enterFunctionScope();
-  this.initFunction(node);
-  if (this.options.ecmaVersion >= 8)
-    { node.async = !!isAsync; }
-
-  this.inGenerator = false;
-  this.inAsync = node.async;
-  this.yieldPos = 0;
-  this.awaitPos = 0;
-  this.inFunction = true;
-
-  node.params = this.toAssignableList(params, true);
-  this.parseFunctionBody(node, true);
-
-  this.inGenerator = oldInGen;
-  this.inAsync = oldInAsync;
-  this.yieldPos = oldYieldPos;
-  this.awaitPos = oldAwaitPos;
-  this.inFunction = oldInFunc;
-  return this.finishNode(node, "ArrowFunctionExpression")
-};
-
-// Parse function body and check parameters.
-
-pp$3.parseFunctionBody = function(node, isArrowFunction) {
-  var isExpression = isArrowFunction && this.type !== types.braceL;
-  var oldStrict = this.strict, useStrict = false;
-
-  if (isExpression) {
-    node.body = this.parseMaybeAssign();
-    node.expression = true;
-    this.checkParams(node, false);
-  } else {
-    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
-    if (!oldStrict || nonSimple) {
-      useStrict = this.strictDirective(this.end);
-      // If this is a strict mode function, verify that argument names
-      // are not repeated, and it does not try to bind the words `eval`
-      // or `arguments`.
-      if (useStrict && nonSimple)
-        { this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list"); }
-    }
-    // Start a new scope with regard to labels and the `inFunction`
-    // flag (restore them to their old value afterwards).
-    var oldLabels = this.labels;
-    this.labels = [];
-    if (useStrict) { this.strict = true; }
-
-    // Add the params to varDeclaredNames to ensure that an error is thrown
-    // if a let/const declaration in the function clashes with one of the params.
-    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));
-    node.body = this.parseBlock(false);
-    node.expression = false;
-    this.adaptDirectivePrologue(node.body.body);
-    this.labels = oldLabels;
-  }
-  this.exitFunctionScope();
-
-  if (this.strict && node.id) {
-    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
-    this.checkLVal(node.id, "none");
-  }
-  this.strict = oldStrict;
-};
-
-pp$3.isSimpleParamList = function(params) {
-  for (var i = 0, list = params; i < list.length; i += 1)
-    {
-    var param = list[i];
-
-    if (param.type !== "Identifier") { return false
-  } }
-  return true
-};
-
-// Checks function params for various disallowed patterns such as using "eval"
-// or "arguments" and duplicate parameters.
-
-pp$3.checkParams = function(node, allowDuplicates) {
-  var this$1 = this;
-
-  var nameHash = {};
-  for (var i = 0, list = node.params; i < list.length; i += 1)
-    {
-    var param = list[i];
-
-    this$1.checkLVal(param, "var", allowDuplicates ? null : nameHash);
-  }
-};
-
-// Parses a comma-separated list of expressions, and returns them as
-// an array. `close` is the token type that ends the list, and
-// `allowEmpty` can be turned on to allow subsequent commas with
-// nothing in between them to be parsed as `null` (which is needed
-// for array literals).
-
-pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
-  var this$1 = this;
-
-  var elts = [], first = true;
-  while (!this.eat(close)) {
-    if (!first) {
-      this$1.expect(types.comma);
-      if (allowTrailingComma && this$1.afterTrailingComma(close)) { break }
-    } else { first = false; }
-
-    var elt = (void 0);
-    if (allowEmpty && this$1.type === types.comma)
-      { elt = null; }
-    else if (this$1.type === types.ellipsis) {
-      elt = this$1.parseSpread(refDestructuringErrors);
-      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0)
-        { refDestructuringErrors.trailingComma = this$1.start; }
-    } else {
-      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);
-    }
-    elts.push(elt);
-  }
-  return elts
-};
-
-pp$3.checkUnreserved = function(ref) {
-  var start = ref.start;
-  var end = ref.end;
-  var name = ref.name;
-
-  if (this.inGenerator && name === "yield")
-    { this.raiseRecoverable(start, "Can not use 'yield' as identifier inside a generator"); }
-  if (this.inAsync && name === "await")
-    { this.raiseRecoverable(start, "Can not use 'await' as identifier inside an async function"); }
-  if (this.isKeyword(name))
-    { this.raise(start, ("Unexpected keyword '" + name + "'")); }
-  if (this.options.ecmaVersion < 6 &&
-    this.input.slice(start, end).indexOf("\\") != -1) { return }
-  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
-  if (re.test(name)) {
-    if (!this.inAsync && name === "await")
-      { this.raiseRecoverable(start, "Can not use keyword 'await' outside an async function"); }
-    this.raiseRecoverable(start, ("The keyword '" + name + "' is reserved"));
-  }
-};
-
-// Parse the next token as an identifier. If `liberal` is true (used
-// when parsing properties), it will also convert keywords into
-// identifiers.
-
-pp$3.parseIdent = function(liberal, isBinding) {
-  var node = this.startNode();
-  if (liberal && this.options.allowReserved == "never") { liberal = false; }
-  if (this.type === types.name) {
-    node.name = this.value;
-  } else if (this.type.keyword) {
-    node.name = this.type.keyword;
-
-    // To fix https://github.com/acornjs/acorn/issues/575
-    // `class` and `function` keywords push new context into this.context.
-    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
-    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
-    if ((node.name === "class" || node.name === "function") &&
-        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
-      this.context.pop();
-    }
-  } else {
-    this.unexpected();
-  }
-  this.next();
-  this.finishNode(node, "Identifier");
-  if (!liberal) { this.checkUnreserved(node); }
-  return node
-};
-
-// Parses yield expression inside generator.
-
-pp$3.parseYield = function() {
-  if (!this.yieldPos) { this.yieldPos = this.start; }
-
-  var node = this.startNode();
-  this.next();
-  if (this.type == types.semi || this.canInsertSemicolon() || (this.type != types.star && !this.type.startsExpr)) {
-    node.delegate = false;
-    node.argument = null;
-  } else {
-    node.delegate = this.eat(types.star);
-    node.argument = this.parseMaybeAssign();
-  }
-  return this.finishNode(node, "YieldExpression")
-};
-
-pp$3.parseAwait = function() {
-  if (!this.awaitPos) { this.awaitPos = this.start; }
-
-  var node = this.startNode();
-  this.next();
-  node.argument = this.parseMaybeUnary(null, true);
-  return this.finishNode(node, "AwaitExpression")
-};
-
-var pp$4 = Parser.prototype;
-
-// This function is used to raise exceptions on parse errors. It
-// takes an offset integer (into the current `input`) to indicate
-// the location of the error, attaches the position to the end
-// of the error message, and then raises a `SyntaxError` with that
-// message.
-
-pp$4.raise = function(pos, message) {
-  var loc = getLineInfo(this.input, pos);
-  message += " (" + loc.line + ":" + loc.column + ")";
-  var err = new SyntaxError(message);
-  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;
-  throw err
-};
-
-pp$4.raiseRecoverable = pp$4.raise;
-
-pp$4.curPosition = function() {
-  if (this.options.locations) {
-    return new Position(this.curLine, this.pos - this.lineStart)
-  }
-};
-
-var pp$5 = Parser.prototype;
-
-// Object.assign polyfill
-var assign = Object.assign || function(target) {
-  var sources = [], len = arguments.length - 1;
-  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];
-
-  for (var i = 0, list = sources; i < list.length; i += 1) {
-    var source = list[i];
-
-    for (var key in source) {
-      if (has(source, key)) {
-        target[key] = source[key];
-      }
-    }
-  }
-  return target
-};
-
-// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.
-
-pp$5.enterFunctionScope = function() {
-  // var: a hash of var-declared names in the current lexical scope
-  // lexical: a hash of lexically-declared names in the current lexical scope
-  // childVar: a hash of var-declared names in all child lexical scopes of the current lexical scope (within the current function scope)
-  // parentLexical: a hash of lexically-declared names in all parent lexical scopes of the current lexical scope (within the current function scope)
-  this.scopeStack.push({var: {}, lexical: {}, childVar: {}, parentLexical: {}});
-};
-
-pp$5.exitFunctionScope = function() {
-  this.scopeStack.pop();
-};
-
-pp$5.enterLexicalScope = function() {
-  var parentScope = this.scopeStack[this.scopeStack.length - 1];
-  var childScope = {var: {}, lexical: {}, childVar: {}, parentLexical: {}};
-
-  this.scopeStack.push(childScope);
-  assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);
-};
-
-pp$5.exitLexicalScope = function() {
-  var childScope = this.scopeStack.pop();
-  var parentScope = this.scopeStack[this.scopeStack.length - 1];
-
-  assign(parentScope.childVar, childScope.var, childScope.childVar);
-};
-
-/**
- * A name can be declared with `var` if there are no variables with the same name declared with `let`/`const`
- * in the current lexical scope or any of the parent lexical scopes in this function.
- */
-pp$5.canDeclareVarName = function(name) {
-  var currentScope = this.scopeStack[this.scopeStack.length - 1];
-
-  return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name)
-};
-
-/**
- * A name can be declared with `let`/`const` if there are no variables with the same name declared with `let`/`const`
- * in the current scope, and there are no variables with the same name declared with `var` in the current scope or in
- * any child lexical scopes in this function.
- */
-pp$5.canDeclareLexicalName = function(name) {
-  var currentScope = this.scopeStack[this.scopeStack.length - 1];
-
-  return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name)
-};
-
-pp$5.declareVarName = function(name) {
-  this.scopeStack[this.scopeStack.length - 1].var[name] = true;
-};
-
-pp$5.declareLexicalName = function(name) {
-  this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;
-};
-
-var Node = function Node(parser, pos, loc) {
-  this.type = "";
-  this.start = pos;
-  this.end = 0;
-  if (parser.options.locations)
-    { this.loc = new SourceLocation(parser, loc); }
-  if (parser.options.directSourceFile)
-    { this.sourceFile = parser.options.directSourceFile; }
-  if (parser.options.ranges)
-    { this.range = [pos, 0]; }
-};
-
-// Start an AST node, attaching a start offset.
-
-var pp$6 = Parser.prototype;
-
-pp$6.startNode = function() {
-  return new Node(this, this.start, this.startLoc)
-};
-
-pp$6.startNodeAt = function(pos, loc) {
-  return new Node(this, pos, loc)
-};
-
-// Finish an AST node, adding `type` and `end` properties.
-
-function finishNodeAt(node, type, pos, loc) {
-  node.type = type;
-  node.end = pos;
-  if (this.options.locations)
-    { node.loc.end = loc; }
-  if (this.options.ranges)
-    { node.range[1] = pos; }
-  return node
-}
-
-pp$6.finishNode = function(node, type) {
-  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
-};
-
-// Finish node at given position
-
-pp$6.finishNodeAt = function(node, type, pos, loc) {
-  return finishNodeAt.call(this, node, type, pos, loc)
-};
-
-// The algorithm used to determine whether a regexp can appear at a
-// given point in the program is loosely based on sweet.js' approach.
-// See https://github.com/mozilla/sweet.js/wiki/design
-
-var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
-  this.token = token;
-  this.isExpr = !!isExpr;
-  this.preserveSpace = !!preserveSpace;
-  this.override = override;
-  this.generator = !!generator;
-};
-
-var types$1 = {
-  b_stat: new TokContext("{", false),
-  b_expr: new TokContext("{", true),
-  b_tmpl: new TokContext("${", false),
-  p_stat: new TokContext("(", false),
-  p_expr: new TokContext("(", true),
-  q_tmpl: new TokContext("`", true, true, function (p) { return p.tryReadTemplateToken(); }),
-  f_stat: new TokContext("function", false),
-  f_expr: new TokContext("function", true),
-  f_expr_gen: new TokContext("function", true, false, null, true),
-  f_gen: new TokContext("function", false, false, null, true)
-};
-
-var pp$7 = Parser.prototype;
-
-pp$7.initialContext = function() {
-  return [types$1.b_stat]
-};
-
-pp$7.braceIsBlock = function(prevType) {
-  var parent = this.curContext();
-  if (parent === types$1.f_expr || parent === types$1.f_stat)
-    { return true }
-  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))
-    { return !parent.isExpr }
-
-  // The check for `tt.name && exprAllowed` detects whether we are
-  // after a `yield` or `of` construct. See the `updateContext` for
-  // `tt.name`.
-  if (prevType === types._return || prevType == types.name && this.exprAllowed)
-    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }
-  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType == types.arrow)
-    { return true }
-  if (prevType == types.braceL)
-    { return parent === types$1.b_stat }
-  if (prevType == types._var || prevType == types.name)
-    { return false }
-  return !this.exprAllowed
-};
-
-pp$7.inGeneratorContext = function() {
-  var this$1 = this;
-
-  for (var i = this.context.length - 1; i >= 1; i--) {
-    var context = this$1.context[i];
-    if (context.token === "function")
-      { return context.generator }
-  }
-  return false
-};
-
-pp$7.updateContext = function(prevType) {
-  var update, type = this.type;
-  if (type.keyword && prevType == types.dot)
-    { this.exprAllowed = false; }
-  else if (update = type.updateContext)
-    { update.call(this, prevType); }
-  else
-    { this.exprAllowed = type.beforeExpr; }
-};
-
-// Token-specific context update code
-
-types.parenR.updateContext = types.braceR.updateContext = function() {
-  if (this.context.length == 1) {
-    this.exprAllowed = true;
-    return
-  }
-  var out = this.context.pop();
-  if (out === types$1.b_stat && this.curContext().token === "function") {
-    out = this.context.pop();
-  }
-  this.exprAllowed = !out.isExpr;
-};
-
-types.braceL.updateContext = function(prevType) {
-  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
-  this.exprAllowed = true;
-};
-
-types.dollarBraceL.updateContext = function() {
-  this.context.push(types$1.b_tmpl);
-  this.exprAllowed = true;
-};
-
-types.parenL.updateContext = function(prevType) {
-  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
-  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
-  this.exprAllowed = true;
-};
-
-types.incDec.updateContext = function() {
-  // tokExprAllowed stays unchanged
-};
-
-types._function.updateContext = types._class.updateContext = function(prevType) {
-  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&
-      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))
-    { this.context.push(types$1.f_expr); }
-  else
-    { this.context.push(types$1.f_stat); }
-  this.exprAllowed = false;
-};
-
-types.backQuote.updateContext = function() {
-  if (this.curContext() === types$1.q_tmpl)
-    { this.context.pop(); }
-  else
-    { this.context.push(types$1.q_tmpl); }
-  this.exprAllowed = false;
-};
-
-types.star.updateContext = function(prevType) {
-  if (prevType == types._function) {
-    var index = this.context.length - 1;
-    if (this.context[index] === types$1.f_expr)
-      { this.context[index] = types$1.f_expr_gen; }
-    else
-      { this.context[index] = types$1.f_gen; }
-  }
-  this.exprAllowed = true;
-};
-
-types.name.updateContext = function(prevType) {
-  var allowed = false;
-  if (this.options.ecmaVersion >= 6) {
-    if (this.value == "of" && !this.exprAllowed ||
-        this.value == "yield" && this.inGeneratorContext())
-      { allowed = true; }
-  }
-  this.exprAllowed = allowed;
-};
-
-var data = {
-  "$LONE": [
-    "ASCII",
-    "ASCII_Hex_Digit",
-    "AHex",
-    "Alphabetic",
-    "Alpha",
-    "Any",
-    "Assigned",
-    "Bidi_Control",
-    "Bidi_C",
-    "Bidi_Mirrored",
-    "Bidi_M",
-    "Case_Ignorable",
-    "CI",
-    "Cased",
-    "Changes_When_Casefolded",
-    "CWCF",
-    "Changes_When_Casemapped",
-    "CWCM",
-    "Changes_When_Lowercased",
-    "CWL",
-    "Changes_When_NFKC_Casefolded",
-    "CWKCF",
-    "Changes_When_Titlecased",
-    "CWT",
-    "Changes_When_Uppercased",
-    "CWU",
-    "Dash",
-    "Default_Ignorable_Code_Point",
-    "DI",
-    "Deprecated",
-    "Dep",
-    "Diacritic",
-    "Dia",
-    "Emoji",
-    "Emoji_Component",
-    "Emoji_Modifier",
-    "Emoji_Modifier_Base",
-    "Emoji_Presentation",
-    "Extender",
-    "Ext",
-    "Grapheme_Base",
-    "Gr_Base",
-    "Grapheme_Extend",
-    "Gr_Ext",
-    "Hex_Digit",
-    "Hex",
-    "IDS_Binary_Operator",
-    "IDSB",
-    "IDS_Trinary_Operator",
-    "IDST",
-    "ID_Continue",
-    "IDC",
-    "ID_Start",
-    "IDS",
-    "Ideographic",
-    "Ideo",
-    "Join_Control",
-    "Join_C",
-    "Logical_Order_Exception",
-    "LOE",
-    "Lowercase",
-    "Lower",
-    "Math",
-    "Noncharacter_Code_Point",
-    "NChar",
-    "Pattern_Syntax",
-    "Pat_Syn",
-    "Pattern_White_Space",
-    "Pat_WS",
-    "Quotation_Mark",
-    "QMark",
-    "Radical",
-    "Regional_Indicator",
-    "RI",
-    "Sentence_Terminal",
-    "STerm",
-    "Soft_Dotted",
-    "SD",
-    "Terminal_Punctuation",
-    "Term",
-    "Unified_Ideograph",
-    "UIdeo",
-    "Uppercase",
-    "Upper",
-    "Variation_Selector",
-    "VS",
-    "White_Space",
-    "space",
-    "XID_Continue",
-    "XIDC",
-    "XID_Start",
-    "XIDS"
-  ],
-  "General_Category": [
-    "Cased_Letter",
-    "LC",
-    "Close_Punctuation",
-    "Pe",
-    "Connector_Punctuation",
-    "Pc",
-    "Control",
-    "Cc",
-    "cntrl",
-    "Currency_Symbol",
-    "Sc",
-    "Dash_Punctuation",
-    "Pd",
-    "Decimal_Number",
-    "Nd",
-    "digit",
-    "Enclosing_Mark",
-    "Me",
-    "Final_Punctuation",
-    "Pf",
-    "Format",
-    "Cf",
-    "Initial_Punctuation",
-    "Pi",
-    "Letter",
-    "L",
-    "Letter_Number",
-    "Nl",
-    "Line_Separator",
-    "Zl",
-    "Lowercase_Letter",
-    "Ll",
-    "Mark",
-    "M",
-    "Combining_Mark",
-    "Math_Symbol",
-    "Sm",
-    "Modifier_Letter",
-    "Lm",
-    "Modifier_Symbol",
-    "Sk",
-    "Nonspacing_Mark",
-    "Mn",
-    "Number",
-    "N",
-    "Open_Punctuation",
-    "Ps",
-    "Other",
-    "C",
-    "Other_Letter",
-    "Lo",
-    "Other_Number",
-    "No",
-    "Other_Punctuation",
-    "Po",
-    "Other_Symbol",
-    "So",
-    "Paragraph_Separator",
-    "Zp",
-    "Private_Use",
-    "Co",
-    "Punctuation",
-    "P",
-    "punct",
-    "Separator",
-    "Z",
-    "Space_Separator",
-    "Zs",
-    "Spacing_Mark",
-    "Mc",
-    "Surrogate",
-    "Cs",
-    "Symbol",
-    "S",
-    "Titlecase_Letter",
-    "Lt",
-    "Unassigned",
-    "Cn",
-    "Uppercase_Letter",
-    "Lu"
-  ],
-  "Script": [
-    "Adlam",
-    "Adlm",
-    "Ahom",
-    "Anatolian_Hieroglyphs",
-    "Hluw",
-    "Arabic",
-    "Arab",
-    "Armenian",
-    "Armn",
-    "Avestan",
-    "Avst",
-    "Balinese",
-    "Bali",
-    "Bamum",
-    "Bamu",
-    "Bassa_Vah",
-    "Bass",
-    "Batak",
-    "Batk",
-    "Bengali",
-    "Beng",
-    "Bhaiksuki",
-    "Bhks",
-    "Bopomofo",
-    "Bopo",
-    "Brahmi",
-    "Brah",
-    "Braille",
-    "Brai",
-    "Buginese",
-    "Bugi",
-    "Buhid",
-    "Buhd",
-    "Canadian_Aboriginal",
-    "Cans",
-    "Carian",
-    "Cari",
-    "Caucasian_Albanian",
-    "Aghb",
-    "Chakma",
-    "Cakm",
-    "Cham",
-    "Cherokee",
-    "Cher",
-    "Common",
-    "Zyyy",
-    "Coptic",
-    "Copt",
-    "Qaac",
-    "Cuneiform",
-    "Xsux",
-    "Cypriot",
-    "Cprt",
-    "Cyrillic",
-    "Cyrl",
-    "Deseret",
-    "Dsrt",
-    "Devanagari",
-    "Deva",
-    "Duployan",
-    "Dupl",
-    "Egyptian_Hieroglyphs",
-    "Egyp",
-    "Elbasan",
-    "Elba",
-    "Ethiopic",
-    "Ethi",
-    "Georgian",
-    "Geor",
-    "Glagolitic",
-    "Glag",
-    "Gothic",
-    "Goth",
-    "Grantha",
-    "Gran",
-    "Greek",
-    "Grek",
-    "Gujarati",
-    "Gujr",
-    "Gurmukhi",
-    "Guru",
-    "Han",
-    "Hani",
-    "Hangul",
-    "Hang",
-    "Hanunoo",
-    "Hano",
-    "Hatran",
-    "Hatr",
-    "Hebrew",
-    "Hebr",
-    "Hiragana",
-    "Hira",
-    "Imperial_Aramaic",
-    "Armi",
-    "Inherited",
-    "Zinh",
-    "Qaai",
-    "Inscriptional_Pahlavi",
-    "Phli",
-    "Inscriptional_Parthian",
-    "Prti",
-    "Javanese",
-    "Java",
-    "Kaithi",
-    "Kthi",
-    "Kannada",
-    "Knda",
-    "Katakana",
-    "Kana",
-    "Kayah_Li",
-    "Kali",
-    "Kharoshthi",
-    "Khar",
-    "Khmer",
-    "Khmr",
-    "Khojki",
-    "Khoj",
-    "Khudawadi",
-    "Sind",
-    "Lao",
-    "Laoo",
-    "Latin",
-    "Latn",
-    "Lepcha",
-    "Lepc",
-    "Limbu",
-    "Limb",
-    "Linear_A",
-    "Lina",
-    "Linear_B",
-    "Linb",
-    "Lisu",
-    "Lycian",
-    "Lyci",
-    "Lydian",
-    "Lydi",
-    "Mahajani",
-    "Mahj",
-    "Malayalam",
-    "Mlym",
-    "Mandaic",
-    "Mand",
-    "Manichaean",
-    "Mani",
-    "Marchen",
-    "Marc",
-    "Masaram_Gondi",
-    "Gonm",
-    "Meetei_Mayek",
-    "Mtei",
-    "Mende_Kikakui",
-    "Mend",
-    "Meroitic_Cursive",
-    "Merc",
-    "Meroitic_Hieroglyphs",
-    "Mero",
-    "Miao",
-    "Plrd",
-    "Modi",
-    "Mongolian",
-    "Mong",
-    "Mro",
-    "Mroo",
-    "Multani",
-    "Mult",
-    "Myanmar",
-    "Mymr",
-    "Nabataean",
-    "Nbat",
-    "New_Tai_Lue",
-    "Talu",
-    "Newa",
-    "Nko",
-    "Nkoo",
-    "Nushu",
-    "Nshu",
-    "Ogham",
-    "Ogam",
-    "Ol_Chiki",
-    "Olck",
-    "Old_Hungarian",
-    "Hung",
-    "Old_Italic",
-    "Ital",
-    "Old_North_Arabian",
-    "Narb",
-    "Old_Permic",
-    "Perm",
-    "Old_Persian",
-    "Xpeo",
-    "Old_South_Arabian",
-    "Sarb",
-    "Old_Turkic",
-    "Orkh",
-    "Oriya",
-    "Orya",
-    "Osage",
-    "Osge",
-    "Osmanya",
-    "Osma",
-    "Pahawh_Hmong",
-    "Hmng",
-    "Palmyrene",
-    "Palm",
-    "Pau_Cin_Hau",
-    "Pauc",
-    "Phags_Pa",
-    "Phag",
-    "Phoenician",
-    "Phnx",
-    "Psalter_Pahlavi",
-    "Phlp",
-    "Rejang",
-    "Rjng",
-    "Runic",
-    "Runr",
-    "Samaritan",
-    "Samr",
-    "Saurashtra",
-    "Saur",
-    "Sharada",
-    "Shrd",
-    "Shavian",
-    "Shaw",
-    "Siddham",
-    "Sidd",
-    "SignWriting",
-    "Sgnw",
-    "Sinhala",
-    "Sinh",
-    "Sora_Sompeng",
-    "Sora",
-    "Soyombo",
-    "Soyo",
-    "Sundanese",
-    "Sund",
-    "Syloti_Nagri",
-    "Sylo",
-    "Syriac",
-    "Syrc",
-    "Tagalog",
-    "Tglg",
-    "Tagbanwa",
-    "Tagb",
-    "Tai_Le",
-    "Tale",
-    "Tai_Tham",
-    "Lana",
-    "Tai_Viet",
-    "Tavt",
-    "Takri",
-    "Takr",
-    "Tamil",
-    "Taml",
-    "Tangut",
-    "Tang",
-    "Telugu",
-    "Telu",
-    "Thaana",
-    "Thaa",
-    "Thai",
-    "Tibetan",
-    "Tibt",
-    "Tifinagh",
-    "Tfng",
-    "Tirhuta",
-    "Tirh",
-    "Ugaritic",
-    "Ugar",
-    "Vai",
-    "Vaii",
-    "Warang_Citi",
-    "Wara",
-    "Yi",
-    "Yiii",
-    "Zanabazar_Square",
-    "Zanb"
-  ]
-};
-Array.prototype.push.apply(data.$LONE, data.General_Category);
-data.gc = data.General_Category;
-data.sc = data.Script_Extensions = data.scx = data.Script;
-
-var pp$9 = Parser.prototype;
-
-var RegExpValidationState = function RegExpValidationState(parser) {
-  this.parser = parser;
-  this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
-  this.source = "";
-  this.flags = "";
-  this.start = 0;
-  this.switchU = false;
-  this.switchN = false;
-  this.pos = 0;
-  this.lastIntValue = 0;
-  this.lastStringValue = "";
-  this.lastAssertionIsQuantifiable = false;
-  this.numCapturingParens = 0;
-  this.maxBackReference = 0;
-  this.groupNames = [];
-  this.backReferenceNames = [];
-};
-
-RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {
-  var unicode = flags.indexOf("u") !== -1;
-  this.start = start | 0;
-  this.source = pattern + "";
-  this.flags = flags;
-  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
-  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
-};
-
-RegExpValidationState.prototype.raise = function raise (message) {
-  this.parser.raiseRecoverable(this.start, ("Invalid regular expression: /" + (this.source) + "/: " + message));
-};
-
-// If u flag is given, this returns the code point at the index (it combines a surrogate pair).
-// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
-RegExpValidationState.prototype.at = function at (i) {
-  var s = this.source;
-  var l = s.length;
-  if (i >= l) {
-    return -1
-  }
-  var c = s.charCodeAt(i);
-  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
-    return c
-  }
-  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00
-};
-
-RegExpValidationState.prototype.nextIndex = function nextIndex (i) {
-  var s = this.source;
-  var l = s.length;
-  if (i >= l) {
-    return l
-  }
-  var c = s.charCodeAt(i);
-  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
-    return i + 1
-  }
-  return i + 2
-};
-
-RegExpValidationState.prototype.current = function current () {
-  return this.at(this.pos)
-};
-
-RegExpValidationState.prototype.lookahead = function lookahead () {
-  return this.at(this.nextIndex(this.pos))
-};
-
-RegExpValidationState.prototype.advance = function advance () {
-  this.pos = this.nextIndex(this.pos);
-};
-
-RegExpValidationState.prototype.eat = function eat (ch) {
-  if (this.current() === ch) {
-    this.advance();
-    return true
-  }
-  return false
-};
-
-function codePointToString$1(ch) {
-  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }
-  ch -= 0x10000;
-  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)
-}
-
-/**
- * Validate the flags part of a given RegExpLiteral.
- *
- * @param {RegExpValidationState} state The state to validate RegExp.
- * @returns {void}
- */
-pp$9.validateRegExpFlags = function(state) {
-  var this$1 = this;
-
-  var validFlags = state.validFlags;
-  var flags = state.flags;
-
-  for (var i = 0; i < flags.length; i++) {
-    var flag = flags.charAt(i);
-    if (validFlags.indexOf(flag) == -1) {
-      this$1.raise(state.start, "Invalid regular expression flag");
-    }
-    if (flags.indexOf(flag, i + 1) > -1) {
-      this$1.raise(state.start, "Duplicate regular expression flag");
-    }
-  }
-};
-
-/**
- * Validate the pattern part of a given RegExpLiteral.
- *
- * @param {RegExpValidationState} state The state to validate RegExp.
- * @returns {void}
- */
-pp$9.validateRegExpPattern = function(state) {
-  this.regexp_pattern(state);
-
-  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
-  // parsing contains a |GroupName|, reparse with the goal symbol
-  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
-  // exception if _P_ did not conform to the grammar, if any elements of _P_
-  // were not matched by the parse, or if any Early Error conditions exist.
-  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
-    state.switchN = true;
-    this.regexp_pattern(state);
-  }
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern
-pp$9.regexp_pattern = function(state) {
-  state.pos = 0;
-  state.lastIntValue = 0;
-  state.lastStringValue = "";
-  state.lastAssertionIsQuantifiable = false;
-  state.numCapturingParens = 0;
-  state.maxBackReference = 0;
-  state.groupNames.length = 0;
-  state.backReferenceNames.length = 0;
-
-  this.regexp_disjunction(state);
-
-  if (state.pos !== state.source.length) {
-    // Make the same messages as V8.
-    if (state.eat(0x29 /* ) */)) {
-      state.raise("Unmatched ')'");
-    }
-    if (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {
-      state.raise("Lone quantifier brackets");
-    }
-  }
-  if (state.maxBackReference > state.numCapturingParens) {
-    state.raise("Invalid escape");
-  }
-  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
-    var name = list[i];
-
-    if (state.groupNames.indexOf(name) === -1) {
-      state.raise("Invalid named capture referenced");
-    }
-  }
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction
-pp$9.regexp_disjunction = function(state) {
-  var this$1 = this;
-
-  this.regexp_alternative(state);
-  while (state.eat(0x7C /* | */)) {
-    this$1.regexp_alternative(state);
-  }
-
-  // Make the same message as V8.
-  if (this.regexp_eatQuantifier(state, true)) {
-    state.raise("Nothing to repeat");
-  }
-  if (state.eat(0x7B /* { */)) {
-    state.raise("Lone quantifier brackets");
-  }
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative
-pp$9.regexp_alternative = function(state) {
-  while (state.pos < state.source.length && this.regexp_eatTerm(state))
-    {  }
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term
-pp$9.regexp_eatTerm = function(state) {
-  if (this.regexp_eatAssertion(state)) {
-    // Handle `QuantifiableAssertion Quantifier` alternative.
-    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
-    // is a QuantifiableAssertion.
-    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
-      // Make the same message as V8.
-      if (state.switchU) {
-        state.raise("Invalid quantifier");
-      }
-    }
-    return true
-  }
-
-  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
-    this.regexp_eatQuantifier(state);
-    return true
-  }
-
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion
-pp$9.regexp_eatAssertion = function(state) {
-  var start = state.pos;
-  state.lastAssertionIsQuantifiable = false;
-
-  // ^, $
-  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {
-    return true
-  }
-
-  // \b \B
-  if (state.eat(0x5C /* \ */)) {
-    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {
-      return true
-    }
-    state.pos = start;
-  }
-
-  // Lookahead / Lookbehind
-  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {
-    var lookbehind = false;
-    if (this.options.ecmaVersion >= 9) {
-      lookbehind = state.eat(0x3C /* < */);
-    }
-    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {
-      this.regexp_disjunction(state);
-      if (!state.eat(0x29 /* ) */)) {
-        state.raise("Unterminated group");
-      }
-      state.lastAssertionIsQuantifiable = !lookbehind;
-      return true
-    }
-  }
-
-  state.pos = start;
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier
-pp$9.regexp_eatQuantifier = function(state, noError) {
-  if ( noError === void 0 ) noError = false;
-
-  if (this.regexp_eatQuantifierPrefix(state, noError)) {
-    state.eat(0x3F /* ? */);
-    return true
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix
-pp$9.regexp_eatQuantifierPrefix = function(state, noError) {
-  return (
-    state.eat(0x2A /* * */) ||
-    state.eat(0x2B /* + */) ||
-    state.eat(0x3F /* ? */) ||
-    this.regexp_eatBracedQuantifier(state, noError)
-  )
-};
-pp$9.regexp_eatBracedQuantifier = function(state, noError) {
-  var start = state.pos;
-  if (state.eat(0x7B /* { */)) {
-    var min = 0, max = -1;
-    if (this.regexp_eatDecimalDigits(state)) {
-      min = state.lastIntValue;
-      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {
-        max = state.lastIntValue;
-      }
-      if (state.eat(0x7D /* } */)) {
-        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
-        if (max !== -1 && max < min && !noError) {
-          state.raise("numbers out of order in {} quantifier");
-        }
-        return true
-      }
-    }
-    if (state.switchU && !noError) {
-      state.raise("Incomplete quantifier");
-    }
-    state.pos = start;
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom
-pp$9.regexp_eatAtom = function(state) {
-  return (
-    this.regexp_eatPatternCharacters(state) ||
-    state.eat(0x2E /* . */) ||
-    this.regexp_eatReverseSolidusAtomEscape(state) ||
-    this.regexp_eatCharacterClass(state) ||
-    this.regexp_eatUncapturingGroup(state) ||
-    this.regexp_eatCapturingGroup(state)
-  )
-};
-pp$9.regexp_eatReverseSolidusAtomEscape = function(state) {
-  var start = state.pos;
-  if (state.eat(0x5C /* \ */)) {
-    if (this.regexp_eatAtomEscape(state)) {
-      return true
-    }
-    state.pos = start;
-  }
-  return false
-};
-pp$9.regexp_eatUncapturingGroup = function(state) {
-  var start = state.pos;
-  if (state.eat(0x28 /* ( */)) {
-    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {
-      this.regexp_disjunction(state);
-      if (state.eat(0x29 /* ) */)) {
-        return true
-      }
-      state.raise("Unterminated group");
-    }
-    state.pos = start;
-  }
-  return false
-};
-pp$9.regexp_eatCapturingGroup = function(state) {
-  if (state.eat(0x28 /* ( */)) {
-    if (this.options.ecmaVersion >= 9) {
-      this.regexp_groupSpecifier(state);
-    } else if (state.current() === 0x3F /* ? */) {
-      state.raise("Invalid group");
-    }
-    this.regexp_disjunction(state);
-    if (state.eat(0x29 /* ) */)) {
-      state.numCapturingParens += 1;
-      return true
-    }
-    state.raise("Unterminated group");
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom
-pp$9.regexp_eatExtendedAtom = function(state) {
-  return (
-    state.eat(0x2E /* . */) ||
-    this.regexp_eatReverseSolidusAtomEscape(state) ||
-    this.regexp_eatCharacterClass(state) ||
-    this.regexp_eatUncapturingGroup(state) ||
-    this.regexp_eatCapturingGroup(state) ||
-    this.regexp_eatInvalidBracedQuantifier(state) ||
-    this.regexp_eatExtendedPatternCharacter(state)
-  )
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier
-pp$9.regexp_eatInvalidBracedQuantifier = function(state) {
-  if (this.regexp_eatBracedQuantifier(state, true)) {
-    state.raise("Nothing to repeat");
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter
-pp$9.regexp_eatSyntaxCharacter = function(state) {
-  var ch = state.current();
-  if (isSyntaxCharacter(ch)) {
-    state.lastIntValue = ch;
-    state.advance();
-    return true
-  }
-  return false
-};
-function isSyntaxCharacter(ch) {
-  return (
-    ch === 0x24 /* $ */ ||
-    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||
-    ch === 0x2E /* . */ ||
-    ch === 0x3F /* ? */ ||
-    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||
-    ch >= 0x7B /* { */ && ch <= 0x7D /* } */
-  )
-}
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
-// But eat eager.
-pp$9.regexp_eatPatternCharacters = function(state) {
-  var start = state.pos;
-  var ch = 0;
-  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
-    state.advance();
-  }
-  return state.pos !== start
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter
-pp$9.regexp_eatExtendedPatternCharacter = function(state) {
-  var ch = state.current();
-  if (
-    ch !== -1 &&
-    ch !== 0x24 /* $ */ &&
-    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&
-    ch !== 0x2E /* . */ &&
-    ch !== 0x3F /* ? */ &&
-    ch !== 0x5B /* [ */ &&
-    ch !== 0x5E /* ^ */ &&
-    ch !== 0x7C /* | */
-  ) {
-    state.advance();
-    return true
-  }
-  return false
-};
-
-// GroupSpecifier[U] ::
-//   [empty]
-//   `?` GroupName[?U]
-pp$9.regexp_groupSpecifier = function(state) {
-  if (state.eat(0x3F /* ? */)) {
-    if (this.regexp_eatGroupName(state)) {
-      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
-        state.raise("Duplicate capture group name");
-      }
-      state.groupNames.push(state.lastStringValue);
-      return
-    }
-    state.raise("Invalid group");
-  }
-};
-
-// GroupName[U] ::
-//   `<` RegExpIdentifierName[?U] `>`
-// Note: this updates `state.lastStringValue` property with the eaten name.
-pp$9.regexp_eatGroupName = function(state) {
-  state.lastStringValue = "";
-  if (state.eat(0x3C /* < */)) {
-    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {
-      return true
-    }
-    state.raise("Invalid capture group name");
-  }
-  return false
-};
-
-// RegExpIdentifierName[U] ::
-//   RegExpIdentifierStart[?U]
-//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]
-// Note: this updates `state.lastStringValue` property with the eaten name.
-pp$9.regexp_eatRegExpIdentifierName = function(state) {
-  state.lastStringValue = "";
-  if (this.regexp_eatRegExpIdentifierStart(state)) {
-    state.lastStringValue += codePointToString$1(state.lastIntValue);
-    while (this.regexp_eatRegExpIdentifierPart(state)) {
-      state.lastStringValue += codePointToString$1(state.lastIntValue);
-    }
-    return true
-  }
-  return false
-};
-
-// RegExpIdentifierStart[U] ::
-//   UnicodeIDStart
-//   `$`
-//   `_`
-//   `\` RegExpUnicodeEscapeSequence[?U]
-pp$9.regexp_eatRegExpIdentifierStart = function(state) {
-  var start = state.pos;
-  var ch = state.current();
-  state.advance();
-
-  if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
-    ch = state.lastIntValue;
-  }
-  if (isRegExpIdentifierStart(ch)) {
-    state.lastIntValue = ch;
-    return true
-  }
-
-  state.pos = start;
-  return false
-};
-function isRegExpIdentifierStart(ch) {
-  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */
-}
-
-// RegExpIdentifierPart[U] ::
-//   UnicodeIDContinue
-//   `$`
-//   `_`
-//   `\` RegExpUnicodeEscapeSequence[?U]
-//   <ZWNJ>
-//   <ZWJ>
-pp$9.regexp_eatRegExpIdentifierPart = function(state) {
-  var start = state.pos;
-  var ch = state.current();
-  state.advance();
-
-  if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
-    ch = state.lastIntValue;
-  }
-  if (isRegExpIdentifierPart(ch)) {
-    state.lastIntValue = ch;
-    return true
-  }
-
-  state.pos = start;
-  return false
-};
-function isRegExpIdentifierPart(ch) {
-  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */
-}
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape
-pp$9.regexp_eatAtomEscape = function(state) {
-  if (
-    this.regexp_eatBackReference(state) ||
-    this.regexp_eatCharacterClassEscape(state) ||
-    this.regexp_eatCharacterEscape(state) ||
-    (state.switchN && this.regexp_eatKGroupName(state))
-  ) {
-    return true
-  }
-  if (state.switchU) {
-    // Make the same message as V8.
-    if (state.current() === 0x63 /* c */) {
-      state.raise("Invalid unicode escape");
-    }
-    state.raise("Invalid escape");
-  }
-  return false
-};
-pp$9.regexp_eatBackReference = function(state) {
-  var start = state.pos;
-  if (this.regexp_eatDecimalEscape(state)) {
-    var n = state.lastIntValue;
-    if (state.switchU) {
-      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
-      if (n > state.maxBackReference) {
-        state.maxBackReference = n;
-      }
-      return true
-    }
-    if (n <= state.numCapturingParens) {
-      return true
-    }
-    state.pos = start;
-  }
-  return false
-};
-pp$9.regexp_eatKGroupName = function(state) {
-  if (state.eat(0x6B /* k */)) {
-    if (this.regexp_eatGroupName(state)) {
-      state.backReferenceNames.push(state.lastStringValue);
-      return true
-    }
-    state.raise("Invalid named reference");
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape
-pp$9.regexp_eatCharacterEscape = function(state) {
-  return (
-    this.regexp_eatControlEscape(state) ||
-    this.regexp_eatCControlLetter(state) ||
-    this.regexp_eatZero(state) ||
-    this.regexp_eatHexEscapeSequence(state) ||
-    this.regexp_eatRegExpUnicodeEscapeSequence(state) ||
-    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||
-    this.regexp_eatIdentityEscape(state)
-  )
-};
-pp$9.regexp_eatCControlLetter = function(state) {
-  var start = state.pos;
-  if (state.eat(0x63 /* c */)) {
-    if (this.regexp_eatControlLetter(state)) {
-      return true
-    }
-    state.pos = start;
-  }
-  return false
-};
-pp$9.regexp_eatZero = function(state) {
-  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {
-    state.lastIntValue = 0;
-    state.advance();
-    return true
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape
-pp$9.regexp_eatControlEscape = function(state) {
-  var ch = state.current();
-  if (ch === 0x74 /* t */) {
-    state.lastIntValue = 0x09; /* \t */
-    state.advance();
-    return true
-  }
-  if (ch === 0x6E /* n */) {
-    state.lastIntValue = 0x0A; /* \n */
-    state.advance();
-    return true
-  }
-  if (ch === 0x76 /* v */) {
-    state.lastIntValue = 0x0B; /* \v */
-    state.advance();
-    return true
-  }
-  if (ch === 0x66 /* f */) {
-    state.lastIntValue = 0x0C; /* \f */
-    state.advance();
-    return true
-  }
-  if (ch === 0x72 /* r */) {
-    state.lastIntValue = 0x0D; /* \r */
-    state.advance();
-    return true
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter
-pp$9.regexp_eatControlLetter = function(state) {
-  var ch = state.current();
-  if (isControlLetter(ch)) {
-    state.lastIntValue = ch % 0x20;
-    state.advance();
-    return true
-  }
-  return false
-};
-function isControlLetter(ch) {
-  return (
-    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||
-    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)
-  )
-}
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence
-pp$9.regexp_eatRegExpUnicodeEscapeSequence = function(state) {
-  var start = state.pos;
-
-  if (state.eat(0x75 /* u */)) {
-    if (this.regexp_eatFixedHexDigits(state, 4)) {
-      var lead = state.lastIntValue;
-      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {
-        var leadSurrogateEnd = state.pos;
-        if (state.eat(0x5C /* \ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {
-          var trail = state.lastIntValue;
-          if (trail >= 0xDC00 && trail <= 0xDFFF) {
-            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
-            return true
-          }
-        }
-        state.pos = leadSurrogateEnd;
-        state.lastIntValue = lead;
-      }
-      return true
-    }
-    if (
-      state.switchU &&
-      state.eat(0x7B /* { */) &&
-      this.regexp_eatHexDigits(state) &&
-      state.eat(0x7D /* } */) &&
-      isValidUnicode(state.lastIntValue)
-    ) {
-      return true
-    }
-    if (state.switchU) {
-      state.raise("Invalid unicode escape");
-    }
-    state.pos = start;
-  }
-
-  return false
-};
-function isValidUnicode(ch) {
-  return ch >= 0 && ch <= 0x10FFFF
-}
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape
-pp$9.regexp_eatIdentityEscape = function(state) {
-  if (state.switchU) {
-    if (this.regexp_eatSyntaxCharacter(state)) {
-      return true
-    }
-    if (state.eat(0x2F /* / */)) {
-      state.lastIntValue = 0x2F; /* / */
-      return true
-    }
-    return false
-  }
-
-  var ch = state.current();
-  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {
-    state.lastIntValue = ch;
-    state.advance();
-    return true
-  }
-
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape
-pp$9.regexp_eatDecimalEscape = function(state) {
-  state.lastIntValue = 0;
-  var ch = state.current();
-  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {
-    do {
-      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
-      state.advance();
-    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)
-    return true
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape
-pp$9.regexp_eatCharacterClassEscape = function(state) {
-  var ch = state.current();
-
-  if (isCharacterClassEscape(ch)) {
-    state.lastIntValue = -1;
-    state.advance();
-    return true
-  }
-
-  if (
-    state.switchU &&
-    this.options.ecmaVersion >= 9 &&
-    (ch === 0x50 /* P */ || ch === 0x70 /* p */)
-  ) {
-    state.lastIntValue = -1;
-    state.advance();
-    if (
-      state.eat(0x7B /* { */) &&
-      this.regexp_eatUnicodePropertyValueExpression(state) &&
-      state.eat(0x7D /* } */)
-    ) {
-      return true
-    }
-    state.raise("Invalid property name");
-  }
-
-  return false
-};
-function isCharacterClassEscape(ch) {
-  return (
-    ch === 0x64 /* d */ ||
-    ch === 0x44 /* D */ ||
-    ch === 0x73 /* s */ ||
-    ch === 0x53 /* S */ ||
-    ch === 0x77 /* w */ ||
-    ch === 0x57 /* W */
-  )
-}
-
-// UnicodePropertyValueExpression ::
-//   UnicodePropertyName `=` UnicodePropertyValue
-//   LoneUnicodePropertyNameOrValue
-pp$9.regexp_eatUnicodePropertyValueExpression = function(state) {
-  var start = state.pos;
-
-  // UnicodePropertyName `=` UnicodePropertyValue
-  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {
-    var name = state.lastStringValue;
-    if (this.regexp_eatUnicodePropertyValue(state)) {
-      var value = state.lastStringValue;
-      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
-      return true
-    }
-  }
-  state.pos = start;
-
-  // LoneUnicodePropertyNameOrValue
-  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
-    var nameOrValue = state.lastStringValue;
-    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
-    return true
-  }
-  return false
-};
-pp$9.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
-  if (!data.hasOwnProperty(name) || data[name].indexOf(value) === -1) {
-    state.raise("Invalid property name");
-  }
-};
-pp$9.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
-  if (data.$LONE.indexOf(nameOrValue) === -1) {
-    state.raise("Invalid property name");
-  }
-};
-
-// UnicodePropertyName ::
-//   UnicodePropertyNameCharacters
-pp$9.regexp_eatUnicodePropertyName = function(state) {
-  var ch = 0;
-  state.lastStringValue = "";
-  while (isUnicodePropertyNameCharacter(ch = state.current())) {
-    state.lastStringValue += codePointToString$1(ch);
-    state.advance();
-  }
-  return state.lastStringValue !== ""
-};
-function isUnicodePropertyNameCharacter(ch) {
-  return isControlLetter(ch) || ch === 0x5F /* _ */
-}
-
-// UnicodePropertyValue ::
-//   UnicodePropertyValueCharacters
-pp$9.regexp_eatUnicodePropertyValue = function(state) {
-  var ch = 0;
-  state.lastStringValue = "";
-  while (isUnicodePropertyValueCharacter(ch = state.current())) {
-    state.lastStringValue += codePointToString$1(ch);
-    state.advance();
-  }
-  return state.lastStringValue !== ""
-};
-function isUnicodePropertyValueCharacter(ch) {
-  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)
-}
-
-// LoneUnicodePropertyNameOrValue ::
-//   UnicodePropertyValueCharacters
-pp$9.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
-  return this.regexp_eatUnicodePropertyValue(state)
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass
-pp$9.regexp_eatCharacterClass = function(state) {
-  if (state.eat(0x5B /* [ */)) {
-    state.eat(0x5E /* ^ */);
-    this.regexp_classRanges(state);
-    if (state.eat(0x5D /* [ */)) {
-      return true
-    }
-    // Unreachable since it threw "unterminated regular expression" error before.
-    state.raise("Unterminated character class");
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
-// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
-// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash
-pp$9.regexp_classRanges = function(state) {
-  var this$1 = this;
-
-  while (this.regexp_eatClassAtom(state)) {
-    var left = state.lastIntValue;
-    if (state.eat(0x2D /* - */) && this$1.regexp_eatClassAtom(state)) {
-      var right = state.lastIntValue;
-      if (state.switchU && (left === -1 || right === -1)) {
-        state.raise("Invalid character class");
-      }
-      if (left !== -1 && right !== -1 && left > right) {
-        state.raise("Range out of order in character class");
-      }
-    }
-  }
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
-// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash
-pp$9.regexp_eatClassAtom = function(state) {
-  var start = state.pos;
-
-  if (state.eat(0x5C /* \ */)) {
-    if (this.regexp_eatClassEscape(state)) {
-      return true
-    }
-    if (state.switchU) {
-      // Make the same message as V8.
-      var ch$1 = state.current();
-      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {
-        state.raise("Invalid class escape");
-      }
-      state.raise("Invalid escape");
-    }
-    state.pos = start;
-  }
-
-  var ch = state.current();
-  if (ch !== 0x5D /* [ */) {
-    state.lastIntValue = ch;
-    state.advance();
-    return true
-  }
-
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape
-pp$9.regexp_eatClassEscape = function(state) {
-  var start = state.pos;
-
-  if (state.eat(0x62 /* b */)) {
-    state.lastIntValue = 0x08; /* <BS> */
-    return true
-  }
-
-  if (state.switchU && state.eat(0x2D /* - */)) {
-    state.lastIntValue = 0x2D; /* - */
-    return true
-  }
-
-  if (!state.switchU && state.eat(0x63 /* c */)) {
-    if (this.regexp_eatClassControlLetter(state)) {
-      return true
-    }
-    state.pos = start;
-  }
-
-  return (
-    this.regexp_eatCharacterClassEscape(state) ||
-    this.regexp_eatCharacterEscape(state)
-  )
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter
-pp$9.regexp_eatClassControlLetter = function(state) {
-  var ch = state.current();
-  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {
-    state.lastIntValue = ch % 0x20;
-    state.advance();
-    return true
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
-pp$9.regexp_eatHexEscapeSequence = function(state) {
-  var start = state.pos;
-  if (state.eat(0x78 /* x */)) {
-    if (this.regexp_eatFixedHexDigits(state, 2)) {
-      return true
-    }
-    if (state.switchU) {
-      state.raise("Invalid escape");
-    }
-    state.pos = start;
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits
-pp$9.regexp_eatDecimalDigits = function(state) {
-  var start = state.pos;
-  var ch = 0;
-  state.lastIntValue = 0;
-  while (isDecimalDigit(ch = state.current())) {
-    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
-    state.advance();
-  }
-  return state.pos !== start
-};
-function isDecimalDigit(ch) {
-  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */
-}
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits
-pp$9.regexp_eatHexDigits = function(state) {
-  var start = state.pos;
-  var ch = 0;
-  state.lastIntValue = 0;
-  while (isHexDigit(ch = state.current())) {
-    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
-    state.advance();
-  }
-  return state.pos !== start
-};
-function isHexDigit(ch) {
-  return (
-    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||
-    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||
-    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)
-  )
-}
-function hexToInt(ch) {
-  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {
-    return 10 + (ch - 0x41 /* A */)
-  }
-  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {
-    return 10 + (ch - 0x61 /* a */)
-  }
-  return ch - 0x30 /* 0 */
-}
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
-// Allows only 0-377(octal) i.e. 0-255(decimal).
-pp$9.regexp_eatLegacyOctalEscapeSequence = function(state) {
-  if (this.regexp_eatOctalDigit(state)) {
-    var n1 = state.lastIntValue;
-    if (this.regexp_eatOctalDigit(state)) {
-      var n2 = state.lastIntValue;
-      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
-        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
-      } else {
-        state.lastIntValue = n1 * 8 + n2;
-      }
-    } else {
-      state.lastIntValue = n1;
-    }
-    return true
-  }
-  return false
-};
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit
-pp$9.regexp_eatOctalDigit = function(state) {
-  var ch = state.current();
-  if (isOctalDigit(ch)) {
-    state.lastIntValue = ch - 0x30; /* 0 */
-    state.advance();
-    return true
-  }
-  state.lastIntValue = 0;
-  return false
-};
-function isOctalDigit(ch) {
-  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */
-}
-
-// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
-// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
-// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
-pp$9.regexp_eatFixedHexDigits = function(state, length) {
-  var start = state.pos;
-  state.lastIntValue = 0;
-  for (var i = 0; i < length; ++i) {
-    var ch = state.current();
-    if (!isHexDigit(ch)) {
-      state.pos = start;
-      return false
-    }
-    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
-    state.advance();
-  }
-  return true
-};
-
-// Object type used to represent tokens. Note that normally, tokens
-// simply exist as properties on the parser object. This is only
-// used for the onToken callback and the external tokenizer.
-
-var Token = function Token(p) {
-  this.type = p.type;
-  this.value = p.value;
-  this.start = p.start;
-  this.end = p.end;
-  if (p.options.locations)
-    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }
-  if (p.options.ranges)
-    { this.range = [p.start, p.end]; }
-};
-
-// ## Tokenizer
-
-var pp$8 = Parser.prototype;
-
-// Move to the next token
-
-pp$8.next = function() {
-  if (this.options.onToken)
-    { this.options.onToken(new Token(this)); }
-
-  this.lastTokEnd = this.end;
-  this.lastTokStart = this.start;
-  this.lastTokEndLoc = this.endLoc;
-  this.lastTokStartLoc = this.startLoc;
-  this.nextToken();
-};
-
-pp$8.getToken = function() {
-  this.next();
-  return new Token(this)
-};
-
-// If we're in an ES6 environment, make parsers iterable
-if (typeof Symbol !== "undefined")
-  { pp$8[Symbol.iterator] = function() {
-    var this$1 = this;
-
-    return {
-      next: function () {
-        var token = this$1.getToken();
-        return {
-          done: token.type === types.eof,
-          value: token
-        }
-      }
-    }
-  }; }
-
-// Toggle strict mode. Re-reads the next number or string to please
-// pedantic tests (`"use strict"; 010;` should fail).
-
-pp$8.curContext = function() {
-  return this.context[this.context.length - 1]
-};
-
-// Read a single token, updating the parser object's token-related
-// properties.
-
-pp$8.nextToken = function() {
-  var curContext = this.curContext();
-  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }
-
-  this.start = this.pos;
-  if (this.options.locations) { this.startLoc = this.curPosition(); }
-  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }
-
-  if (curContext.override) { return curContext.override(this) }
-  else { this.readToken(this.fullCharCodeAtPos()); }
-};
-
-pp$8.readToken = function(code) {
-  // Identifier or keyword. '\uXXXX' sequences are allowed in
-  // identifiers, so '\' also dispatches to that.
-  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
-    { return this.readWord() }
-
-  return this.getTokenFromCode(code)
-};
-
-pp$8.fullCharCodeAtPos = function() {
-  var code = this.input.charCodeAt(this.pos);
-  if (code <= 0xd7ff || code >= 0xe000) { return code }
-  var next = this.input.charCodeAt(this.pos + 1);
-  return (code << 10) + next - 0x35fdc00
-};
-
-pp$8.skipBlockComment = function() {
-  var this$1 = this;
-
-  var startLoc = this.options.onComment && this.curPosition();
-  var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
-  if (end === -1) { this.raise(this.pos - 2, "Unterminated comment"); }
-  this.pos = end + 2;
-  if (this.options.locations) {
-    lineBreakG.lastIndex = start;
-    var match;
-    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
-      ++this$1.curLine;
-      this$1.lineStart = match.index + match[0].length;
-    }
-  }
-  if (this.options.onComment)
-    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
-                           startLoc, this.curPosition()); }
-};
-
-pp$8.skipLineComment = function(startSkip) {
-  var this$1 = this;
-
-  var start = this.pos;
-  var startLoc = this.options.onComment && this.curPosition();
-  var ch = this.input.charCodeAt(this.pos += startSkip);
-  while (this.pos < this.input.length && !isNewLine(ch)) {
-    ch = this$1.input.charCodeAt(++this$1.pos);
-  }
-  if (this.options.onComment)
-    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
-                           startLoc, this.curPosition()); }
-};
-
-// Called at the start of the parse and after every token. Skips
-// whitespace and comments, and.
-
-pp$8.skipSpace = function() {
-  var this$1 = this;
-
-  loop: while (this.pos < this.input.length) {
-    var ch = this$1.input.charCodeAt(this$1.pos);
-    switch (ch) {
-    case 32: case 160: // ' '
-      ++this$1.pos;
-      break
-    case 13:
-      if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {
-        ++this$1.pos;
-      }
-    case 10: case 8232: case 8233:
-      ++this$1.pos;
-      if (this$1.options.locations) {
-        ++this$1.curLine;
-        this$1.lineStart = this$1.pos;
-      }
-      break
-    case 47: // '/'
-      switch (this$1.input.charCodeAt(this$1.pos + 1)) {
-      case 42: // '*'
-        this$1.skipBlockComment();
-        break
-      case 47:
-        this$1.skipLineComment(2);
-        break
-      default:
-        break loop
-      }
-      break
-    default:
-      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
-        ++this$1.pos;
-      } else {
-        break loop
-      }
-    }
-  }
-};
-
-// Called at the end of every token. Sets `end`, `val`, and
-// maintains `context` and `exprAllowed`, and skips the space after
-// the token, so that the next one's `start` will point at the
-// right position.
-
-pp$8.finishToken = function(type, val) {
-  this.end = this.pos;
-  if (this.options.locations) { this.endLoc = this.curPosition(); }
-  var prevType = this.type;
-  this.type = type;
-  this.value = val;
-
-  this.updateContext(prevType);
-};
-
-// ### Token reading
-
-// This is the function that is called to fetch the next token. It
-// is somewhat obscure, because it works in character codes rather
-// than characters, and because operator parsing has been inlined
-// into it.
-//
-// All in the name of speed.
-//
-pp$8.readToken_dot = function() {
-  var next = this.input.charCodeAt(this.pos + 1);
-  if (next >= 48 && next <= 57) { return this.readNumber(true) }
-  var next2 = this.input.charCodeAt(this.pos + 2);
-  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
-    this.pos += 3;
-    return this.finishToken(types.ellipsis)
-  } else {
-    ++this.pos;
-    return this.finishToken(types.dot)
-  }
-};
-
-pp$8.readToken_slash = function() { // '/'
-  var next = this.input.charCodeAt(this.pos + 1);
-  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }
-  if (next === 61) { return this.finishOp(types.assign, 2) }
-  return this.finishOp(types.slash, 1)
-};
-
-pp$8.readToken_mult_modulo_exp = function(code) { // '%*'
-  var next = this.input.charCodeAt(this.pos + 1);
-  var size = 1;
-  var tokentype = code === 42 ? types.star : types.modulo;
-
-  // exponentiation operator ** and **=
-  if (this.options.ecmaVersion >= 7 && code == 42 && next === 42) {
-    ++size;
-    tokentype = types.starstar;
-    next = this.input.charCodeAt(this.pos + 2);
-  }
-
-  if (next === 61) { return this.finishOp(types.assign, size + 1) }
-  return this.finishOp(tokentype, size)
-};
-
-pp$8.readToken_pipe_amp = function(code) { // '|&'
-  var next = this.input.charCodeAt(this.pos + 1);
-  if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }
-  if (next === 61) { return this.finishOp(types.assign, 2) }
-  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)
-};
-
-pp$8.readToken_caret = function() { // '^'
-  var next = this.input.charCodeAt(this.pos + 1);
-  if (next === 61) { return this.finishOp(types.assign, 2) }
-  return this.finishOp(types.bitwiseXOR, 1)
-};
-
-pp$8.readToken_plus_min = function(code) { // '+-'
-  var next = this.input.charCodeAt(this.pos + 1);
-  if (next === code) {
-    if (next == 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 62 &&
-        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
-      // A `-->` line comment
-      this.skipLineComment(3);
-      this.skipSpace();
-      return this.nextToken()
-    }
-    return this.finishOp(types.incDec, 2)
-  }
-  if (next === 61) { return this.finishOp(types.assign, 2) }
-  return this.finishOp(types.plusMin, 1)
-};
-
-pp$8.readToken_lt_gt = function(code) { // '<>'
-  var next = this.input.charCodeAt(this.pos + 1);
-  var size = 1;
-  if (next === code) {
-    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
-    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }
-    return this.finishOp(types.bitShift, size)
-  }
-  if (next == 33 && code == 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 45 &&
-      this.input.charCodeAt(this.pos + 3) == 45) {
-    // `<!--`, an XML-style comment that should be interpreted as a line comment
-    this.skipLineComment(4);
-    this.skipSpace();
-    return this.nextToken()
-  }
-  if (next === 61) { size = 2; }
-  return this.finishOp(types.relational, size)
-};
-
-pp$8.readToken_eq_excl = function(code) { // '=!'
-  var next = this.input.charCodeAt(this.pos + 1);
-  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }
-  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'
-    this.pos += 2;
-    return this.finishToken(types.arrow)
-  }
-  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)
-};
-
-pp$8.getTokenFromCode = function(code) {
-  switch (code) {
-  // The interpretation of a dot depends on whether it is followed
-  // by a digit or another two dots.
-  case 46: // '.'
-    return this.readToken_dot()
-
-  // Punctuation tokens.
-  case 40: ++this.pos; return this.finishToken(types.parenL)
-  case 41: ++this.pos; return this.finishToken(types.parenR)
-  case 59: ++this.pos; return this.finishToken(types.semi)
-  case 44: ++this.pos; return this.finishToken(types.comma)
-  case 91: ++this.pos; return this.finishToken(types.bracketL)
-  case 93: ++this.pos; return this.finishToken(types.bracketR)
-  case 123: ++this.pos; return this.finishToken(types.braceL)
-  case 125: ++this.pos; return this.finishToken(types.braceR)
-  case 58: ++this.pos; return this.finishToken(types.colon)
-  case 63: ++this.pos; return this.finishToken(types.question)
-
-  case 96: // '`'
-    if (this.options.ecmaVersion < 6) { break }
-    ++this.pos;
-    return this.finishToken(types.backQuote)
-
-  case 48: // '0'
-    var next = this.input.charCodeAt(this.pos + 1);
-    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number
-    if (this.options.ecmaVersion >= 6) {
-      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number
-      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number
-    }
-
-  // Anything else beginning with a digit is an integer, octal
-  // number, or float.
-  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
-    return this.readNumber(false)
-
-  // Quotes produce strings.
-  case 34: case 39: // '"', "'"
-    return this.readString(code)
-
-  // Operators are parsed inline in tiny state machines. '=' (61) is
-  // often referred to. `finishOp` simply skips the amount of
-  // characters it is given as second argument, and returns a token
-  // of the type given by its first argument.
-
-  case 47: // '/'
-    return this.readToken_slash()
-
-  case 37: case 42: // '%*'
-    return this.readToken_mult_modulo_exp(code)
-
-  case 124: case 38: // '|&'
-    return this.readToken_pipe_amp(code)
-
-  case 94: // '^'
-    return this.readToken_caret()
-
-  case 43: case 45: // '+-'
-    return this.readToken_plus_min(code)
-
-  case 60: case 62: // '<>'
-    return this.readToken_lt_gt(code)
-
-  case 61: case 33: // '=!'
-    return this.readToken_eq_excl(code)
-
-  case 126: // '~'
-    return this.finishOp(types.prefix, 1)
-  }
-
-  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
-};
-
-pp$8.finishOp = function(type, size) {
-  var str = this.input.slice(this.pos, this.pos + size);
-  this.pos += size;
-  return this.finishToken(type, str)
-};
-
-pp$8.readRegexp = function() {
-  var this$1 = this;
-
-  var escaped, inClass, start = this.pos;
-  for (;;) {
-    if (this$1.pos >= this$1.input.length) { this$1.raise(start, "Unterminated regular expression"); }
-    var ch = this$1.input.charAt(this$1.pos);
-    if (lineBreak.test(ch)) { this$1.raise(start, "Unterminated regular expression"); }
-    if (!escaped) {
-      if (ch === "[") { inClass = true; }
-      else if (ch === "]" && inClass) { inClass = false; }
-      else if (ch === "/" && !inClass) { break }
-      escaped = ch === "\\";
-    } else { escaped = false; }
-    ++this$1.pos;
-  }
-  var pattern = this.input.slice(start, this.pos);
-  ++this.pos;
-  var flagsStart = this.pos;
-  var flags = this.readWord1();
-  if (this.containsEsc) { this.unexpected(flagsStart); }
-
-  // Validate pattern
-  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
-  state.reset(start, pattern, flags);
-  this.validateRegExpFlags(state);
-  this.validateRegExpPattern(state);
-
-  // Create Literal#value property value.
-  var value = null;
-  try {
-    value = new RegExp(pattern, flags);
-  } catch (e) {
-    // ESTree requires null if it failed to instantiate RegExp object.
-    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
-  }
-
-  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})
-};
-
-// Read an integer in the given radix. Return null if zero digits
-// were read, the integer value otherwise. When `len` is given, this
-// will return `null` unless the integer has exactly `len` digits.
-
-pp$8.readInt = function(radix, len) {
-  var this$1 = this;
-
-  var start = this.pos, total = 0;
-  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
-    var code = this$1.input.charCodeAt(this$1.pos), val = (void 0);
-    if (code >= 97) { val = code - 97 + 10; } // a
-    else if (code >= 65) { val = code - 65 + 10; } // A
-    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9
-    else { val = Infinity; }
-    if (val >= radix) { break }
-    ++this$1.pos;
-    total = total * radix + val;
-  }
-  if (this.pos === start || len != null && this.pos - start !== len) { return null }
-
-  return total
-};
-
-pp$8.readRadixNumber = function(radix) {
-  this.pos += 2; // 0x
-  var val = this.readInt(radix);
-  if (val == null) { this.raise(this.start + 2, "Expected number in radix " + radix); }
-  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
-  return this.finishToken(types.num, val)
-};
-
-// Read an integer, octal integer, or floating-point number.
-
-pp$8.readNumber = function(startsWithDot) {
-  var start = this.pos;
-  if (!startsWithDot && this.readInt(10) === null) { this.raise(start, "Invalid number"); }
-  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
-  if (octal && this.strict) { this.raise(start, "Invalid number"); }
-  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }
-  var next = this.input.charCodeAt(this.pos);
-  if (next === 46 && !octal) { // '.'
-    ++this.pos;
-    this.readInt(10);
-    next = this.input.charCodeAt(this.pos);
-  }
-  if ((next === 69 || next === 101) && !octal) { // 'eE'
-    next = this.input.charCodeAt(++this.pos);
-    if (next === 43 || next === 45) { ++this.pos; } // '+-'
-    if (this.readInt(10) === null) { this.raise(start, "Invalid number"); }
-  }
-  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
-
-  var str = this.input.slice(start, this.pos);
-  var val = octal ? parseInt(str, 8) : parseFloat(str);
-  return this.finishToken(types.num, val)
-};
-
-// Read a string value, interpreting backslash-escapes.
-
-pp$8.readCodePoint = function() {
-  var ch = this.input.charCodeAt(this.pos), code;
-
-  if (ch === 123) { // '{'
-    if (this.options.ecmaVersion < 6) { this.unexpected(); }
-    var codePos = ++this.pos;
-    code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
-    ++this.pos;
-    if (code > 0x10FFFF) { this.invalidStringToken(codePos, "Code point out of bounds"); }
-  } else {
-    code = this.readHexChar(4);
-  }
-  return code
-};
-
-function codePointToString(code) {
-  // UTF-16 Decoding
-  if (code <= 0xFFFF) { return String.fromCharCode(code) }
-  code -= 0x10000;
-  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
-}
-
-pp$8.readString = function(quote) {
-  var this$1 = this;
-
-  var out = "", chunkStart = ++this.pos;
-  for (;;) {
-    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, "Unterminated string constant"); }
-    var ch = this$1.input.charCodeAt(this$1.pos);
-    if (ch === quote) { break }
-    if (ch === 92) { // '\'
-      out += this$1.input.slice(chunkStart, this$1.pos);
-      out += this$1.readEscapedChar(false);
-      chunkStart = this$1.pos;
-    } else {
-      if (isNewLine(ch)) { this$1.raise(this$1.start, "Unterminated string constant"); }
-      ++this$1.pos;
-    }
-  }
-  out += this.input.slice(chunkStart, this.pos++);
-  return this.finishToken(types.string, out)
-};
-
-// Reads template string tokens.
-
-var INVALID_TEMPLATE_ESCAPE_ERROR = {};
-
-pp$8.tryReadTemplateToken = function() {
-  this.inTemplateElement = true;
-  try {
-    this.readTmplToken();
-  } catch (err) {
-    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
-      this.readInvalidTemplateToken();
-    } else {
-      throw err
-    }
-  }
-
-  this.inTemplateElement = false;
-};
-
-pp$8.invalidStringToken = function(position, message) {
-  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
-    throw INVALID_TEMPLATE_ESCAPE_ERROR
-  } else {
-    this.raise(position, message);
-  }
-};
-
-pp$8.readTmplToken = function() {
-  var this$1 = this;
-
-  var out = "", chunkStart = this.pos;
-  for (;;) {
-    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, "Unterminated template"); }
-    var ch = this$1.input.charCodeAt(this$1.pos);
-    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'
-      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {
-        if (ch === 36) {
-          this$1.pos += 2;
-          return this$1.finishToken(types.dollarBraceL)
-        } else {
-          ++this$1.pos;
-          return this$1.finishToken(types.backQuote)
-        }
-      }
-      out += this$1.input.slice(chunkStart, this$1.pos);
-      return this$1.finishToken(types.template, out)
-    }
-    if (ch === 92) { // '\'
-      out += this$1.input.slice(chunkStart, this$1.pos);
-      out += this$1.readEscapedChar(true);
-      chunkStart = this$1.pos;
-    } else if (isNewLine(ch)) {
-      out += this$1.input.slice(chunkStart, this$1.pos);
-      ++this$1.pos;
-      switch (ch) {
-      case 13:
-        if (this$1.input.charCodeAt(this$1.pos) === 10) { ++this$1.pos; }
-      case 10:
-        out += "\n";
-        break
-      default:
-        out += String.fromCharCode(ch);
-        break
-      }
-      if (this$1.options.locations) {
-        ++this$1.curLine;
-        this$1.lineStart = this$1.pos;
-      }
-      chunkStart = this$1.pos;
-    } else {
-      ++this$1.pos;
-    }
-  }
-};
-
-// Reads a template token to search for the end, without validating any escape sequences
-pp$8.readInvalidTemplateToken = function() {
-  var this$1 = this;
-
-  for (; this.pos < this.input.length; this.pos++) {
-    switch (this$1.input[this$1.pos]) {
-    case "\\":
-      ++this$1.pos;
-      break
-
-    case "$":
-      if (this$1.input[this$1.pos + 1] !== "{") {
-        break
-      }
-    // falls through
-
-    case "`":
-      return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos))
-
-    // no default
-    }
-  }
-  this.raise(this.start, "Unterminated template");
-};
-
-// Used to read escaped characters
-
-pp$8.readEscapedChar = function(inTemplate) {
-  var ch = this.input.charCodeAt(++this.pos);
-  ++this.pos;
-  switch (ch) {
-  case 110: return "\n" // 'n' -> '\n'
-  case 114: return "\r" // 'r' -> '\r'
-  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
-  case 117: return codePointToString(this.readCodePoint()) // 'u'
-  case 116: return "\t" // 't' -> '\t'
-  case 98: return "\b" // 'b' -> '\b'
-  case 118: return "\u000b" // 'v' -> '\u000b'
-  case 102: return "\f" // 'f' -> '\f'
-  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\r\n'
-  case 10: // ' \n'
-    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }
-    return ""
-  default:
-    if (ch >= 48 && ch <= 55) {
-      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
-      var octal = parseInt(octalStr, 8);
-      if (octal > 255) {
-        octalStr = octalStr.slice(0, -1);
-        octal = parseInt(octalStr, 8);
-      }
-      this.pos += octalStr.length - 1;
-      ch = this.input.charCodeAt(this.pos);
-      if ((octalStr !== "0" || ch == 56 || ch == 57) && (this.strict || inTemplate)) {
-        this.invalidStringToken(
-          this.pos - 1 - octalStr.length,
-          inTemplate
-            ? "Octal literal in template string"
-            : "Octal literal in strict mode"
-        );
-      }
-      return String.fromCharCode(octal)
-    }
-    return String.fromCharCode(ch)
-  }
-};
-
-// Used to read character escape sequences ('\x', '\u', '\U').
-
-pp$8.readHexChar = function(len) {
-  var codePos = this.pos;
-  var n = this.readInt(16, len);
-  if (n === null) { this.invalidStringToken(codePos, "Bad character escape sequence"); }
-  return n
-};
-
-// Read an identifier, and return it as a string. Sets `this.containsEsc`
-// to whether the word contained a '\u' escape.
-//
-// Incrementally adds only escaped chars, adding other chunks as-is
-// as a micro-optimization.
-
-pp$8.readWord1 = function() {
-  var this$1 = this;
-
-  this.containsEsc = false;
-  var word = "", first = true, chunkStart = this.pos;
-  var astral = this.options.ecmaVersion >= 6;
-  while (this.pos < this.input.length) {
-    var ch = this$1.fullCharCodeAtPos();
-    if (isIdentifierChar(ch, astral)) {
-      this$1.pos += ch <= 0xffff ? 1 : 2;
-    } else if (ch === 92) { // "\"
-      this$1.containsEsc = true;
-      word += this$1.input.slice(chunkStart, this$1.pos);
-      var escStart = this$1.pos;
-      if (this$1.input.charCodeAt(++this$1.pos) != 117) // "u"
-        { this$1.invalidStringToken(this$1.pos, "Expecting Unicode escape sequence \\uXXXX"); }
-      ++this$1.pos;
-      var esc = this$1.readCodePoint();
-      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
-        { this$1.invalidStringToken(escStart, "Invalid Unicode escape"); }
-      word += codePointToString(esc);
-      chunkStart = this$1.pos;
-    } else {
-      break
-    }
-    first = false;
-  }
-  return word + this.input.slice(chunkStart, this.pos)
-};
-
-// Read an identifier or keyword token. Will check for reserved
-// words when necessary.
-
-pp$8.readWord = function() {
-  var word = this.readWord1();
-  var type = types.name;
-  if (this.keywords.test(word)) {
-    if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword " + word); }
-    type = keywords$1[word];
-  }
-  return this.finishToken(type, word)
-};
-
-// Acorn is a tiny, fast JavaScript parser written in JavaScript.
-//
-// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and
-// various contributors and released under an MIT license.
-//
-// Git repositories for Acorn are available at
-//
-//     http://marijnhaverbeke.nl/git/acorn
-//     https://github.com/acornjs/acorn.git
-//
-// Please use the [github bug tracker][ghbt] to report issues.
-//
-// [ghbt]: https://github.com/acornjs/acorn/issues
-//
-// This file defines the main parser interface. The library also comes
-// with a [error-tolerant parser][dammit] and an
-// [abstract syntax tree walker][walk], defined in other files.
-//
-// [dammit]: acorn_loose.js
-// [walk]: util/walk.js
-
-var version = "5.5.3";
-
-// The main exported interface (under `self.acorn` when in the
-// browser) is a `parse` function that takes a code string and
-// returns an abstract syntax tree as specified by [Mozilla parser
-// API][api].
-//
-// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API
-
-function parse(input, options) {
-  return new Parser(options, input).parse()
-}
-
-// This function tries to parse a single expression at a given
-// offset in a string. Useful for parsing mixed-language formats
-// that embed JavaScript expressions.
-
-function parseExpressionAt(input, pos, options) {
-  var p = new Parser(options, input, pos);
-  p.nextToken();
-  return p.parseExpression()
-}
-
-// Acorn is organized as a tokenizer and a recursive-descent parser.
-// The `tokenizer` export provides an interface to the tokenizer.
-
-function tokenizer(input, options) {
-  return new Parser(options, input)
-}
-
-// This is a terrible kludge to support the existing, pre-ES6
-// interface where the loose parser module retroactively adds exports
-// to this module.
-var parse_dammit;
-var LooseParser;
-var pluginsLoose; // eslint-disable-line camelcase
-function addLooseExports(parse, Parser$$1, plugins$$1) {
-  parse_dammit = parse; // eslint-disable-line camelcase
-  LooseParser = Parser$$1;
-  pluginsLoose = plugins$$1;
-}
-
-
-var acorn = Object.freeze({
-	version: version,
-	parse: parse,
-	parseExpressionAt: parseExpressionAt,
-	tokenizer: tokenizer,
-	get parse_dammit () { return parse_dammit; },
-	get LooseParser () { return LooseParser; },
-	get pluginsLoose () { return pluginsLoose; },
-	addLooseExports: addLooseExports,
-	Parser: Parser,
-	plugins: plugins,
-	defaultOptions: defaultOptions,
-	Position: Position,
-	SourceLocation: SourceLocation,
-	getLineInfo: getLineInfo,
-	Node: Node,
-	TokenType: TokenType,
-	tokTypes: types,
-	keywordTypes: keywords$1,
-	TokContext: TokContext,
-	tokContexts: types$1,
-	isIdentifierChar: isIdentifierChar,
-	isIdentifierStart: isIdentifierStart,
-	Token: Token,
-	isNewLine: isNewLine,
-	lineBreak: lineBreak,
-	lineBreakG: lineBreakG,
-	nonASCIIwhitespace: nonASCIIwhitespace
-});
-
-const literals = new Map([['true', true], ['false', false], ['null', null]]);
-function readExpression(parser) {
-    const start = parser.index;
-    const name = parser.readUntil(/\s*}}/);
-    if (name && /^[a-z]+$/.test(name)) {
-        const end = start + name.length;
-        if (literals.has(name)) {
-            return {
-                type: 'Literal',
-                start,
-                end,
-                value: literals.get(name),
-                raw: name,
-            };
-        }
-        return {
-            type: 'Identifier',
-            start,
-            end: start + name.length,
-            name,
-        };
-    }
-    parser.index = start;
-    try {
-        const node = parseExpressionAt(parser.template, parser.index, {
-            ecmaVersion: 9,
-            preserveParens: true,
-        });
-        parser.index = node.end;
-        return node;
-    }
-    catch (err) {
-        parser.acornError(err);
-    }
-}
-
-/* eslint-disable no-underscore-dangle */
-
-function injectDynamicImport(acorn) {
-  const tt = acorn.tokTypes;
-
-  // NOTE: This allows `yield import()` to parse correctly.
-  tt._import.startsExpr = true;
-
-  function parseDynamicImport() {
-    const node = this.startNode();
-    this.next();
-    if (this.type !== tt.parenL) {
-      this.unexpected();
-    }
-    return this.finishNode(node, 'Import');
-  }
-
-  function peekNext() {
-    return this.input[this.pos];
-  }
-
-  // eslint-disable-next-line no-param-reassign
-  acorn.plugins.dynamicImport = function dynamicImportPlugin(instance) {
-    instance.extend('parseStatement', nextMethod => (
-      function parseStatement(...args) {
-        const node = this.startNode();
-        if (this.type === tt._import) {
-          const nextToken = peekNext.call(this);
-          if (nextToken === tt.parenL.label) {
-            const expr = this.parseExpression();
-            return this.parseExpressionStatement(node, expr);
-          }
-        }
-
-        return nextMethod.apply(this, args);
-      }
-    ));
-
-    instance.extend('parseExprAtom', nextMethod => (
-      function parseExprAtom(refDestructuringErrors) {
-        if (this.type === tt._import) {
-          return parseDynamicImport.call(this);
-        }
-        return nextMethod.call(this, refDestructuringErrors);
-      }
-    ));
-  };
-
-  return acorn;
-}
-
-function repeat(str, i) {
-    let result = '';
-    while (i--)
-        result += str;
-    return result;
-}
-
-const scriptClosingTag = '</script>';
-injectDynamicImport(acorn);
-function readScript(parser, start, attributes) {
-    const scriptStart = parser.index;
-    const scriptEnd = parser.template.indexOf(scriptClosingTag, scriptStart);
-    if (scriptEnd === -1)
-        parser.error(`<script> must have a closing tag`);
-    const source = repeat(' ', scriptStart) + parser.template.slice(scriptStart, scriptEnd);
-    parser.index = scriptEnd + scriptClosingTag.length;
-    let ast;
-    try {
-        ast = parse(source, {
-            ecmaVersion: 9,
-            sourceType: 'module',
-            plugins: {
-                dynamicImport: true
-            }
-        });
-    }
-    catch (err) {
-        parser.acornError(err);
-    }
-    if (!ast.body.length)
-        return null;
-    ast.start = scriptStart;
-    return {
-        start,
-        end: parser.index,
-        attributes,
-        content: ast,
-    };
-}
-
-var MAX_LINE_LENGTH = 100;
-var OFFSET_CORRECTION = 60;
-var TAB_REPLACEMENT = '    ';
-
-function sourceFragment(error, extraLines) {
-    function processLines(start, end) {
-        return lines.slice(start, end).map(function(line, idx) {
-            var num = String(start + idx + 1);
-
-            while (num.length < maxNumLength) {
-                num = ' ' + num;
-            }
-
-            return num + ' |' + line;
-        }).join('\n');
-    }
-
-    var lines = error.source.split(/\n|\r\n?|\f/);
-    var line = error.line;
-    var column = error.column;
-    var startLine = Math.max(1, line - extraLines) - 1;
-    var endLine = Math.min(line + extraLines, lines.length + 1);
-    var maxNumLength = Math.max(4, String(endLine).length) + 1;
-    var cutLeft = 0;
-
-    // correct column according to replaced tab before column
-    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\t/g) || []).length;
-
-    if (column > MAX_LINE_LENGTH) {
-        cutLeft = column - OFFSET_CORRECTION + 3;
-        column = OFFSET_CORRECTION - 2;
-    }
-
-    for (var i = startLine; i <= endLine; i++) {
-        if (i >= 0 && i < lines.length) {
-            lines[i] = lines[i].replace(/\t/g, TAB_REPLACEMENT);
-            lines[i] =
-                (cutLeft > 0 && lines[i].length > cutLeft ? '\u2026' : '') +
-                lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +
-                (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\u2026' : '');
-        }
-    }
-
-    return [
-        processLines(startLine, line),
-        new Array(column + maxNumLength + 2).join('-') + '^',
-        processLines(line, endLine)
-    ].join('\n');
-}
-
-var CssSyntaxError = function(message, source, offset, line, column) {
-    // some VMs prevent setting line/column otherwise (iOS Safari 10 even throw an exception)
-    var error = Object.create(SyntaxError.prototype);
-
-    error.name = 'CssSyntaxError';
-    error.message = message;
-    error.stack = (new Error().stack || '').replace(/^.+\n/, error.name + ': ' + error.message + '\n');
-    error.source = source;
-    error.offset = offset;
-    error.line = line;
-    error.column = column;
-
-    error.sourceFragment = function(extraLines) {
-        return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);
-    };
-    Object.defineProperty(error, 'formattedMessage', {
-        get: function() {
-            return (
-                'Parse error: ' + error.message + '\n' +
-                sourceFragment(error, 2)
-            );
-        }
-    });
-
-    // for backward capability
-    error.parseError = {
-        offset: offset,
-        line: line,
-        column: column
-    };
-
-    return error;
-};
-
-var error = CssSyntaxError;
-
-// token types (note: value shouldn't intersect with used char codes)
-var WHITESPACE = 1;
-var IDENTIFIER = 2;
-var NUMBER = 3;
-var STRING = 4;
-var COMMENT = 5;
-var PUNCTUATOR = 6;
-var CDO = 7;
-var CDC = 8;
-var ATRULE = 14;
-var FUNCTION = 15;
-var URL = 16;
-var RAW = 17;
-
-var TAB = 9;
-var N = 10;
-var F = 12;
-var R = 13;
-var SPACE = 32;
-
-var TYPE = {
-    WhiteSpace:   WHITESPACE,
-    Identifier:   IDENTIFIER,
-    Number:           NUMBER,
-    String:           STRING,
-    Comment:         COMMENT,
-    Punctuator:   PUNCTUATOR,
-    CDO:                 CDO,
-    CDC:                 CDC,
-    Atrule:           ATRULE,
-    Function:       FUNCTION,
-    Url:                 URL,
-    Raw:                 RAW,
-
-    ExclamationMark:      33,  // !
-    QuotationMark:        34,  // "
-    NumberSign:           35,  // #
-    DollarSign:           36,  // $
-    PercentSign:          37,  // %
-    Ampersand:            38,  // &
-    Apostrophe:           39,  // '
-    LeftParenthesis:      40,  // (
-    RightParenthesis:     41,  // )
-    Asterisk:             42,  // *
-    PlusSign:             43,  // +
-    Comma:                44,  // ,
-    HyphenMinus:          45,  // -
-    FullStop:             46,  // .
-    Solidus:              47,  // /
-    Colon:                58,  // :
-    Semicolon:            59,  // ;
-    LessThanSign:         60,  // <
-    EqualsSign:           61,  // =
-    GreaterThanSign:      62,  // >
-    QuestionMark:         63,  // ?
-    CommercialAt:         64,  // @
-    LeftSquareBracket:    91,  // [
-    Backslash:            92,  // \
-    RightSquareBracket:   93,  // ]
-    CircumflexAccent:     94,  // ^
-    LowLine:              95,  // _
-    GraveAccent:          96,  // `
-    LeftCurlyBracket:    123,  // {
-    VerticalLine:        124,  // |
-    RightCurlyBracket:   125,  // }
-    Tilde:               126   // ~
-};
-
-var NAME = Object.keys(TYPE).reduce(function(result, key) {
-    result[TYPE[key]] = key;
-    return result;
-}, {});
-
-// https://drafts.csswg.org/css-syntax/#tokenizer-definitions
-// > non-ASCII code point
-// >   A code point with a value equal to or greater than U+0080 <control>
-// > name-start code point
-// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).
-// > name code point
-// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)
-// That means only ASCII code points has a special meaning and we a maps for 0..127 codes only
-var SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported
-var SYMBOL_TYPE = new SafeUint32Array(0x80);
-var PUNCTUATION = new SafeUint32Array(0x80);
-var STOP_URL_RAW = new SafeUint32Array(0x80);
-
-for (var i = 0; i < SYMBOL_TYPE.length; i++) {
-    SYMBOL_TYPE[i] = IDENTIFIER;
-}
-
-// fill categories
-[
-    TYPE.ExclamationMark,    // !
-    TYPE.QuotationMark,      // "
-    TYPE.NumberSign,         // #
-    TYPE.DollarSign,         // $
-    TYPE.PercentSign,        // %
-    TYPE.Ampersand,          // &
-    TYPE.Apostrophe,         // '
-    TYPE.LeftParenthesis,    // (
-    TYPE.RightParenthesis,   // )
-    TYPE.Asterisk,           // *
-    TYPE.PlusSign,           // +
-    TYPE.Comma,              // ,
-    TYPE.HyphenMinus,        // -
-    TYPE.FullStop,           // .
-    TYPE.Solidus,            // /
-    TYPE.Colon,              // :
-    TYPE.Semicolon,          // ;
-    TYPE.LessThanSign,       // <
-    TYPE.EqualsSign,         // =
-    TYPE.GreaterThanSign,    // >
-    TYPE.QuestionMark,       // ?
-    TYPE.CommercialAt,       // @
-    TYPE.LeftSquareBracket,  // [
-    // TYPE.Backslash,          // \
-    TYPE.RightSquareBracket, // ]
-    TYPE.CircumflexAccent,   // ^
-    // TYPE.LowLine,            // _
-    TYPE.GraveAccent,        // `
-    TYPE.LeftCurlyBracket,   // {
-    TYPE.VerticalLine,       // |
-    TYPE.RightCurlyBracket,  // }
-    TYPE.Tilde               // ~
-].forEach(function(key) {
-    SYMBOL_TYPE[Number(key)] = PUNCTUATOR;
-    PUNCTUATION[Number(key)] = PUNCTUATOR;
-});
-
-for (var i = 48; i <= 57; i++) {
-    SYMBOL_TYPE[i] = NUMBER;
-}
-
-SYMBOL_TYPE[SPACE] = WHITESPACE;
-SYMBOL_TYPE[TAB] = WHITESPACE;
-SYMBOL_TYPE[N] = WHITESPACE;
-SYMBOL_TYPE[R] = WHITESPACE;
-SYMBOL_TYPE[F] = WHITESPACE;
-
-SYMBOL_TYPE[TYPE.Apostrophe] = STRING;
-SYMBOL_TYPE[TYPE.QuotationMark] = STRING;
-
-STOP_URL_RAW[SPACE] = 1;
-STOP_URL_RAW[TAB] = 1;
-STOP_URL_RAW[N] = 1;
-STOP_URL_RAW[R] = 1;
-STOP_URL_RAW[F] = 1;
-STOP_URL_RAW[TYPE.Apostrophe] = 1;
-STOP_URL_RAW[TYPE.QuotationMark] = 1;
-STOP_URL_RAW[TYPE.LeftParenthesis] = 1;
-STOP_URL_RAW[TYPE.RightParenthesis] = 1;
-
-// whitespace is punctuation ...
-PUNCTUATION[SPACE] = PUNCTUATOR;
-PUNCTUATION[TAB] = PUNCTUATOR;
-PUNCTUATION[N] = PUNCTUATOR;
-PUNCTUATION[R] = PUNCTUATOR;
-PUNCTUATION[F] = PUNCTUATOR;
-// ... hyper minus is not
-PUNCTUATION[TYPE.HyphenMinus] = 0;
-
-var _const = {
-    TYPE: TYPE,
-    NAME: NAME,
-
-    SYMBOL_TYPE: SYMBOL_TYPE,
-    PUNCTUATION: PUNCTUATION,
-    STOP_URL_RAW: STOP_URL_RAW
-};
-
-var PUNCTUATION$1 = _const.PUNCTUATION;
-var STOP_URL_RAW$1 = _const.STOP_URL_RAW;
-var TYPE$1 = _const.TYPE;
-var FULLSTOP = TYPE$1.FullStop;
-var PLUSSIGN = TYPE$1.PlusSign;
-var HYPHENMINUS = TYPE$1.HyphenMinus;
-var PUNCTUATOR$1 = TYPE$1.Punctuator;
-var TAB$1 = 9;
-var N$1 = 10;
-var F$1 = 12;
-var R$1 = 13;
-var SPACE$1 = 32;
-var BACK_SLASH = 92;
-var E = 101; // 'e'.charCodeAt(0)
-
-function firstCharOffset(source) {
-    // detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)
-    if (source.charCodeAt(0) === 0xFEFF ||  // UTF-16BE
-        source.charCodeAt(0) === 0xFFFE) {  // UTF-16LE
-        return 1;
-    }
-
-    return 0;
-}
-
-function isHex(code) {
-    return (code >= 48 && code <= 57) || // 0 .. 9
-           (code >= 65 && code <= 70) || // A .. F
-           (code >= 97 && code <= 102);  // a .. f
-}
-
-function isNumber(code) {
-    return code >= 48 && code <= 57;
-}
-
-function isNewline(source, offset, code) {
-    if (code === N$1 || code === F$1 || code === R$1) {
-        if (code === R$1 && offset + 1 < source.length && source.charCodeAt(offset + 1) === N$1) {
-            return 2;
-        }
-
-        return 1;
-    }
-
-    return 0;
-}
-
-function cmpChar(testStr, offset, referenceCode) {
-    var code = testStr.charCodeAt(offset);
-
-    // code.toLowerCase()
-    if (code >= 65 && code <= 90) {
-        code = code | 32;
-    }
-
-    return code === referenceCode;
-}
-
-function cmpStr(testStr, start, end, referenceStr) {
-    if (end - start !== referenceStr.length) {
-        return false;
-    }
-
-    if (start < 0 || end > testStr.length) {
-        return false;
-    }
-
-    for (var i = start; i < end; i++) {
-        var testCode = testStr.charCodeAt(i);
-        var refCode = referenceStr.charCodeAt(i - start);
-
-        // testStr[i].toLowerCase()
-        if (testCode >= 65 && testCode <= 90) {
-            testCode = testCode | 32;
-        }
-
-        if (testCode !== refCode) {
-            return false;
-        }
-    }
-
-    return true;
-}
-
-function endsWith(testStr, referenceStr) {
-    return cmpStr(testStr, testStr.length - referenceStr.length, testStr.length, referenceStr);
-}
-
-function findLastNonSpaceLocation(scanner) {
-    for (var i = scanner.source.length - 1; i >= 0; i--) {
-        var code = scanner.source.charCodeAt(i);
-
-        if (code !== SPACE$1 && code !== TAB$1 && code !== R$1 && code !== N$1 && code !== F$1) {
-            break;
-        }
-    }
-
-    return scanner.getLocation(i + 1);
-}
-
-function findWhiteSpaceEnd(source, offset) {
-    for (; offset < source.length; offset++) {
-        var code = source.charCodeAt(offset);
-
-        if (code !== SPACE$1 && code !== TAB$1 && code !== R$1 && code !== N$1 && code !== F$1) {
-            break;
-        }
-    }
-
-    return offset;
-}
-
-function findCommentEnd(source, offset) {
-    var commentEnd = source.indexOf('*/', offset);
-
-    if (commentEnd === -1) {
-        return source.length;
-    }
-
-    return commentEnd + 2;
-}
-
-function findStringEnd(source, offset, quote) {
-    for (; offset < source.length; offset++) {
-        var code = source.charCodeAt(offset);
-
-        // TODO: bad string
-        if (code === BACK_SLASH) {
-            offset++;
-        } else if (code === quote) {
-            offset++;
-            break;
-        }
-    }
-
-    return offset;
-}
-
-function findDecimalNumberEnd(source, offset) {
-    for (; offset < source.length; offset++) {
-        var code = source.charCodeAt(offset);
-
-        if (code < 48 || code > 57) {  // not a 0 .. 9
-            break;
-        }
-    }
-
-    return offset;
-}
-
-function findNumberEnd(source, offset, allowFraction) {
-    var code;
-
-    offset = findDecimalNumberEnd(source, offset);
-
-    // fraction: .\d+
-    if (allowFraction && offset + 1 < source.length && source.charCodeAt(offset) === FULLSTOP) {
-        code = source.charCodeAt(offset + 1);
-
-        if (isNumber(code)) {
-            offset = findDecimalNumberEnd(source, offset + 1);
-        }
-    }
-
-    // exponent: e[+-]\d+
-    if (offset + 1 < source.length) {
-        if ((source.charCodeAt(offset) | 32) === E) { // case insensitive check for `e`
-            code = source.charCodeAt(offset + 1);
-
-            if (code === PLUSSIGN || code === HYPHENMINUS) {
-                if (offset + 2 < source.length) {
-                    code = source.charCodeAt(offset + 2);
-                }
-            }
-
-            if (isNumber(code)) {
-                offset = findDecimalNumberEnd(source, offset + 2);
-            }
-        }
-    }
-
-    return offset;
-}
-
-// skip escaped unicode sequence that can ends with space
-// [0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?
-function findEscaseEnd(source, offset) {
-    for (var i = 0; i < 7 && offset + i < source.length; i++) {
-        var code = source.charCodeAt(offset + i);
-
-        if (i !== 6 && isHex(code)) {
-            continue;
-        }
-
-        if (i > 0) {
-            offset += i - 1 + isNewline(source, offset + i, code);
-            if (code === SPACE$1 || code === TAB$1) {
-                offset++;
-            }
-        }
-
-        break;
-    }
-
-    return offset;
-}
-
-function findIdentifierEnd(source, offset) {
-    for (; offset < source.length; offset++) {
-        var code = source.charCodeAt(offset);
-
-        if (code === BACK_SLASH) {
-            offset = findEscaseEnd(source, offset + 1);
-        } else if (code < 0x80 && PUNCTUATION$1[code] === PUNCTUATOR$1) {
-            break;
-        }
-    }
-
-    return offset;
-}
-
-function findUrlRawEnd(source, offset) {
-    for (; offset < source.length; offset++) {
-        var code = source.charCodeAt(offset);
-
-        if (code === BACK_SLASH) {
-            offset = findEscaseEnd(source, offset + 1);
-        } else if (code < 0x80 && STOP_URL_RAW$1[code] === 1) {
-            break;
-        }
-    }
-
-    return offset;
-}
-
-var utils = {
-    firstCharOffset: firstCharOffset,
-
-    isHex: isHex,
-    isNumber: isNumber,
-    isNewline: isNewline,
-
-    cmpChar: cmpChar,
-    cmpStr: cmpStr,
-    endsWith: endsWith,
-
-    findLastNonSpaceLocation: findLastNonSpaceLocation,
-    findWhiteSpaceEnd: findWhiteSpaceEnd,
-    findCommentEnd: findCommentEnd,
-    findStringEnd: findStringEnd,
-    findDecimalNumberEnd: findDecimalNumberEnd,
-    findNumberEnd: findNumberEnd,
-    findEscaseEnd: findEscaseEnd,
-    findIdentifierEnd: findIdentifierEnd,
-    findUrlRawEnd: findUrlRawEnd
-};
-
-var TYPE$2 = _const.TYPE;
-var NAME$1 = _const.NAME;
-var SYMBOL_TYPE$1 = _const.SYMBOL_TYPE;
-
-
-var firstCharOffset$1 = utils.firstCharOffset;
-var cmpStr$1 = utils.cmpStr;
-var isNumber$1 = utils.isNumber;
-var findLastNonSpaceLocation$1 = utils.findLastNonSpaceLocation;
-var findWhiteSpaceEnd$1 = utils.findWhiteSpaceEnd;
-var findCommentEnd$1 = utils.findCommentEnd;
-var findStringEnd$1 = utils.findStringEnd;
-var findNumberEnd$1 = utils.findNumberEnd;
-var findIdentifierEnd$1 = utils.findIdentifierEnd;
-var findUrlRawEnd$1 = utils.findUrlRawEnd;
-
-var NULL = 0;
-var WHITESPACE$1 = TYPE$2.WhiteSpace;
-var IDENTIFIER$1 = TYPE$2.Identifier;
-var NUMBER$1 = TYPE$2.Number;
-var STRING$1 = TYPE$2.String;
-var COMMENT$1 = TYPE$2.Comment;
-var PUNCTUATOR$2 = TYPE$2.Punctuator;
-var CDO$1 = TYPE$2.CDO;
-var CDC$1 = TYPE$2.CDC;
-var ATRULE$1 = TYPE$2.Atrule;
-var FUNCTION$1 = TYPE$2.Function;
-var URL$1 = TYPE$2.Url;
-var RAW$1 = TYPE$2.Raw;
-
-var N$2 = 10;
-var F$2 = 12;
-var R$2 = 13;
-var STAR = TYPE$2.Asterisk;
-var SLASH = TYPE$2.Solidus;
-var FULLSTOP$1 = TYPE$2.FullStop;
-var PLUSSIGN$1 = TYPE$2.PlusSign;
-var HYPHENMINUS$1 = TYPE$2.HyphenMinus;
-var GREATERTHANSIGN = TYPE$2.GreaterThanSign;
-var LESSTHANSIGN = TYPE$2.LessThanSign;
-var EXCLAMATIONMARK = TYPE$2.ExclamationMark;
-var COMMERCIALAT = TYPE$2.CommercialAt;
-var QUOTATIONMARK = TYPE$2.QuotationMark;
-var APOSTROPHE = TYPE$2.Apostrophe;
-var LEFTPARENTHESIS = TYPE$2.LeftParenthesis;
-var RIGHTPARENTHESIS = TYPE$2.RightParenthesis;
-var LEFTCURLYBRACKET = TYPE$2.LeftCurlyBracket;
-var RIGHTCURLYBRACKET = TYPE$2.RightCurlyBracket;
-var LEFTSQUAREBRACKET = TYPE$2.LeftSquareBracket;
-var RIGHTSQUAREBRACKET = TYPE$2.RightSquareBracket;
-
-var MIN_BUFFER_SIZE = 16 * 1024;
-var OFFSET_MASK = 0x00FFFFFF;
-var TYPE_SHIFT = 24;
-var SafeUint32Array$1 = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported
-
-function computeLinesAndColumns(tokenizer, source) {
-    var sourceLength = source.length;
-    var start = firstCharOffset$1(source);
-    var lines = tokenizer.lines;
-    var line = tokenizer.startLine;
-    var columns = tokenizer.columns;
-    var column = tokenizer.startColumn;
-
-    if (lines === null || lines.length < sourceLength + 1) {
-        lines = new SafeUint32Array$1(Math.max(sourceLength + 1024, MIN_BUFFER_SIZE));
-        columns = new SafeUint32Array$1(lines.length);
-    }
-
-    for (var i = start; i < sourceLength; i++) {
-        var code = source.charCodeAt(i);
-
-        lines[i] = line;
-        columns[i] = column++;
-
-        if (code === N$2 || code === R$2 || code === F$2) {
-            if (code === R$2 && i + 1 < sourceLength && source.charCodeAt(i + 1) === N$2) {
-                i++;
-                lines[i] = line;
-                columns[i] = column;
-            }
-
-            line++;
-            column = 1;
-        }
-    }
-
-    lines[i] = line;
-    columns[i] = column;
-
-    tokenizer.linesAnsColumnsComputed = true;
-    tokenizer.lines = lines;
-    tokenizer.columns = columns;
-}
-
-function tokenLayout(tokenizer, source, startPos) {
-    var sourceLength = source.length;
-    var offsetAndType = tokenizer.offsetAndType;
-    var balance = tokenizer.balance;
-    var tokenCount = 0;
-    var prevType = 0;
-    var offset = startPos;
-    var anchor = 0;
-    var balanceCloseCode = 0;
-    var balanceStart = 0;
-    var balancePrev = 0;
-
-    if (offsetAndType === null || offsetAndType.length < sourceLength + 1) {
-        offsetAndType = new SafeUint32Array$1(sourceLength + 1024);
-        balance = new SafeUint32Array$1(sourceLength + 1024);
-    }
-
-    while (offset < sourceLength) {
-        var code = source.charCodeAt(offset);
-        var type = code < 0x80 ? SYMBOL_TYPE$1[code] : IDENTIFIER$1;
-
-        balance[tokenCount] = sourceLength;
-
-        switch (type) {
-            case WHITESPACE$1:
-                offset = findWhiteSpaceEnd$1(source, offset + 1);
-                break;
-
-            case PUNCTUATOR$2:
-                switch (code) {
-                    case balanceCloseCode:
-                        balancePrev = balanceStart & OFFSET_MASK;
-                        balanceStart = balance[balancePrev];
-                        balanceCloseCode = balanceStart >> TYPE_SHIFT;
-                        balance[tokenCount] = balancePrev;
-                        balance[balancePrev++] = tokenCount;
-                        for (; balancePrev < tokenCount; balancePrev++) {
-                            if (balance[balancePrev] === sourceLength) {
-                                balance[balancePrev] = tokenCount;
-                            }
-                        }
-                        break;
-
-                    case LEFTSQUAREBRACKET:
-                        balance[tokenCount] = balanceStart;
-                        balanceCloseCode = RIGHTSQUAREBRACKET;
-                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;
-                        break;
-
-                    case LEFTCURLYBRACKET:
-                        balance[tokenCount] = balanceStart;
-                        balanceCloseCode = RIGHTCURLYBRACKET;
-                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;
-                        break;
-
-                    case LEFTPARENTHESIS:
-                        balance[tokenCount] = balanceStart;
-                        balanceCloseCode = RIGHTPARENTHESIS;
-                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;
-                        break;
-                }
-
-                // /*
-                if (code === STAR && prevType === SLASH) {
-                    type = COMMENT$1;
-                    offset = findCommentEnd$1(source, offset + 1);
-                    tokenCount--; // rewrite prev token
-                    break;
-                }
-
-                // edge case for -.123 and +.123
-                if (code === FULLSTOP$1 && (prevType === PLUSSIGN$1 || prevType === HYPHENMINUS$1)) {
-                    if (offset + 1 < sourceLength && isNumber$1(source.charCodeAt(offset + 1))) {
-                        type = NUMBER$1;
-                        offset = findNumberEnd$1(source, offset + 2, false);
-                        tokenCount--; // rewrite prev token
-                        break;
-                    }
-                }
-
-                // <!--
-                if (code === EXCLAMATIONMARK && prevType === LESSTHANSIGN) {
-                    if (offset + 2 < sourceLength &&
-                        source.charCodeAt(offset + 1) === HYPHENMINUS$1 &&
-                        source.charCodeAt(offset + 2) === HYPHENMINUS$1) {
-                        type = CDO$1;
-                        offset = offset + 3;
-                        tokenCount--; // rewrite prev token
-                        break;
-                    }
-                }
-
-                // -->
-                if (code === HYPHENMINUS$1 && prevType === HYPHENMINUS$1) {
-                    if (offset + 1 < sourceLength && source.charCodeAt(offset + 1) === GREATERTHANSIGN) {
-                        type = CDC$1;
-                        offset = offset + 2;
-                        tokenCount--; // rewrite prev token
-                        break;
-                    }
-                }
-
-                // ident(
-                if (code === LEFTPARENTHESIS && prevType === IDENTIFIER$1) {
-                    offset = offset + 1;
-                    tokenCount--; // rewrite prev token
-                    balance[tokenCount] = balance[tokenCount + 1];
-                    balanceStart--;
-
-                    // 4 char length identifier and equal to `url(` (case insensitive)
-                    if (offset - anchor === 4 && cmpStr$1(source, anchor, offset, 'url(')) {
-                        // special case for url() because it can contain any symbols sequence with few exceptions
-                        anchor = findWhiteSpaceEnd$1(source, offset);
-                        code = source.charCodeAt(anchor);
-                        if (code !== LEFTPARENTHESIS &&
-                            code !== RIGHTPARENTHESIS &&
-                            code !== QUOTATIONMARK &&
-                            code !== APOSTROPHE) {
-                            // url(
-                            offsetAndType[tokenCount++] = (URL$1 << TYPE_SHIFT) | offset;
-                            balance[tokenCount] = sourceLength;
-
-                            // ws*
-                            if (anchor !== offset) {
-                                offsetAndType[tokenCount++] = (WHITESPACE$1 << TYPE_SHIFT) | anchor;
-                                balance[tokenCount] = sourceLength;
-                            }
-
-                            // raw
-                            type = RAW$1;
-                            offset = findUrlRawEnd$1(source, anchor);
-                        } else {
-                            type = URL$1;
-                        }
-                    } else {
-                        type = FUNCTION$1;
-                    }
-                    break;
-                }
-
-                type = code;
-                offset = offset + 1;
-                break;
-
-            case NUMBER$1:
-                offset = findNumberEnd$1(source, offset + 1, prevType !== FULLSTOP$1);
-
-                // merge number with a preceding dot, dash or plus
-                if (prevType === FULLSTOP$1 ||
-                    prevType === HYPHENMINUS$1 ||
-                    prevType === PLUSSIGN$1) {
-                    tokenCount--; // rewrite prev token
-                }
-
-                break;
-
-            case STRING$1:
-                offset = findStringEnd$1(source, offset + 1, code);
-                break;
-
-            default:
-                anchor = offset;
-                offset = findIdentifierEnd$1(source, offset);
-
-                // merge identifier with a preceding dash
-                if (prevType === HYPHENMINUS$1) {
-                    // rewrite prev token
-                    tokenCount--;
-                    // restore prev prev token type
-                    // for case @-prefix-ident
-                    prevType = tokenCount === 0 ? 0 : offsetAndType[tokenCount - 1] >> TYPE_SHIFT;
-                }
-
-                if (prevType === COMMERCIALAT) {
-                    // rewrite prev token and change type to <at-keyword-token>
-                    tokenCount--;
-                    type = ATRULE$1;
-                }
-        }
-
-        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | offset;
-        prevType = type;
-    }
-
-    // finalize arrays
-    offsetAndType[tokenCount] = offset;
-    balance[tokenCount] = sourceLength;
-    while (balanceStart !== 0) {
-        balancePrev = balanceStart & OFFSET_MASK;
-        balanceStart = balance[balancePrev];
-        balance[balancePrev] = sourceLength;
-    }
-
-    tokenizer.offsetAndType = offsetAndType;
-    tokenizer.tokenCount = tokenCount;
-    tokenizer.balance = balance;
-}
-
-//
-// tokenizer
-//
-
-var Tokenizer = function(source, startOffset, startLine, startColumn) {
-    this.offsetAndType = null;
-    this.balance = null;
-    this.lines = null;
-    this.columns = null;
-
-    this.setSource(source, startOffset, startLine, startColumn);
-};
-
-Tokenizer.prototype = {
-    setSource: function(source, startOffset, startLine, startColumn) {
-        var safeSource = String(source || '');
-        var start = firstCharOffset$1(safeSource);
-
-        this.source = safeSource;
-        this.firstCharOffset = start;
-        this.startOffset = typeof startOffset === 'undefined' ? 0 : startOffset;
-        this.startLine = typeof startLine === 'undefined' ? 1 : startLine;
-        this.startColumn = typeof startColumn === 'undefined' ? 1 : startColumn;
-        this.linesAnsColumnsComputed = false;
-
-        this.eof = false;
-        this.currentToken = -1;
-        this.tokenType = 0;
-        this.tokenStart = start;
-        this.tokenEnd = start;
-
-        tokenLayout(this, safeSource, start);
-        this.next();
-    },
-
-    lookupType: function(offset) {
-        offset += this.currentToken;
-
-        if (offset < this.tokenCount) {
-            return this.offsetAndType[offset] >> TYPE_SHIFT;
-        }
-
-        return NULL;
-    },
-    lookupNonWSType: function(offset) {
-        offset += this.currentToken;
-
-        for (var type; offset < this.tokenCount; offset++) {
-            type = this.offsetAndType[offset] >> TYPE_SHIFT;
-
-            if (type !== WHITESPACE$1) {
-                return type;
-            }
-        }
-
-        return NULL;
-    },
-    lookupValue: function(offset, referenceStr) {
-        offset += this.currentToken;
-
-        if (offset < this.tokenCount) {
-            return cmpStr$1(
-                this.source,
-                this.offsetAndType[offset - 1] & OFFSET_MASK,
-                this.offsetAndType[offset] & OFFSET_MASK,
-                referenceStr
-            );
-        }
-
-        return false;
-    },
-    getTokenStart: function(tokenNum) {
-        if (tokenNum === this.currentToken) {
-            return this.tokenStart;
-        }
-
-        if (tokenNum > 0) {
-            return tokenNum < this.tokenCount
-                ? this.offsetAndType[tokenNum - 1] & OFFSET_MASK
-                : this.offsetAndType[this.tokenCount] & OFFSET_MASK;
-        }
-
-        return this.firstCharOffset;
-    },
-    getOffsetExcludeWS: function() {
-        if (this.currentToken > 0) {
-            if ((this.offsetAndType[this.currentToken - 1] >> TYPE_SHIFT) === WHITESPACE$1) {
-                return this.currentToken > 1
-                    ? this.offsetAndType[this.currentToken - 2] & OFFSET_MASK
-                    : this.firstCharOffset;
-            }
-        }
-        return this.tokenStart;
-    },
-    getRawLength: function(startToken, endTokenType1, endTokenType2, includeTokenType2) {
-        var cursor = startToken;
-        var balanceEnd;
-
-        loop:
-        for (; cursor < this.tokenCount; cursor++) {
-            balanceEnd = this.balance[cursor];
-
-            // belance end points to offset before start
-            if (balanceEnd < startToken) {
-                break loop;
-            }
-
-            // check token is stop type
-            switch (this.offsetAndType[cursor] >> TYPE_SHIFT) {
-                case endTokenType1:
-                    break loop;
-
-                case endTokenType2:
-                    if (includeTokenType2) {
-                        cursor++;
-                    }
-                    break loop;
-
-                default:
-                    // fast forward to the end of balanced block
-                    if (this.balance[balanceEnd] === cursor) {
-                        cursor = balanceEnd;
-                    }
-            }
-
-        }
-
-        return cursor - this.currentToken;
-    },
-
-    getTokenValue: function() {
-        return this.source.substring(this.tokenStart, this.tokenEnd);
-    },
-    substrToCursor: function(start) {
-        return this.source.substring(start, this.tokenStart);
-    },
-
-    skipWS: function() {
-        for (var i = this.currentToken, skipTokenCount = 0; i < this.tokenCount; i++, skipTokenCount++) {
-            if ((this.offsetAndType[i] >> TYPE_SHIFT) !== WHITESPACE$1) {
-                break;
-            }
-        }
-
-        if (skipTokenCount > 0) {
-            this.skip(skipTokenCount);
-        }
-    },
-    skipSC: function() {
-        while (this.tokenType === WHITESPACE$1 || this.tokenType === COMMENT$1) {
-            this.next();
-        }
-    },
-    skip: function(tokenCount) {
-        var next = this.currentToken + tokenCount;
-
-        if (next < this.tokenCount) {
-            this.currentToken = next;
-            this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;
-            next = this.offsetAndType[next];
-            this.tokenType = next >> TYPE_SHIFT;
-            this.tokenEnd = next & OFFSET_MASK;
-        } else {
-            this.currentToken = this.tokenCount;
-            this.next();
-        }
-    },
-    next: function() {
-        var next = this.currentToken + 1;
-
-        if (next < this.tokenCount) {
-            this.currentToken = next;
-            this.tokenStart = this.tokenEnd;
-            next = this.offsetAndType[next];
-            this.tokenType = next >> TYPE_SHIFT;
-            this.tokenEnd = next & OFFSET_MASK;
-        } else {
-            this.currentToken = this.tokenCount;
-            this.eof = true;
-            this.tokenType = NULL;
-            this.tokenStart = this.tokenEnd = this.source.length;
-        }
-    },
-
-    eat: function(tokenType) {
-        if (this.tokenType !== tokenType) {
-            var offset = this.tokenStart;
-            var message = NAME$1[tokenType] + ' is expected';
-
-            // tweak message and offset
-            if (tokenType === IDENTIFIER$1) {
-                // when identifier is expected but there is a function or url
-                if (this.tokenType === FUNCTION$1 || this.tokenType === URL$1) {
-                    offset = this.tokenEnd - 1;
-                    message += ' but function found';
-                }
-            } else {
-                // when test type is part of another token show error for current position + 1
-                // e.g. eat(HYPHENMINUS) will fail on "-foo", but pointing on "-" is odd
-                if (this.source.charCodeAt(this.tokenStart) === tokenType) {
-                    offset = offset + 1;
-                }
-            }
-
-            this.error(message, offset);
-        }
-
-        this.next();
-    },
-    eatNonWS: function(tokenType) {
-        this.skipWS();
-        this.eat(tokenType);
-    },
-
-    consume: function(tokenType) {
-        var value = this.getTokenValue();
-
-        this.eat(tokenType);
-
-        return value;
-    },
-    consumeFunctionName: function() {
-        var name = this.source.substring(this.tokenStart, this.tokenEnd - 1);
-
-        this.eat(FUNCTION$1);
-
-        return name;
-    },
-    consumeNonWS: function(tokenType) {
-        this.skipWS();
-
-        return this.consume(tokenType);
-    },
-
-    expectIdentifier: function(name) {
-        if (this.tokenType !== IDENTIFIER$1 || cmpStr$1(this.source, this.tokenStart, this.tokenEnd, name) === false) {
-            this.error('Identifier `' + name + '` is expected');
-        }
-
-        this.next();
-    },
-
-    getLocation: function(offset, filename) {
-        if (!this.linesAnsColumnsComputed) {
-            computeLinesAndColumns(this, this.source);
-        }
-
-        return {
-            source: filename,
-            offset: this.startOffset + offset,
-            line: this.lines[offset],
-            column: this.columns[offset]
-        };
-    },
-
-    getLocationRange: function(start, end, filename) {
-        if (!this.linesAnsColumnsComputed) {
-            computeLinesAndColumns(this, this.source);
-        }
-
-        return {
-            source: filename,
-            start: {
-                offset: this.startOffset + start,
-                line: this.lines[start],
-                column: this.columns[start]
-            },
-            end: {
-                offset: this.startOffset + end,
-                line: this.lines[end],
-                column: this.columns[end]
-            }
-        };
-    },
-
-    error: function(message, offset) {
-        var location = typeof offset !== 'undefined' && offset < this.source.length
-            ? this.getLocation(offset)
-            : this.eof
-                ? findLastNonSpaceLocation$1(this)
-                : this.getLocation(this.tokenStart);
-
-        throw new error(
-            message || 'Unexpected input',
-            this.source,
-            location.offset,
-            location.line,
-            location.column
-        );
-    },
-
-    dump: function() {
-        var offset = 0;
-
-        return Array.prototype.slice.call(this.offsetAndType, 0, this.tokenCount).map(function(item, idx) {
-            var start = offset;
-            var end = item & OFFSET_MASK;
-
-            offset = end;
-
-            return {
-                idx: idx,
-                type: NAME$1[item >> TYPE_SHIFT],
-                chunk: this.source.substring(start, end),
-                balance: this.balance[idx]
-            };
-        }, this);
-    }
-};
-
-// extend with error class
-Tokenizer.CssSyntaxError = error;
-
-// extend tokenizer with constants
-Object.keys(_const).forEach(function(key) {
-    Tokenizer[key] = _const[key];
-});
-
-// extend tokenizer with static methods from utils
-Object.keys(utils).forEach(function(key) {
-    Tokenizer[key] = utils[key];
-});
-
-// warm up tokenizer to elimitate code branches that never execute
-// fix soft deoptimizations (insufficient type feedback)
-new Tokenizer('\n\r\r\n\f<!---->//""\'\'/*\r\n\f*/1a;.\\31\t\+2{url(a);func();+1.2e3 -.4e-5 .6e+7}').getLocation();
-
-var Tokenizer_1 = Tokenizer;
-
-var tokenizer$1 = Tokenizer_1;
-
-//
-//            item        item        item        item
-//          /------\    /------\    /------\    /------\
-//          | data |    | data |    | data |    | data |
-//  null <--+-prev |<---+-prev |<---+-prev |<---+-prev |
-//          | next-+--->| next-+--->| next-+--->| next-+--> null
-//          \------/    \------/    \------/    \------/
-//             ^                                    ^
-//             |                list                |
-//             |              /------\              |
-//             \--------------+-head |              |
-//                            | tail-+--------------/
-//                            \------/
-//
-
-function createItem(data) {
-    return {
-        prev: null,
-        next: null,
-        data: data
-    };
-}
-
-var cursors = null;
-var List = function() {
-    this.cursor = null;
-    this.head = null;
-    this.tail = null;
-};
-
-List.createItem = createItem;
-List.prototype.createItem = createItem;
-
-List.prototype.getSize = function() {
-    var size = 0;
-    var cursor = this.head;
-
-    while (cursor) {
-        size++;
-        cursor = cursor.next;
-    }
-
-    return size;
-};
-
-List.prototype.fromArray = function(array) {
-    var cursor = null;
-
-    this.head = null;
-
-    for (var i = 0; i < array.length; i++) {
-        var item = createItem(array[i]);
-
-        if (cursor !== null) {
-            cursor.next = item;
-        } else {
-            this.head = item;
-        }
-
-        item.prev = cursor;
-        cursor = item;
-    }
-
-    this.tail = cursor;
-
-    return this;
-};
-
-List.prototype.toArray = function() {
-    var cursor = this.head;
-    var result = [];
-
-    while (cursor) {
-        result.push(cursor.data);
-        cursor = cursor.next;
-    }
-
-    return result;
-};
-
-List.prototype.toJSON = List.prototype.toArray;
-
-List.prototype.isEmpty = function() {
-    return this.head === null;
-};
-
-List.prototype.first = function() {
-    return this.head && this.head.data;
-};
-
-List.prototype.last = function() {
-    return this.tail && this.tail.data;
-};
-
-function allocateCursor(node, prev, next) {
-    var cursor;
-
-    if (cursors !== null) {
-        cursor = cursors;
-        cursors = cursors.cursor;
-        cursor.prev = prev;
-        cursor.next = next;
-        cursor.cursor = node.cursor;
-    } else {
-        cursor = {
-            prev: prev,
-            next: next,
-            cursor: node.cursor
-        };
-    }
-
-    node.cursor = cursor;
-
-    return cursor;
-}
-
-function releaseCursor(node) {
-    var cursor = node.cursor;
-
-    node.cursor = cursor.cursor;
-    cursor.prev = null;
-    cursor.next = null;
-    cursor.cursor = cursors;
-    cursors = cursor;
-}
-
-List.prototype.each = function(fn, context) {
-    var item;
-
-    if (context === undefined) {
-        context = this;
-    }
-
-    // push cursor
-    var cursor = allocateCursor(this, null, this.head);
-
-    while (cursor.next !== null) {
-        item = cursor.next;
-        cursor.next = item.next;
-
-        fn.call(context, item.data, item, this);
-    }
-
-    // pop cursor
-    releaseCursor(this);
-};
-
-List.prototype.eachRight = function(fn, context) {
-    var item;
-
-    if (context === undefined) {
-        context = this;
-    }
-
-    // push cursor
-    var cursor = allocateCursor(this, this.tail, null);
-
-    while (cursor.prev !== null) {
-        item = cursor.prev;
-        cursor.prev = item.prev;
-
-        fn.call(context, item.data, item, this);
-    }
-
-    // pop cursor
-    releaseCursor(this);
-};
-
-List.prototype.nextUntil = function(start, fn, context) {
-    if (start === null) {
-        return;
-    }
-
-    var item;
-
-    if (context === undefined) {
-        context = this;
-    }
-
-    // push cursor
-    var cursor = allocateCursor(this, null, start);
-
-    while (cursor.next !== null) {
-        item = cursor.next;
-        cursor.next = item.next;
-
-        if (fn.call(context, item.data, item, this)) {
-            break;
-        }
-    }
-
-    // pop cursor
-    releaseCursor(this);
-};
-
-List.prototype.prevUntil = function(start, fn, context) {
-    if (start === null) {
-        return;
-    }
-
-    var item;
-
-    if (context === undefined) {
-        context = this;
-    }
-
-    // push cursor
-    var cursor = allocateCursor(this, start, null);
-
-    while (cursor.prev !== null) {
-        item = cursor.prev;
-        cursor.prev = item.prev;
-
-        if (fn.call(context, item.data, item, this)) {
-            break;
-        }
-    }
-
-    // pop cursor
-    releaseCursor(this);
-};
-
-List.prototype.some = function(fn, context) {
-    var cursor = this.head;
-
-    if (context === undefined) {
-        context = this;
-    }
-
-    while (cursor !== null) {
-        if (fn.call(context, cursor.data, cursor, this)) {
-            return true;
-        }
-
-        cursor = cursor.next;
-    }
-
-    return false;
-};
-
-List.prototype.map = function(fn, context) {
-    var result = [];
-    var cursor = this.head;
-
-    if (context === undefined) {
-        context = this;
-    }
-
-    while (cursor !== null) {
-        result.push(fn.call(context, cursor.data, cursor, this));
-        cursor = cursor.next;
-    }
-
-    return result;
-};
-
-List.prototype.clear = function() {
-    this.head = null;
-    this.tail = null;
-};
-
-List.prototype.copy = function() {
-    var result = new List();
-    var cursor = this.head;
-
-    while (cursor !== null) {
-        result.insert(createItem(cursor.data));
-        cursor = cursor.next;
-    }
-
-    return result;
-};
-
-List.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {
-    var cursor = this.cursor;
-
-    while (cursor !== null) {
-        if (cursor.prev === prevOld) {
-            cursor.prev = prevNew;
-        }
-
-        if (cursor.next === nextOld) {
-            cursor.next = nextNew;
-        }
-
-        cursor = cursor.cursor;
-    }
-};
-
-List.prototype.prepend = function(item) {
-    //      head
-    //    ^
-    // item
-    this.updateCursors(null, item, this.head, item);
-
-    // insert to the beginning of the list
-    if (this.head !== null) {
-        // new item <- first item
-        this.head.prev = item;
-
-        // new item -> first item
-        item.next = this.head;
-    } else {
-        // if list has no head, then it also has no tail
-        // in this case tail points to the new item
-        this.tail = item;
-    }
-
-    // head always points to new item
-    this.head = item;
-
-    return this;
-};
-
-List.prototype.prependData = function(data) {
-    return this.prepend(createItem(data));
-};
-
-List.prototype.append = function(item) {
-    // tail
-    //      ^
-    //      item
-    this.updateCursors(this.tail, item, null, item);
-
-    // insert to the ending of the list
-    if (this.tail !== null) {
-        // last item -> new item
-        this.tail.next = item;
-
-        // last item <- new item
-        item.prev = this.tail;
-    } else {
-        // if list has no tail, then it also has no head
-        // in this case head points to new item
-        this.head = item;
-    }
-
-    // tail always points to new item
-    this.tail = item;
-
-    return this;
-};
-
-List.prototype.appendData = function(data) {
-    return this.append(createItem(data));
-};
-
-List.prototype.insert = function(item, before) {
-    if (before !== undefined && before !== null) {
-        // prev   before
-        //      ^
-        //     item
-        this.updateCursors(before.prev, item, before, item);
-
-        if (before.prev === null) {
-            // insert to the beginning of list
-            if (this.head !== before) {
-                throw new Error('before doesn\'t belong to list');
-            }
-
-            // since head points to before therefore list doesn't empty
-            // no need to check tail
-            this.head = item;
-            before.prev = item;
-            item.next = before;
-
-            this.updateCursors(null, item);
-        } else {
-
-            // insert between two items
-            before.prev.next = item;
-            item.prev = before.prev;
-
-            before.prev = item;
-            item.next = before;
-        }
-    } else {
-        this.append(item);
-    }
-};
-
-List.prototype.insertData = function(data, before) {
-    this.insert(createItem(data), before);
-};
-
-List.prototype.remove = function(item) {
-    //      item
-    //       ^
-    // prev     next
-    this.updateCursors(item, item.prev, item, item.next);
-
-    if (item.prev !== null) {
-        item.prev.next = item.next;
-    } else {
-        if (this.head !== item) {
-            throw new Error('item doesn\'t belong to list');
-        }
-
-        this.head = item.next;
-    }
-
-    if (item.next !== null) {
-        item.next.prev = item.prev;
-    } else {
-        if (this.tail !== item) {
-            throw new Error('item doesn\'t belong to list');
-        }
-
-        this.tail = item.prev;
-    }
-
-    item.prev = null;
-    item.next = null;
-
-    return item;
-};
-
-List.prototype.appendList = function(list) {
-    // ignore empty lists
-    if (list.head === null) {
-        return;
-    }
-
-    this.updateCursors(this.tail, list.tail, null, list.head);
-
-    // insert to end of the list
-    if (this.tail !== null) {
-        // if destination list has a tail, then it also has a head,
-        // but head doesn't change
-
-        // dest tail -> source head
-        this.tail.next = list.head;
-
-        // dest tail <- source head
-        list.head.prev = this.tail;
-    } else {
-        // if list has no a tail, then it also has no a head
-        // in this case points head to new item
-        this.head = list.head;
-    }
-
-    // tail always start point to new item
-    this.tail = list.tail;
-
-    list.head = null;
-    list.tail = null;
-};
-
-List.prototype.insertList = function(list, before) {
-    if (before !== undefined && before !== null) {
-        // ignore empty lists
-        if (list.head === null) {
-            return;
-        }
-
-        this.updateCursors(before.prev, list.tail, before, list.head);
-
-        // insert in the middle of dist list
-        if (before.prev !== null) {
-            // before.prev <-> list.head
-            before.prev.next = list.head;
-            list.head.prev = before.prev;
-        } else {
-            this.head = list.head;
-        }
-
-        before.prev = list.tail;
-        list.tail.next = before;
-
-        list.head = null;
-        list.tail = null;
-    } else {
-        this.appendList(list);
-    }
-};
-
-List.prototype.replace = function(oldItem, newItemOrList) {
-    if ('head' in newItemOrList) {
-        this.insertList(newItemOrList, oldItem);
-    } else {
-        this.insert(newItemOrList, oldItem);
-    }
-    this.remove(oldItem);
-};
-
-var list = List;
-
-var TYPE$3 = tokenizer$1.TYPE;
-var WHITESPACE$2 = TYPE$3.WhiteSpace;
-var COMMENT$2 = TYPE$3.Comment;
-
-var sequence = function readSequence(recognizer) {
-    var children = new list();
-    var child = null;
-    var context = {
-        recognizer: recognizer,
-        space: null,
-        ignoreWS: false,
-        ignoreWSAfter: false
-    };
-
-    this.scanner.skipSC();
-
-    while (!this.scanner.eof) {
-        switch (this.scanner.tokenType) {
-            case COMMENT$2:
-                this.scanner.next();
-                continue;
-
-            case WHITESPACE$2:
-                if (context.ignoreWS) {
-                    this.scanner.next();
-                } else {
-                    context.space = this.WhiteSpace();
-                }
-                continue;
-        }
-
-        child = recognizer.getNode.call(this, context);
-
-        if (child === undefined) {
-            break;
-        }
-
-        if (context.space !== null) {
-            children.appendData(context.space);
-            context.space = null;
-        }
-
-        children.appendData(child);
-
-        if (context.ignoreWSAfter) {
-            context.ignoreWSAfter = false;
-            context.ignoreWS = true;
-        } else {
-            context.ignoreWS = false;
-        }
-    }
-
-    return children;
-};
-
-var noop = function() {};
-
-function createParseContext(name) {
-    return function() {
-        return this[name]();
-    };
-}
-
-function processConfig(config) {
-    var parserConfig = {
-        context: {},
-        scope: {},
-        atrule: {},
-        pseudo: {}
-    };
-
-    if (config.parseContext) {
-        for (var name in config.parseContext) {
-            switch (typeof config.parseContext[name]) {
-                case 'function':
-                    parserConfig.context[name] = config.parseContext[name];
-                    break;
-
-                case 'string':
-                    parserConfig.context[name] = createParseContext(config.parseContext[name]);
-                    break;
-            }
-        }
-    }
-
-    if (config.scope) {
-        for (var name in config.scope) {
-            parserConfig.scope[name] = config.scope[name];
-        }
-    }
-
-    if (config.atrule) {
-        for (var name in config.atrule) {
-            var atrule = config.atrule[name];
-
-            if (atrule.parse) {
-                parserConfig.atrule[name] = atrule.parse;
-            }
-        }
-    }
-
-    if (config.pseudo) {
-        for (var name in config.pseudo) {
-            var pseudo = config.pseudo[name];
-
-            if (pseudo.parse) {
-                parserConfig.pseudo[name] = pseudo.parse;
-            }
-        }
-    }
-
-    if (config.node) {
-        for (var name in config.node) {
-            parserConfig[name] = config.node[name].parse;
-        }
-    }
-
-    return parserConfig;
-}
-
-var create = function createParser(config) {
-    var parser = {
-        scanner: new tokenizer$1(),
-        filename: '<unknown>',
-        needPositions: false,
-        tolerant: false,
-        onParseError: noop,
-        parseAtruleExpression: true,
-        parseSelector: true,
-        parseValue: true,
-        parseCustomProperty: false,
-
-        readSequence: sequence,
-
-        tolerantParse: function(consumer, fallback) {
-            if (this.tolerant) {
-                var start = this.scanner.currentToken;
-
-                try {
-                    return consumer.call(this);
-                } catch (e) {
-                    this.onParseError(e);
-                    return fallback.call(this, start);
-                }
-            } else {
-                return consumer.call(this);
-            }
-        },
-
-        getLocation: function(start, end) {
-            if (this.needPositions) {
-                return this.scanner.getLocationRange(
-                    start,
-                    end,
-                    this.filename
-                );
-            }
-
-            return null;
-        },
-        getLocationFromList: function(list) {
-            if (this.needPositions) {
-                return this.scanner.getLocationRange(
-                    list.head !== null ? list.first().loc.start.offset - this.scanner.startOffset : this.scanner.tokenStart,
-                    list.head !== null ? list.last().loc.end.offset - this.scanner.startOffset : this.scanner.tokenStart,
-                    this.filename
-                );
-            }
-
-            return null;
-        }
-    };
-
-    config = processConfig(config || {});
-    for (var key in config) {
-        parser[key] = config[key];
-    }
-
-    return function(source, options) {
-        options = options || {};
-
-        var context = options.context || 'default';
-        var ast;
-
-        parser.scanner.setSource(source, options.offset, options.line, options.column);
-        parser.filename = options.filename || '<unknown>';
-        parser.needPositions = Boolean(options.positions);
-        parser.tolerant = Boolean(options.tolerant);
-        parser.onParseError = typeof options.onParseError === 'function' ? options.onParseError : noop;
-        parser.parseAtruleExpression = 'parseAtruleExpression' in options ? Boolean(options.parseAtruleExpression) : true;
-        parser.parseSelector = 'parseSelector' in options ? Boolean(options.parseSelector) : true;
-        parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;
-        parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;
-
-        if (!parser.context.hasOwnProperty(context)) {
-            throw new Error('Unknown context `' + context + '`');
-        }
-
-        ast = parser.context[context].call(parser, options);
-
-        if (!parser.scanner.eof) {
-            parser.scanner.error();
-        }
-
-        // console.log(JSON.stringify(ast, null, 4));
-        return ast;
-    };
-};
-
-var cmpChar$1 = tokenizer$1.cmpChar;
-var TYPE$4 = tokenizer$1.TYPE;
-
-var IDENTIFIER$2 = TYPE$4.Identifier;
-var STRING$2 = TYPE$4.String;
-var NUMBER$2 = TYPE$4.Number;
-var FUNCTION$2 = TYPE$4.Function;
-var URL$2 = TYPE$4.Url;
-var NUMBERSIGN = TYPE$4.NumberSign;
-var LEFTPARENTHESIS$1 = TYPE$4.LeftParenthesis;
-var LEFTSQUAREBRACKET$1 = TYPE$4.LeftSquareBracket;
-var PLUSSIGN$2 = TYPE$4.PlusSign;
-var HYPHENMINUS$2 = TYPE$4.HyphenMinus;
-var COMMA = TYPE$4.Comma;
-var SOLIDUS = TYPE$4.Solidus;
-var ASTERISK = TYPE$4.Asterisk;
-var PERCENTSIGN = TYPE$4.PercentSign;
-var BACKSLASH = TYPE$4.Backslash;
-var U = 117; // 'u'.charCodeAt(0)
-
-var _default = function defaultRecognizer(context) {
-    switch (this.scanner.tokenType) {
-        case NUMBERSIGN:
-            return this.HexColor();
-
-        case COMMA:
-            context.space = null;
-            context.ignoreWSAfter = true;
-            return this.Operator();
-
-        case SOLIDUS:
-        case ASTERISK:
-        case PLUSSIGN$2:
-        case HYPHENMINUS$2:
-            return this.Operator();
-
-        case LEFTPARENTHESIS$1:
-            return this.Parentheses(this.readSequence, context.recognizer);
-
-        case LEFTSQUAREBRACKET$1:
-            return this.Brackets(this.readSequence, context.recognizer);
-
-        case STRING$2:
-            return this.String();
-
-        case NUMBER$2:
-            switch (this.scanner.lookupType(1)) {
-                case PERCENTSIGN:
-                    return this.Percentage();
-
-                case IDENTIFIER$2:
-                    // edge case: number with folowing \0 and \9 hack shouldn't to be a Dimension
-                    if (cmpChar$1(this.scanner.source, this.scanner.tokenEnd, BACKSLASH)) {
-                        return this.Number();
-                    } else {
-                        return this.Dimension();
-                    }
-
-                default:
-                    return this.Number();
-            }
-
-        case FUNCTION$2:
-            return this.Function(this.readSequence, context.recognizer);
-
-        case URL$2:
-            return this.Url();
-
-        case IDENTIFIER$2:
-            // check for unicode range, it should start with u+ or U+
-            if (cmpChar$1(this.scanner.source, this.scanner.tokenStart, U) &&
-                cmpChar$1(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN$2)) {
-                return this.UnicodeRange();
-            } else {
-                return this.Identifier();
-            }
-    }
-};
-
-var atruleExpression = {
-    getNode: _default
-};
-
-var TYPE$5 = tokenizer$1.TYPE;
-
-var IDENTIFIER$3 = TYPE$5.Identifier;
-var NUMBER$3 = TYPE$5.Number;
-var NUMBERSIGN$1 = TYPE$5.NumberSign;
-var LEFTSQUAREBRACKET$2 = TYPE$5.LeftSquareBracket;
-var PLUSSIGN$3 = TYPE$5.PlusSign;
-var SOLIDUS$1 = TYPE$5.Solidus;
-var ASTERISK$1 = TYPE$5.Asterisk;
-var FULLSTOP$2 = TYPE$5.FullStop;
-var COLON = TYPE$5.Colon;
-var GREATERTHANSIGN$1 = TYPE$5.GreaterThanSign;
-var VERTICALLINE = TYPE$5.VerticalLine;
-var TILDE = TYPE$5.Tilde;
-
-function getNode(context) {
-    switch (this.scanner.tokenType) {
-        case PLUSSIGN$3:
-        case GREATERTHANSIGN$1:
-        case TILDE:
-            context.space = null;
-            context.ignoreWSAfter = true;
-            return this.Combinator();
-
-        case SOLIDUS$1:  // /deep/
-            return this.Combinator();
-
-        case FULLSTOP$2:
-            return this.ClassSelector();
-
-        case LEFTSQUAREBRACKET$2:
-            return this.AttributeSelector();
-
-        case NUMBERSIGN$1:
-            return this.IdSelector();
-
-        case COLON:
-            if (this.scanner.lookupType(1) === COLON) {
-                return this.PseudoElementSelector();
-            } else {
-                return this.PseudoClassSelector();
-            }
-
-        case IDENTIFIER$3:
-        case ASTERISK$1:
-        case VERTICALLINE:
-            return this.TypeSelector();
-
-        case NUMBER$3:
-            return this.Percentage();
-    }
-}
-var selector = {
-    getNode: getNode
-};
-
-// https://drafts.csswg.org/css-images-4/#element-notation
-// https://developer.mozilla.org/en-US/docs/Web/CSS/element
-var element = function() {
-    this.scanner.skipSC();
-
-    var id = this.IdSelector();
-
-    this.scanner.skipSC();
-
-    return new list().appendData(
-        id
-    );
-};
-
-// legacy IE function
-// expression '(' raw ')'
-var expression = function() {
-    return new list().appendData(
-        this.Raw(this.scanner.currentToken, 0, 0, false, false)
-    );
-};
-
-var TYPE$6 = tokenizer$1.TYPE;
-
-var IDENTIFIER$4 = TYPE$6.Identifier;
-var COMMA$1 = TYPE$6.Comma;
-var SEMICOLON = TYPE$6.Semicolon;
-var HYPHENMINUS$3 = TYPE$6.HyphenMinus;
-var EXCLAMATIONMARK$1 = TYPE$6.ExclamationMark;
-
-// var '(' ident (',' <value>? )? ')'
-var _var = function() {
-    var children = new list();
-
-    this.scanner.skipSC();
-
-    var identStart = this.scanner.tokenStart;
-
-    this.scanner.eat(HYPHENMINUS$3);
-    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== HYPHENMINUS$3) {
-        this.scanner.error('HyphenMinus is expected');
-    }
-    this.scanner.eat(IDENTIFIER$4);
-
-    children.appendData({
-        type: 'Identifier',
-        loc: this.getLocation(identStart, this.scanner.tokenStart),
-        name: this.scanner.substrToCursor(identStart)
-    });
-
-    this.scanner.skipSC();
-
-    if (this.scanner.tokenType === COMMA$1) {
-        children.appendData(this.Operator());
-        children.appendData(this.parseCustomProperty
-            ? this.Value(null)
-            : this.Raw(this.scanner.currentToken, EXCLAMATIONMARK$1, SEMICOLON, false, false)
-        );
-    }
-
-    return children;
-};
-
-var value = {
-    getNode: _default,
-    '-moz-element': element,
-    'element': element,
-    'expression': expression,
-    'var': _var
-};
-
-var scope = {
-    AtruleExpression: atruleExpression,
-    Selector: selector,
-    Value: value
-};
-
-var fontFace = {
-    parse: {
-        expression: null,
-        block: function() {
-            return this.Block(this.Declaration);
-        }
-    }
-};
-
-var TYPE$7 = tokenizer$1.TYPE;
-
-var STRING$3 = TYPE$7.String;
-var IDENTIFIER$5 = TYPE$7.Identifier;
-var URL$3 = TYPE$7.Url;
-var LEFTPARENTHESIS$2 = TYPE$7.LeftParenthesis;
-
-var _import = {
-    parse: {
-        expression: function() {
-            var children = new list();
-
-            this.scanner.skipSC();
-
-            switch (this.scanner.tokenType) {
-                case STRING$3:
-                    children.appendData(this.String());
-                    break;
-
-                case URL$3:
-                    children.appendData(this.Url());
-                    break;
-
-                default:
-                    this.scanner.error('String or url() is expected');
-            }
-
-            if (this.scanner.lookupNonWSType(0) === IDENTIFIER$5 ||
-                this.scanner.lookupNonWSType(0) === LEFTPARENTHESIS$2) {
-                children.appendData(this.WhiteSpace());
-                children.appendData(this.MediaQueryList());
-            }
-
-            return children;
-        },
-        block: null
-    }
-};
-
-var media = {
-    parse: {
-        expression: function() {
-            return new list().appendData(
-                this.MediaQueryList()
-            );
-        },
-        block: function() {
-            return this.Block(this.Rule);
-        }
-    }
-};
-
-var TYPE$8 = tokenizer$1.TYPE;
-var LEFTCURLYBRACKET$1 = TYPE$8.LeftCurlyBracket;
-
-var page = {
-    parse: {
-        expression: function() {
-            if (this.scanner.lookupNonWSType(0) === LEFTCURLYBRACKET$1) {
-                return null;
-            }
-
-            return new list().appendData(
-                this.SelectorList()
-            );
-        },
-        block: function() {
-            return this.Block(this.Declaration);
-        }
-    }
-};
-
-var TYPE$9 = tokenizer$1.TYPE;
-
-var WHITESPACE$3 = TYPE$9.WhiteSpace;
-var COMMENT$3 = TYPE$9.Comment;
-var IDENTIFIER$6 = TYPE$9.Identifier;
-var FUNCTION$3 = TYPE$9.Function;
-var LEFTPARENTHESIS$3 = TYPE$9.LeftParenthesis;
-var HYPHENMINUS$4 = TYPE$9.HyphenMinus;
-var COLON$1 = TYPE$9.Colon;
-
-function consumeRaw() {
-    return new list().appendData(
-        this.Raw(this.scanner.currentToken, 0, 0, false, false)
-    );
-}
-
-function parentheses() {
-    var index = 0;
-
-    this.scanner.skipSC();
-
-    // TODO: make it simplier
-    if (this.scanner.tokenType === IDENTIFIER$6) {
-        index = 1;
-    } else if (this.scanner.tokenType === HYPHENMINUS$4 &&
-               this.scanner.lookupType(1) === IDENTIFIER$6) {
-        index = 2;
-    }
-
-    if (index !== 0 && this.scanner.lookupNonWSType(index) === COLON$1) {
-        return new list().appendData(
-            this.Declaration()
-        );
-    }
-
-    return readSequence.call(this);
-}
-
-function readSequence() {
-    var children = new list();
-    var space = null;
-    var child;
-
-    this.scanner.skipSC();
-
-    scan:
-    while (!this.scanner.eof) {
-        switch (this.scanner.tokenType) {
-            case WHITESPACE$3:
-                space = this.WhiteSpace();
-                continue;
-
-            case COMMENT$3:
-                this.scanner.next();
-                continue;
-
-            case FUNCTION$3:
-                child = this.Function(consumeRaw, this.scope.AtruleExpression);
-                break;
-
-            case IDENTIFIER$6:
-                child = this.Identifier();
-                break;
-
-            case LEFTPARENTHESIS$3:
-                child = this.Parentheses(parentheses, this.scope.AtruleExpression);
-                break;
-
-            default:
-                break scan;
-        }
-
-        if (space !== null) {
-            children.appendData(space);
-            space = null;
-        }
-
-        children.appendData(child);
-    }
-
-    return children;
-}
-
-var supports = {
-    parse: {
-        expression: function() {
-            var children = readSequence.call(this);
-
-            if (children.isEmpty()) {
-                this.scanner.error('Condition is expected');
-            }
-
-            return children;
-        },
-        block: function() {
-            return this.Block(this.Rule);
-        }
-    }
-};
-
-var atrule = {
-    'font-face': fontFace,
-    'import': _import,
-    'media': media,
-    'page': page,
-    'supports': supports
-};
-
-var dir = {
-    parse: function() {
-        return new list().appendData(
-            this.Identifier()
-        );
-    }
-};
-
-var has$1 = {
-    parse: function() {
-        return new list().appendData(
-            this.SelectorList()
-        );
-    }
-};
-
-var lang = {
-    parse: function() {
-        return new list().appendData(
-            this.Identifier()
-        );
-    }
-};
-
-var selectorList = {
-    parse: function selectorList() {
-        return new list().appendData(
-            this.SelectorList()
-        );
-    }
-};
-
-var matches = selectorList;
-
-var not = selectorList;
-
-var ALLOW_OF_CLAUSE = true;
-
-var nthWithOfClause = {
-    parse: function() {
-        return new list().appendData(
-            this.Nth(ALLOW_OF_CLAUSE)
-        );
-    }
-};
-
-var nthChild = nthWithOfClause;
-
-var nthLastChild = nthWithOfClause;
-
-var DISALLOW_OF_CLAUSE = false;
-
-var nth = {
-    parse: function nth() {
-        return new list().appendData(
-            this.Nth(DISALLOW_OF_CLAUSE)
-        );
-    }
-};
-
-var nthLastOfType = nth;
-
-var nthOfType = nth;
-
-var slotted = {
-    parse: function compoundSelector() {
-        return new list().appendData(
-            this.Selector()
-        );
-    }
-};
-
-var pseudo = {
-    'dir': dir,
-    'has': has$1,
-    'lang': lang,
-    'matches': matches,
-    'not': not,
-    'nth-child': nthChild,
-    'nth-last-child': nthLastChild,
-    'nth-last-of-type': nthLastOfType,
-    'nth-of-type': nthOfType,
-    'slotted': slotted
-};
-
-var cmpChar$2 = tokenizer$1.cmpChar;
-var isNumber$2 = tokenizer$1.isNumber;
-var TYPE$10 = tokenizer$1.TYPE;
-
-var IDENTIFIER$7 = TYPE$10.Identifier;
-var NUMBER$4 = TYPE$10.Number;
-var PLUSSIGN$4 = TYPE$10.PlusSign;
-var HYPHENMINUS$5 = TYPE$10.HyphenMinus;
-var N$3 = 110; // 'n'.charCodeAt(0)
-var DISALLOW_SIGN = true;
-var ALLOW_SIGN = false;
-
-function checkTokenIsInteger(scanner, disallowSign) {
-    var pos = scanner.tokenStart;
-
-    if (scanner.source.charCodeAt(pos) === PLUSSIGN$4 ||
-        scanner.source.charCodeAt(pos) === HYPHENMINUS$5) {
-        if (disallowSign) {
-            scanner.error();
-        }
-        pos++;
-    }
-
-    for (; pos < scanner.tokenEnd; pos++) {
-        if (!isNumber$2(scanner.source.charCodeAt(pos))) {
-            scanner.error('Unexpected input', pos);
-        }
-    }
-}
-
-// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb
-var AnPlusB = {
-    name: 'AnPlusB',
-    structure: {
-        a: [String, null],
-        b: [String, null]
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var end = start;
-        var prefix = '';
-        var a = null;
-        var b = null;
-
-        if (this.scanner.tokenType === NUMBER$4 ||
-            this.scanner.tokenType === PLUSSIGN$4) {
-            checkTokenIsInteger(this.scanner, ALLOW_SIGN);
-            prefix = this.scanner.getTokenValue();
-            this.scanner.next();
-            end = this.scanner.tokenStart;
-        }
-
-        if (this.scanner.tokenType === IDENTIFIER$7) {
-            var bStart = this.scanner.tokenStart;
-
-            if (cmpChar$2(this.scanner.source, bStart, HYPHENMINUS$5)) {
-                if (prefix === '') {
-                    prefix = '-';
-                    bStart++;
-                } else {
-                    this.scanner.error('Unexpected hyphen minus');
-                }
-            }
-
-            if (!cmpChar$2(this.scanner.source, bStart, N$3)) {
-                this.scanner.error();
-            }
-
-            a = prefix === ''  ? '1'  :
-                prefix === '+' ? '+1' :
-                prefix === '-' ? '-1' :
-                prefix;
-
-            var len = this.scanner.tokenEnd - bStart;
-            if (len > 1) {
-                // ..n-..
-                if (this.scanner.source.charCodeAt(bStart + 1) !== HYPHENMINUS$5) {
-                    this.scanner.error('Unexpected input', bStart + 1);
-                }
-
-                if (len > 2) {
-                    // ..n-{number}..
-                    this.scanner.tokenStart = bStart + 2;
-                } else {
-                    // ..n- {number}
-                    this.scanner.next();
-                    this.scanner.skipSC();
-                }
-
-                checkTokenIsInteger(this.scanner, DISALLOW_SIGN);
-                b = '-' + this.scanner.getTokenValue();
-                this.scanner.next();
-                end = this.scanner.tokenStart;
-            } else {
-                prefix = '';
-                this.scanner.next();
-                end = this.scanner.tokenStart;
-                this.scanner.skipSC();
-
-                if (this.scanner.tokenType === HYPHENMINUS$5 ||
-                    this.scanner.tokenType === PLUSSIGN$4) {
-                    prefix = this.scanner.getTokenValue();
-                    this.scanner.next();
-                    this.scanner.skipSC();
-                }
-
-                if (this.scanner.tokenType === NUMBER$4) {
-                    checkTokenIsInteger(this.scanner, prefix !== '');
-
-                    if (!isNumber$2(this.scanner.source.charCodeAt(this.scanner.tokenStart))) {
-                        prefix = this.scanner.source.charAt(this.scanner.tokenStart);
-                        this.scanner.tokenStart++;
-                    }
-
-                    if (prefix === '') {
-                        // should be an operator before number
-                        this.scanner.error();
-                    } else if (prefix === '+') {
-                        // plus is using by default
-                        prefix = '';
-                    }
-
-                    b = prefix + this.scanner.getTokenValue();
-
-                    this.scanner.next();
-                    end = this.scanner.tokenStart;
-                } else {
-                    if (prefix) {
-                        this.scanner.eat(NUMBER$4);
-                    }
-                }
-            }
-        } else {
-            if (prefix === '' || prefix === '+') { // no number
-                this.scanner.error(
-                    'Number or identifier is expected',
-                    this.scanner.tokenStart + (
-                        this.scanner.tokenType === PLUSSIGN$4 ||
-                        this.scanner.tokenType === HYPHENMINUS$5
-                    )
-                );
-            }
-
-            b = prefix;
-        }
-
-        return {
-            type: 'AnPlusB',
-            loc: this.getLocation(start, end),
-            a: a,
-            b: b
-        };
-    },
-    generate: function(processChunk, node) {
-        var a = node.a !== null && node.a !== undefined;
-        var b = node.b !== null && node.b !== undefined;
-
-        if (a) {
-            processChunk(
-                node.a === '+1' ? '+n' :
-                node.a ===  '1' ?  'n' :
-                node.a === '-1' ? '-n' :
-                node.a + 'n'
-            );
-
-            if (b) {
-                b = String(node.b);
-                if (b.charAt(0) === '-' || b.charAt(0) === '+') {
-                    processChunk(b.charAt(0));
-                    processChunk(b.substr(1));
-                } else {
-                    processChunk('+');
-                    processChunk(b);
-                }
-            }
-        } else {
-            processChunk(String(node.b));
-        }
-    }
-};
-
-var TYPE$11 = tokenizer$1.TYPE;
-
-var ATRULE$2 = TYPE$11.Atrule;
-var SEMICOLON$1 = TYPE$11.Semicolon;
-var LEFTCURLYBRACKET$2 = TYPE$11.LeftCurlyBracket;
-var RIGHTCURLYBRACKET$1 = TYPE$11.RightCurlyBracket;
-
-function isBlockAtrule() {
-    for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {
-        if (type === RIGHTCURLYBRACKET$1) {
-            return true;
-        }
-
-        if (type === LEFTCURLYBRACKET$2 ||
-            type === ATRULE$2) {
-            return false;
-        }
-    }
-
-    this.scanner.skip(offset);
-    this.scanner.eat(RIGHTCURLYBRACKET$1);
-}
-
-var Atrule = {
-    name: 'Atrule',
-    structure: {
-        name: String,
-        expression: ['AtruleExpression', null],
-        block: ['Block', null]
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var name;
-        var nameLowerCase;
-        var expression = null;
-        var block = null;
-
-        this.scanner.eat(ATRULE$2);
-
-        name = this.scanner.substrToCursor(start + 1);
-        nameLowerCase = name.toLowerCase();
-        this.scanner.skipSC();
-
-        expression = this.AtruleExpression(name);
-
-        // turn empty AtruleExpression into null
-        if (expression.children.head === null) {
-            expression = null;
-        }
-
-        this.scanner.skipSC();
-
-        if (this.atrule.hasOwnProperty(nameLowerCase)) {
-            if (typeof this.atrule[nameLowerCase].block === 'function') {
-                if (this.scanner.tokenType !== LEFTCURLYBRACKET$2) {
-                    // FIXME: make tolerant
-                    this.scanner.error('Curly bracket is expected');
-                }
-
-                block = this.atrule[nameLowerCase].block.call(this);
-            } else {
-                if (!this.tolerant || !this.scanner.eof) {
-                    this.scanner.eat(SEMICOLON$1);
-                }
-            }
-        } else {
-            switch (this.scanner.tokenType) {
-                case SEMICOLON$1:
-                    this.scanner.next();
-                    break;
-
-                case LEFTCURLYBRACKET$2:
-                    // TODO: should consume block content as Raw?
-                    block = this.Block(isBlockAtrule.call(this) ? this.Declaration : this.Rule);
-                    break;
-
-                default:
-                    if (!this.tolerant) {
-                        this.scanner.error('Semicolon or block is expected');
-                    }
-            }
-        }
-
-        return {
-            type: 'Atrule',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            name: name,
-            expression: expression,
-            block: block
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('@');
-        processChunk(node.name);
-
-        if (node.expression !== null) {
-            processChunk(' ');
-            this.generate(processChunk, node.expression);
-        }
-
-        if (node.block) {
-            this.generate(processChunk, node.block);
-        } else {
-            processChunk(';');
-        }
-    },
-    walkContext: 'atrule'
-};
-
-var TYPE$12 = tokenizer$1.TYPE;
-var SEMICOLON$2 = TYPE$12.Semicolon;
-var LEFTCURLYBRACKET$3 = TYPE$12.LeftCurlyBracket;
-
-function consumeRaw$1(startToken) {
-    return new list().appendData(
-        this.Raw(startToken, SEMICOLON$2, LEFTCURLYBRACKET$3, false, true)
-    );
-}
-
-function consumeDefaultSequence() {
-    return this.readSequence(this.scope.AtruleExpression);
-}
-
-var AtruleExpression = {
-    name: 'AtruleExpression',
-    structure: {
-        children: [[]]
-    },
-    parse: function(name) {
-        var children = null;
-        var startToken = this.scanner.currentToken;
-
-        if (name !== null) {
-            name = name.toLowerCase();
-        }
-
-        if (this.parseAtruleExpression) {
-            // custom consumer
-            if (this.atrule.hasOwnProperty(name)) {
-                if (typeof this.atrule[name].expression === 'function') {
-                    children = this.tolerantParse(this.atrule[name].expression, consumeRaw$1);
-                }
-            } else {
-                // default consumer
-                this.scanner.skipSC();
-                children = this.tolerantParse(consumeDefaultSequence, consumeRaw$1);
-            }
-
-            if (this.tolerant) {
-                if (this.scanner.eof || (this.scanner.tokenType !== SEMICOLON$2 && this.scanner.tokenType !== LEFTCURLYBRACKET$3)) {
-                    children = consumeRaw$1.call(this, startToken);
-                }
-            }
-        } else {
-            children = consumeRaw$1.call(this, startToken);
-        }
-
-        if (children === null) {
-            children = new list();
-        }
-
-        return {
-            type: 'AtruleExpression',
-            loc: this.getLocationFromList(children),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        this.each(processChunk, node);
-    },
-    walkContext: 'atruleExpression'
-};
-
-var TYPE$13 = tokenizer$1.TYPE;
-
-var IDENTIFIER$8 = TYPE$13.Identifier;
-var STRING$4 = TYPE$13.String;
-var DOLLARSIGN = TYPE$13.DollarSign;
-var ASTERISK$2 = TYPE$13.Asterisk;
-var COLON$2 = TYPE$13.Colon;
-var EQUALSSIGN = TYPE$13.EqualsSign;
-var LEFTSQUAREBRACKET$3 = TYPE$13.LeftSquareBracket;
-var RIGHTSQUAREBRACKET$1 = TYPE$13.RightSquareBracket;
-var CIRCUMFLEXACCENT = TYPE$13.CircumflexAccent;
-var VERTICALLINE$1 = TYPE$13.VerticalLine;
-var TILDE$1 = TYPE$13.Tilde;
-
-function getAttributeName() {
-    if (this.scanner.eof) {
-        this.scanner.error('Unexpected end of input');
-    }
-
-    var start = this.scanner.tokenStart;
-    var expectIdentifier = false;
-    var checkColon = true;
-
-    if (this.scanner.tokenType === ASTERISK$2) {
-        expectIdentifier = true;
-        checkColon = false;
-        this.scanner.next();
-    } else if (this.scanner.tokenType !== VERTICALLINE$1) {
-        this.scanner.eat(IDENTIFIER$8);
-    }
-
-    if (this.scanner.tokenType === VERTICALLINE$1) {
-        if (this.scanner.lookupType(1) !== EQUALSSIGN) {
-            this.scanner.next();
-            this.scanner.eat(IDENTIFIER$8);
-        } else if (expectIdentifier) {
-            this.scanner.error('Identifier is expected', this.scanner.tokenEnd);
-        }
-    } else if (expectIdentifier) {
-        this.scanner.error('Vertical line is expected');
-    }
-
-    if (checkColon && this.scanner.tokenType === COLON$2) {
-        this.scanner.next();
-        this.scanner.eat(IDENTIFIER$8);
-    }
-
-    return {
-        type: 'Identifier',
-        loc: this.getLocation(start, this.scanner.tokenStart),
-        name: this.scanner.substrToCursor(start)
-    };
-}
-
-function getOperator() {
-    var start = this.scanner.tokenStart;
-    var tokenType = this.scanner.tokenType;
-
-    if (tokenType !== EQUALSSIGN &&        // =
-        tokenType !== TILDE$1 &&             // ~=
-        tokenType !== CIRCUMFLEXACCENT &&  // ^=
-        tokenType !== DOLLARSIGN &&        // $=
-        tokenType !== ASTERISK$2 &&          // *=
-        tokenType !== VERTICALLINE$1         // |=
-    ) {
-        this.scanner.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');
-    }
-
-    if (tokenType === EQUALSSIGN) {
-        this.scanner.next();
-    } else {
-        this.scanner.next();
-        this.scanner.eat(EQUALSSIGN);
-    }
-
-    return this.scanner.substrToCursor(start);
-}
-
-// '[' S* attrib_name ']'
-// '[' S* attrib_name S* attrib_matcher S* [ IDENT | STRING ] S* attrib_flags? S* ']'
-var AttributeSelector = {
-    name: 'AttributeSelector',
-    structure: {
-        name: 'Identifier',
-        matcher: [String, null],
-        value: ['String', 'Identifier', null],
-        flags: [String, null]
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var name;
-        var matcher = null;
-        var value = null;
-        var flags = null;
-
-        this.scanner.eat(LEFTSQUAREBRACKET$3);
-        this.scanner.skipSC();
-
-        name = getAttributeName.call(this);
-        this.scanner.skipSC();
-
-        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET$1) {
-            // avoid case `[name i]`
-            if (this.scanner.tokenType !== IDENTIFIER$8) {
-                matcher = getOperator.call(this);
-
-                this.scanner.skipSC();
-
-                value = this.scanner.tokenType === STRING$4
-                    ? this.String()
-                    : this.Identifier();
-
-                this.scanner.skipSC();
-            }
-
-            // attribute flags
-            if (this.scanner.tokenType === IDENTIFIER$8) {
-                flags = this.scanner.getTokenValue();
-                this.scanner.next();
-
-                this.scanner.skipSC();
-            }
-        }
-
-        this.scanner.eat(RIGHTSQUAREBRACKET$1);
-
-        return {
-            type: 'AttributeSelector',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            name: name,
-            matcher: matcher,
-            value: value,
-            flags: flags
-        };
-    },
-    generate: function(processChunk, node) {
-        var flagsPrefix = ' ';
-
-        processChunk('[');
-        this.generate(processChunk, node.name);
-
-        if (node.matcher !== null) {
-            processChunk(node.matcher);
-
-            if (node.value !== null) {
-                this.generate(processChunk, node.value);
-
-                // space between string and flags is not required
-                if (node.value.type === 'String') {
-                    flagsPrefix = '';
-                }
-            }
-        }
-
-        if (node.flags !== null) {
-            processChunk(flagsPrefix);
-            processChunk(node.flags);
-        }
-
-        processChunk(']');
-    }
-};
-
-var TYPE$14 = tokenizer$1.TYPE;
-
-var WHITESPACE$4 = TYPE$14.WhiteSpace;
-var COMMENT$4 = TYPE$14.Comment;
-var SEMICOLON$3 = TYPE$14.Semicolon;
-var ATRULE$3 = TYPE$14.Atrule;
-var LEFTCURLYBRACKET$4 = TYPE$14.LeftCurlyBracket;
-var RIGHTCURLYBRACKET$2 = TYPE$14.RightCurlyBracket;
-
-function consumeRaw$2(startToken) {
-    return this.Raw(startToken, 0, SEMICOLON$3, true, true);
-}
-
-var Block = {
-    name: 'Block',
-    structure: {
-        children: [['Atrule', 'Rule', 'Declaration']]
-    },
-    parse: function(defaultConsumer) {
-        if (!defaultConsumer) {
-            defaultConsumer = this.Declaration;
-        }
-
-        var start = this.scanner.tokenStart;
-        var children = new list();
-
-        this.scanner.eat(LEFTCURLYBRACKET$4);
-
-        scan:
-        while (!this.scanner.eof) {
-            switch (this.scanner.tokenType) {
-                case RIGHTCURLYBRACKET$2:
-                    break scan;
-
-                case WHITESPACE$4:
-                case COMMENT$4:
-                case SEMICOLON$3:
-                    this.scanner.next();
-                    break;
-
-                case ATRULE$3:
-                    children.appendData(this.tolerantParse(this.Atrule, consumeRaw$2));
-                    break;
-
-                default:
-                    children.appendData(this.tolerantParse(defaultConsumer, consumeRaw$2));
-            }
-        }
-
-        if (!this.tolerant || !this.scanner.eof) {
-            this.scanner.eat(RIGHTCURLYBRACKET$2);
-        }
-
-        return {
-            type: 'Block',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('{');
-        this.each(processChunk, node);
-        processChunk('}');
-    },
-    walkContext: 'block'
-};
-
-var TYPE$15 = tokenizer$1.TYPE;
-var LEFTSQUAREBRACKET$4 = TYPE$15.LeftSquareBracket;
-var RIGHTSQUAREBRACKET$2 = TYPE$15.RightSquareBracket;
-
-// currently only Grid Layout uses square brackets, but left it universal
-// https://drafts.csswg.org/css-grid/#track-sizing
-// [ ident* ]
-var Brackets = {
-    name: 'Brackets',
-    structure: {
-        children: [[]]
-    },
-    parse: function(readSequence, recognizer) {
-        var start = this.scanner.tokenStart;
-        var children = null;
-
-        this.scanner.eat(LEFTSQUAREBRACKET$4);
-        children = readSequence.call(this, recognizer);
-        this.scanner.eat(RIGHTSQUAREBRACKET$2);
-
-        return {
-            type: 'Brackets',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('[');
-        this.each(processChunk, node);
-        processChunk(']');
-    }
-};
-
-var CDC$2 = tokenizer$1.TYPE.CDC;
-
-var CDC_1 = {
-    name: 'CDC',
-    structure: [],
-    parse: function() {
-        var start = this.scanner.tokenStart;
-
-        this.scanner.eat(CDC$2); // -->
-
-        return {
-            type: 'CDC',
-            loc: this.getLocation(start, this.scanner.tokenStart)
-        };
-    },
-    generate: function(processChunk) {
-        processChunk('-->');
-    }
-};
-
-var CDO$2 = tokenizer$1.TYPE.CDO;
-
-var CDO_1 = {
-    name: 'CDO',
-    structure: [],
-    parse: function() {
-        var start = this.scanner.tokenStart;
-
-        this.scanner.eat(CDO$2); // <!--
-
-        return {
-            type: 'CDO',
-            loc: this.getLocation(start, this.scanner.tokenStart)
-        };
-    },
-    generate: function(processChunk) {
-        processChunk('<!--');
-    }
-};
-
-var TYPE$16 = tokenizer$1.TYPE;
-var IDENTIFIER$9 = TYPE$16.Identifier;
-var FULLSTOP$3 = TYPE$16.FullStop;
-
-// '.' ident
-var ClassSelector = {
-    name: 'ClassSelector',
-    structure: {
-        name: String
-    },
-    parse: function() {
-        this.scanner.eat(FULLSTOP$3);
-
-        return {
-            type: 'ClassSelector',
-            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),
-            name: this.scanner.consume(IDENTIFIER$9)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('.');
-        processChunk(node.name);
-    }
-};
-
-var TYPE$17 = tokenizer$1.TYPE;
-
-var PLUSSIGN$5 = TYPE$17.PlusSign;
-var SOLIDUS$2 = TYPE$17.Solidus;
-var GREATERTHANSIGN$2 = TYPE$17.GreaterThanSign;
-var TILDE$2 = TYPE$17.Tilde;
-
-// + | > | ~ | /deep/
-var Combinator = {
-    name: 'Combinator',
-    structure: {
-        name: String
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-
-        switch (this.scanner.tokenType) {
-            case GREATERTHANSIGN$2:
-            case PLUSSIGN$5:
-            case TILDE$2:
-                this.scanner.next();
-                break;
-
-            case SOLIDUS$2:
-                this.scanner.next();
-                this.scanner.expectIdentifier('deep');
-                this.scanner.eat(SOLIDUS$2);
-                break;
-
-            default:
-                this.scanner.error('Combinator is expected');
-        }
-
-        return {
-            type: 'Combinator',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            name: this.scanner.substrToCursor(start)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.name);
-    }
-};
-
-var TYPE$18 = tokenizer$1.TYPE;
-
-var ASTERISK$3 = TYPE$18.Asterisk;
-var SOLIDUS$3 = TYPE$18.Solidus;
-
-// '/*' .* '*/'
-var Comment = {
-    name: 'Comment',
-    structure: {
-        value: String
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var end = this.scanner.tokenEnd;
-
-        if ((end - start + 2) >= 2 &&
-            this.scanner.source.charCodeAt(end - 2) === ASTERISK$3 &&
-            this.scanner.source.charCodeAt(end - 1) === SOLIDUS$3) {
-            end -= 2;
-        }
-
-        this.scanner.next();
-
-        return {
-            type: 'Comment',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            value: this.scanner.source.substring(start + 2, end)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('/*');
-        processChunk(node.value);
-        processChunk('*/');
-    }
-};
-
-var TYPE$19 = tokenizer$1.TYPE;
-
-var IDENTIFIER$10 = TYPE$19.Identifier;
-var COLON$3 = TYPE$19.Colon;
-var EXCLAMATIONMARK$2 = TYPE$19.ExclamationMark;
-var SOLIDUS$4 = TYPE$19.Solidus;
-var ASTERISK$4 = TYPE$19.Asterisk;
-var DOLLARSIGN$1 = TYPE$19.DollarSign;
-var HYPHENMINUS$6 = TYPE$19.HyphenMinus;
-var SEMICOLON$4 = TYPE$19.Semicolon;
-var RIGHTCURLYBRACKET$3 = TYPE$19.RightCurlyBracket;
-var RIGHTPARENTHESIS$1 = TYPE$19.RightParenthesis;
-var PLUSSIGN$6 = TYPE$19.PlusSign;
-var NUMBERSIGN$2 = TYPE$19.NumberSign;
-
-var Declaration = {
-    name: 'Declaration',
-    structure: {
-        important: [Boolean, String],
-        property: String,
-        value: ['Value', 'Raw']
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var property = readProperty.call(this);
-        var important = false;
-        var value;
-
-        this.scanner.skipSC();
-        this.scanner.eat(COLON$3);
-
-        if (isCustomProperty(property) ? this.parseCustomProperty : this.parseValue) {
-            value = this.Value(property);
-        } else {
-            value = this.Raw(this.scanner.currentToken, EXCLAMATIONMARK$2, SEMICOLON$4, false, false);
-        }
-
-        if (this.scanner.tokenType === EXCLAMATIONMARK$2) {
-            important = getImportant(this.scanner);
-            this.scanner.skipSC();
-        }
-
-        // TODO: include or not to include semicolon to range?
-        // if (this.scanner.tokenType === SEMICOLON) {
-        //     this.scanner.next();
-        // }
-
-        if (!this.scanner.eof &&
-            this.scanner.tokenType !== SEMICOLON$4 &&
-            this.scanner.tokenType !== RIGHTPARENTHESIS$1 &&
-            this.scanner.tokenType !== RIGHTCURLYBRACKET$3) {
-            this.scanner.error();
-        }
-
-        return {
-            type: 'Declaration',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            important: important,
-            property: property,
-            value: value
-        };
-    },
-    generate: function(processChunk, node, item) {
-        processChunk(node.property);
-        processChunk(':');
-        this.generate(processChunk, node.value);
-
-        if (node.important) {
-            processChunk(node.important === true ? '!important' : '!' + node.important);
-        }
-
-        if (item && item.next) {
-            processChunk(';');
-        }
-    },
-    walkContext: 'declaration'
-};
-
-function isCustomProperty(name) {
-    return name.length >= 2 &&
-           name.charCodeAt(0) === HYPHENMINUS$6 &&
-           name.charCodeAt(1) === HYPHENMINUS$6;
-}
-
-function readProperty() {
-    var start = this.scanner.tokenStart;
-    var prefix = 0;
-
-    // hacks
-    switch (this.scanner.tokenType) {
-        case ASTERISK$4:
-        case DOLLARSIGN$1:
-        case PLUSSIGN$6:
-        case NUMBERSIGN$2:
-            prefix = 1;
-            break;
-
-        // TODO: not sure we should support this hack
-        case SOLIDUS$4:
-            prefix = this.scanner.lookupType(1) === SOLIDUS$4 ? 2 : 1;
-            break;
-    }
-
-    if (this.scanner.lookupType(prefix) === HYPHENMINUS$6) {
-        prefix++;
-    }
-
-    if (prefix) {
-        this.scanner.skip(prefix);
-    }
-
-    this.scanner.eat(IDENTIFIER$10);
-
-    return this.scanner.substrToCursor(start);
-}
-
-// ! ws* important
-function getImportant(scanner) {
-    scanner.eat(EXCLAMATIONMARK$2);
-    scanner.skipSC();
-
-    var important = scanner.consume(IDENTIFIER$10);
-
-    // store original value in case it differ from `important`
-    // for better original source restoring and hacks like `!ie` support
-    return important === 'important' ? true : important;
-}
-
-var TYPE$20 = tokenizer$1.TYPE;
-
-var WHITESPACE$5 = TYPE$20.WhiteSpace;
-var COMMENT$5 = TYPE$20.Comment;
-var SEMICOLON$5 = TYPE$20.Semicolon;
-
-function consumeRaw$3(startToken) {
-    return this.Raw(startToken, 0, SEMICOLON$5, true, true);
-}
-
-var DeclarationList = {
-    name: 'DeclarationList',
-    structure: {
-        children: [['Declaration']]
-    },
-    parse: function() {
-        var children = new list();
-
-        scan:
-        while (!this.scanner.eof) {
-            switch (this.scanner.tokenType) {
-                case WHITESPACE$5:
-                case COMMENT$5:
-                case SEMICOLON$5:
-                    this.scanner.next();
-                    break;
-
-                default:
-                    children.appendData(this.tolerantParse(this.Declaration, consumeRaw$3));
-            }
-        }
-
-        return {
-            type: 'DeclarationList',
-            loc: this.getLocationFromList(children),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        this.each(processChunk, node);
-    }
-};
-
-var NUMBER$5 = tokenizer$1.TYPE.Number;
-
-// special reader for units to avoid adjoined IE hacks (i.e. '1px\9')
-function readUnit(scanner) {
-    var unit = scanner.getTokenValue();
-    var backSlashPos = unit.indexOf('\\');
-
-    if (backSlashPos > 0) {
-        // patch token offset
-        scanner.tokenStart += backSlashPos;
-
-        // return part before backslash
-        return unit.substring(0, backSlashPos);
-    }
-
-    // no backslash in unit name
-    scanner.next();
-
-    return unit;
-}
-
-// number ident
-var Dimension = {
-    name: 'Dimension',
-    structure: {
-        value: String,
-        unit: String
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var value = this.scanner.consume(NUMBER$5);
-        var unit = readUnit(this.scanner);
-
-        return {
-            type: 'Dimension',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            value: value,
-            unit: unit
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.value);
-        processChunk(node.unit);
-    }
-};
-
-var TYPE$21 = tokenizer$1.TYPE;
-var RIGHTPARENTHESIS$2 = TYPE$21.RightParenthesis;
-
-// <function-token> <sequence> ')'
-var _Function = {
-    name: 'Function',
-    structure: {
-        name: String,
-        children: [[]]
-    },
-    parse: function(readSequence, recognizer) {
-        var start = this.scanner.tokenStart;
-        var name = this.scanner.consumeFunctionName();
-        var nameLowerCase = name.toLowerCase();
-        var children;
-
-        children = recognizer.hasOwnProperty(nameLowerCase)
-            ? recognizer[nameLowerCase].call(this, recognizer)
-            : readSequence.call(this, recognizer);
-
-        this.scanner.eat(RIGHTPARENTHESIS$2);
-
-        return {
-            type: 'Function',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            name: name,
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.name);
-        processChunk('(');
-        this.each(processChunk, node);
-        processChunk(')');
-    },
-    walkContext: 'function'
-};
-
-var isHex$1 = tokenizer$1.isHex;
-var TYPE$22 = tokenizer$1.TYPE;
-
-var IDENTIFIER$11 = TYPE$22.Identifier;
-var NUMBER$6 = TYPE$22.Number;
-var NUMBERSIGN$3 = TYPE$22.NumberSign;
-
-function consumeHexSequence(scanner, required) {
-    if (!isHex$1(scanner.source.charCodeAt(scanner.tokenStart))) {
-        if (required) {
-            scanner.error('Unexpected input', scanner.tokenStart);
-        } else {
-            return;
-        }
-    }
-
-    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {
-        var code = scanner.source.charCodeAt(pos);
-
-        // break on non-hex char
-        if (!isHex$1(code)) {
-            // break token, exclude symbol
-            scanner.tokenStart = pos;
-            return;
-        }
-    }
-
-    // token is full hex sequence, go to next token
-    scanner.next();
-}
-
-// # ident
-var HexColor = {
-    name: 'HexColor',
-    structure: {
-        value: String
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-
-        this.scanner.eat(NUMBERSIGN$3);
-
-        scan:
-        switch (this.scanner.tokenType) {
-            case NUMBER$6:
-                consumeHexSequence(this.scanner, true);
-
-                // if token is identifier then number consists of hex only,
-                // try to add identifier to result
-                if (this.scanner.tokenType === IDENTIFIER$11) {
-                    consumeHexSequence(this.scanner, false);
-                }
-
-                break;
-
-            case IDENTIFIER$11:
-                consumeHexSequence(this.scanner, true);
-                break;
-
-            default:
-                this.scanner.error('Number or identifier is expected');
-        }
-
-        return {
-            type: 'HexColor',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            value: this.scanner.substrToCursor(start + 1) // skip #
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('#');
-        processChunk(node.value);
-    }
-};
-
-var TYPE$23 = tokenizer$1.TYPE;
-var IDENTIFIER$12 = TYPE$23.Identifier;
-
-var Identifier = {
-    name: 'Identifier',
-    structure: {
-        name: String
-    },
-    parse: function() {
-        return {
-            type: 'Identifier',
-            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
-            name: this.scanner.consume(IDENTIFIER$12)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.name);
-    }
-};
-
-var TYPE$24 = tokenizer$1.TYPE;
-var IDENTIFIER$13 = TYPE$24.Identifier;
-var NUMBERSIGN$4 = TYPE$24.NumberSign;
-
-// '#' ident
-var IdSelector = {
-    name: 'IdSelector',
-    structure: {
-        name: String
-    },
-    parse: function() {
-        this.scanner.eat(NUMBERSIGN$4);
-
-        return {
-            type: 'IdSelector',
-            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),
-            name: this.scanner.consume(IDENTIFIER$13)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('#');
-        processChunk(node.name);
-    }
-};
-
-var TYPE$25 = tokenizer$1.TYPE;
-
-var IDENTIFIER$14 = TYPE$25.Identifier;
-var NUMBER$7 = TYPE$25.Number;
-var LEFTPARENTHESIS$4 = TYPE$25.LeftParenthesis;
-var RIGHTPARENTHESIS$3 = TYPE$25.RightParenthesis;
-var COLON$4 = TYPE$25.Colon;
-var SOLIDUS$5 = TYPE$25.Solidus;
-
-var MediaFeature = {
-    name: 'MediaFeature',
-    structure: {
-        name: String,
-        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var name;
-        var value = null;
-
-        this.scanner.eat(LEFTPARENTHESIS$4);
-        this.scanner.skipSC();
-
-        name = this.scanner.consume(IDENTIFIER$14);
-        this.scanner.skipSC();
-
-        if (this.scanner.tokenType !== RIGHTPARENTHESIS$3) {
-            this.scanner.eat(COLON$4);
-            this.scanner.skipSC();
-
-            switch (this.scanner.tokenType) {
-                case NUMBER$7:
-                    if (this.scanner.lookupType(1) === IDENTIFIER$14) {
-                        value = this.Dimension();
-                    } else if (this.scanner.lookupNonWSType(1) === SOLIDUS$5) {
-                        value = this.Ratio();
-                    } else {
-                        value = this.Number();
-                    }
-
-                    break;
-
-                case IDENTIFIER$14:
-                    value = this.Identifier();
-
-                    break;
-
-                default:
-                    this.scanner.error('Number, dimension, ratio or identifier is expected');
-            }
-
-            this.scanner.skipSC();
-        }
-
-        this.scanner.eat(RIGHTPARENTHESIS$3);
-
-        return {
-            type: 'MediaFeature',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            name: name,
-            value: value
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('(');
-        processChunk(node.name);
-        if (node.value !== null) {
-            processChunk(':');
-            this.generate(processChunk, node.value);
-        }
-        processChunk(')');
-    }
-};
-
-var TYPE$26 = tokenizer$1.TYPE;
-
-var WHITESPACE$6 = TYPE$26.WhiteSpace;
-var COMMENT$6 = TYPE$26.Comment;
-var IDENTIFIER$15 = TYPE$26.Identifier;
-var LEFTPARENTHESIS$5 = TYPE$26.LeftParenthesis;
-
-var MediaQuery = {
-    name: 'MediaQuery',
-    structure: {
-        children: [['Identifier', 'MediaFeature', 'WhiteSpace']]
-    },
-    parse: function() {
-        this.scanner.skipSC();
-
-        var children = new list();
-        var child = null;
-        var space = null;
-
-        scan:
-        while (!this.scanner.eof) {
-            switch (this.scanner.tokenType) {
-                case COMMENT$6:
-                    this.scanner.next();
-                    continue;
-
-                case WHITESPACE$6:
-                    space = this.WhiteSpace();
-                    continue;
-
-                case IDENTIFIER$15:
-                    child = this.Identifier();
-                    break;
-
-                case LEFTPARENTHESIS$5:
-                    child = this.MediaFeature();
-                    break;
-
-                default:
-                    break scan;
-            }
-
-            if (space !== null) {
-                children.appendData(space);
-                space = null;
-            }
-
-            children.appendData(child);
-        }
-
-        if (child === null) {
-            this.scanner.error('Identifier or parenthesis is expected');
-        }
-
-        return {
-            type: 'MediaQuery',
-            loc: this.getLocationFromList(children),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        this.each(processChunk, node);
-    }
-};
-
-var COMMA$2 = tokenizer$1.TYPE.Comma;
-
-var MediaQueryList = {
-    name: 'MediaQueryList',
-    structure: {
-        children: [['MediaQuery']]
-    },
-    parse: function(relative) {
-        var children = new list();
-
-        this.scanner.skipSC();
-
-        while (!this.scanner.eof) {
-            children.appendData(this.MediaQuery(relative));
-
-            if (this.scanner.tokenType !== COMMA$2) {
-                break;
-            }
-
-            this.scanner.next();
-        }
-
-        return {
-            type: 'MediaQueryList',
-            loc: this.getLocationFromList(children),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        this.eachComma(processChunk, node);
-    }
-};
-
-// https://drafts.csswg.org/css-syntax-3/#the-anb-type
-var Nth = {
-    name: 'Nth',
-    structure: {
-        nth: ['AnPlusB', 'Identifier'],
-        selector: ['SelectorList', null]
-    },
-    parse: function(allowOfClause) {
-        this.scanner.skipSC();
-
-        var start = this.scanner.tokenStart;
-        var end = start;
-        var selector = null;
-        var query;
-
-        if (this.scanner.lookupValue(0, 'odd') || this.scanner.lookupValue(0, 'even')) {
-            query = this.Identifier();
-        } else {
-            query = this.AnPlusB();
-        }
-
-        this.scanner.skipSC();
-
-        if (allowOfClause && this.scanner.lookupValue(0, 'of')) {
-            this.scanner.next();
-
-            selector = this.SelectorList();
-
-            if (this.needPositions) {
-                end = selector.children.last().loc.end.offset;
-            }
-        } else {
-            if (this.needPositions) {
-                end = query.loc.end.offset;
-            }
-        }
-
-        return {
-            type: 'Nth',
-            loc: this.getLocation(start, end),
-            nth: query,
-            selector: selector
-        };
-    },
-    generate: function(processChunk, node) {
-        this.generate(processChunk, node.nth);
-        if (node.selector !== null) {
-            processChunk(' of ');
-            this.generate(processChunk, node.selector);
-        }
-    }
-};
-
-var NUMBER$8 = tokenizer$1.TYPE.Number;
-
-var _Number = {
-    name: 'Number',
-    structure: {
-        value: String
-    },
-    parse: function() {
-        return {
-            type: 'Number',
-            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
-            value: this.scanner.consume(NUMBER$8)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.value);
-    }
-};
-
-// '/' | '*' | ',' | ':' | '+' | '-'
-var Operator = {
-    name: 'Operator',
-    structure: {
-        value: String
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-
-        this.scanner.next();
-
-        return {
-            type: 'Operator',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            value: this.scanner.substrToCursor(start)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.value);
-    }
-};
-
-var TYPE$27 = tokenizer$1.TYPE;
-var LEFTPARENTHESIS$6 = TYPE$27.LeftParenthesis;
-var RIGHTPARENTHESIS$4 = TYPE$27.RightParenthesis;
-
-var Parentheses = {
-    name: 'Parentheses',
-    structure: {
-        children: [[]]
-    },
-    parse: function(readSequence, recognizer) {
-        var start = this.scanner.tokenStart;
-        var children = null;
-
-        this.scanner.eat(LEFTPARENTHESIS$6);
-        children = readSequence.call(this, recognizer);
-        this.scanner.eat(RIGHTPARENTHESIS$4);
-
-        return {
-            type: 'Parentheses',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('(');
-        this.each(processChunk, node);
-        processChunk(')');
-    }
-};
-
-var TYPE$28 = tokenizer$1.TYPE;
-
-var NUMBER$9 = TYPE$28.Number;
-var PERCENTSIGN$1 = TYPE$28.PercentSign;
-
-var Percentage = {
-    name: 'Percentage',
-    structure: {
-        value: String
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var number = this.scanner.consume(NUMBER$9);
-
-        this.scanner.eat(PERCENTSIGN$1);
-
-        return {
-            type: 'Percentage',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            value: number
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.value);
-        processChunk('%');
-    }
-};
-
-var TYPE$29 = tokenizer$1.TYPE;
-
-var IDENTIFIER$16 = TYPE$29.Identifier;
-var FUNCTION$4 = TYPE$29.Function;
-var COLON$5 = TYPE$29.Colon;
-var RIGHTPARENTHESIS$5 = TYPE$29.RightParenthesis;
-
-// : ident [ '(' .. ')' ]?
-var PseudoClassSelector = {
-    name: 'PseudoClassSelector',
-    structure: {
-        name: String,
-        children: [['Raw'], null]
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var children = null;
-        var name;
-        var nameLowerCase;
-
-        this.scanner.eat(COLON$5);
-
-        if (this.scanner.tokenType === FUNCTION$4) {
-            name = this.scanner.consumeFunctionName();
-            nameLowerCase = name.toLowerCase();
-
-            if (this.pseudo.hasOwnProperty(nameLowerCase)) {
-                this.scanner.skipSC();
-                children = this.pseudo[nameLowerCase].call(this);
-                this.scanner.skipSC();
-            } else {
-                children = new list().appendData(
-                    this.Raw(this.scanner.currentToken, 0, 0, false, false)
-                );
-            }
-
-            this.scanner.eat(RIGHTPARENTHESIS$5);
-        } else {
-            name = this.scanner.consume(IDENTIFIER$16);
-        }
-
-        return {
-            type: 'PseudoClassSelector',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            name: name,
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(':');
-        processChunk(node.name);
-
-        if (node.children !== null) {
-            processChunk('(');
-            this.each(processChunk, node);
-            processChunk(')');
-        }
-    },
-    walkContext: 'function'
-};
-
-var TYPE$30 = tokenizer$1.TYPE;
-
-var IDENTIFIER$17 = TYPE$30.Identifier;
-var FUNCTION$5 = TYPE$30.Function;
-var COLON$6 = TYPE$30.Colon;
-var RIGHTPARENTHESIS$6 = TYPE$30.RightParenthesis;
-
-// :: ident [ '(' .. ')' ]?
-var PseudoElementSelector = {
-    name: 'PseudoElementSelector',
-    structure: {
-        name: String,
-        children: [['Raw'], null]
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var children = null;
-        var name;
-        var nameLowerCase;
-
-        this.scanner.eat(COLON$6);
-        this.scanner.eat(COLON$6);
-
-        if (this.scanner.tokenType === FUNCTION$5) {
-            name = this.scanner.consumeFunctionName();
-            nameLowerCase = name.toLowerCase();
-
-            if (this.pseudo.hasOwnProperty(nameLowerCase)) {
-                this.scanner.skipSC();
-                children = this.pseudo[nameLowerCase].call(this);
-                this.scanner.skipSC();
-            } else {
-                children = new list().appendData(
-                    this.Raw(this.scanner.currentToken, 0, 0, false, false)
-                );
-            }
-
-            this.scanner.eat(RIGHTPARENTHESIS$6);
-        } else {
-            name = this.scanner.consume(IDENTIFIER$17);
-        }
-
-        return {
-            type: 'PseudoElementSelector',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            name: name,
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('::');
-        processChunk(node.name);
-
-        if (node.children !== null) {
-            processChunk('(');
-            this.each(processChunk, node);
-            processChunk(')');
-        }
-    },
-    walkContext: 'function'
-};
-
-var isNumber$3 = tokenizer$1.isNumber;
-var TYPE$31 = tokenizer$1.TYPE;
-var NUMBER$10 = TYPE$31.Number;
-var SOLIDUS$6 = TYPE$31.Solidus;
-var FULLSTOP$4 = TYPE$31.FullStop;
-
-// Terms of <ratio> should to be a positive number (not zero or negative)
-// (see https://drafts.csswg.org/mediaqueries-3/#values)
-// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term
-// and this is using by various sites. Therefore we relax checking on parse
-// to test a term is unsigned number without exponent part.
-// Additional checks may to be applied on lexer validation.
-function consumeNumber(scanner) {
-    var value = scanner.consumeNonWS(NUMBER$10);
-
-    for (var i = 0; i < value.length; i++) {
-        var code = value.charCodeAt(i);
-        if (!isNumber$3(code) && code !== FULLSTOP$4) {
-            scanner.error('Unsigned number is expected', scanner.tokenStart - value.length + i);
-        }
-    }
-
-    if (Number(value) === 0) {
-        scanner.error('Zero number is not allowed', scanner.tokenStart - value.length);
-    }
-
-    return value;
-}
-
-// <positive-integer> S* '/' S* <positive-integer>
-var Ratio = {
-    name: 'Ratio',
-    structure: {
-        left: String,
-        right: String
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var left = consumeNumber(this.scanner);
-        var right;
-
-        this.scanner.eatNonWS(SOLIDUS$6);
-        right = consumeNumber(this.scanner);
-
-        return {
-            type: 'Ratio',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            left: left,
-            right: right
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.left);
-        processChunk('/');
-        processChunk(node.right);
-    }
-};
-
-var Raw = {
-    name: 'Raw',
-    structure: {
-        value: String
-    },
-    parse: function(startToken, endTokenType1, endTokenType2, includeTokenType2, excludeWhiteSpace) {
-        var startOffset = this.scanner.getTokenStart(startToken);
-        var endOffset;
-
-        this.scanner.skip(
-            this.scanner.getRawLength(
-                startToken,
-                endTokenType1,
-                endTokenType2,
-                includeTokenType2
-            )
-        );
-
-        if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {
-            endOffset = this.scanner.getOffsetExcludeWS();
-        } else {
-            endOffset = this.scanner.tokenStart;
-        }
-
-        return {
-            type: 'Raw',
-            loc: this.getLocation(startOffset, endOffset),
-            value: this.scanner.source.substring(startOffset, endOffset)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.value);
-    }
-};
-
-var TYPE$32 = tokenizer$1.TYPE;
-
-var LEFTCURLYBRACKET$5 = TYPE$32.LeftCurlyBracket;
-
-function consumeRaw$4(startToken) {
-    return this.Raw(startToken, LEFTCURLYBRACKET$5, 0, false, true);
-}
-
-var Rule = {
-    name: 'Rule',
-    structure: {
-        selector: ['SelectorList', 'Raw'],
-        block: ['Block']
-    },
-    parse: function() {
-        var startToken = this.scanner.currentToken;
-        var startOffset = this.scanner.tokenStart;
-        var selector = this.parseSelector
-            ? this.tolerantParse(this.SelectorList, consumeRaw$4)
-            : consumeRaw$4.call(this, startToken);
-        var block = this.Block(this.Declaration);
-
-        return {
-            type: 'Rule',
-            loc: this.getLocation(startOffset, this.scanner.tokenStart),
-            selector: selector,
-            block: block
-        };
-    },
-    generate: function(processChunk, node) {
-        this.generate(processChunk, node.selector);
-        this.generate(processChunk, node.block);
-    },
-    walkContext: 'rule'
-};
-
-var Selector = {
-    name: 'Selector',
-    structure: {
-        children: [[
-            'TypeSelector',
-            'IdSelector',
-            'ClassSelector',
-            'AttributeSelector',
-            'PseudoClassSelector',
-            'PseudoElementSelector',
-            'Combinator',
-            'WhiteSpace'
-        ]]
-    },
-    parse: function() {
-        var children = this.readSequence(this.scope.Selector);
-
-        // nothing were consumed
-        if (children.isEmpty()) {
-            this.scanner.error('Selector is expected');
-        }
-
-        return {
-            type: 'Selector',
-            loc: this.getLocationFromList(children),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        this.each(processChunk, node);
-    }
-};
-
-var TYPE$33 = tokenizer$1.TYPE;
-
-var COMMA$3 = TYPE$33.Comma;
-var LEFTCURLYBRACKET$6 = TYPE$33.LeftCurlyBracket;
-
-var SelectorList = {
-    name: 'SelectorList',
-    structure: {
-        children: [['Selector', 'Raw']]
-    },
-    parse: function() {
-        var children = new list();
-
-        while (!this.scanner.eof) {
-            children.appendData(this.parseSelector
-                ? this.Selector()
-                : this.Raw(this.scanner.currentToken, COMMA$3, LEFTCURLYBRACKET$6, false, false)
-            );
-
-            if (this.scanner.tokenType === COMMA$3) {
-                this.scanner.next();
-                continue;
-            }
-
-            break;
-        }
-
-        return {
-            type: 'SelectorList',
-            loc: this.getLocationFromList(children),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        this.eachComma(processChunk, node);
-    },
-    walkContext: 'selector'
-};
-
-var STRING$5 = tokenizer$1.TYPE.String;
-
-var _String = {
-    name: 'String',
-    structure: {
-        value: String
-    },
-    parse: function() {
-        return {
-            type: 'String',
-            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
-            value: this.scanner.consume(STRING$5)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.value);
-    }
-};
-
-var TYPE$34 = tokenizer$1.TYPE;
-
-var WHITESPACE$7 = TYPE$34.WhiteSpace;
-var COMMENT$7 = TYPE$34.Comment;
-var EXCLAMATIONMARK$3 = TYPE$34.ExclamationMark;
-var ATRULE$4 = TYPE$34.Atrule;
-var CDO$3 = TYPE$34.CDO;
-var CDC$3 = TYPE$34.CDC;
-
-function consumeRaw$5(startToken) {
-    return this.Raw(startToken, 0, 0, false, false);
-}
-
-var StyleSheet = {
-    name: 'StyleSheet',
-    structure: {
-        children: [['Comment', 'Atrule', 'Rule', 'Raw']]
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var children = new list();
-        var child;
-
-        scan:
-        while (!this.scanner.eof) {
-            switch (this.scanner.tokenType) {
-                case WHITESPACE$7:
-                    this.scanner.next();
-                    continue;
-
-                case COMMENT$7:
-                    // ignore comments except exclamation comments (i.e. /*! .. */) on top level
-                    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK$3) {
-                        this.scanner.next();
-                        continue;
-                    }
-
-                    child = this.Comment();
-                    break;
-
-                case CDO$3: // <!--
-                    child = this.CDO();
-                    break;
-
-                case CDC$3: // -->
-                    child = this.CDC();
-                    break;
-
-                // CSS Syntax Module Level 3
-                // §2.2 Error handling
-                // At the "top level" of a stylesheet, an <at-keyword-token> starts an at-rule.
-                case ATRULE$4:
-                    child = this.Atrule();
-                    break;
-
-                // Anything else starts a qualified rule ...
-                default:
-                    child = this.tolerantParse(this.Rule, consumeRaw$5);
-            }
-
-            children.appendData(child);
-        }
-
-        return {
-            type: 'StyleSheet',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        this.each(processChunk, node);
-    },
-    walkContext: 'stylesheet'
-};
-
-var TYPE$35 = tokenizer$1.TYPE;
-
-var IDENTIFIER$18 = TYPE$35.Identifier;
-var ASTERISK$5 = TYPE$35.Asterisk;
-var VERTICALLINE$2 = TYPE$35.VerticalLine;
-
-function eatIdentifierOrAsterisk() {
-    if (this.scanner.tokenType !== IDENTIFIER$18 &&
-        this.scanner.tokenType !== ASTERISK$5) {
-        this.scanner.error('Identifier or asterisk is expected');
-    }
-
-    this.scanner.next();
-}
-
-// ident
-// ident|ident
-// ident|*
-// *
-// *|ident
-// *|*
-// |ident
-// |*
-var TypeSelector = {
-    name: 'TypeSelector',
-    structure: {
-        name: String
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-
-        if (this.scanner.tokenType === VERTICALLINE$2) {
-            this.scanner.next();
-            eatIdentifierOrAsterisk.call(this);
-        } else {
-            eatIdentifierOrAsterisk.call(this);
-
-            if (this.scanner.tokenType === VERTICALLINE$2) {
-                this.scanner.next();
-                eatIdentifierOrAsterisk.call(this);
-            }
-        }
-
-        return {
-            type: 'TypeSelector',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            name: this.scanner.substrToCursor(start)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.name);
-    }
-};
-
-var isHex$2 = tokenizer$1.isHex;
-var TYPE$36 = tokenizer$1.TYPE;
-
-var IDENTIFIER$19 = TYPE$36.Identifier;
-var NUMBER$11 = TYPE$36.Number;
-var PLUSSIGN$7 = TYPE$36.PlusSign;
-var HYPHENMINUS$7 = TYPE$36.HyphenMinus;
-var FULLSTOP$5 = TYPE$36.FullStop;
-var QUESTIONMARK = TYPE$36.QuestionMark;
-
-function scanUnicodeNumber(scanner) {
-    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {
-        var code = scanner.source.charCodeAt(pos);
-
-        // break on fullstop or hyperminus/plussign after exponent
-        if (code === FULLSTOP$5 || code === PLUSSIGN$7) {
-            // break token, exclude symbol
-            scanner.tokenStart = pos;
-            return false;
-        }
-    }
-
-    return true;
-}
-
-// https://drafts.csswg.org/css-syntax-3/#urange
-function scanUnicodeRange(scanner) {
-    var hexStart = scanner.tokenStart + 1; // skip +
-    var hexLength = 0;
-
-    scan: {
-        if (scanner.tokenType === NUMBER$11) {
-            if (scanner.source.charCodeAt(scanner.tokenStart) !== FULLSTOP$5 && scanUnicodeNumber(scanner)) {
-                scanner.next();
-            } else if (scanner.source.charCodeAt(scanner.tokenStart) !== HYPHENMINUS$7) {
-                break scan;
-            }
-        } else {
-            scanner.next(); // PLUSSIGN
-        }
-
-        if (scanner.tokenType === HYPHENMINUS$7) {
-            scanner.next();
-        }
-
-        if (scanner.tokenType === NUMBER$11) {
-            scanner.next();
-        }
-
-        if (scanner.tokenType === IDENTIFIER$19) {
-            scanner.next();
-        }
-
-        if (scanner.tokenStart === hexStart) {
-            scanner.error('Unexpected input', hexStart);
-        }
-    }
-
-    // validate for U+x{1,6} or U+x{1,6}-x{1,6}
-    // where x is [0-9a-fA-F]
-    for (var i = hexStart, wasHyphenMinus = false; i < scanner.tokenStart; i++) {
-        var code = scanner.source.charCodeAt(i);
-
-        if (isHex$2(code) === false && (code !== HYPHENMINUS$7 || wasHyphenMinus)) {
-            scanner.error('Unexpected input', i);
-        }
-
-        if (code === HYPHENMINUS$7) {
-            // hex sequence shouldn't be an empty
-            if (hexLength === 0) {
-                scanner.error('Unexpected input', i);
-            }
-
-            wasHyphenMinus = true;
-            hexLength = 0;
-        } else {
-            hexLength++;
-
-            // too long hex sequence
-            if (hexLength > 6) {
-                scanner.error('Too long hex sequence', i);
-            }
-        }
-
-    }
-
-    // check we have a non-zero sequence
-    if (hexLength === 0) {
-        scanner.error('Unexpected input', i - 1);
-    }
-
-    // U+abc???
-    if (!wasHyphenMinus) {
-        // consume as many U+003F QUESTION MARK (?) code points as possible
-        for (; hexLength < 6 && !scanner.eof; scanner.next()) {
-            if (scanner.tokenType !== QUESTIONMARK) {
-                break;
-            }
-
-            hexLength++;
-        }
-    }
-}
-
-var UnicodeRange = {
-    name: 'UnicodeRange',
-    structure: {
-        value: String
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-
-        this.scanner.next(); // U or u
-        scanUnicodeRange(this.scanner);
-
-        return {
-            type: 'UnicodeRange',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            value: this.scanner.substrToCursor(start)
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.value);
-    }
-};
-
-var TYPE$37 = tokenizer$1.TYPE;
-
-var STRING$6 = TYPE$37.String;
-var URL$4 = TYPE$37.Url;
-var RAW$2 = TYPE$37.Raw;
-var RIGHTPARENTHESIS$7 = TYPE$37.RightParenthesis;
-
-// url '(' S* (string | raw) S* ')'
-var Url = {
-    name: 'Url',
-    structure: {
-        value: ['String', 'Raw']
-    },
-    parse: function() {
-        var start = this.scanner.tokenStart;
-        var value;
-
-        this.scanner.eat(URL$4);
-        this.scanner.skipSC();
-
-        switch (this.scanner.tokenType) {
-            case STRING$6:
-                value = this.String();
-                break;
-
-            case RAW$2:
-                value = this.Raw(this.scanner.currentToken, 0, RAW$2, true, false);
-                break;
-
-            default:
-                this.scanner.error('String or Raw is expected');
-        }
-
-        this.scanner.skipSC();
-        this.scanner.eat(RIGHTPARENTHESIS$7);
-
-        return {
-            type: 'Url',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            value: value
-        };
-    },
-    generate: function(processChunk, node) {
-        processChunk('url');
-        processChunk('(');
-        this.generate(processChunk, node.value);
-        processChunk(')');
-    }
-};
-
-var endsWith$1 = tokenizer$1.endsWith;
-var TYPE$38 = tokenizer$1.TYPE;
-
-var WHITESPACE$8 = TYPE$38.WhiteSpace;
-var COMMENT$8 = TYPE$38.Comment;
-var FUNCTION$6 = TYPE$38.Function;
-var COLON$7 = TYPE$38.Colon;
-var SEMICOLON$6 = TYPE$38.Semicolon;
-var EXCLAMATIONMARK$4 = TYPE$38.ExclamationMark;
-
-// 'progid:' ws* 'DXImageTransform.Microsoft.' ident ws* '(' .* ')'
-function checkProgid(scanner) {
-    var offset = 0;
-
-    for (var type; type = scanner.lookupType(offset); offset++) {
-        if (type !== WHITESPACE$8 && type !== COMMENT$8) {
-            break;
-        }
-    }
-
-    if (scanner.lookupValue(offset, 'alpha(') ||
-        scanner.lookupValue(offset, 'chroma(') ||
-        scanner.lookupValue(offset, 'dropshadow(')) {
-        if (scanner.lookupType(offset) !== FUNCTION$6) {
-            return false;
-        }
-    } else {
-        if (scanner.lookupValue(offset, 'progid') === false ||
-            scanner.lookupType(offset + 1) !== COLON$7) {
-            return false;
-        }
-    }
-
-    return true;
-}
-
-var Value = {
-    name: 'Value',
-    structure: {
-        children: [[]]
-    },
-    parse: function(property) {
-        // special parser for filter property since it can contains non-standart syntax for old IE
-        if (property !== null && endsWith$1(property, 'filter') && checkProgid(this.scanner)) {
-            this.scanner.skipSC();
-            return this.Raw(this.scanner.currentToken, EXCLAMATIONMARK$4, SEMICOLON$6, false, false);
-        }
-
-        var start = this.scanner.tokenStart;
-        var children = this.readSequence(this.scope.Value);
-
-        return {
-            type: 'Value',
-            loc: this.getLocation(start, this.scanner.tokenStart),
-            children: children
-        };
-    },
-    generate: function(processChunk, node) {
-        this.each(processChunk, node);
-    }
-};
-
-var WHITESPACE$9 = tokenizer$1.TYPE.WhiteSpace;
-var SPACE$2 = Object.freeze({
-    type: 'WhiteSpace',
-    loc: null,
-    value: ' '
-});
-
-var WhiteSpace = {
-    name: 'WhiteSpace',
-    structure: {
-        value: String
-    },
-    parse: function() {
-        this.scanner.eat(WHITESPACE$9);
-        return SPACE$2;
-
-        // return {
-        //     type: 'WhiteSpace',
-        //     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
-        //     value: this.scanner.consume(WHITESPACE)
-        // };
-    },
-    generate: function(processChunk, node) {
-        processChunk(node.value);
-    }
-};
-
-var node = {
-    AnPlusB: AnPlusB,
-    Atrule: Atrule,
-    AtruleExpression: AtruleExpression,
-    AttributeSelector: AttributeSelector,
-    Block: Block,
-    Brackets: Brackets,
-    CDC: CDC_1,
-    CDO: CDO_1,
-    ClassSelector: ClassSelector,
-    Combinator: Combinator,
-    Comment: Comment,
-    Declaration: Declaration,
-    DeclarationList: DeclarationList,
-    Dimension: Dimension,
-    Function: _Function,
-    HexColor: HexColor,
-    Identifier: Identifier,
-    IdSelector: IdSelector,
-    MediaFeature: MediaFeature,
-    MediaQuery: MediaQuery,
-    MediaQueryList: MediaQueryList,
-    Nth: Nth,
-    Number: _Number,
-    Operator: Operator,
-    Parentheses: Parentheses,
-    Percentage: Percentage,
-    PseudoClassSelector: PseudoClassSelector,
-    PseudoElementSelector: PseudoElementSelector,
-    Ratio: Ratio,
-    Raw: Raw,
-    Rule: Rule,
-    Selector: Selector,
-    SelectorList: SelectorList,
-    String: _String,
-    StyleSheet: StyleSheet,
-    TypeSelector: TypeSelector,
-    UnicodeRange: UnicodeRange,
-    Url: Url,
-    Value: Value,
-    WhiteSpace: WhiteSpace
-};
-
-var parser = {
-    parseContext: {
-        default: 'StyleSheet',
-        stylesheet: 'StyleSheet',
-        atrule: 'Atrule',
-        atruleExpression: function(options) {
-            return this.AtruleExpression(options.atrule ? String(options.atrule) : null);
-        },
-        mediaQueryList: 'MediaQueryList',
-        mediaQuery: 'MediaQuery',
-        rule: 'Rule',
-        selectorList: 'SelectorList',
-        selector: 'Selector',
-        block: function() {
-            return this.Block(this.Declaration);
-        },
-        declarationList: 'DeclarationList',
-        declaration: 'Declaration',
-        value: function(options) {
-            return this.Value(options.property ? String(options.property) : null);
-        }
-    },
-    scope: scope,
-    atrule: atrule,
-    pseudo: pseudo,
-    node: node
-};
-
-var parser$1 = create(parser);
-
-function walk ( ast, ref) {
-	var enter = ref.enter;
-	var leave = ref.leave;
-
-	visit( ast, null, enter, leave );
-}
-
-var shouldSkip = false;
-var context = { skip: function () { return shouldSkip = true; } };
-
-var childKeys = {};
-
-var toString$1 = Object.prototype.toString;
-
-function isArray$1 ( thing ) {
-	return toString$1.call( thing ) === '[object Array]';
-}
-
-function visit ( node, parent, enter, leave, prop, index ) {
-	if ( !node ) { return; }
-
-	if ( enter ) {
-		var _shouldSkip = shouldSkip;
-		shouldSkip = false;
-		enter.call( context, node, parent, prop, index );
-		var skipped = shouldSkip;
-		shouldSkip = _shouldSkip;
-
-		if ( skipped ) { return; }
-	}
-
-	var keys = childKeys[ node.type ] || (
-		childKeys[ node.type ] = Object.keys( node ).filter( function (key) { return typeof node[ key ] === 'object'; } )
-	);
-
-	for ( var i = 0; i < keys.length; i += 1 ) {
-		var key = keys[i];
-		var value = node[ key ];
-
-		if ( isArray$1( value ) ) {
-			for ( var j = 0; j < value.length; j += 1 ) {
-				visit( value[j], node, enter, leave, key, j );
-			}
-		}
-
-		else if ( value && value.type ) {
-			visit( value, node, enter, leave, key, null );
-		}
-	}
-
-	if ( leave ) {
-		leave( node, parent, prop, index );
-	}
-}
-
-function readStyle(parser, start, attributes) {
-    const contentStart = parser.index;
-    const styles = parser.readUntil(/<\/style>/);
-    const contentEnd = parser.index;
-    let ast;
-    try {
-        ast = parser$1(styles, {
-            positions: true,
-            offset: contentStart,
-        });
-    }
-    catch (err) {
-        if (err.name === 'CssSyntaxError') {
-            parser.error(err.message, err.offset);
-        }
-        else {
-            throw err;
-        }
-    }
-    ast = JSON.parse(JSON.stringify(ast));
-    // tidy up AST
-    walk(ast, {
-        enter: (node) => {
-            // replace `ref:a` nodes
-            if (node.type === 'Selector') {
-                for (let i = 0; i < node.children.length; i += 1) {
-                    const a = node.children[i];
-                    const b = node.children[i + 1];
-                    if (isRefSelector(a, b)) {
-                        node.children.splice(i, 2, {
-                            type: 'RefSelector',
-                            start: a.loc.start.offset,
-                            end: b.loc.end.offset,
-                            name: b.name
-                        });
-                    }
-                }
-            }
-            if (node.loc) {
-                node.start = node.loc.start.offset;
-                node.end = node.loc.end.offset;
-                delete node.loc;
-            }
-        }
-    });
-    parser.eat('</style>', true);
-    const end = parser.index;
-    return {
-        start,
-        end,
-        attributes,
-        children: ast.children,
-        content: {
-            start: contentStart,
-            end: contentEnd,
-            styles,
-        },
-    };
-}
-function isRefSelector(a, b) {
-    if (!b)
-        return false;
-    return (a.type === 'TypeSelector' &&
-        a.name === 'ref' &&
-        b.type === 'PseudoClassSelector');
-}
-
-const DIRECTIVES = {
-    Ref: {
-        names: ['ref'],
-        attribute(start, end, type, name) {
-            return { start, end, type, name };
-        },
-        allowedExpressionTypes: [],
-        error: 'ref directives cannot have a value'
-    },
-    EventHandler: {
-        names: ['on'],
-        attribute(start, end, type, name, expression) {
-            return { start, end, type, name, expression };
-        },
-        allowedExpressionTypes: ['CallExpression'],
-        error: 'Expected a method call'
-    },
-    Binding: {
-        names: ['bind'],
-        attribute(start, end, type, name, expression) {
-            return {
-                start, end, type, name,
-                value: expression || {
-                    type: 'Identifier',
-                    start: start + 5,
-                    end,
-                    name,
-                }
-            };
-        },
-        allowedExpressionTypes: ['Identifier', 'MemberExpression'],
-        error: 'Can only bind to an identifier (e.g. `foo`) or a member expression (e.g. `foo.bar` or `foo[baz]`)'
-    },
-    Transition: {
-        names: ['in', 'out', 'transition'],
-        attribute(start, end, type, name, expression, directiveName) {
-            return {
-                start, end, type, name, expression,
-                intro: directiveName === 'in' || directiveName === 'transition',
-                outro: directiveName === 'out' || directiveName === 'transition',
-            };
-        },
-        allowedExpressionTypes: ['ObjectExpression'],
-        error: 'Transition argument must be an object literal, e.g. `{ duration: 400 }`'
-    },
-    Action: {
-        names: ['use'],
-        attribute(start, end, type, name, expression) {
-            return { start, end, type, name, expression };
-        },
-        allowedExpressionTypes: ['Identifier', 'MemberExpression', 'ObjectExpression', 'Literal', 'CallExpression'],
-        error: 'Data passed to actions must be an identifier (e.g. `foo`), a member expression ' +
-            '(e.g. `foo.bar` or `foo[baz]`), a method call (e.g. `foo()`), or a literal (e.g. `true` or `\'a string\'`'
-    },
-};
-const lookupByName = {};
-Object.keys(DIRECTIVES).forEach(name => {
-    const directive = DIRECTIVES[name];
-    directive.names.forEach(type => lookupByName[type] = name);
-});
-function readExpression$1(parser, start, quoteMark) {
-    let str = '';
-    let escaped = false;
-    for (let i = start; i < parser.template.length; i += 1) {
-        const char = parser.template[i];
-        if (quoteMark) {
-            if (char === quoteMark) {
-                if (escaped) {
-                    str += quoteMark;
-                }
-                else {
-                    break;
-                }
-            }
-            else if (escaped) {
-                str += '\\' + char;
-                escaped = false;
-            }
-            else if (char === '\\') {
-                escaped = true;
-            }
-            else {
-                str += char;
-            }
-        }
-        else if (/[\s\/>]/.test(char)) {
-            break;
-        }
-        else {
-            str += char;
-        }
-    }
-    const expression = parseExpressionAt(repeat(' ', start) + str, start, {
-        ecmaVersion: 9,
-    });
-    parser.index = expression.end;
-    parser.allowWhitespace();
-    if (quoteMark)
-        parser.eat(quoteMark, true);
-    return expression;
-}
-function readDirective(parser, start, attrName) {
-    const [directiveName, name] = attrName.split(':');
-    if (name === undefined)
-        return; // No colon in the name
-    if (directiveName === '') {
-        // not a directive — :foo is short for foo={{foo}}
-        return {
-            start: start,
-            end: start + name.length + 1,
-            type: 'Attribute',
-            name,
-            value: getShorthandValue(start + 1, name)
-        };
-    }
-    const type = lookupByName[directiveName];
-    if (!type)
-        return; // not a registered directive
-    const directive = DIRECTIVES[type];
-    let expression = null;
-    if (parser.eat('=')) {
-        const quoteMark = parser.eat(`'`) ? `'` : parser.eat(`"`) ? `"` : null;
-        const expressionStart = parser.index;
-        if (parser.eat('{{')) {
-            let message = 'directive values should not be wrapped';
-            const expressionEnd = parser.template.indexOf('}}', expressionStart);
-            if (expressionEnd !== -1) {
-                const value = parser.template.slice(parser.index, expressionEnd);
-                message += ` — use '${value}', not '{{${value}}}'`;
-            }
-            parser.error(message, expressionStart);
-        }
-        expression = readExpression$1(parser, expressionStart, quoteMark);
-        if (directive.allowedExpressionTypes.indexOf(expression.type) === -1) {
-            parser.error(directive.error, expressionStart);
-        }
-    }
-    return directive.attribute(start, parser.index, type, name, expression, directiveName);
-}
-function getShorthandValue(start, name) {
-    const end = start + name.length;
-    return [
-        {
-            type: 'AttributeShorthand',
-            start,
-            end,
-            expression: {
-                type: 'Identifier',
-                start,
-                end,
-                name,
-            },
-        },
-    ];
-}
-
-// https://dev.w3.org/html5/html-author/charref
-var htmlEntities = {
-    CounterClockwiseContourIntegral: 8755,
-    ClockwiseContourIntegral: 8754,
-    DoubleLongLeftRightArrow: 10234,
-    DiacriticalDoubleAcute: 733,
-    NotSquareSupersetEqual: 8931,
-    CloseCurlyDoubleQuote: 8221,
-    DoubleContourIntegral: 8751,
-    FilledVerySmallSquare: 9642,
-    NegativeVeryThinSpace: 8203,
-    NotPrecedesSlantEqual: 8928,
-    NotRightTriangleEqual: 8941,
-    NotSucceedsSlantEqual: 8929,
-    CapitalDifferentialD: 8517,
-    DoubleLeftRightArrow: 8660,
-    DoubleLongRightArrow: 10233,
-    EmptyVerySmallSquare: 9643,
-    NestedGreaterGreater: 8811,
-    NotDoubleVerticalBar: 8742,
-    NotLeftTriangleEqual: 8940,
-    NotSquareSubsetEqual: 8930,
-    OpenCurlyDoubleQuote: 8220,
-    ReverseUpEquilibrium: 10607,
-    DoubleLongLeftArrow: 10232,
-    DownLeftRightVector: 10576,
-    LeftArrowRightArrow: 8646,
-    NegativeMediumSpace: 8203,
-    RightArrowLeftArrow: 8644,
-    SquareSupersetEqual: 8850,
-    leftrightsquigarrow: 8621,
-    DownRightTeeVector: 10591,
-    DownRightVectorBar: 10583,
-    LongLeftRightArrow: 10231,
-    Longleftrightarrow: 10234,
-    NegativeThickSpace: 8203,
-    PrecedesSlantEqual: 8828,
-    ReverseEquilibrium: 8651,
-    RightDoubleBracket: 10215,
-    RightDownTeeVector: 10589,
-    RightDownVectorBar: 10581,
-    RightTriangleEqual: 8885,
-    SquareIntersection: 8851,
-    SucceedsSlantEqual: 8829,
-    blacktriangleright: 9656,
-    longleftrightarrow: 10231,
-    DoubleUpDownArrow: 8661,
-    DoubleVerticalBar: 8741,
-    DownLeftTeeVector: 10590,
-    DownLeftVectorBar: 10582,
-    FilledSmallSquare: 9724,
-    GreaterSlantEqual: 10878,
-    LeftDoubleBracket: 10214,
-    LeftDownTeeVector: 10593,
-    LeftDownVectorBar: 10585,
-    LeftTriangleEqual: 8884,
-    NegativeThinSpace: 8203,
-    NotReverseElement: 8716,
-    NotTildeFullEqual: 8775,
-    RightAngleBracket: 10217,
-    RightUpDownVector: 10575,
-    SquareSubsetEqual: 8849,
-    VerticalSeparator: 10072,
-    blacktriangledown: 9662,
-    blacktriangleleft: 9666,
-    leftrightharpoons: 8651,
-    rightleftharpoons: 8652,
-    twoheadrightarrow: 8608,
-    DiacriticalAcute: 180,
-    DiacriticalGrave: 96,
-    DiacriticalTilde: 732,
-    DoubleRightArrow: 8658,
-    DownArrowUpArrow: 8693,
-    EmptySmallSquare: 9723,
-    GreaterEqualLess: 8923,
-    GreaterFullEqual: 8807,
-    LeftAngleBracket: 10216,
-    LeftUpDownVector: 10577,
-    LessEqualGreater: 8922,
-    NonBreakingSpace: 160,
-    NotRightTriangle: 8939,
-    NotSupersetEqual: 8841,
-    RightTriangleBar: 10704,
-    RightUpTeeVector: 10588,
-    RightUpVectorBar: 10580,
-    UnderParenthesis: 9181,
-    UpArrowDownArrow: 8645,
-    circlearrowright: 8635,
-    downharpoonright: 8642,
-    ntrianglerighteq: 8941,
-    rightharpoondown: 8641,
-    rightrightarrows: 8649,
-    twoheadleftarrow: 8606,
-    vartriangleright: 8883,
-    CloseCurlyQuote: 8217,
-    ContourIntegral: 8750,
-    DoubleDownArrow: 8659,
-    DoubleLeftArrow: 8656,
-    DownRightVector: 8641,
-    LeftRightVector: 10574,
-    LeftTriangleBar: 10703,
-    LeftUpTeeVector: 10592,
-    LeftUpVectorBar: 10584,
-    LowerRightArrow: 8600,
-    NotGreaterEqual: 8817,
-    NotGreaterTilde: 8821,
-    NotLeftTriangle: 8938,
-    OverParenthesis: 9180,
-    RightDownVector: 8642,
-    ShortRightArrow: 8594,
-    UpperRightArrow: 8599,
-    bigtriangledown: 9661,
-    circlearrowleft: 8634,
-    curvearrowright: 8631,
-    downharpoonleft: 8643,
-    leftharpoondown: 8637,
-    leftrightarrows: 8646,
-    nLeftrightarrow: 8654,
-    nleftrightarrow: 8622,
-    ntrianglelefteq: 8940,
-    rightleftarrows: 8644,
-    rightsquigarrow: 8605,
-    rightthreetimes: 8908,
-    straightepsilon: 1013,
-    trianglerighteq: 8885,
-    vartriangleleft: 8882,
-    DiacriticalDot: 729,
-    DoubleRightTee: 8872,
-    DownLeftVector: 8637,
-    GreaterGreater: 10914,
-    HorizontalLine: 9472,
-    InvisibleComma: 8291,
-    InvisibleTimes: 8290,
-    LeftDownVector: 8643,
-    LeftRightArrow: 8596,
-    Leftrightarrow: 8660,
-    LessSlantEqual: 10877,
-    LongRightArrow: 10230,
-    Longrightarrow: 10233,
-    LowerLeftArrow: 8601,
-    NestedLessLess: 8810,
-    NotGreaterLess: 8825,
-    NotLessGreater: 8824,
-    NotSubsetEqual: 8840,
-    NotVerticalBar: 8740,
-    OpenCurlyQuote: 8216,
-    ReverseElement: 8715,
-    RightTeeVector: 10587,
-    RightVectorBar: 10579,
-    ShortDownArrow: 8595,
-    ShortLeftArrow: 8592,
-    SquareSuperset: 8848,
-    TildeFullEqual: 8773,
-    UpperLeftArrow: 8598,
-    ZeroWidthSpace: 8203,
-    curvearrowleft: 8630,
-    doublebarwedge: 8966,
-    downdownarrows: 8650,
-    hookrightarrow: 8618,
-    leftleftarrows: 8647,
-    leftrightarrow: 8596,
-    leftthreetimes: 8907,
-    longrightarrow: 10230,
-    looparrowright: 8620,
-    nshortparallel: 8742,
-    ntriangleright: 8939,
-    rightarrowtail: 8611,
-    rightharpoonup: 8640,
-    trianglelefteq: 8884,
-    upharpoonright: 8638,
-    ApplyFunction: 8289,
-    DifferentialD: 8518,
-    DoubleLeftTee: 10980,
-    DoubleUpArrow: 8657,
-    LeftTeeVector: 10586,
-    LeftVectorBar: 10578,
-    LessFullEqual: 8806,
-    LongLeftArrow: 10229,
-    Longleftarrow: 10232,
-    NotTildeEqual: 8772,
-    NotTildeTilde: 8777,
-    Poincareplane: 8460,
-    PrecedesEqual: 10927,
-    PrecedesTilde: 8830,
-    RightArrowBar: 8677,
-    RightTeeArrow: 8614,
-    RightTriangle: 8883,
-    RightUpVector: 8638,
-    SucceedsEqual: 10928,
-    SucceedsTilde: 8831,
-    SupersetEqual: 8839,
-    UpEquilibrium: 10606,
-    VerticalTilde: 8768,
-    VeryThinSpace: 8202,
-    bigtriangleup: 9651,
-    blacktriangle: 9652,
-    divideontimes: 8903,
-    fallingdotseq: 8786,
-    hookleftarrow: 8617,
-    leftarrowtail: 8610,
-    leftharpoonup: 8636,
-    longleftarrow: 10229,
-    looparrowleft: 8619,
-    measuredangle: 8737,
-    ntriangleleft: 8938,
-    shortparallel: 8741,
-    smallsetminus: 8726,
-    triangleright: 9657,
-    upharpoonleft: 8639,
-    DownArrowBar: 10515,
-    DownTeeArrow: 8615,
-    ExponentialE: 8519,
-    GreaterEqual: 8805,
-    GreaterTilde: 8819,
-    HilbertSpace: 8459,
-    HumpDownHump: 8782,
-    Intersection: 8898,
-    LeftArrowBar: 8676,
-    LeftTeeArrow: 8612,
-    LeftTriangle: 8882,
-    LeftUpVector: 8639,
-    NotCongruent: 8802,
-    NotLessEqual: 8816,
-    NotLessTilde: 8820,
-    Proportional: 8733,
-    RightCeiling: 8969,
-    RoundImplies: 10608,
-    ShortUpArrow: 8593,
-    SquareSubset: 8847,
-    UnderBracket: 9141,
-    VerticalLine: 124,
-    blacklozenge: 10731,
-    exponentiale: 8519,
-    risingdotseq: 8787,
-    triangledown: 9663,
-    triangleleft: 9667,
-    CircleMinus: 8854,
-    CircleTimes: 8855,
-    Equilibrium: 8652,
-    GreaterLess: 8823,
-    LeftCeiling: 8968,
-    LessGreater: 8822,
-    MediumSpace: 8287,
-    NotPrecedes: 8832,
-    NotSucceeds: 8833,
-    OverBracket: 9140,
-    RightVector: 8640,
-    Rrightarrow: 8667,
-    RuleDelayed: 10740,
-    SmallCircle: 8728,
-    SquareUnion: 8852,
-    SubsetEqual: 8838,
-    UpDownArrow: 8597,
-    Updownarrow: 8661,
-    VerticalBar: 8739,
-    backepsilon: 1014,
-    blacksquare: 9642,
-    circledcirc: 8858,
-    circleddash: 8861,
-    curlyeqprec: 8926,
-    curlyeqsucc: 8927,
-    diamondsuit: 9830,
-    eqslantless: 10901,
-    expectation: 8496,
-    nRightarrow: 8655,
-    nrightarrow: 8603,
-    preccurlyeq: 8828,
-    precnapprox: 10937,
-    quaternions: 8461,
-    straightphi: 981,
-    succcurlyeq: 8829,
-    succnapprox: 10938,
-    thickapprox: 8776,
-    updownarrow: 8597,
-    Bernoullis: 8492,
-    CirclePlus: 8853,
-    EqualTilde: 8770,
-    Fouriertrf: 8497,
-    ImaginaryI: 8520,
-    Laplacetrf: 8466,
-    LeftVector: 8636,
-    Lleftarrow: 8666,
-    NotElement: 8713,
-    NotGreater: 8815,
-    Proportion: 8759,
-    RightArrow: 8594,
-    RightFloor: 8971,
-    Rightarrow: 8658,
-    TildeEqual: 8771,
-    TildeTilde: 8776,
-    UnderBrace: 9183,
-    UpArrowBar: 10514,
-    UpTeeArrow: 8613,
-    circledast: 8859,
-    complement: 8705,
-    curlywedge: 8911,
-    eqslantgtr: 10902,
-    gtreqqless: 10892,
-    lessapprox: 10885,
-    lesseqqgtr: 10891,
-    lmoustache: 9136,
-    longmapsto: 10236,
-    mapstodown: 8615,
-    mapstoleft: 8612,
-    nLeftarrow: 8653,
-    nleftarrow: 8602,
-    precapprox: 10935,
-    rightarrow: 8594,
-    rmoustache: 9137,
-    sqsubseteq: 8849,
-    sqsupseteq: 8850,
-    subsetneqq: 10955,
-    succapprox: 10936,
-    supsetneqq: 10956,
-    upuparrows: 8648,
-    varepsilon: 949,
-    varnothing: 8709,
-    Backslash: 8726,
-    CenterDot: 183,
-    CircleDot: 8857,
-    Congruent: 8801,
-    Coproduct: 8720,
-    DoubleDot: 168,
-    DownArrow: 8595,
-    DownBreve: 785,
-    Downarrow: 8659,
-    HumpEqual: 8783,
-    LeftArrow: 8592,
-    LeftFloor: 8970,
-    Leftarrow: 8656,
-    LessTilde: 8818,
-    Mellintrf: 8499,
-    MinusPlus: 8723,
-    NotCupCap: 8813,
-    NotExists: 8708,
-    OverBrace: 9182,
-    PlusMinus: 177,
-    Therefore: 8756,
-    ThinSpace: 8201,
-    TripleDot: 8411,
-    UnionPlus: 8846,
-    backprime: 8245,
-    backsimeq: 8909,
-    bigotimes: 10754,
-    centerdot: 183,
-    checkmark: 10003,
-    complexes: 8450,
-    dotsquare: 8865,
-    downarrow: 8595,
-    gtrapprox: 10886,
-    gtreqless: 8923,
-    heartsuit: 9829,
-    leftarrow: 8592,
-    lesseqgtr: 8922,
-    nparallel: 8742,
-    nshortmid: 8740,
-    nsubseteq: 8840,
-    nsupseteq: 8841,
-    pitchfork: 8916,
-    rationals: 8474,
-    spadesuit: 9824,
-    subseteqq: 10949,
-    subsetneq: 8842,
-    supseteqq: 10950,
-    supsetneq: 8843,
-    therefore: 8756,
-    triangleq: 8796,
-    varpropto: 8733,
-    DDotrahd: 10513,
-    DotEqual: 8784,
-    Integral: 8747,
-    LessLess: 10913,
-    NotEqual: 8800,
-    NotTilde: 8769,
-    PartialD: 8706,
-    Precedes: 8826,
-    RightTee: 8866,
-    Succeeds: 8827,
-    SuchThat: 8715,
-    Superset: 8835,
-    Uarrocir: 10569,
-    UnderBar: 818,
-    andslope: 10840,
-    angmsdaa: 10664,
-    angmsdab: 10665,
-    angmsdac: 10666,
-    angmsdad: 10667,
-    angmsdae: 10668,
-    angmsdaf: 10669,
-    angmsdag: 10670,
-    angmsdah: 10671,
-    angrtvbd: 10653,
-    approxeq: 8778,
-    awconint: 8755,
-    backcong: 8780,
-    barwedge: 8965,
-    bbrktbrk: 9142,
-    bigoplus: 10753,
-    bigsqcup: 10758,
-    biguplus: 10756,
-    bigwedge: 8896,
-    boxminus: 8863,
-    boxtimes: 8864,
-    capbrcup: 10825,
-    circledR: 174,
-    circledS: 9416,
-    cirfnint: 10768,
-    clubsuit: 9827,
-    cupbrcap: 10824,
-    curlyvee: 8910,
-    cwconint: 8754,
-    doteqdot: 8785,
-    dotminus: 8760,
-    drbkarow: 10512,
-    dzigrarr: 10239,
-    elinters: 9191,
-    emptyset: 8709,
-    eqvparsl: 10725,
-    fpartint: 10765,
-    geqslant: 10878,
-    gesdotol: 10884,
-    gnapprox: 10890,
-    hksearow: 10533,
-    hkswarow: 10534,
-    imagline: 8464,
-    imagpart: 8465,
-    infintie: 10717,
-    integers: 8484,
-    intercal: 8890,
-    intlarhk: 10775,
-    laemptyv: 10676,
-    ldrushar: 10571,
-    leqslant: 10877,
-    lesdotor: 10883,
-    llcorner: 8990,
-    lnapprox: 10889,
-    lrcorner: 8991,
-    lurdshar: 10570,
-    mapstoup: 8613,
-    multimap: 8888,
-    naturals: 8469,
-    otimesas: 10806,
-    parallel: 8741,
-    plusacir: 10787,
-    pointint: 10773,
-    precneqq: 10933,
-    precnsim: 8936,
-    profalar: 9006,
-    profline: 8978,
-    profsurf: 8979,
-    raemptyv: 10675,
-    realpart: 8476,
-    rppolint: 10770,
-    rtriltri: 10702,
-    scpolint: 10771,
-    setminus: 8726,
-    shortmid: 8739,
-    smeparsl: 10724,
-    sqsubset: 8847,
-    sqsupset: 8848,
-    subseteq: 8838,
-    succneqq: 10934,
-    succnsim: 8937,
-    supseteq: 8839,
-    thetasym: 977,
-    thicksim: 8764,
-    timesbar: 10801,
-    triangle: 9653,
-    triminus: 10810,
-    trpezium: 9186,
-    ulcorner: 8988,
-    urcorner: 8989,
-    varkappa: 1008,
-    varsigma: 962,
-    vartheta: 977,
-    Because: 8757,
-    Cayleys: 8493,
-    Cconint: 8752,
-    Cedilla: 184,
-    Diamond: 8900,
-    DownTee: 8868,
-    Element: 8712,
-    Epsilon: 917,
-    Implies: 8658,
-    LeftTee: 8867,
-    NewLine: 10,
-    NoBreak: 8288,
-    NotLess: 8814,
-    Omicron: 927,
-    OverBar: 175,
-    Product: 8719,
-    UpArrow: 8593,
-    Uparrow: 8657,
-    Upsilon: 933,
-    alefsym: 8501,
-    angrtvb: 8894,
-    angzarr: 9084,
-    asympeq: 8781,
-    backsim: 8765,
-    because: 8757,
-    bemptyv: 10672,
-    between: 8812,
-    bigcirc: 9711,
-    bigodot: 10752,
-    bigstar: 9733,
-    boxplus: 8862,
-    ccupssm: 10832,
-    cemptyv: 10674,
-    cirscir: 10690,
-    coloneq: 8788,
-    congdot: 10861,
-    cudarrl: 10552,
-    cudarrr: 10549,
-    cularrp: 10557,
-    curarrm: 10556,
-    dbkarow: 10511,
-    ddagger: 8225,
-    ddotseq: 10871,
-    demptyv: 10673,
-    diamond: 8900,
-    digamma: 989,
-    dotplus: 8724,
-    dwangle: 10662,
-    epsilon: 949,
-    eqcolon: 8789,
-    equivDD: 10872,
-    gesdoto: 10882,
-    gtquest: 10876,
-    gtrless: 8823,
-    harrcir: 10568,
-    intprod: 10812,
-    isindot: 8949,
-    larrbfs: 10527,
-    larrsim: 10611,
-    lbrksld: 10639,
-    lbrkslu: 10637,
-    ldrdhar: 10599,
-    lesdoto: 10881,
-    lessdot: 8918,
-    lessgtr: 8822,
-    lesssim: 8818,
-    lotimes: 10804,
-    lozenge: 9674,
-    ltquest: 10875,
-    luruhar: 10598,
-    maltese: 10016,
-    minusdu: 10794,
-    napprox: 8777,
-    natural: 9838,
-    nearrow: 8599,
-    nexists: 8708,
-    notinva: 8713,
-    notinvb: 8951,
-    notinvc: 8950,
-    notniva: 8716,
-    notnivb: 8958,
-    notnivc: 8957,
-    npolint: 10772,
-    nsqsube: 8930,
-    nsqsupe: 8931,
-    nvinfin: 10718,
-    nwarrow: 8598,
-    olcross: 10683,
-    omicron: 959,
-    orderof: 8500,
-    orslope: 10839,
-    pertenk: 8241,
-    planckh: 8462,
-    pluscir: 10786,
-    plussim: 10790,
-    plustwo: 10791,
-    precsim: 8830,
-    quatint: 10774,
-    questeq: 8799,
-    rarrbfs: 10528,
-    rarrsim: 10612,
-    rbrksld: 10638,
-    rbrkslu: 10640,
-    rdldhar: 10601,
-    realine: 8475,
-    rotimes: 10805,
-    ruluhar: 10600,
-    searrow: 8600,
-    simplus: 10788,
-    simrarr: 10610,
-    subedot: 10947,
-    submult: 10945,
-    subplus: 10943,
-    subrarr: 10617,
-    succsim: 8831,
-    supdsub: 10968,
-    supedot: 10948,
-    suphsub: 10967,
-    suplarr: 10619,
-    supmult: 10946,
-    supplus: 10944,
-    swarrow: 8601,
-    topfork: 10970,
-    triplus: 10809,
-    tritime: 10811,
-    uparrow: 8593,
-    upsilon: 965,
-    uwangle: 10663,
-    vzigzag: 10650,
-    zigrarr: 8669,
-    Aacute: 193,
-    Abreve: 258,
-    Agrave: 192,
-    Assign: 8788,
-    Atilde: 195,
-    Barwed: 8966,
-    Bumpeq: 8782,
-    Cacute: 262,
-    Ccaron: 268,
-    Ccedil: 199,
-    Colone: 10868,
-    Conint: 8751,
-    CupCap: 8781,
-    Dagger: 8225,
-    Dcaron: 270,
-    DotDot: 8412,
-    Dstrok: 272,
-    Eacute: 201,
-    Ecaron: 282,
-    Egrave: 200,
-    Exists: 8707,
-    ForAll: 8704,
-    Gammad: 988,
-    Gbreve: 286,
-    Gcedil: 290,
-    HARDcy: 1066,
-    Hstrok: 294,
-    Iacute: 205,
-    Igrave: 204,
-    Itilde: 296,
-    Jsercy: 1032,
-    Kcedil: 310,
-    Lacute: 313,
-    Lambda: 923,
-    Lcaron: 317,
-    Lcedil: 315,
-    Lmidot: 319,
-    Lstrok: 321,
-    Nacute: 323,
-    Ncaron: 327,
-    Ncedil: 325,
-    Ntilde: 209,
-    Oacute: 211,
-    Odblac: 336,
-    Ograve: 210,
-    Oslash: 216,
-    Otilde: 213,
-    Otimes: 10807,
-    Racute: 340,
-    Rarrtl: 10518,
-    Rcaron: 344,
-    Rcedil: 342,
-    SHCHcy: 1065,
-    SOFTcy: 1068,
-    Sacute: 346,
-    Scaron: 352,
-    Scedil: 350,
-    Square: 9633,
-    Subset: 8912,
-    Supset: 8913,
-    Tcaron: 356,
-    Tcedil: 354,
-    Tstrok: 358,
-    Uacute: 218,
-    Ubreve: 364,
-    Udblac: 368,
-    Ugrave: 217,
-    Utilde: 360,
-    Vdashl: 10982,
-    Verbar: 8214,
-    Vvdash: 8874,
-    Yacute: 221,
-    Zacute: 377,
-    Zcaron: 381,
-    aacute: 225,
-    abreve: 259,
-    agrave: 224,
-    andand: 10837,
-    angmsd: 8737,
-    angsph: 8738,
-    apacir: 10863,
-    approx: 8776,
-    atilde: 227,
-    barvee: 8893,
-    barwed: 8965,
-    becaus: 8757,
-    bernou: 8492,
-    bigcap: 8898,
-    bigcup: 8899,
-    bigvee: 8897,
-    bkarow: 10509,
-    bottom: 8869,
-    bowtie: 8904,
-    boxbox: 10697,
-    bprime: 8245,
-    brvbar: 166,
-    bullet: 8226,
-    bumpeq: 8783,
-    cacute: 263,
-    capand: 10820,
-    capcap: 10827,
-    capcup: 10823,
-    capdot: 10816,
-    ccaron: 269,
-    ccedil: 231,
-    circeq: 8791,
-    cirmid: 10991,
-    colone: 8788,
-    commat: 64,
-    compfn: 8728,
-    conint: 8750,
-    coprod: 8720,
-    copysr: 8471,
-    cularr: 8630,
-    cupcap: 10822,
-    cupcup: 10826,
-    cupdot: 8845,
-    curarr: 8631,
-    curren: 164,
-    cylcty: 9005,
-    dagger: 8224,
-    daleth: 8504,
-    dcaron: 271,
-    dfisht: 10623,
-    divide: 247,
-    divonx: 8903,
-    dlcorn: 8990,
-    dlcrop: 8973,
-    dollar: 36,
-    drcorn: 8991,
-    drcrop: 8972,
-    dstrok: 273,
-    eacute: 233,
-    easter: 10862,
-    ecaron: 283,
-    ecolon: 8789,
-    egrave: 232,
-    egsdot: 10904,
-    elsdot: 10903,
-    emptyv: 8709,
-    emsp13: 8196,
-    emsp14: 8197,
-    eparsl: 10723,
-    eqcirc: 8790,
-    equals: 61,
-    equest: 8799,
-    female: 9792,
-    ffilig: 64259,
-    ffllig: 64260,
-    forall: 8704,
-    frac12: 189,
-    frac13: 8531,
-    frac14: 188,
-    frac15: 8533,
-    frac16: 8537,
-    frac18: 8539,
-    frac23: 8532,
-    frac25: 8534,
-    frac34: 190,
-    frac35: 8535,
-    frac38: 8540,
-    frac45: 8536,
-    frac56: 8538,
-    frac58: 8541,
-    frac78: 8542,
-    gacute: 501,
-    gammad: 989,
-    gbreve: 287,
-    gesdot: 10880,
-    gesles: 10900,
-    gtlPar: 10645,
-    gtrarr: 10616,
-    gtrdot: 8919,
-    gtrsim: 8819,
-    hairsp: 8202,
-    hamilt: 8459,
-    hardcy: 1098,
-    hearts: 9829,
-    hellip: 8230,
-    hercon: 8889,
-    homtht: 8763,
-    horbar: 8213,
-    hslash: 8463,
-    hstrok: 295,
-    hybull: 8259,
-    hyphen: 8208,
-    iacute: 237,
-    igrave: 236,
-    iiiint: 10764,
-    iinfin: 10716,
-    incare: 8453,
-    inodot: 305,
-    intcal: 8890,
-    iquest: 191,
-    isinsv: 8947,
-    itilde: 297,
-    jsercy: 1112,
-    kappav: 1008,
-    kcedil: 311,
-    kgreen: 312,
-    lAtail: 10523,
-    lacute: 314,
-    lagran: 8466,
-    lambda: 955,
-    langle: 10216,
-    larrfs: 10525,
-    larrhk: 8617,
-    larrlp: 8619,
-    larrpl: 10553,
-    larrtl: 8610,
-    latail: 10521,
-    lbrace: 123,
-    lbrack: 91,
-    lcaron: 318,
-    lcedil: 316,
-    ldquor: 8222,
-    lesdot: 10879,
-    lesges: 10899,
-    lfisht: 10620,
-    lfloor: 8970,
-    lharul: 10602,
-    llhard: 10603,
-    lmidot: 320,
-    lmoust: 9136,
-    loplus: 10797,
-    lowast: 8727,
-    lowbar: 95,
-    lparlt: 10643,
-    lrhard: 10605,
-    lsaquo: 8249,
-    lsquor: 8218,
-    lstrok: 322,
-    lthree: 8907,
-    ltimes: 8905,
-    ltlarr: 10614,
-    ltrPar: 10646,
-    mapsto: 8614,
-    marker: 9646,
-    mcomma: 10793,
-    midast: 42,
-    midcir: 10992,
-    middot: 183,
-    minusb: 8863,
-    minusd: 8760,
-    mnplus: 8723,
-    models: 8871,
-    mstpos: 8766,
-    nVDash: 8879,
-    nVdash: 8878,
-    nacute: 324,
-    ncaron: 328,
-    ncedil: 326,
-    nearhk: 10532,
-    nequiv: 8802,
-    nesear: 10536,
-    nexist: 8708,
-    nltrie: 8940,
-    nprcue: 8928,
-    nrtrie: 8941,
-    nsccue: 8929,
-    nsimeq: 8772,
-    ntilde: 241,
-    numero: 8470,
-    nvDash: 8877,
-    nvHarr: 10500,
-    nvdash: 8876,
-    nvlArr: 10498,
-    nvrArr: 10499,
-    nwarhk: 10531,
-    nwnear: 10535,
-    oacute: 243,
-    odblac: 337,
-    odsold: 10684,
-    ograve: 242,
-    ominus: 8854,
-    origof: 8886,
-    oslash: 248,
-    otilde: 245,
-    otimes: 8855,
-    parsim: 10995,
-    percnt: 37,
-    period: 46,
-    permil: 8240,
-    phmmat: 8499,
-    planck: 8463,
-    plankv: 8463,
-    plusdo: 8724,
-    plusdu: 10789,
-    plusmn: 177,
-    preceq: 10927,
-    primes: 8473,
-    prnsim: 8936,
-    propto: 8733,
-    prurel: 8880,
-    puncsp: 8200,
-    qprime: 8279,
-    rAtail: 10524,
-    racute: 341,
-    rangle: 10217,
-    rarrap: 10613,
-    rarrfs: 10526,
-    rarrhk: 8618,
-    rarrlp: 8620,
-    rarrpl: 10565,
-    rarrtl: 8611,
-    ratail: 10522,
-    rbrace: 125,
-    rbrack: 93,
-    rcaron: 345,
-    rcedil: 343,
-    rdquor: 8221,
-    rfisht: 10621,
-    rfloor: 8971,
-    rharul: 10604,
-    rmoust: 9137,
-    roplus: 10798,
-    rpargt: 10644,
-    rsaquo: 8250,
-    rsquor: 8217,
-    rthree: 8908,
-    rtimes: 8906,
-    sacute: 347,
-    scaron: 353,
-    scedil: 351,
-    scnsim: 8937,
-    searhk: 10533,
-    seswar: 10537,
-    sfrown: 8994,
-    shchcy: 1097,
-    sigmaf: 962,
-    sigmav: 962,
-    simdot: 10858,
-    smashp: 10803,
-    softcy: 1100,
-    solbar: 9023,
-    spades: 9824,
-    sqsube: 8849,
-    sqsupe: 8850,
-    square: 9633,
-    squarf: 9642,
-    ssetmn: 8726,
-    ssmile: 8995,
-    sstarf: 8902,
-    subdot: 10941,
-    subset: 8834,
-    subsim: 10951,
-    subsub: 10965,
-    subsup: 10963,
-    succeq: 10928,
-    supdot: 10942,
-    supset: 8835,
-    supsim: 10952,
-    supsub: 10964,
-    supsup: 10966,
-    swarhk: 10534,
-    swnwar: 10538,
-    target: 8982,
-    tcaron: 357,
-    tcedil: 355,
-    telrec: 8981,
-    there4: 8756,
-    thetav: 977,
-    thinsp: 8201,
-    thksim: 8764,
-    timesb: 8864,
-    timesd: 10800,
-    topbot: 9014,
-    topcir: 10993,
-    tprime: 8244,
-    tridot: 9708,
-    tstrok: 359,
-    uacute: 250,
-    ubreve: 365,
-    udblac: 369,
-    ufisht: 10622,
-    ugrave: 249,
-    ulcorn: 8988,
-    ulcrop: 8975,
-    urcorn: 8989,
-    urcrop: 8974,
-    utilde: 361,
-    vangrt: 10652,
-    varphi: 966,
-    varrho: 1009,
-    veebar: 8891,
-    vellip: 8942,
-    verbar: 124,
-    wedbar: 10847,
-    wedgeq: 8793,
-    weierp: 8472,
-    wreath: 8768,
-    xoplus: 10753,
-    xotime: 10754,
-    xsqcup: 10758,
-    xuplus: 10756,
-    xwedge: 8896,
-    yacute: 253,
-    zacute: 378,
-    zcaron: 382,
-    zeetrf: 8488,
-    AElig: 198,
-    Acirc: 194,
-    Alpha: 913,
-    Amacr: 256,
-    Aogon: 260,
-    Aring: 197,
-    Breve: 728,
-    Ccirc: 264,
-    Colon: 8759,
-    Cross: 10799,
-    Dashv: 10980,
-    Delta: 916,
-    Ecirc: 202,
-    Emacr: 274,
-    Eogon: 280,
-    Equal: 10869,
-    Gamma: 915,
-    Gcirc: 284,
-    Hacek: 711,
-    Hcirc: 292,
-    IJlig: 306,
-    Icirc: 206,
-    Imacr: 298,
-    Iogon: 302,
-    Iukcy: 1030,
-    Jcirc: 308,
-    Jukcy: 1028,
-    Kappa: 922,
-    OElig: 338,
-    Ocirc: 212,
-    Omacr: 332,
-    Omega: 937,
-    Prime: 8243,
-    RBarr: 10512,
-    Scirc: 348,
-    Sigma: 931,
-    THORN: 222,
-    TRADE: 8482,
-    TSHcy: 1035,
-    Theta: 920,
-    Tilde: 8764,
-    Ubrcy: 1038,
-    Ucirc: 219,
-    Umacr: 362,
-    Union: 8899,
-    Uogon: 370,
-    UpTee: 8869,
-    Uring: 366,
-    VDash: 8875,
-    Vdash: 8873,
-    Wcirc: 372,
-    Wedge: 8896,
-    Ycirc: 374,
-    acirc: 226,
-    acute: 180,
-    aelig: 230,
-    aleph: 8501,
-    alpha: 945,
-    amacr: 257,
-    amalg: 10815,
-    angle: 8736,
-    angrt: 8735,
-    angst: 8491,
-    aogon: 261,
-    aring: 229,
-    asymp: 8776,
-    awint: 10769,
-    bcong: 8780,
-    bdquo: 8222,
-    bepsi: 1014,
-    blank: 9251,
-    blk12: 9618,
-    blk14: 9617,
-    blk34: 9619,
-    block: 9608,
-    boxDL: 9559,
-    boxDR: 9556,
-    boxDl: 9558,
-    boxDr: 9555,
-    boxHD: 9574,
-    boxHU: 9577,
-    boxHd: 9572,
-    boxHu: 9575,
-    boxUL: 9565,
-    boxUR: 9562,
-    boxUl: 9564,
-    boxUr: 9561,
-    boxVH: 9580,
-    boxVL: 9571,
-    boxVR: 9568,
-    boxVh: 9579,
-    boxVl: 9570,
-    boxVr: 9567,
-    boxdL: 9557,
-    boxdR: 9554,
-    boxdl: 9488,
-    boxdr: 9484,
-    boxhD: 9573,
-    boxhU: 9576,
-    boxhd: 9516,
-    boxhu: 9524,
-    boxuL: 9563,
-    boxuR: 9560,
-    boxul: 9496,
-    boxur: 9492,
-    boxvH: 9578,
-    boxvL: 9569,
-    boxvR: 9566,
-    boxvh: 9532,
-    boxvl: 9508,
-    boxvr: 9500,
-    breve: 728,
-    bsemi: 8271,
-    bsime: 8909,
-    bsolb: 10693,
-    bumpE: 10926,
-    bumpe: 8783,
-    caret: 8257,
-    caron: 711,
-    ccaps: 10829,
-    ccirc: 265,
-    ccups: 10828,
-    cedil: 184,
-    check: 10003,
-    clubs: 9827,
-    colon: 58,
-    comma: 44,
-    crarr: 8629,
-    cross: 10007,
-    csube: 10961,
-    csupe: 10962,
-    ctdot: 8943,
-    cuepr: 8926,
-    cuesc: 8927,
-    cupor: 10821,
-    cuvee: 8910,
-    cuwed: 8911,
-    cwint: 8753,
-    dashv: 8867,
-    dblac: 733,
-    ddarr: 8650,
-    delta: 948,
-    dharl: 8643,
-    dharr: 8642,
-    diams: 9830,
-    disin: 8946,
-    doteq: 8784,
-    dtdot: 8945,
-    dtrif: 9662,
-    duarr: 8693,
-    duhar: 10607,
-    eDDot: 10871,
-    ecirc: 234,
-    efDot: 8786,
-    emacr: 275,
-    empty: 8709,
-    eogon: 281,
-    eplus: 10865,
-    epsiv: 949,
-    eqsim: 8770,
-    equiv: 8801,
-    erDot: 8787,
-    erarr: 10609,
-    esdot: 8784,
-    exist: 8707,
-    fflig: 64256,
-    filig: 64257,
-    fllig: 64258,
-    fltns: 9649,
-    forkv: 10969,
-    frasl: 8260,
-    frown: 8994,
-    gamma: 947,
-    gcirc: 285,
-    gescc: 10921,
-    gimel: 8503,
-    gneqq: 8809,
-    gnsim: 8935,
-    grave: 96,
-    gsime: 10894,
-    gsiml: 10896,
-    gtcir: 10874,
-    gtdot: 8919,
-    harrw: 8621,
-    hcirc: 293,
-    hoarr: 8703,
-    icirc: 238,
-    iexcl: 161,
-    iiint: 8749,
-    iiota: 8489,
-    ijlig: 307,
-    imacr: 299,
-    image: 8465,
-    imath: 305,
-    imped: 437,
-    infin: 8734,
-    iogon: 303,
-    iprod: 10812,
-    isinE: 8953,
-    isins: 8948,
-    isinv: 8712,
-    iukcy: 1110,
-    jcirc: 309,
-    jmath: 567,
-    jukcy: 1108,
-    kappa: 954,
-    lAarr: 8666,
-    lBarr: 10510,
-    langd: 10641,
-    laquo: 171,
-    larrb: 8676,
-    lbarr: 10508,
-    lbbrk: 10098,
-    lbrke: 10635,
-    lceil: 8968,
-    ldquo: 8220,
-    lescc: 10920,
-    lhard: 8637,
-    lharu: 8636,
-    lhblk: 9604,
-    llarr: 8647,
-    lltri: 9722,
-    lneqq: 8808,
-    lnsim: 8934,
-    loang: 10220,
-    loarr: 8701,
-    lobrk: 10214,
-    lopar: 10629,
-    lrarr: 8646,
-    lrhar: 8651,
-    lrtri: 8895,
-    lsime: 10893,
-    lsimg: 10895,
-    lsquo: 8216,
-    ltcir: 10873,
-    ltdot: 8918,
-    ltrie: 8884,
-    ltrif: 9666,
-    mDDot: 8762,
-    mdash: 8212,
-    micro: 181,
-    minus: 8722,
-    mumap: 8888,
-    nabla: 8711,
-    napos: 329,
-    natur: 9838,
-    ncong: 8775,
-    ndash: 8211,
-    neArr: 8663,
-    nearr: 8599,
-    ngsim: 8821,
-    nhArr: 8654,
-    nharr: 8622,
-    nhpar: 10994,
-    nlArr: 8653,
-    nlarr: 8602,
-    nless: 8814,
-    nlsim: 8820,
-    nltri: 8938,
-    notin: 8713,
-    notni: 8716,
-    nprec: 8832,
-    nrArr: 8655,
-    nrarr: 8603,
-    nrtri: 8939,
-    nsime: 8772,
-    nsmid: 8740,
-    nspar: 8742,
-    nsube: 8840,
-    nsucc: 8833,
-    nsupe: 8841,
-    numsp: 8199,
-    nwArr: 8662,
-    nwarr: 8598,
-    ocirc: 244,
-    odash: 8861,
-    oelig: 339,
-    ofcir: 10687,
-    ohbar: 10677,
-    olarr: 8634,
-    olcir: 10686,
-    oline: 8254,
-    omacr: 333,
-    omega: 969,
-    operp: 10681,
-    oplus: 8853,
-    orarr: 8635,
-    order: 8500,
-    ovbar: 9021,
-    parsl: 11005,
-    phone: 9742,
-    plusb: 8862,
-    pluse: 10866,
-    pound: 163,
-    prcue: 8828,
-    prime: 8242,
-    prnap: 10937,
-    prsim: 8830,
-    quest: 63,
-    rAarr: 8667,
-    rBarr: 10511,
-    radic: 8730,
-    rangd: 10642,
-    range: 10661,
-    raquo: 187,
-    rarrb: 8677,
-    rarrc: 10547,
-    rarrw: 8605,
-    ratio: 8758,
-    rbarr: 10509,
-    rbbrk: 10099,
-    rbrke: 10636,
-    rceil: 8969,
-    rdquo: 8221,
-    reals: 8477,
-    rhard: 8641,
-    rharu: 8640,
-    rlarr: 8644,
-    rlhar: 8652,
-    rnmid: 10990,
-    roang: 10221,
-    roarr: 8702,
-    robrk: 10215,
-    ropar: 10630,
-    rrarr: 8649,
-    rsquo: 8217,
-    rtrie: 8885,
-    rtrif: 9656,
-    sbquo: 8218,
-    sccue: 8829,
-    scirc: 349,
-    scnap: 10938,
-    scsim: 8831,
-    sdotb: 8865,
-    sdote: 10854,
-    seArr: 8664,
-    searr: 8600,
-    setmn: 8726,
-    sharp: 9839,
-    sigma: 963,
-    simeq: 8771,
-    simgE: 10912,
-    simlE: 10911,
-    simne: 8774,
-    slarr: 8592,
-    smile: 8995,
-    sqcap: 8851,
-    sqcup: 8852,
-    sqsub: 8847,
-    sqsup: 8848,
-    srarr: 8594,
-    starf: 9733,
-    strns: 175,
-    subnE: 10955,
-    subne: 8842,
-    supnE: 10956,
-    supne: 8843,
-    swArr: 8665,
-    swarr: 8601,
-    szlig: 223,
-    theta: 952,
-    thkap: 8776,
-    thorn: 254,
-    tilde: 732,
-    times: 215,
-    trade: 8482,
-    trisb: 10701,
-    tshcy: 1115,
-    twixt: 8812,
-    ubrcy: 1118,
-    ucirc: 251,
-    udarr: 8645,
-    udhar: 10606,
-    uharl: 8639,
-    uharr: 8638,
-    uhblk: 9600,
-    ultri: 9720,
-    umacr: 363,
-    uogon: 371,
-    uplus: 8846,
-    upsih: 978,
-    uring: 367,
-    urtri: 9721,
-    utdot: 8944,
-    utrif: 9652,
-    uuarr: 8648,
-    vBarv: 10985,
-    vDash: 8872,
-    varpi: 982,
-    vdash: 8866,
-    veeeq: 8794,
-    vltri: 8882,
-    vprop: 8733,
-    vrtri: 8883,
-    wcirc: 373,
-    wedge: 8743,
-    xcirc: 9711,
-    xdtri: 9661,
-    xhArr: 10234,
-    xharr: 10231,
-    xlArr: 10232,
-    xlarr: 10229,
-    xodot: 10752,
-    xrArr: 10233,
-    xrarr: 10230,
-    xutri: 9651,
-    ycirc: 375,
-    Aopf: 120120,
-    Ascr: 119964,
-    Auml: 196,
-    Barv: 10983,
-    Beta: 914,
-    Bopf: 120121,
-    Bscr: 8492,
-    CHcy: 1063,
-    COPY: 169,
-    Cdot: 266,
-    Copf: 8450,
-    Cscr: 119966,
-    DJcy: 1026,
-    DScy: 1029,
-    DZcy: 1039,
-    Darr: 8609,
-    Dopf: 120123,
-    Dscr: 119967,
-    Edot: 278,
-    Eopf: 120124,
-    Escr: 8496,
-    Esim: 10867,
-    Euml: 203,
-    Fopf: 120125,
-    Fscr: 8497,
-    GJcy: 1027,
-    Gdot: 288,
-    Gopf: 120126,
-    Gscr: 119970,
-    Hopf: 8461,
-    Hscr: 8459,
-    IEcy: 1045,
-    IOcy: 1025,
-    Idot: 304,
-    Iopf: 120128,
-    Iota: 921,
-    Iscr: 8464,
-    Iuml: 207,
-    Jopf: 120129,
-    Jscr: 119973,
-    KHcy: 1061,
-    KJcy: 1036,
-    Kopf: 120130,
-    Kscr: 119974,
-    LJcy: 1033,
-    Lang: 10218,
-    Larr: 8606,
-    Lopf: 120131,
-    Lscr: 8466,
-    Mopf: 120132,
-    Mscr: 8499,
-    NJcy: 1034,
-    Nopf: 8469,
-    Nscr: 119977,
-    Oopf: 120134,
-    Oscr: 119978,
-    Ouml: 214,
-    Popf: 8473,
-    Pscr: 119979,
-    QUOT: 34,
-    Qopf: 8474,
-    Qscr: 119980,
-    Rang: 10219,
-    Rarr: 8608,
-    Ropf: 8477,
-    Rscr: 8475,
-    SHcy: 1064,
-    Sopf: 120138,
-    Sqrt: 8730,
-    Sscr: 119982,
-    Star: 8902,
-    TScy: 1062,
-    Topf: 120139,
-    Tscr: 119983,
-    Uarr: 8607,
-    Uopf: 120140,
-    Upsi: 978,
-    Uscr: 119984,
-    Uuml: 220,
-    Vbar: 10987,
-    Vert: 8214,
-    Vopf: 120141,
-    Vscr: 119985,
-    Wopf: 120142,
-    Wscr: 119986,
-    Xopf: 120143,
-    Xscr: 119987,
-    YAcy: 1071,
-    YIcy: 1031,
-    YUcy: 1070,
-    Yopf: 120144,
-    Yscr: 119988,
-    Yuml: 376,
-    ZHcy: 1046,
-    Zdot: 379,
-    Zeta: 918,
-    Zopf: 8484,
-    Zscr: 119989,
-    andd: 10844,
-    andv: 10842,
-    ange: 10660,
-    aopf: 120146,
-    apid: 8779,
-    apos: 39,
-    ascr: 119990,
-    auml: 228,
-    bNot: 10989,
-    bbrk: 9141,
-    beta: 946,
-    beth: 8502,
-    bnot: 8976,
-    bopf: 120147,
-    boxH: 9552,
-    boxV: 9553,
-    boxh: 9472,
-    boxv: 9474,
-    bscr: 119991,
-    bsim: 8765,
-    bsol: 92,
-    bull: 8226,
-    bump: 8782,
-    cdot: 267,
-    cent: 162,
-    chcy: 1095,
-    cirE: 10691,
-    circ: 710,
-    cire: 8791,
-    comp: 8705,
-    cong: 8773,
-    copf: 120148,
-    copy: 169,
-    cscr: 119992,
-    csub: 10959,
-    csup: 10960,
-    dArr: 8659,
-    dHar: 10597,
-    darr: 8595,
-    dash: 8208,
-    diam: 8900,
-    djcy: 1106,
-    dopf: 120149,
-    dscr: 119993,
-    dscy: 1109,
-    dsol: 10742,
-    dtri: 9663,
-    dzcy: 1119,
-    eDot: 8785,
-    ecir: 8790,
-    edot: 279,
-    emsp: 8195,
-    ensp: 8194,
-    eopf: 120150,
-    epar: 8917,
-    epsi: 1013,
-    escr: 8495,
-    esim: 8770,
-    euml: 235,
-    euro: 8364,
-    excl: 33,
-    flat: 9837,
-    fnof: 402,
-    fopf: 120151,
-    fork: 8916,
-    fscr: 119995,
-    gdot: 289,
-    geqq: 8807,
-    gjcy: 1107,
-    gnap: 10890,
-    gneq: 10888,
-    gopf: 120152,
-    gscr: 8458,
-    gsim: 8819,
-    gtcc: 10919,
-    hArr: 8660,
-    half: 189,
-    harr: 8596,
-    hbar: 8463,
-    hopf: 120153,
-    hscr: 119997,
-    iecy: 1077,
-    imof: 8887,
-    iocy: 1105,
-    iopf: 120154,
-    iota: 953,
-    iscr: 119998,
-    isin: 8712,
-    iuml: 239,
-    jopf: 120155,
-    jscr: 119999,
-    khcy: 1093,
-    kjcy: 1116,
-    kopf: 120156,
-    kscr: 120000,
-    lArr: 8656,
-    lHar: 10594,
-    lang: 10216,
-    larr: 8592,
-    late: 10925,
-    lcub: 123,
-    ldca: 10550,
-    ldsh: 8626,
-    leqq: 8806,
-    ljcy: 1113,
-    lnap: 10889,
-    lneq: 10887,
-    lopf: 120157,
-    lozf: 10731,
-    lpar: 40,
-    lscr: 120001,
-    lsim: 8818,
-    lsqb: 91,
-    ltcc: 10918,
-    ltri: 9667,
-    macr: 175,
-    male: 9794,
-    malt: 10016,
-    mlcp: 10971,
-    mldr: 8230,
-    mopf: 120158,
-    mscr: 120002,
-    nbsp: 160,
-    ncap: 10819,
-    ncup: 10818,
-    ngeq: 8817,
-    ngtr: 8815,
-    nisd: 8954,
-    njcy: 1114,
-    nldr: 8229,
-    nleq: 8816,
-    nmid: 8740,
-    nopf: 120159,
-    npar: 8742,
-    nscr: 120003,
-    nsim: 8769,
-    nsub: 8836,
-    nsup: 8837,
-    ntgl: 8825,
-    ntlg: 8824,
-    oast: 8859,
-    ocir: 8858,
-    odiv: 10808,
-    odot: 8857,
-    ogon: 731,
-    oint: 8750,
-    omid: 10678,
-    oopf: 120160,
-    opar: 10679,
-    ordf: 170,
-    ordm: 186,
-    oror: 10838,
-    oscr: 8500,
-    osol: 8856,
-    ouml: 246,
-    para: 182,
-    part: 8706,
-    perp: 8869,
-    phiv: 966,
-    plus: 43,
-    popf: 120161,
-    prap: 10935,
-    prec: 8826,
-    prnE: 10933,
-    prod: 8719,
-    prop: 8733,
-    pscr: 120005,
-    qint: 10764,
-    qopf: 120162,
-    qscr: 120006,
-    quot: 34,
-    rArr: 8658,
-    rHar: 10596,
-    race: 10714,
-    rang: 10217,
-    rarr: 8594,
-    rcub: 125,
-    rdca: 10551,
-    rdsh: 8627,
-    real: 8476,
-    rect: 9645,
-    rhov: 1009,
-    ring: 730,
-    ropf: 120163,
-    rpar: 41,
-    rscr: 120007,
-    rsqb: 93,
-    rtri: 9657,
-    scap: 10936,
-    scnE: 10934,
-    sdot: 8901,
-    sect: 167,
-    semi: 59,
-    sext: 10038,
-    shcy: 1096,
-    sime: 8771,
-    simg: 10910,
-    siml: 10909,
-    smid: 8739,
-    smte: 10924,
-    solb: 10692,
-    sopf: 120164,
-    spar: 8741,
-    squf: 9642,
-    sscr: 120008,
-    star: 9734,
-    subE: 10949,
-    sube: 8838,
-    succ: 8827,
-    sung: 9834,
-    sup1: 185,
-    sup2: 178,
-    sup3: 179,
-    supE: 10950,
-    supe: 8839,
-    tbrk: 9140,
-    tdot: 8411,
-    tint: 8749,
-    toea: 10536,
-    topf: 120165,
-    tosa: 10537,
-    trie: 8796,
-    tscr: 120009,
-    tscy: 1094,
-    uArr: 8657,
-    uHar: 10595,
-    uarr: 8593,
-    uopf: 120166,
-    upsi: 965,
-    uscr: 120010,
-    utri: 9653,
-    uuml: 252,
-    vArr: 8661,
-    vBar: 10984,
-    varr: 8597,
-    vert: 124,
-    vopf: 120167,
-    vscr: 120011,
-    wopf: 120168,
-    wscr: 120012,
-    xcap: 8898,
-    xcup: 8899,
-    xmap: 10236,
-    xnis: 8955,
-    xopf: 120169,
-    xscr: 120013,
-    xvee: 8897,
-    yacy: 1103,
-    yicy: 1111,
-    yopf: 120170,
-    yscr: 120014,
-    yucy: 1102,
-    yuml: 255,
-    zdot: 380,
-    zeta: 950,
-    zhcy: 1078,
-    zopf: 120171,
-    zscr: 120015,
-    zwnj: 8204,
-    AMP: 38,
-    Acy: 1040,
-    Afr: 120068,
-    And: 10835,
-    Bcy: 1041,
-    Bfr: 120069,
-    Cap: 8914,
-    Cfr: 8493,
-    Chi: 935,
-    Cup: 8915,
-    Dcy: 1044,
-    Del: 8711,
-    Dfr: 120071,
-    Dot: 168,
-    ENG: 330,
-    ETH: 208,
-    Ecy: 1069,
-    Efr: 120072,
-    Eta: 919,
-    Fcy: 1060,
-    Ffr: 120073,
-    Gcy: 1043,
-    Gfr: 120074,
-    Hat: 94,
-    Hfr: 8460,
-    Icy: 1048,
-    Ifr: 8465,
-    Int: 8748,
-    Jcy: 1049,
-    Jfr: 120077,
-    Kcy: 1050,
-    Kfr: 120078,
-    Lcy: 1051,
-    Lfr: 120079,
-    Lsh: 8624,
-    Map: 10501,
-    Mcy: 1052,
-    Mfr: 120080,
-    Ncy: 1053,
-    Nfr: 120081,
-    Not: 10988,
-    Ocy: 1054,
-    Ofr: 120082,
-    Pcy: 1055,
-    Pfr: 120083,
-    Phi: 934,
-    Psi: 936,
-    Qfr: 120084,
-    REG: 174,
-    Rcy: 1056,
-    Rfr: 8476,
-    Rho: 929,
-    Rsh: 8625,
-    Scy: 1057,
-    Sfr: 120086,
-    Sub: 8912,
-    Sum: 8721,
-    Sup: 8913,
-    Tab: 9,
-    Tau: 932,
-    Tcy: 1058,
-    Tfr: 120087,
-    Ucy: 1059,
-    Ufr: 120088,
-    Vcy: 1042,
-    Vee: 8897,
-    Vfr: 120089,
-    Wfr: 120090,
-    Xfr: 120091,
-    Ycy: 1067,
-    Yfr: 120092,
-    Zcy: 1047,
-    Zfr: 8488,
-    acd: 8767,
-    acy: 1072,
-    afr: 120094,
-    amp: 38,
-    and: 8743,
-    ang: 8736,
-    apE: 10864,
-    ape: 8778,
-    ast: 42,
-    bcy: 1073,
-    bfr: 120095,
-    bot: 8869,
-    cap: 8745,
-    cfr: 120096,
-    chi: 967,
-    cir: 9675,
-    cup: 8746,
-    dcy: 1076,
-    deg: 176,
-    dfr: 120097,
-    die: 168,
-    div: 247,
-    dot: 729,
-    ecy: 1101,
-    efr: 120098,
-    egs: 10902,
-    ell: 8467,
-    els: 10901,
-    eng: 331,
-    eta: 951,
-    eth: 240,
-    fcy: 1092,
-    ffr: 120099,
-    gEl: 10892,
-    gap: 10886,
-    gcy: 1075,
-    gel: 8923,
-    geq: 8805,
-    ges: 10878,
-    gfr: 120100,
-    ggg: 8921,
-    glE: 10898,
-    gla: 10917,
-    glj: 10916,
-    gnE: 8809,
-    gne: 10888,
-    hfr: 120101,
-    icy: 1080,
-    iff: 8660,
-    ifr: 120102,
-    int: 8747,
-    jcy: 1081,
-    jfr: 120103,
-    kcy: 1082,
-    kfr: 120104,
-    lEg: 10891,
-    lap: 10885,
-    lat: 10923,
-    lcy: 1083,
-    leg: 8922,
-    leq: 8804,
-    les: 10877,
-    lfr: 120105,
-    lgE: 10897,
-    lnE: 8808,
-    lne: 10887,
-    loz: 9674,
-    lrm: 8206,
-    lsh: 8624,
-    map: 8614,
-    mcy: 1084,
-    mfr: 120106,
-    mho: 8487,
-    mid: 8739,
-    nap: 8777,
-    ncy: 1085,
-    nfr: 120107,
-    nge: 8817,
-    ngt: 8815,
-    nis: 8956,
-    niv: 8715,
-    nle: 8816,
-    nlt: 8814,
-    not: 172,
-    npr: 8832,
-    nsc: 8833,
-    num: 35,
-    ocy: 1086,
-    ofr: 120108,
-    ogt: 10689,
-    ohm: 8486,
-    olt: 10688,
-    ord: 10845,
-    orv: 10843,
-    par: 8741,
-    pcy: 1087,
-    pfr: 120109,
-    phi: 966,
-    piv: 982,
-    prE: 10931,
-    pre: 10927,
-    psi: 968,
-    qfr: 120110,
-    rcy: 1088,
-    reg: 174,
-    rfr: 120111,
-    rho: 961,
-    rlm: 8207,
-    rsh: 8625,
-    scE: 10932,
-    sce: 10928,
-    scy: 1089,
-    sfr: 120112,
-    shy: 173,
-    sim: 8764,
-    smt: 10922,
-    sol: 47,
-    squ: 9633,
-    sub: 8834,
-    sum: 8721,
-    sup: 8835,
-    tau: 964,
-    tcy: 1090,
-    tfr: 120113,
-    top: 8868,
-    ucy: 1091,
-    ufr: 120114,
-    uml: 168,
-    vcy: 1074,
-    vee: 8744,
-    vfr: 120115,
-    wfr: 120116,
-    xfr: 120117,
-    ycy: 1099,
-    yen: 165,
-    yfr: 120118,
-    zcy: 1079,
-    zfr: 120119,
-    zwj: 8205,
-    DD: 8517,
-    GT: 62,
-    Gg: 8921,
-    Gt: 8811,
-    Im: 8465,
-    LT: 60,
-    Ll: 8920,
-    Lt: 8810,
-    Mu: 924,
-    Nu: 925,
-    Or: 10836,
-    Pi: 928,
-    Pr: 10939,
-    Re: 8476,
-    Sc: 10940,
-    Xi: 926,
-    ac: 8766,
-    af: 8289,
-    ap: 8776,
-    dd: 8518,
-    ee: 8519,
-    eg: 10906,
-    el: 10905,
-    gE: 8807,
-    ge: 8805,
-    gg: 8811,
-    gl: 8823,
-    gt: 62,
-    ic: 8291,
-    ii: 8520,
-    in: 8712,
-    it: 8290,
-    lE: 8806,
-    le: 8804,
-    lg: 8822,
-    ll: 8810,
-    lt: 60,
-    mp: 8723,
-    mu: 956,
-    ne: 8800,
-    ni: 8715,
-    nu: 957,
-    oS: 9416,
-    or: 8744,
-    pi: 960,
-    pm: 177,
-    pr: 8826,
-    rx: 8478,
-    sc: 8827,
-    wp: 8472,
-    wr: 8768,
-    xi: 958,
-};
-
-const windows1252 = [
-    8364,
-    129,
-    8218,
-    402,
-    8222,
-    8230,
-    8224,
-    8225,
-    710,
-    8240,
-    352,
-    8249,
-    338,
-    141,
-    381,
-    143,
-    144,
-    8216,
-    8217,
-    8220,
-    8221,
-    8226,
-    8211,
-    8212,
-    732,
-    8482,
-    353,
-    8250,
-    339,
-    157,
-    382,
-    376,
-];
-const entityPattern = new RegExp(`&(#?(?:x[\\w\\d]+|\\d+|${Object.keys(htmlEntities).join('|')}));?`, 'g');
-function decodeCharacterReferences(html) {
-    return html.replace(entityPattern, (match, entity) => {
-        let code;
-        // Handle named entities
-        if (entity[0] !== '#') {
-            code = htmlEntities[entity];
-        }
-        else if (entity[1] === 'x') {
-            code = parseInt(entity.substring(2), 16);
-        }
-        else {
-            code = parseInt(entity.substring(1), 10);
-        }
-        if (!code) {
-            return match;
-        }
-        return String.fromCodePoint(validateCode(code));
-    });
-}
-const NUL = 0;
-// some code points are verboten. If we were inserting HTML, the browser would replace the illegal
-// code points with alternatives in some cases - since we're bypassing that mechanism, we need
-// to replace them ourselves
-//
-// Source: http://en.wikipedia.org/wiki/Character_encodings_in_HTML#Illegal_characters
-function validateCode(code) {
-    // line feed becomes generic whitespace
-    if (code === 10) {
-        return 32;
-    }
-    // ASCII range. (Why someone would use HTML entities for ASCII characters I don't know, but...)
-    if (code < 128) {
-        return code;
-    }
-    // code points 128-159 are dealt with leniently by browsers, but they're incorrect. We need
-    // to correct the mistake or we'll end up with missing € signs and so on
-    if (code <= 159) {
-        return windows1252[code - 128];
-    }
-    // basic multilingual plane
-    if (code < 55296) {
-        return code;
-    }
-    // UTF-16 surrogate halves
-    if (code <= 57343) {
-        return NUL;
-    }
-    // rest of the basic multilingual plane
-    if (code <= 65535) {
-        return code;
-    }
-    // supplementary multilingual plane 0x10000 - 0x1ffff
-    if (code >= 65536 && code <= 131071) {
-        return code;
-    }
-    // supplementary ideographic plane 0x20000 - 0x2ffff
-    if (code >= 131072 && code <= 196607) {
-        return code;
-    }
-    return NUL;
-}
-
-const voidElementNames = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;
-function isVoidElementName(name) {
-    return voidElementNames.test(name) || name.toLowerCase() === '!doctype';
-}
-
-const validTagName = /^\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\-]*/;
-const SELF = ':Self';
-const COMPONENT = ':Component';
-const metaTags = new Set([
-    ':Window',
-    ':Head'
-]);
-const specials = new Map([
-    [
-        'script',
-        {
-            read: readScript,
-            property: 'js',
-        },
-    ],
-    [
-        'style',
-        {
-            read: readStyle,
-            property: 'css',
-        },
-    ],
-]);
-// based on http://developers.whatwg.org/syntax.html#syntax-tag-omission
-const disallowedContents = new Map([
-    ['li', new Set(['li'])],
-    ['dt', new Set(['dt', 'dd'])],
-    ['dd', new Set(['dt', 'dd'])],
-    [
-        'p',
-        new Set('address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul'.split(' ')),
-    ],
-    ['rt', new Set(['rt', 'rp'])],
-    ['rp', new Set(['rt', 'rp'])],
-    ['optgroup', new Set(['optgroup'])],
-    ['option', new Set(['option', 'optgroup'])],
-    ['thead', new Set(['tbody', 'tfoot'])],
-    ['tbody', new Set(['tbody', 'tfoot'])],
-    ['tfoot', new Set(['tbody'])],
-    ['tr', new Set(['tr', 'tbody'])],
-    ['td', new Set(['td', 'th', 'tr'])],
-    ['th', new Set(['td', 'th', 'tr'])],
-]);
-function tag(parser) {
-    const start = parser.index++;
-    let parent = parser.current();
-    if (parser.eat('!--')) {
-        const data = parser.readUntil(/-->/);
-        parser.eat('-->', true, 'comment was left open, expected -->');
-        parser.current().children.push({
-            start,
-            end: parser.index,
-            type: 'Comment',
-            data,
-        });
-        return;
-    }
-    const isClosingTag = parser.eat('/');
-    const name = readTagName(parser);
-    if (metaTags.has(name)) {
-        if (isClosingTag) {
-            if (name === ':Window' && parser.current().children.length) {
-                parser.error(`<:Window> cannot have children`, parser.current().children[0].start);
-            }
-        }
-        else {
-            if (name in parser.metaTags) {
-                parser.error(`A component can only have one <${name}> tag`, start);
-            }
-            if (parser.stack.length > 1) {
-                console.log(parser.stack);
-                parser.error(`<${name}> tags cannot be inside elements or blocks`, start);
-            }
-            parser.metaTags[name] = true;
-        }
-    }
-    const type = metaTags.has(name)
-        ? name.slice(1)
-        : 'Element'; // TODO in v2, capitalised name means 'Component'
-    const element = {
-        start,
-        end: null,
-        type,
-        name,
-        attributes: [],
-        children: [],
-    };
-    parser.allowWhitespace();
-    if (isClosingTag) {
-        if (isVoidElementName(name)) {
-            parser.error(`<${name}> is a void element and cannot have children, or a closing tag`, start);
-        }
-        if (!parser.eat('>'))
-            parser.error(`Expected '>'`);
-        // close any elements that don't have their own closing tags, e.g. <div><p></div>
-        while (parent.name !== name) {
-            if (parent.type !== 'Element')
-                parser.error(`</${name}> attempted to close an element that was not open`, start);
-            parent.end = start;
-            parser.stack.pop();
-            parent = parser.current();
-        }
-        parent.end = parser.index;
-        parser.stack.pop();
-        return;
-    }
-    else if (disallowedContents.has(parent.name)) {
-        // can this be a child of the parent element, or does it implicitly
-        // close it, like `<li>one<li>two`?
-        if (disallowedContents.get(parent.name).has(name)) {
-            parent.end = start;
-            parser.stack.pop();
-        }
-    }
-    if (name === 'slot') {
-        let i = parser.stack.length;
-        while (i--) {
-            const item = parser.stack[i];
-            if (item.type === 'EachBlock') {
-                parser.error(`<slot> cannot be a child of an each-block`, start);
-            }
-        }
-    }
-    if (name === COMPONENT) {
-        parser.eat('{', true);
-        element.expression = readExpression(parser);
-        parser.allowWhitespace();
-        parser.eat('}', true);
-        parser.allowWhitespace();
-    }
-    const uniqueNames = new Set();
-    let attribute;
-    while ((attribute = readAttribute(parser, uniqueNames))) {
-        if (attribute.type === 'Binding' && !parser.allowBindings) {
-            parser.error(`Two-way binding is disabled`, attribute.start);
-        }
-        element.attributes.push(attribute);
-        parser.allowWhitespace();
-    }
-    // special cases – top-level <script> and <style>
-    if (specials.has(name) && parser.stack.length === 1) {
-        const special = specials.get(name);
-        if (parser[special.property]) {
-            parser.index = start;
-            parser.error(`You can only have one top-level <${name}> tag per component`);
-        }
-        parser.eat('>', true);
-        parser[special.property] = special.read(parser, start, element.attributes);
-        return;
-    }
-    parser.current().children.push(element);
-    const selfClosing = parser.eat('/') || isVoidElementName(name);
-    parser.eat('>', true);
-    if (selfClosing) {
-        // don't push self-closing elements onto the stack
-        element.end = parser.index;
-    }
-    else if (name === 'textarea') {
-        // special case
-        element.children = readSequence$1(parser, () => parser.template.slice(parser.index, parser.index + 11) === '</textarea>');
-        parser.read(/<\/textarea>/);
-        element.end = parser.index;
-    }
-    else if (name === 'script') {
-        // special case
-        const start = parser.index;
-        const data = parser.readUntil(/<\/script>/);
-        const end = parser.index;
-        element.children.push({ start, end, type: 'Text', data });
-        parser.eat('</script>', true);
-        element.end = parser.index;
-    }
-    else if (name === 'style') {
-        // special case
-        element.children = readSequence$1(parser, () => parser.template.slice(parser.index, parser.index + 8) === '</style>');
-        parser.read(/<\/style>/);
-        element.end = parser.index;
-    }
-    else {
-        parser.stack.push(element);
-    }
-}
-function readTagName(parser) {
-    const start = parser.index;
-    if (parser.eat(SELF)) {
-        // check we're inside a block, otherwise this
-        // will cause infinite recursion
-        let i = parser.stack.length;
-        let legal = false;
-        while (i--) {
-            const fragment = parser.stack[i];
-            if (fragment.type === 'IfBlock' || fragment.type === 'EachBlock') {
-                legal = true;
-                break;
-            }
-        }
-        if (!legal) {
-            parser.error(`<${SELF}> components can only exist inside if-blocks or each-blocks`, start);
-        }
-        return SELF;
-    }
-    if (parser.eat(COMPONENT))
-        return COMPONENT;
-    const name = parser.readUntil(/(\s|\/|>)/);
-    if (metaTags.has(name))
-        return name;
-    if (!validTagName.test(name)) {
-        parser.error(`Expected valid tag name`, start);
-    }
-    return name;
-}
-function readAttribute(parser, uniqueNames) {
-    const start = parser.index;
-    if (parser.eat('{{')) {
-        parser.allowWhitespace();
-        parser.eat('...', true, 'Expected spread operator (...)');
-        const expression = readExpression(parser);
-        parser.allowWhitespace();
-        parser.eat('}}', true);
-        return {
-            start,
-            end: parser.index,
-            type: 'Spread',
-            expression
-        };
-    }
-    let name = parser.readUntil(/(\s|=|\/|>)/);
-    if (!name)
-        return null;
-    if (uniqueNames.has(name)) {
-        parser.error('Attributes need to be unique', start);
-    }
-    uniqueNames.add(name);
-    parser.allowWhitespace();
-    const attribute = readDirective(parser, start, name);
-    if (attribute)
-        return attribute;
-    let value = parser.eat('=') ? readAttributeValue(parser) : true;
-    return {
-        start,
-        end: parser.index,
-        type: 'Attribute',
-        name,
-        value,
-    };
-}
-function readAttributeValue(parser) {
-    const quoteMark = parser.eat(`'`) ? `'` : parser.eat(`"`) ? `"` : null;
-    const regex = quoteMark === `'`
-        ? /'/
-        : quoteMark === `"` ? /"/ : /[\s"'=<>\/`]/;
-    const value = readSequence$1(parser, () => regex.test(parser.template[parser.index]));
-    if (quoteMark)
-        parser.index += 1;
-    return value;
-}
-function readSequence$1(parser, done) {
-    let currentChunk = {
-        start: parser.index,
-        end: null,
-        type: 'Text',
-        data: '',
-    };
-    const chunks = [];
-    while (parser.index < parser.template.length) {
-        const index = parser.index;
-        if (done()) {
-            currentChunk.end = parser.index;
-            if (currentChunk.data)
-                chunks.push(currentChunk);
-            chunks.forEach(chunk => {
-                if (chunk.type === 'Text')
-                    chunk.data = decodeCharacterReferences(chunk.data);
-            });
-            return chunks;
-        }
-        else if (parser.eat('{{')) {
-            if (currentChunk.data) {
-                currentChunk.end = index;
-                chunks.push(currentChunk);
-            }
-            const expression = readExpression(parser);
-            parser.allowWhitespace();
-            if (!parser.eat('}}')) {
-                parser.error(`Expected }}`);
-            }
-            chunks.push({
-                start: index,
-                end: parser.index,
-                type: 'MustacheTag',
-                expression,
-            });
-            currentChunk = {
-                start: parser.index,
-                end: null,
-                type: 'Text',
-                data: '',
-            };
-        }
-        else {
-            currentChunk.data += parser.template[parser.index++];
-        }
-    }
-    parser.error(`Unexpected end of input`);
-}
-
-const whitespace = /[ \t\r\n]/;
-
-function trimStart(str) {
-    let i = 0;
-    while (whitespace.test(str[i]))
-        i += 1;
-    return str.slice(i);
-}
-function trimEnd(str) {
-    let i = str.length;
-    while (whitespace.test(str[i - 1]))
-        i -= 1;
-    return str.slice(0, i);
-}
-
-function trimWhitespace(block, trimBefore, trimAfter) {
-    if (!block.children || block.children.length === 0)
-        return; // AwaitBlock
-    const firstChild = block.children[0];
-    const lastChild = block.children[block.children.length - 1];
-    if (firstChild.type === 'Text' && trimBefore) {
-        firstChild.data = trimStart(firstChild.data);
-        if (!firstChild.data)
-            block.children.shift();
-    }
-    if (lastChild.type === 'Text' && trimAfter) {
-        lastChild.data = trimEnd(lastChild.data);
-        if (!lastChild.data)
-            block.children.pop();
-    }
-    if (block.else) {
-        trimWhitespace(block.else, trimBefore, trimAfter);
-    }
-    if (firstChild.elseif) {
-        trimWhitespace(firstChild, trimBefore, trimAfter);
-    }
-}
-function mustache(parser) {
-    const start = parser.index;
-    parser.index += 2;
-    parser.allowWhitespace();
-    // {{/if}} or {{/each}}
-    if (parser.eat('/')) {
-        let block = parser.current();
-        let expected;
-        if (block.type === 'ElseBlock' || block.type === 'PendingBlock' || block.type === 'ThenBlock' || block.type === 'CatchBlock') {
-            block.end = start;
-            parser.stack.pop();
-            block = parser.current();
-            expected = 'await';
-        }
-        if (block.type === 'IfBlock') {
-            expected = 'if';
-        }
-        else if (block.type === 'EachBlock') {
-            expected = 'each';
-        }
-        else if (block.type === 'AwaitBlock') {
-            expected = 'await';
-        }
-        else {
-            parser.error(`Unexpected block closing tag`);
-        }
-        parser.eat(expected, true);
-        parser.allowWhitespace();
-        parser.eat('}}', true);
-        while (block.elseif) {
-            block.end = parser.index;
-            parser.stack.pop();
-            block = parser.current();
-            if (block.else) {
-                block.else.end = start;
-            }
-        }
-        // strip leading/trailing whitespace as necessary
-        const charBefore = parser.template[block.start - 1];
-        const charAfter = parser.template[parser.index];
-        const trimBefore = !charBefore || whitespace.test(charBefore);
-        const trimAfter = !charAfter || whitespace.test(charAfter);
-        trimWhitespace(block, trimBefore, trimAfter);
-        block.end = parser.index;
-        parser.stack.pop();
-    }
-    else if (parser.eat('elseif')) {
-        const block = parser.current();
-        if (block.type !== 'IfBlock')
-            parser.error('Cannot have an {{elseif ...}} block outside an {{#if ...}} block');
-        parser.requireWhitespace();
-        const expression = readExpression(parser);
-        parser.allowWhitespace();
-        parser.eat('}}', true);
-        block.else = {
-            start: parser.index,
-            end: null,
-            type: 'ElseBlock',
-            children: [
-                {
-                    start: parser.index,
-                    end: null,
-                    type: 'IfBlock',
-                    elseif: true,
-                    expression,
-                    children: [],
-                },
-            ],
-        };
-        parser.stack.push(block.else.children[0]);
-    }
-    else if (parser.eat('else')) {
-        const block = parser.current();
-        if (block.type !== 'IfBlock' && block.type !== 'EachBlock') {
-            parser.error('Cannot have an {{else}} block outside an {{#if ...}} or {{#each ...}} block');
-        }
-        parser.allowWhitespace();
-        parser.eat('}}', true);
-        block.else = {
-            start: parser.index,
-            end: null,
-            type: 'ElseBlock',
-            children: [],
-        };
-        parser.stack.push(block.else);
-    }
-    else if (parser.eat('then')) {
-        // TODO DRY out this and the next section
-        const pendingBlock = parser.current();
-        if (pendingBlock.type === 'PendingBlock') {
-            pendingBlock.end = start;
-            parser.stack.pop();
-            const awaitBlock = parser.current();
-            parser.requireWhitespace();
-            awaitBlock.value = parser.readIdentifier();
-            parser.allowWhitespace();
-            parser.eat('}}', true);
-            const thenBlock = {
-                start,
-                end: null,
-                type: 'ThenBlock',
-                children: []
-            };
-            awaitBlock.then = thenBlock;
-            parser.stack.push(thenBlock);
-        }
-    }
-    else if (parser.eat('catch')) {
-        const thenBlock = parser.current();
-        if (thenBlock.type === 'ThenBlock') {
-            thenBlock.end = start;
-            parser.stack.pop();
-            const awaitBlock = parser.current();
-            parser.requireWhitespace();
-            awaitBlock.error = parser.readIdentifier();
-            parser.allowWhitespace();
-            parser.eat('}}', true);
-            const catchBlock = {
-                start,
-                end: null,
-                type: 'CatchBlock',
-                children: []
-            };
-            awaitBlock.catch = catchBlock;
-            parser.stack.push(catchBlock);
-        }
-    }
-    else if (parser.eat('#')) {
-        // {{#if foo}} or {{#each foo}}
-        let type;
-        if (parser.eat('if')) {
-            type = 'IfBlock';
-        }
-        else if (parser.eat('each')) {
-            type = 'EachBlock';
-        }
-        else if (parser.eat('await')) {
-            type = 'AwaitBlock';
-        }
-        else {
-            parser.error(`Expected if, each or await`);
-        }
-        parser.requireWhitespace();
-        const expression = readExpression(parser);
-        const block = type === 'AwaitBlock' ?
-            {
-                start,
-                end: null,
-                type,
-                expression,
-                value: null,
-                error: null,
-                pending: {
-                    start: null,
-                    end: null,
-                    type: 'PendingBlock',
-                    children: []
-                },
-                then: {
-                    start: null,
-                    end: null,
-                    type: 'ThenBlock',
-                    children: []
-                },
-                catch: {
-                    start: null,
-                    end: null,
-                    type: 'CatchBlock',
-                    children: []
-                },
-            } :
-            {
-                start,
-                end: null,
-                type,
-                expression,
-                children: [],
-            };
-        parser.allowWhitespace();
-        // {{#each}} blocks must declare a context – {{#each list as item}}
-        if (type === 'EachBlock') {
-            parser.eat('as', true);
-            parser.requireWhitespace();
-            if (parser.eat('[')) {
-                parser.allowWhitespace();
-                block.destructuredContexts = [];
-                do {
-                    parser.allowWhitespace();
-                    const destructuredContext = parser.readIdentifier();
-                    if (!destructuredContext)
-                        parser.error(`Expected name`);
-                    block.destructuredContexts.push(destructuredContext);
-                    parser.allowWhitespace();
-                } while (parser.eat(','));
-                if (!block.destructuredContexts.length)
-                    parser.error(`Expected name`);
-                block.context = block.destructuredContexts.join('_');
-                parser.allowWhitespace();
-                parser.eat(']', true);
-            }
-            else {
-                block.context = parser.readIdentifier();
-                if (!block.context)
-                    parser.error(`Expected name`);
-            }
-            parser.allowWhitespace();
-            if (parser.eat(',')) {
-                parser.allowWhitespace();
-                block.index = parser.readIdentifier();
-                if (!block.index)
-                    parser.error(`Expected name`);
-                parser.allowWhitespace();
-            }
-            if (parser.eat('@')) {
-                block.key = parser.readIdentifier();
-                if (!block.key)
-                    parser.error(`Expected name`);
-                parser.allowWhitespace();
-            }
-        }
-        let awaitBlockShorthand = type === 'AwaitBlock' && parser.eat('then');
-        if (awaitBlockShorthand) {
-            parser.requireWhitespace();
-            block.value = parser.readIdentifier();
-            parser.allowWhitespace();
-        }
-        parser.eat('}}', true);
-        parser.current().children.push(block);
-        parser.stack.push(block);
-        if (type === 'AwaitBlock') {
-            const childBlock = awaitBlockShorthand ? block.then : block.pending;
-            childBlock.start = parser.index;
-            parser.stack.push(childBlock);
-        }
-    }
-    else if (parser.eat('yield')) {
-        // {{yield}}
-        // TODO deprecate
-        parser.allowWhitespace();
-        parser.eat('}}', true);
-        parser.current().children.push({
-            start,
-            end: parser.index,
-            type: 'Element',
-            name: 'slot',
-            attributes: [],
-            children: []
-        });
-    }
-    else if (parser.eat('{')) {
-        // {{{raw}}} mustache
-        const expression = readExpression(parser);
-        parser.allowWhitespace();
-        parser.eat('}}}', true);
-        parser.current().children.push({
-            start,
-            end: parser.index,
-            type: 'RawMustacheTag',
-            expression,
-        });
-    }
-    else {
-        const expression = readExpression(parser);
-        parser.allowWhitespace();
-        parser.eat('}}', true);
-        parser.current().children.push({
-            start,
-            end: parser.index,
-            type: 'MustacheTag',
-            expression,
-        });
-    }
-}
-
-function text(parser) {
-    const start = parser.index;
-    let data = '';
-    while (parser.index < parser.template.length &&
-        !parser.match('<') &&
-        !parser.match('{{')) {
-        data += parser.template[parser.index++];
-    }
-    parser.current().children.push({
-        start,
-        end: parser.index,
-        type: 'Text',
-        data: decodeCharacterReferences(data),
-    });
-}
-
-function fragment(parser) {
-    if (parser.match('<')) {
-        return tag;
-    }
-    if (parser.match('{{')) {
-        return mustache;
-    }
-    return text;
-}
-
-const reservedNames = new Set([
-    'arguments',
-    'await',
-    'break',
-    'case',
-    'catch',
-    'class',
-    'const',
-    'continue',
-    'debugger',
-    'default',
-    'delete',
-    'do',
-    'else',
-    'enum',
-    'eval',
-    'export',
-    'extends',
-    'false',
-    'finally',
-    'for',
-    'function',
-    'if',
-    'implements',
-    'import',
-    'in',
-    'instanceof',
-    'interface',
-    'let',
-    'new',
-    'null',
-    'package',
-    'private',
-    'protected',
-    'public',
-    'return',
-    'static',
-    'super',
-    'switch',
-    'this',
-    'throw',
-    'true',
-    'try',
-    'typeof',
-    'var',
-    'void',
-    'while',
-    'with',
-    'yield',
-]);
-
-// Adapted from https://github.com/acornjs/acorn/blob/6584815dca7440e00de841d1dad152302fdd7ca5/src/tokenize.js
-// Reproduced under MIT License https://github.com/acornjs/acorn/blob/master/LICENSE
-function fullCharCodeAt(str, i) {
-    let code = str.charCodeAt(i);
-    if (code <= 0xd7ff || code >= 0xe000)
-        return code;
-    let next = str.charCodeAt(i + 1);
-    return (code << 10) + next - 0x35fdc00;
-}
-
-// https://github.com/darkskyapp/string-hash/blob/master/index.js
-function hash(str) {
-    let hash = 5381;
-    let i = str.length;
-    while (i--)
-        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
-    return (hash >>> 0).toString(36);
-}
-
-function getLocator(source, options) {
-    if (options === void 0) { options = {}; }
-    var offsetLine = options.offsetLine || 0;
-    var offsetColumn = options.offsetColumn || 0;
-    var originalLines = source.split('\n');
-    var start = 0;
-    var lineRanges = originalLines.map(function (line, i) {
-        var end = start + line.length + 1;
-        var range = { start: start, end: end, line: i };
-        start = end;
-        return range;
-    });
-    var i = 0;
-    function rangeContains(range, index) {
-        return range.start <= index && index < range.end;
-    }
-    function getLocation(range, index) {
-        return { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };
-    }
-    function locate(search, startIndex) {
-        if (typeof search === 'string') {
-            search = source.indexOf(search, startIndex || 0);
-        }
-        var range = lineRanges[i];
-        var d = search >= range.end ? 1 : -1;
-        while (range) {
-            if (rangeContains(range, search))
-                return getLocation(range, search);
-            i += d;
-            range = lineRanges[i];
-        }
-    }
-    return locate;
-}
-function locate(source, search, options) {
-    if (typeof options === 'number') {
-        throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');
-    }
-    return getLocator(source, options)(search, options && options.startIndex);
-}
-
-function tabsToSpaces(str) {
-    return str.replace(/^\t+/, match => match.split('\t').join('  '));
-}
-function getCodeFrame(source, line, column) {
-    const lines = source.split('\n');
-    const frameStart = Math.max(0, line - 2);
-    const frameEnd = Math.min(line + 3, lines.length);
-    const digits = String(frameEnd + 1).length;
-    return lines
-        .slice(frameStart, frameEnd)
-        .map((str, i) => {
-        const isErrorLine = frameStart + i === line;
-        let lineNum = String(i + frameStart + 1);
-        while (lineNum.length < digits)
-            lineNum = ` ${lineNum}`;
-        if (isErrorLine) {
-            const indicator = repeat(' ', digits + 2 + tabsToSpaces(str.slice(0, column)).length) + '^';
-            return `${lineNum}: ${tabsToSpaces(str)}\n${indicator}`;
-        }
-        return `${lineNum}: ${tabsToSpaces(str)}`;
-    })
-        .join('\n');
-}
-
-class CompileError extends Error {
-    toString() {
-        return `${this.message} (${this.loc.line}:${this.loc.column})\n${this.frame}`;
-    }
-}
-function error$1(message, props) {
-    const error = new CompileError(message);
-    error.name = props.name;
-    const start = locate(props.source, props.start);
-    const end = locate(props.source, props.end || props.start);
-    error.loc = { line: start.line + 1, column: start.column };
-    error.end = { line: end.line + 1, column: end.column };
-    error.pos = props.start;
-    error.filename = props.filename;
-    error.frame = getCodeFrame(props.source, start.line, start.column);
-    throw error;
-}
-
-let Parser$1 = class Parser {
-    constructor(template, options) {
-        if (typeof template !== 'string') {
-            throw new TypeError('Template must be a string');
-        }
-        this.template = template.replace(/\s+$/, '');
-        this.filename = options.filename;
-        this.allowBindings = options.bind !== false;
-        this.index = 0;
-        this.stack = [];
-        this.metaTags = {};
-        this.html = {
-            start: null,
-            end: null,
-            type: 'Fragment',
-            children: [],
-        };
-        this.css = null;
-        this.js = null;
-        this.stack.push(this.html);
-        let state = fragment;
-        while (this.index < this.template.length) {
-            state = state(this) || fragment;
-        }
-        if (this.stack.length > 1) {
-            const current = this.current();
-            const type = current.type === 'Element' ? `<${current.name}>` : 'Block';
-            this.error(`${type} was left open`, current.start);
-        }
-        if (state !== fragment) {
-            this.error('Unexpected end of input');
-        }
-        if (this.html.children.length) {
-            let start = this.html.children[0] && this.html.children[0].start;
-            while (/\s/.test(template[start]))
-                start += 1;
-            let end = this.html.children[this.html.children.length - 1] && this.html.children[this.html.children.length - 1].end;
-            while (/\s/.test(template[end - 1]))
-                end -= 1;
-            this.html.start = start;
-            this.html.end = end;
-        }
-        else {
-            this.html.start = this.html.end = null;
-        }
-    }
-    current() {
-        return this.stack[this.stack.length - 1];
-    }
-    acornError(err) {
-        this.error(err.message.replace(/ \(\d+:\d+\)$/, ''), err.pos);
-    }
-    error(message, index = this.index) {
-        error$1(message, {
-            name: 'ParseError',
-            source: this.template,
-            start: index,
-            filename: this.filename
-        });
-    }
-    eat(str, required, message) {
-        if (this.match(str)) {
-            this.index += str.length;
-            return true;
-        }
-        if (required) {
-            this.error(message || `Expected ${str}`);
-        }
-        return false;
-    }
-    match(str) {
-        return this.template.slice(this.index, this.index + str.length) === str;
-    }
-    allowWhitespace() {
-        while (this.index < this.template.length &&
-            whitespace.test(this.template[this.index])) {
-            this.index++;
-        }
-    }
-    read(pattern) {
-        const match = pattern.exec(this.template.slice(this.index));
-        if (!match || match.index !== 0)
-            return null;
-        this.index += match[0].length;
-        return match[0];
-    }
-    readIdentifier() {
-        const start = this.index;
-        let i = this.index;
-        const code = fullCharCodeAt(this.template, i);
-        if (!isIdentifierStart(code, true))
-            return null;
-        i += code <= 0xffff ? 1 : 2;
-        while (i < this.template.length) {
-            const code = fullCharCodeAt(this.template, i);
-            if (!isIdentifierChar(code, true))
-                break;
-            i += code <= 0xffff ? 1 : 2;
-        }
-        const identifier = this.template.slice(this.index, this.index = i);
-        if (reservedNames.has(identifier)) {
-            this.error(`'${identifier}' is a reserved word in JavaScript and cannot be used here`, start);
-        }
-        return identifier;
-    }
-    readUntil(pattern) {
-        if (this.index >= this.template.length)
-            this.error('Unexpected end of input');
-        const start = this.index;
-        const match = pattern.exec(this.template.slice(start));
-        if (match) {
-            this.index = start + match.index;
-            return this.template.slice(start, this.index);
-        }
-        this.index = this.template.length;
-        return this.template.slice(start);
-    }
-    remaining() {
-        return this.template.slice(this.index);
-    }
-    requireWhitespace() {
-        if (!whitespace.test(this.template[this.index])) {
-            this.error(`Expected whitespace`);
-        }
-        this.allowWhitespace();
-    }
-};
-function parse$1(template, options = {}) {
-    const parser = new Parser$1(template, options);
-    return {
-        hash: hash(parser.template),
-        html: parser.html,
-        css: parser.css,
-        js: parser.js,
-    };
-}
-
-const disallowed = new Set(['Literal', 'ObjectExpression', 'ArrayExpression']);
-function data$1(validator, prop) {
-    while (prop.type === 'ParenthesizedExpression')
-        prop = prop.expression;
-    if (disallowed.has(prop.value.type)) {
-        validator.error(`'data' must be a function`, prop.value);
-    }
-}
-
-function getMethodName(node) {
-    if (node.type === 'Identifier')
-        return node.name;
-    if (node.type === 'Literal')
-        return String(node.value);
-}
-
-function checkForDupes(validator, properties) {
-    const seen = new Set();
-    properties.forEach(prop => {
-        const name = getMethodName(prop.key);
-        if (seen.has(name)) {
-            validator.error(`Duplicate property '${name}'`, prop);
-        }
-        seen.add(name);
-    });
-}
-
-function checkForComputedKeys(validator, properties) {
-    properties.forEach(prop => {
-        if (prop.key.computed) {
-            validator.error(`Cannot use computed keys`, prop);
-        }
-    });
-}
-
-function actions(validator, prop) {
-    if (prop.value.type !== 'ObjectExpression') {
-        validator.error(`The 'actions' property must be an object literal`, prop);
-    }
-    checkForDupes(validator, prop.value.properties);
-    checkForComputedKeys(validator, prop.value.properties);
-}
-
-function isValidIdentifier(str) {
-    let i = 0;
-    while (i < str.length) {
-        const code = fullCharCodeAt(str, i);
-        if (!(i === 0 ? isIdentifierStart : isIdentifierChar)(code, true))
-            return false;
-        i += code <= 0xffff ? 1 : 2;
-    }
-    return true;
-}
-
-function walkThroughTopFunctionScope(body, callback) {
-    let lexicalDepth = 0;
-    walk(body, {
-        enter(node) {
-            if (/^Function/.test(node.type)) {
-                lexicalDepth += 1;
-            }
-            else if (lexicalDepth === 0) {
-                callback(node);
-            }
-        },
-        leave(node) {
-            if (/^Function/.test(node.type)) {
-                lexicalDepth -= 1;
-            }
-        },
-    });
-}
-
-function isThisGetCallExpression(node) {
-    return node.type === 'CallExpression' &&
-        node.callee.type === 'MemberExpression' &&
-        node.callee.object.type === 'ThisExpression' &&
-        node.callee.property.name === 'get';
-}
-
-const isFunctionExpression = new Set([
-    'FunctionExpression',
-    'ArrowFunctionExpression',
-]);
-function computed(validator, prop) {
-    if (prop.value.type !== 'ObjectExpression') {
-        validator.error(`The 'computed' property must be an object literal`, prop);
-    }
-    checkForDupes(validator, prop.value.properties);
-    checkForComputedKeys(validator, prop.value.properties);
-    prop.value.properties.forEach((computation) => {
-        const name = getMethodName(computation.key);
-        if (!isValidIdentifier(name)) {
-            const suggestion = name.replace(/[^_$a-z0-9]/ig, '_').replace(/^\d/, '_$&');
-            validator.error(`Computed property name '${name}' is invalid — must be a valid identifier such as ${suggestion}`, computation);
-        }
-        if (reservedNames.has(name)) {
-            validator.error(`Computed property name '${name}' is invalid — cannot be a JavaScript reserved word`, computation);
-        }
-        if (!isFunctionExpression.has(computation.value.type)) {
-            validator.error(`Computed properties can be function expressions or arrow function expressions`, computation.value);
-        }
-        const { body, params } = computation.value;
-        walkThroughTopFunctionScope(body, (node) => {
-            if (isThisGetCallExpression(node) && !node.callee.property.computed) {
-                validator.error(`Cannot use this.get(...) — values must be passed into the function as arguments`, node);
-            }
-            if (node.type === 'ThisExpression') {
-                validator.error(`Computed properties should be pure functions — they do not have access to the component instance and cannot use 'this'. Did you mean to put this in 'methods'?`, node);
-            }
-        });
-        if (params.length === 0) {
-            validator.error(`A computed value must depend on at least one property`, computation.value);
-        }
-        params.forEach((param) => {
-            const valid = param.type === 'Identifier' ||
-                (param.type === 'AssignmentPattern' &&
-                    param.left.type === 'Identifier');
-            if (!valid) {
-                validator.error(`Computed properties cannot use destructuring in function parameters`, param);
-            }
-        });
-    });
-}
-
-function isReference(node, parent) {
-    if (node.type === 'MemberExpression') {
-        return !node.computed && isReference(node.object, node);
-    }
-    if (node.type === 'Identifier') {
-        // the only time we could have an identifier node without a parent is
-        // if it's the entire body of a function without a block statement –
-        // i.e. an arrow function expression like `a => a`
-        if (!parent)
-            return true;
-        // TODO is this right?
-        if (parent.type === 'MemberExpression' || parent.type === 'MethodDefinition') {
-            return parent.computed || node === parent.object;
-        }
-        // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`
-        if (parent.type === 'Property')
-            return parent.computed || node === parent.value;
-        // disregard the `bar` in `export { foo as bar }`
-        if (parent.type === 'ExportSpecifier' && node !== parent.local)
-            return false;
-        return true;
-    }
-    return false;
-}
-
-function usesThisOrArguments(node) {
-    let result = false;
-    walk(node, {
-        enter(node, parent) {
-            if (result ||
-                node.type === 'FunctionExpression' ||
-                node.type === 'FunctionDeclaration') {
-                return this.skip();
-            }
-            if (node.type === 'ThisExpression') {
-                result = true;
-            }
-            if (node.type === 'Identifier' &&
-                isReference(node, parent) &&
-                node.name === 'arguments') {
-                result = true;
-            }
-        },
-    });
-    return result;
-}
-
-function oncreate(validator, prop) {
-    if (prop.value.type === 'ArrowFunctionExpression') {
-        if (usesThisOrArguments(prop.value.body)) {
-            validator.error(`'oncreate' should be a function expression, not an arrow function expression`, prop);
-        }
-    }
-}
-
-function ondestroy(validator, prop) {
-    if (prop.value.type === 'ArrowFunctionExpression') {
-        if (usesThisOrArguments(prop.value.body)) {
-            validator.error(`'ondestroy' should be a function expression, not an arrow function expression`, prop);
-        }
-    }
-}
-
-function onrender(validator, prop) {
-    validator.warn(`'onrender' has been deprecated in favour of 'oncreate', and will cause an error in Svelte 2.x`, prop);
-    oncreate(validator, prop);
-}
-
-function onteardown(validator, prop) {
-    validator.warn(`'onteardown' has been deprecated in favour of 'ondestroy', and will cause an error in Svelte 2.x`, prop);
-    ondestroy(validator, prop);
-}
-
-function helpers(validator, prop) {
-    if (prop.value.type !== 'ObjectExpression') {
-        validator.error(`The 'helpers' property must be an object literal`, prop);
-    }
-    checkForDupes(validator, prop.value.properties);
-    checkForComputedKeys(validator, prop.value.properties);
-    prop.value.properties.forEach((prop) => {
-        if (!/FunctionExpression/.test(prop.value.type))
-            return;
-        let usesArguments = false;
-        walkThroughTopFunctionScope(prop.value.body, (node) => {
-            if (isThisGetCallExpression(node) && !node.callee.property.computed) {
-                validator.error(`Cannot use this.get(...) — values must be passed into the helper function as arguments`, node);
-            }
-            if (node.type === 'ThisExpression') {
-                validator.error(`Helpers should be pure functions — they do not have access to the component instance and cannot use 'this'. Did you mean to put this in 'methods'?`, node);
-            }
-            else if (node.type === 'Identifier' && node.name === 'arguments') {
-                usesArguments = true;
-            }
-        });
-        if (prop.value.params.length === 0 && !usesArguments) {
-            validator.warn(`Helpers should be pure functions, with at least one argument`, prop);
-        }
-    });
-}
-
-function checkForAccessors(validator, properties, label) {
-    properties.forEach(prop => {
-        if (prop.kind !== 'init') {
-            validator.error(`${label} cannot use getters and setters`, prop);
-        }
-    });
-}
-
-const builtin = new Set(['set', 'get', 'on', 'fire', 'observe', 'destroy']);
-function methods(validator, prop) {
-    if (prop.value.type !== 'ObjectExpression') {
-        validator.error(`The 'methods' property must be an object literal`, prop);
-    }
-    checkForAccessors(validator, prop.value.properties, 'Methods');
-    checkForDupes(validator, prop.value.properties);
-    checkForComputedKeys(validator, prop.value.properties);
-    prop.value.properties.forEach((prop) => {
-        const name = getMethodName(prop.key);
-        if (builtin.has(name)) {
-            validator.error(`Cannot overwrite built-in method '${name}'`, prop);
-        }
-        if (prop.value.type === 'ArrowFunctionExpression') {
-            if (usesThisOrArguments(prop.value.body)) {
-                validator.error(`Method '${prop.key
-                    .name}' should be a function expression, not an arrow function expression`, prop);
-            }
-        }
-    });
-}
-
-function components(validator, prop) {
-    if (prop.value.type !== 'ObjectExpression') {
-        validator.error(`The 'components' property must be an object literal`, prop);
-    }
-    checkForDupes(validator, prop.value.properties);
-    checkForComputedKeys(validator, prop.value.properties);
-    prop.value.properties.forEach((component) => {
-        const name = getMethodName(component.key);
-        if (name === 'state') {
-            validator.error(`Component constructors cannot be called 'state' due to technical limitations`, component);
-        }
-        if (!/^[A-Z]/.test(name)) {
-            validator.warn(`Component names should be capitalised`, component);
-        }
-    });
-}
-
-function events(validator, prop) {
-    if (prop.value.type !== 'ObjectExpression') {
-        validator.error(`The 'events' property must be an object literal`, prop);
-    }
-    checkForDupes(validator, prop.value.properties);
-    checkForComputedKeys(validator, prop.value.properties);
-}
-
-const html = 'http://www.w3.org/1999/xhtml';
-const mathml = 'http://www.w3.org/1998/Math/MathML';
-const svg = 'http://www.w3.org/2000/svg';
-const xlink = 'http://www.w3.org/1999/xlink';
-const xml = 'http://www.w3.org/XML/1998/namespace';
-const xmlns = 'http://www.w3.org/2000/xmlns';
-const validNamespaces = [
-    'html',
-    'mathml',
-    'svg',
-    'xlink',
-    'xml',
-    'xmlns',
-    html,
-    mathml,
-    svg,
-    xlink,
-    xml,
-    xmlns,
-];
-const namespaces = { html, mathml, svg, xlink, xml, xmlns };
-
-function nodeToString(node) {
-    if (node.type === 'Literal' && typeof node.value === 'string') {
-        return node.value;
-    }
-    else if (node.type === 'TemplateLiteral'
-        && node.quasis.length === 1
-        && node.expressions.length === 0) {
-        return node.quasis[0].value.raw;
-    }
-}
-
-// adapted from https://github.com/Glench/fuzzyset.js/blob/master/lib/fuzzyset.js
-// BSD Licensed
-const GRAM_SIZE_LOWER = 2;
-const GRAM_SIZE_UPPER = 3;
-// return an edit distance from 0 to 1
-function _distance(str1, str2) {
-    if (str1 === null && str2 === null)
-        throw 'Trying to compare two null values';
-    if (str1 === null || str2 === null)
-        return 0;
-    str1 = String(str1);
-    str2 = String(str2);
-    const distance = levenshtein(str1, str2);
-    if (str1.length > str2.length) {
-        return 1 - distance / str1.length;
-    }
-    else {
-        return 1 - distance / str2.length;
-    }
-}
-// helper functions
-function levenshtein(str1, str2) {
-    const current = [];
-    let prev;
-    let value;
-    for (let i = 0; i <= str2.length; i++) {
-        for (let j = 0; j <= str1.length; j++) {
-            if (i && j) {
-                if (str1.charAt(j - 1) === str2.charAt(i - 1)) {
-                    value = prev;
-                }
-                else {
-                    value = Math.min(current[j], current[j - 1], prev) + 1;
-                }
-            }
-            else {
-                value = i + j;
-            }
-            prev = current[j];
-            current[j] = value;
-        }
-    }
-    return current.pop();
-}
-const _nonWordRe = /[^\w, ]+/;
-function _iterateGrams(value, gramSize) {
-    gramSize = gramSize || 2;
-    const simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-';
-    const lenDiff = gramSize - simplified.length;
-    const results = [];
-    if (lenDiff > 0) {
-        for (let i = 0; i < lenDiff; ++i) {
-            value += '-';
-        }
-    }
-    for (let i = 0; i < simplified.length - gramSize + 1; ++i) {
-        results.push(simplified.slice(i, i + gramSize));
-    }
-    return results;
-}
-function _gramCounter(value, gramSize) {
-    // return an object where key=gram, value=number of occurrences
-    gramSize = gramSize || 2;
-    const result = {};
-    const grams = _iterateGrams(value, gramSize);
-    let i = 0;
-    for (i; i < grams.length; ++i) {
-        if (grams[i] in result) {
-            result[grams[i]] += 1;
-        }
-        else {
-            result[grams[i]] = 1;
-        }
-    }
-    return result;
-}
-function sortDescending(a, b) {
-    return b[0] - a[0];
-}
-class FuzzySet {
-    constructor(arr) {
-        // define all the object functions and attributes
-        this.exactSet = {};
-        this.matchDict = {};
-        this.items = {};
-        // initialization
-        for (let i = GRAM_SIZE_LOWER; i < GRAM_SIZE_UPPER + 1; ++i) {
-            this.items[i] = [];
-        }
-        // add all the items to the set
-        for (let i = 0; i < arr.length; ++i) {
-            this.add(arr[i]);
-        }
-    }
-    add(value) {
-        const normalizedValue = value.toLowerCase();
-        if (normalizedValue in this.exactSet) {
-            return false;
-        }
-        let i = GRAM_SIZE_LOWER;
-        for (i; i < GRAM_SIZE_UPPER + 1; ++i) {
-            this._add(value, i);
-        }
-    }
-    _add(value, gramSize) {
-        const normalizedValue = value.toLowerCase();
-        const items = this.items[gramSize] || [];
-        const index = items.length;
-        items.push(0);
-        const gramCounts = _gramCounter(normalizedValue, gramSize);
-        let sumOfSquareGramCounts = 0;
-        let gram;
-        let gramCount;
-        for (gram in gramCounts) {
-            gramCount = gramCounts[gram];
-            sumOfSquareGramCounts += Math.pow(gramCount, 2);
-            if (gram in this.matchDict) {
-                this.matchDict[gram].push([index, gramCount]);
-            }
-            else {
-                this.matchDict[gram] = [[index, gramCount]];
-            }
-        }
-        const vectorNormal = Math.sqrt(sumOfSquareGramCounts);
-        items[index] = [vectorNormal, normalizedValue];
-        this.items[gramSize] = items;
-        this.exactSet[normalizedValue] = value;
-    }
-    ;
-    get(value) {
-        const normalizedValue = value.toLowerCase();
-        const result = this.exactSet[normalizedValue];
-        if (result) {
-            return [[1, result]];
-        }
-        let results = [];
-        // start with high gram size and if there are no results, go to lower gram sizes
-        for (let gramSize = GRAM_SIZE_UPPER; gramSize >= GRAM_SIZE_LOWER; --gramSize) {
-            results = this.__get(value, gramSize);
-            if (results) {
-                return results;
-            }
-        }
-        return null;
-    }
-    __get(value, gramSize) {
-        const normalizedValue = value.toLowerCase();
-        const matches = {};
-        const gramCounts = _gramCounter(normalizedValue, gramSize);
-        const items = this.items[gramSize];
-        let sumOfSquareGramCounts = 0;
-        let gram;
-        let gramCount;
-        let i;
-        let index;
-        let otherGramCount;
-        for (gram in gramCounts) {
-            gramCount = gramCounts[gram];
-            sumOfSquareGramCounts += Math.pow(gramCount, 2);
-            if (gram in this.matchDict) {
-                for (i = 0; i < this.matchDict[gram].length; ++i) {
-                    index = this.matchDict[gram][i][0];
-                    otherGramCount = this.matchDict[gram][i][1];
-                    if (index in matches) {
-                        matches[index] += gramCount * otherGramCount;
-                    }
-                    else {
-                        matches[index] = gramCount * otherGramCount;
-                    }
-                }
-            }
-        }
-        const vectorNormal = Math.sqrt(sumOfSquareGramCounts);
-        let results = [];
-        let matchScore;
-        // build a results list of [score, str]
-        for (const matchIndex in matches) {
-            matchScore = matches[matchIndex];
-            results.push([
-                matchScore / (vectorNormal * items[matchIndex][0]),
-                items[matchIndex][1],
-            ]);
-        }
-        results.sort(sortDescending);
-        let newResults = [];
-        const endIndex = Math.min(50, results.length);
-        // truncate somewhat arbitrarily to 50
-        for (let i = 0; i < endIndex; ++i) {
-            newResults.push([
-                _distance(results[i][1], normalizedValue),
-                results[i][1],
-            ]);
-        }
-        results = newResults;
-        results.sort(sortDescending);
-        newResults = [];
-        for (let i = 0; i < results.length; ++i) {
-            if (results[i][0] == results[0][0]) {
-                newResults.push([results[i][0], this.exactSet[results[i][1]]]);
-            }
-        }
-        return newResults;
-    }
-    ;
-}
-
-function fuzzymatch(name, names) {
-    const set = new FuzzySet(names);
-    const matches = set.get(name);
-    return matches && matches[0] && matches[0][0] > 0.7 ? matches[0][1] : null;
-}
-
-const valid = new Set(validNamespaces);
-function namespace(validator, prop) {
-    const ns = nodeToString(prop.value);
-    if (typeof ns !== 'string') {
-        validator.error(`The 'namespace' property must be a string literal representing a valid namespace`, prop);
-    }
-    if (!valid.has(ns)) {
-        const match = fuzzymatch(ns, validNamespaces);
-        if (match) {
-            validator.error(`Invalid namespace '${ns}' (did you mean '${match}'?)`, prop);
-        }
-        else {
-            validator.error(`Invalid namespace '${ns}'`, prop);
-        }
-    }
-}
-
-function preload(validator, prop) {
-    // not sure there's anything we need to check here...
-}
-
-function props(validator, prop) {
-    if (prop.value.type !== 'ArrayExpression') {
-        validator.error(`'props' must be an array expression, if specified`, prop.value);
-    }
-    prop.value.elements.forEach((element) => {
-        if (typeof nodeToString(element) !== 'string') {
-            validator.error(`'props' must be an array of string literals`, element);
-        }
-    });
-}
-
-function tag$1(validator, prop) {
-    const tag = nodeToString(prop.value);
-    if (typeof tag !== 'string') {
-        validator.error(`'tag' must be a string literal`, prop.value);
-    }
-    if (!/^[a-zA-Z][a-zA-Z0-9]*-[a-zA-Z0-9-]+$/.test(tag)) {
-        validator.error(`tag name must be two or more words joined by the '-' character`, prop.value);
-    }
-}
-
-function transitions(validator, prop) {
-    if (prop.value.type !== 'ObjectExpression') {
-        validator.error(`The 'transitions' property must be an object literal`, prop);
-    }
-    checkForDupes(validator, prop.value.properties);
-    checkForComputedKeys(validator, prop.value.properties);
-    prop.value.properties.forEach(() => {
-        // TODO probably some validation that can happen here...
-        // checking for use of `this` etc?
-    });
-}
-
-const disallowed$1 = new Set(['Literal', 'ObjectExpression', 'ArrayExpression']);
-function setup(validator, prop) {
-    while (prop.type === 'ParenthesizedExpression')
-        prop = prop.expression;
-    if (disallowed$1.has(prop.value.type)) {
-        validator.error(`'setup' must be a function`, prop.value);
-    }
-}
-
-function store(validator, prop) {
-    // not sure there's anything we need to check here...
-}
-
-function immutable(validator, prop) {
-    if (prop.value.type !== 'Literal' || typeof prop.value.value !== 'boolean') {
-        validator.error(`'immutable' must be a boolean literal`, prop.value);
-    }
-}
-
-var propValidators = {
-    data: data$1,
-    actions,
-    computed,
-    oncreate,
-    ondestroy,
-    onrender,
-    onteardown,
-    helpers,
-    methods,
-    components,
-    events,
-    namespace,
-    preload,
-    props,
-    tag: tag$1,
-    transitions,
-    setup,
-    store,
-    immutable,
-};
-
-const validPropList = Object.keys(propValidators);
-function validateJs(validator, js) {
-    js.content.body.forEach((node) => {
-        // check there are no named exports
-        if (node.type === 'ExportNamedDeclaration') {
-            validator.error(`A component can only have a default export`, node);
-        }
-        if (node.type === 'ExportDefaultDeclaration') {
-            if (node.declaration.type !== 'ObjectExpression') {
-                return validator.error(`Default export must be an object literal`, node.declaration);
-            }
-            checkForComputedKeys(validator, node.declaration.properties);
-            checkForDupes(validator, node.declaration.properties);
-            const props = validator.properties;
-            node.declaration.properties.forEach((prop) => {
-                props.set(getMethodName(prop.key), prop);
-            });
-            // Remove these checks in version 2
-            if (props.has('oncreate') && props.has('onrender')) {
-                validator.error('Cannot have both oncreate and onrender', props.get('onrender'));
-            }
-            if (props.has('ondestroy') && props.has('onteardown')) {
-                validator.error('Cannot have both ondestroy and onteardown', props.get('onteardown'));
-            }
-            // ensure all exported props are valid
-            node.declaration.properties.forEach((prop) => {
-                const name = getMethodName(prop.key);
-                const propValidator = propValidators[name];
-                if (propValidator) {
-                    propValidator(validator, prop);
-                }
-                else {
-                    const match = fuzzymatch(name, validPropList);
-                    if (match) {
-                        validator.error(`Unexpected property '${name}' (did you mean '${match}'?)`, prop);
-                    }
-                    else if (/FunctionExpression/.test(prop.value.type)) {
-                        validator.error(`Unexpected property '${name}' (did you mean to include it in 'methods'?)`, prop);
-                    }
-                    else {
-                        validator.error(`Unexpected property '${name}'`, prop);
-                    }
-                }
-            });
-            if (props.has('namespace')) {
-                const ns = nodeToString(props.get('namespace').value);
-                validator.namespace = namespaces[ns] || ns;
-            }
-            validator.defaultExport = node;
-        }
-    });
-    ['components', 'methods', 'helpers', 'transitions', 'actions'].forEach(key => {
-        if (validator.properties.has(key)) {
-            validator.properties.get(key).value.properties.forEach((prop) => {
-                validator[key].set(getMethodName(prop.key), prop.value);
-            });
-        }
-    });
-}
-
-function flatten(node) {
-    const parts = [];
-    const propEnd = node.end;
-    while (node.type === 'MemberExpression') {
-        if (node.computed)
-            return null;
-        parts.unshift(node.property.name);
-        node = node.object;
-    }
-    const propStart = node.end;
-    const name = node.type === 'Identifier'
-        ? node.name
-        : node.type === 'ThisExpression' ? 'this' : null;
-    if (!name)
-        return null;
-    parts.unshift(name);
-    return { name, parts, keypath: `${name}[✂${propStart}-${propEnd}✂]` };
-}
-
-function list$1(items, conjunction = 'or') {
-    if (items.length === 1)
-        return items[0];
-    return `${items.slice(0, -1).join(', ')} ${conjunction} ${items[items.length - 1]}`;
-}
-
-const validCalleeObjects = new Set(['this', 'event', 'console']);
-
-const validBuiltins = new Set(['set', 'fire', 'destroy']);
-function validateEventHandlerCallee(validator, attribute, refCallees) {
-    if (!attribute.expression)
-        return;
-    const { callee, type } = attribute.expression;
-    if (type !== 'CallExpression') {
-        validator.error(`Expected a call expression`, attribute.expression);
-    }
-    const { name } = flatten(callee);
-    if (validCalleeObjects.has(name) || name === 'options')
-        return;
-    if (name === 'refs') {
-        refCallees.push(callee);
-        return;
-    }
-    if (name === 'store' && attribute.expression.callee.type === 'MemberExpression') {
-        if (!validator.options.store) {
-            validator.warn('compile with `store: true` in order to call store methods', attribute.expression);
-        }
-        return;
-    }
-    if ((callee.type === 'Identifier' && validBuiltins.has(callee.name)) ||
-        validator.methods.has(callee.name))
-        return;
-    const validCallees = ['this.*', 'event.*', 'options.*', 'console.*'].concat(validator.options.store ? 'store.*' : [], Array.from(validBuiltins), Array.from(validator.methods.keys()));
-    let message = `'${validator.source.slice(callee.start, callee.end)}' is an invalid callee (should be one of ${list$1(validCallees)})`;
-    if (callee.type === 'Identifier' && validator.helpers.has(callee.name)) {
-        message += `. '${callee.name}' exists on 'helpers', did you put it in the wrong place?`;
-    }
-    validator.warn(message, attribute.expression);
-}
-
-const svg$1 = /^(?:altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform|circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix|feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting|feSpotLight|feTile|feTurbulence|filter|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern|image|line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata|missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor|stop|switch|symbol|text|textPath|tref|tspan|unknown|use|view|vkern)$/;
-function validateElement(validator, node, refs, refCallees, stack, elementStack, isComponent) {
-    if (isComponent) {
-        validator.used.components.add(node.name);
-    }
-    if (!isComponent && /^[A-Z]/.test(node.name[0])) {
-        // TODO upgrade to validator.error in v2
-        validator.warn(`${node.name} component is not defined`, node);
-    }
-    if (elementStack.length === 0 && validator.namespace !== svg && svg$1.test(node.name)) {
-        validator.warn(`<${node.name}> is an SVG element – did you forget to add { namespace: 'svg' } ?`, node);
-    }
-    if (node.name === 'slot') {
-        const nameAttribute = node.attributes.find((attribute) => attribute.name === 'name');
-        if (nameAttribute) {
-            if (nameAttribute.value.length !== 1 || nameAttribute.value[0].type !== 'Text') {
-                validator.error(`<slot> name cannot be dynamic`, nameAttribute);
-            }
-            const slotName = nameAttribute.value[0].data;
-            if (slotName === 'default') {
-                validator.error(`default is a reserved word — it cannot be used as a slot name`, nameAttribute);
-            }
-            // TODO should duplicate slots be disallowed? Feels like it's more likely to be a
-            // bug than anything. Perhaps it should be a warning
-            // if (validator.slots.has(slotName)) {
-            // 	validator.error(`duplicate '${slotName}' <slot> element`, nameAttribute.start);
-            // }
-            // validator.slots.add(slotName);
-        }
-        else {
-            // if (validator.slots.has('default')) {
-            // 	validator.error(`duplicate default <slot> element`, node.start);
-            // }
-            // validator.slots.add('default');
-        }
-    }
-    if (node.name === 'title') {
-        if (node.attributes.length > 0) {
-            validator.error(`<title> cannot have attributes`, node.attributes[0]);
-        }
-        node.children.forEach(child => {
-            if (child.type !== 'Text' && child.type !== 'MustacheTag') {
-                validator.error(`<title> can only contain text and {{tags}}`, child);
-            }
-        });
-    }
-    let hasIntro;
-    let hasOutro;
-    let hasTransition;
-    node.attributes.forEach((attribute) => {
-        if (attribute.type === 'Ref') {
-            if (!refs.has(attribute.name))
-                refs.set(attribute.name, []);
-            refs.get(attribute.name).push(node);
-        }
-        if (!isComponent && attribute.type === 'Binding') {
-            const { name } = attribute;
-            if (name === 'value') {
-                if (node.name !== 'input' &&
-                    node.name !== 'textarea' &&
-                    node.name !== 'select') {
-                    validator.error(`'value' is not a valid binding on <${node.name}> elements`, attribute);
-                }
-                if (node.name === 'select') {
-                    const attribute = node.attributes.find((attribute) => attribute.name === 'multiple');
-                    if (attribute && isDynamic(attribute)) {
-                        validator.error(`'multiple' attribute cannot be dynamic if select uses two-way binding`, attribute);
-                    }
-                }
-                else {
-                    checkTypeAttribute(validator, node);
-                }
-            }
-            else if (name === 'checked' || name === 'indeterminate') {
-                if (node.name !== 'input') {
-                    validator.error(`'${name}' is not a valid binding on <${node.name}> elements`, attribute);
-                }
-                if (checkTypeAttribute(validator, node) !== 'checkbox') {
-                    validator.error(`'${name}' binding can only be used with <input type="checkbox">`, attribute);
-                }
-            }
-            else if (name === 'group') {
-                if (node.name !== 'input') {
-                    validator.error(`'group' is not a valid binding on <${node.name}> elements`, attribute);
-                }
-                const type = checkTypeAttribute(validator, node);
-                if (type !== 'checkbox' && type !== 'radio') {
-                    validator.error(`'checked' binding can only be used with <input type="checkbox"> or <input type="radio">`, attribute);
-                }
-            }
-            else if (name === 'currentTime' ||
-                name === 'duration' ||
-                name === 'paused' ||
-                name === 'buffered' ||
-                name === 'seekable' ||
-                name === 'played' ||
-                name === 'volume') {
-                if (node.name !== 'audio' && node.name !== 'video') {
-                    validator.error(`'${name}' binding can only be used with <audio> or <video>`, attribute);
-                }
-            }
-            else {
-                validator.error(`'${attribute.name}' is not a valid binding`, attribute);
-            }
-        }
-        else if (attribute.type === 'EventHandler') {
-            validator.used.events.add(attribute.name);
-            validateEventHandlerCallee(validator, attribute, refCallees);
-        }
-        else if (attribute.type === 'Transition') {
-            if (isComponent) {
-                validator.error(`Transitions can only be applied to DOM elements, not components`, attribute);
-            }
-            validator.used.transitions.add(attribute.name);
-            const bidi = attribute.intro && attribute.outro;
-            if (hasTransition) {
-                if (bidi)
-                    validator.error(`An element can only have one 'transition' directive`, attribute);
-                validator.error(`An element cannot have both a 'transition' directive and an '${attribute.intro
-                    ? 'in'
-                    : 'out'}' directive`, attribute);
-            }
-            if ((hasIntro && attribute.intro) || (hasOutro && attribute.outro)) {
-                if (bidi)
-                    validator.error(`An element cannot have both an '${hasIntro
-                        ? 'in'
-                        : 'out'}' directive and a 'transition' directive`, attribute);
-                validator.error(`An element can only have one '${hasIntro ? 'in' : 'out'}' directive`, attribute);
-            }
-            if (attribute.intro)
-                hasIntro = true;
-            if (attribute.outro)
-                hasOutro = true;
-            if (bidi)
-                hasTransition = true;
-            if (!validator.transitions.has(attribute.name)) {
-                validator.error(`Missing transition '${attribute.name}'`, attribute);
-            }
-        }
-        else if (attribute.type === 'Attribute') {
-            if (attribute.name === 'value' && node.name === 'textarea') {
-                if (node.children.length) {
-                    validator.error(`A <textarea> can have either a value attribute or (equivalently) child content, but not both`, attribute);
-                }
-            }
-            if (attribute.name === 'slot' && !isComponent) {
-                checkSlotAttribute(validator, node, attribute, stack);
-            }
-        }
-        else if (attribute.type === 'Action') {
-            if (isComponent) {
-                validator.error(`Actions can only be applied to DOM elements, not components`, attribute);
-            }
-            validator.used.actions.add(attribute.name);
-            if (!validator.actions.has(attribute.name)) {
-                validator.error(`Missing action '${attribute.name}'`, attribute);
-            }
-        }
-    });
-}
-function checkTypeAttribute(validator, node) {
-    const attribute = node.attributes.find((attribute) => attribute.name === 'type');
-    if (!attribute)
-        return null;
-    if (attribute.value === true) {
-        validator.error(`'type' attribute must be specified`, attribute);
-    }
-    if (isDynamic(attribute)) {
-        validator.error(`'type' attribute cannot be dynamic if input uses two-way binding`, attribute);
-    }
-    return attribute.value[0].data;
-}
-function checkSlotAttribute(validator, node, attribute, stack) {
-    if (isDynamic(attribute)) {
-        validator.error(`slot attribute cannot have a dynamic value`, attribute);
-    }
-    let i = stack.length;
-    while (i--) {
-        const parent = stack[i];
-        if (parent.type === 'Element') {
-            // if we're inside a component or a custom element, gravy
-            if (parent.name === ':Self' || parent.name === ':Component' || validator.components.has(parent.name))
-                return;
-            if (/-/.test(parent.name))
-                return;
-        }
-        if (parent.type === 'IfBlock' || parent.type === 'EachBlock') {
-            const message = `Cannot place slotted elements inside an ${parent.type === 'IfBlock' ? 'if' : 'each'}-block`;
-            validator.error(message, attribute);
-        }
-    }
-    validator.error(`Element with a slot='...' attribute must be a descendant of a component or custom element`, attribute);
-}
-function isDynamic(attribute) {
-    if (attribute.value === true)
-        return false;
-    return attribute.value.length > 1 || attribute.value[0].type !== 'Text';
-}
-
-const validBindings = [
-    'innerWidth',
-    'innerHeight',
-    'outerWidth',
-    'outerHeight',
-    'scrollX',
-    'scrollY',
-    'online'
-];
-function validateWindow(validator, node, refs, refCallees) {
-    node.attributes.forEach((attribute) => {
-        if (attribute.type === 'Binding') {
-            if (attribute.value.type !== 'Identifier') {
-                const { parts } = flatten(attribute.value);
-                validator.error(`Bindings on <:Window/> must be to top-level properties, e.g. '${parts[parts.length - 1]}' rather than '${parts.join('.')}'`, attribute.value);
-            }
-            if (!~validBindings.indexOf(attribute.name)) {
-                const match = attribute.name === 'width'
-                    ? 'innerWidth'
-                    : attribute.name === 'height'
-                        ? 'innerHeight'
-                        : fuzzymatch(attribute.name, validBindings);
-                const message = `'${attribute.name}' is not a valid binding on <:Window>`;
-                if (match) {
-                    validator.error(`${message} (did you mean '${match}'?)`, attribute);
-                }
-                else {
-                    validator.error(`${message} — valid bindings are ${list$1(validBindings)}`, attribute);
-                }
-            }
-        }
-        else if (attribute.type === 'EventHandler') {
-            validator.used.events.add(attribute.name);
-            validateEventHandlerCallee(validator, attribute, refCallees);
-        }
-    });
-}
-
-function validateHead(validator, node, refs, refCallees) {
-    if (node.attributes.length) {
-        validator.error(`<:Head> should not have any attributes or directives`, node);
-    }
-    // TODO ensure only valid elements are included here
-    node.children.forEach(node => {
-        if (node.type !== 'Element')
-            return; // TODO handle {{#if}} and friends?
-        validateElement(validator, node, refs, refCallees, [], [], false);
-    });
-}
-
-function getStaticAttributeValue(node, name) {
-    const attribute = node.attributes.find((attr) => attr.name.toLowerCase() === name);
-    if (!attribute)
-        return null;
-    if (attribute.value === true)
-        return true;
-    if (attribute.value.length === 0)
-        return '';
-    if (attribute.value.length === 1 && attribute.value[0].type === 'Text') {
-        return attribute.value[0].data;
-    }
-    return null;
-}
-
-const ariaAttributes = 'activedescendant atomic autocomplete busy checked controls current describedby disabled dropeffect expanded flowto grabbed haspopup hidden invalid label labelledby level live multiline multiselectable orientation owns posinset pressed readonly relevant required selected setsize sort valuemax valuemin valuenow valuetext'.split(' ');
-const ariaAttributeSet = new Set(ariaAttributes);
-const ariaRoles = 'alert alertdialog application article banner button checkbox columnheader combobox command complementary composite contentinfo definition dialog directory document feed form grid gridcell group heading img input landmark link list listbox listitem log main marquee math menu menubar menuitem menuitemcheckbox menuitemradio navigation note option presentation progressbar radio radiogroup range region roletype row rowgroup rowheader scrollbar search section sectionhead select separator slider spinbutton status structure tab tablist tabpanel textbox timer toolbar tooltip tree treegrid treeitem widget window'.split(' ');
-const ariaRoleSet = new Set(ariaRoles);
-const invisibleElements = new Set(['meta', 'html', 'script', 'style']);
-function a11y(validator, node, elementStack) {
-    if (node.type === 'Text') {
-        // accessible-emoji
-        return;
-    }
-    if (node.type !== 'Element')
-        return;
-    const attributeMap = new Map();
-    node.attributes.forEach((attribute) => {
-        if (attribute.type === 'Spread')
-            return;
-        const name = attribute.name.toLowerCase();
-        // aria-props
-        if (name.startsWith('aria-')) {
-            if (invisibleElements.has(node.name)) {
-                // aria-unsupported-elements
-                validator.warn(`A11y: <${node.name}> should not have aria-* attributes`, attribute);
-            }
-            const type = name.slice(5);
-            if (!ariaAttributeSet.has(type)) {
-                const match = fuzzymatch(type, ariaAttributes);
-                let message = `A11y: Unknown aria attribute 'aria-${type}'`;
-                if (match)
-                    message += ` (did you mean '${match}'?)`;
-                validator.warn(message, attribute);
-            }
-        }
-        // aria-role
-        if (name === 'role') {
-            if (invisibleElements.has(node.name)) {
-                // aria-unsupported-elements
-                validator.warn(`A11y: <${node.name}> should not have role attribute`, attribute);
-            }
-            const value = getStaticAttributeValue(node, 'role');
-            if (value && !ariaRoleSet.has(value)) {
-                const match = fuzzymatch(value, ariaRoles);
-                let message = `A11y: Unknown role '${value}'`;
-                if (match)
-                    message += ` (did you mean '${match}'?)`;
-                validator.warn(message, attribute);
-            }
-        }
-        // no-access-key
-        if (name === 'accesskey') {
-            validator.warn(`A11y: Avoid using accesskey`, attribute);
-        }
-        // no-autofocus
-        if (name === 'autofocus') {
-            validator.warn(`A11y: Avoid using autofocus`, attribute);
-        }
-        // scope
-        if (name === 'scope' && node.name !== 'th') {
-            validator.warn(`A11y: The scope attribute should only be used with <th> elements`, attribute);
-        }
-        // tabindex-no-positive
-        if (name === 'tabindex') {
-            const value = getStaticAttributeValue(node, 'tabindex');
-            if (!isNaN(value) && +value > 0) {
-                validator.warn(`A11y: avoid tabindex values above zero`, attribute);
-            }
-        }
-        attributeMap.set(attribute.name, attribute);
-    });
-    function shouldHaveAttribute(attributes, name = node.name) {
-        if (attributes.length === 0 || !attributes.some((name) => attributeMap.has(name))) {
-            const article = /^[aeiou]/.test(attributes[0]) ? 'an' : 'a';
-            const sequence = attributes.length > 1 ?
-                attributes.slice(0, -1).join(', ') + ` or ${attributes[attributes.length - 1]}` :
-                attributes[0];
-            validator.warn(`A11y: <${name}> element should have ${article} ${sequence} attribute`, node);
-        }
-    }
-    function shouldHaveContent() {
-        if (node.children.length === 0) {
-            validator.warn(`A11y: <${node.name}> element should have child content`, node);
-        }
-    }
-    function shouldHaveValidHref(attribute) {
-        const href = attributeMap.get(attribute);
-        const value = getStaticAttributeValue(node, attribute);
-        if (value === '' || value === '#') {
-            validator.warn(`A11y: '${value}' is not a valid ${attribute} attribute`, href);
-        }
-    }
-    if (node.name === 'a') {
-        if (attributeMap.has('href')) {
-            // anchor-is-valid
-            shouldHaveValidHref('href');
-        }
-        else if (attributeMap.has('xlink:href')) {
-            // anchor-in-svg-is-valid
-            shouldHaveValidHref('xlink:href');
-        }
-        else {
-            validator.warn(`A11y: <a> element should have an href attribute`, node);
-        }
-        // anchor-has-content
-        shouldHaveContent();
-    }
-    if (node.name === 'img')
-        shouldHaveAttribute(['alt']);
-    if (node.name === 'area')
-        shouldHaveAttribute(['alt', 'aria-label', 'aria-labelledby']);
-    if (node.name === 'object')
-        shouldHaveAttribute(['title', 'aria-label', 'aria-labelledby']);
-    if (node.name === 'input' && getStaticAttributeValue(node, 'type') === 'image') {
-        shouldHaveAttribute(['alt', 'aria-label', 'aria-labelledby'], 'input type="image"');
-    }
-    // heading-has-content
-    if (/^h[1-6]$/.test(node.name)) {
-        shouldHaveContent();
-        if (attributeMap.has('aria-hidden')) {
-            validator.warn(`A11y: <${node.name}> element should not be hidden`, attributeMap.get('aria-hidden'));
-        }
-    }
-    // iframe-has-title
-    if (node.name === 'iframe') {
-        shouldHaveAttribute(['title']);
-    }
-    // html-has-lang
-    if (node.name === 'html') {
-        shouldHaveAttribute(['lang']);
-    }
-    // no-distracting-elements
-    if (node.name === 'marquee' || node.name === 'blink') {
-        validator.warn(`A11y: Avoid <${node.name}> elements`, node);
-    }
-    if (node.name === 'figcaption') {
-        const parent = elementStack[elementStack.length - 1];
-        if (parent) {
-            if (parent.name !== 'figure') {
-                validator.warn(`A11y: <figcaption> must be an immediate child of <figure>`, node);
-            }
-            else {
-                const children = parent.children.filter(node => {
-                    if (node.type === 'Comment')
-                        return false;
-                    if (node.type === 'Text')
-                        return /\S/.test(node.data);
-                    return true;
-                });
-                const index = children.indexOf(node);
-                if (index !== 0 && index !== children.length - 1) {
-                    validator.warn(`A11y: <figcaption> must be first or last child of <figure>`, node);
-                }
-            }
-        }
-    }
-}
-
-function isEmptyBlock(node) {
-    if (!/Block$/.test(node.type) || !node.children)
-        return false;
-    if (node.children.length > 1)
-        return false;
-    const child = node.children[0];
-    return !child || (child.type === 'Text' && !/\S/.test(child.data));
-}
-function validateHtml(validator, html) {
-    const refs = new Map();
-    const refCallees = [];
-    const stack = [];
-    const elementStack = [];
-    function visit(node) {
-        if (node.type === 'Window') {
-            validateWindow(validator, node, refs, refCallees);
-        }
-        else if (node.type === 'Head') {
-            validateHead(validator, node, refs, refCallees);
-        }
-        else if (node.type === 'Element') {
-            const isComponent = node.name === ':Self' ||
-                node.name === ':Component' ||
-                validator.components.has(node.name);
-            validateElement(validator, node, refs, refCallees, stack, elementStack, isComponent);
-            if (!isComponent) {
-                a11y(validator, node, elementStack);
-            }
-        }
-        else if (node.type === 'EachBlock') {
-            if (validator.helpers.has(node.context)) {
-                let c = node.expression.end;
-                // find start of context
-                while (/\s/.test(validator.source[c]))
-                    c += 1;
-                c += 2;
-                while (/\s/.test(validator.source[c]))
-                    c += 1;
-                validator.warn(`Context clashes with a helper. Rename one or the other to eliminate any ambiguity`, { start: c, end: c + node.context.length });
-            }
-        }
-        if (validator.options.dev && isEmptyBlock(node)) {
-            validator.warn('Empty block', node);
-        }
-        if (node.children) {
-            if (node.type === 'Element')
-                elementStack.push(node);
-            stack.push(node);
-            node.children.forEach(visit);
-            stack.pop();
-            if (node.type === 'Element')
-                elementStack.pop();
-        }
-        if (node.else) {
-            visit(node.else);
-        }
-        if (node.type === 'AwaitBlock') {
-            visit(node.pending);
-            visit(node.then);
-            visit(node.catch);
-        }
-    }
-    html.children.forEach(visit);
-    refCallees.forEach(callee => {
-        const { parts } = flatten(callee);
-        const ref = parts[1];
-        if (refs.has(ref)) {
-            // TODO check method is valid, e.g. `audio.stop()` should be `audio.pause()`
-        }
-        else {
-            const match = fuzzymatch(ref, Array.from(refs.keys()));
-            let message = `'refs.${ref}' does not exist`;
-            if (match)
-                message += ` (did you mean 'refs.${match}'?)`;
-            validator.error(message, callee);
-        }
-    });
-}
-
-class Validator {
-    constructor(parsed, source, options) {
-        this.source = source;
-        this.filename = options.filename;
-        this.onwarn = options.onwarn;
-        this.options = options;
-        this.namespace = null;
-        this.defaultExport = null;
-        this.properties = new Map();
-        this.components = new Map();
-        this.methods = new Map();
-        this.helpers = new Map();
-        this.transitions = new Map();
-        this.actions = new Map();
-        this.slots = new Set();
-        this.used = {
-            components: new Set(),
-            helpers: new Set(),
-            events: new Set(),
-            transitions: new Set(),
-            actions: new Set(),
-        };
-    }
-    error(message, pos) {
-        error$1(message, {
-            name: 'ValidationError',
-            source: this.source,
-            start: pos.start,
-            end: pos.end,
-            filename: this.filename
-        });
-    }
-    warn(message, pos) {
-        if (!this.locator)
-            this.locator = getLocator(this.source);
-        const start = this.locator(pos.start);
-        const end = this.locator(pos.end);
-        const frame = getCodeFrame(this.source, start.line, start.column);
-        this.onwarn({
-            message,
-            frame,
-            loc: { line: start.line + 1, column: start.column },
-            end: { line: end.line + 1, column: end.column },
-            pos: pos.start,
-            filename: this.filename,
-            toString: () => `${message} (${start.line + 1}:${start.column})\n${frame}`,
-        });
-    }
-}
-function validate(parsed, source, stylesheet, options) {
-    const { onwarn, onerror, name, filename, store, dev } = options;
-    try {
-        if (name && !/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(name)) {
-            const error = new Error(`options.name must be a valid identifier (got '${name}')`);
-            throw error;
-        }
-        if (name && /^[a-z]/.test(name)) {
-            const message = `options.name should be capitalised`;
-            onwarn({
-                message,
-                filename,
-                toString: () => message,
-            });
-        }
-        const validator = new Validator(parsed, source, {
-            onwarn,
-            name,
-            filename,
-            store,
-            dev
-        });
-        if (parsed.js) {
-            validateJs(validator, parsed.js);
-        }
-        if (parsed.css) {
-            stylesheet.validate(validator);
-        }
-        if (parsed.html) {
-            validateHtml(validator, parsed.html);
-        }
-        // need to do a second pass of the JS, now that we've analysed the markup
-        if (parsed.js && validator.defaultExport) {
-            const categories = {
-                components: 'component',
-                // TODO helpers require a bit more work — need to analyse all expressions
-                // helpers: 'helper',
-                events: 'event definition',
-                transitions: 'transition',
-                actions: 'actions',
-            };
-            Object.keys(categories).forEach(category => {
-                const definitions = validator.defaultExport.declaration.properties.find(prop => prop.key.name === category);
-                if (definitions) {
-                    definitions.value.properties.forEach(prop => {
-                        const { name } = prop.key;
-                        if (!validator.used[category].has(name)) {
-                            validator.warn(`The '${name}' ${categories[category]} is unused`, prop);
-                        }
-                    });
-                }
-            });
-        }
-    }
-    catch (err) {
-        if (onerror) {
-            onerror(err);
-        }
-        else {
-            throw err;
-        }
-    }
-}
-
-var integerToChar = {};
-
-'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {
-	integerToChar[ i ] = char;
-});
-
-function encode ( value ) {
-	var result;
-
-	if ( typeof value === 'number' ) {
-		result = encodeInteger( value );
-	} else {
-		result = '';
-		for ( var i = 0; i < value.length; i += 1 ) {
-			result += encodeInteger( value[i] );
-		}
-	}
-
-	return result;
-}
-
-function encodeInteger ( num ) {
-	var result = '';
-
-	if ( num < 0 ) {
-		num = ( -num << 1 ) | 1;
-	} else {
-		num <<= 1;
-	}
-
-	do {
-		var clamped = num & 31;
-		num >>= 5;
-
-		if ( num > 0 ) {
-			clamped |= 32;
-		}
-
-		result += integerToChar[ clamped ];
-	} while ( num > 0 );
-
-	return result;
-}
-
-function Chunk ( start, end, content ) {
-	this.start = start;
-	this.end = end;
-	this.original = content;
-
-	this.intro = '';
-	this.outro = '';
-
-	this.content = content;
-	this.storeName = false;
-	this.edited = false;
-
-	// we make these non-enumerable, for sanity while debugging
-	Object.defineProperties( this, {
-		previous: { writable: true, value: null },
-		next: { writable: true, value: null }
-	});
-}
-
-Chunk.prototype = {
-	appendLeft: function appendLeft ( content ) {
-		this.outro += content;
-	},
-
-	appendRight: function appendRight ( content ) {
-		this.intro = this.intro + content;
-	},
-
-	clone: function clone () {
-		var chunk = new Chunk( this.start, this.end, this.original );
-
-		chunk.intro = this.intro;
-		chunk.outro = this.outro;
-		chunk.content = this.content;
-		chunk.storeName = this.storeName;
-		chunk.edited = this.edited;
-
-		return chunk;
-	},
-
-	contains: function contains ( index ) {
-		return this.start < index && index < this.end;
-	},
-
-	eachNext: function eachNext ( fn ) {
-		var chunk = this;
-		while ( chunk ) {
-			fn( chunk );
-			chunk = chunk.next;
-		}
-	},
-
-	eachPrevious: function eachPrevious ( fn ) {
-		var chunk = this;
-		while ( chunk ) {
-			fn( chunk );
-			chunk = chunk.previous;
-		}
-	},
-
-	edit: function edit ( content, storeName, contentOnly ) {
-		this.content = content;
-		if ( !contentOnly ) {
-			this.intro = '';
-			this.outro = '';
-		}
-		this.storeName = storeName;
-
-		this.edited = true;
-
-		return this;
-	},
-
-	prependLeft: function prependLeft ( content ) {
-		this.outro = content + this.outro;
-	},
-
-	prependRight: function prependRight ( content ) {
-		this.intro = content + this.intro;
-	},
-
-	split: function split ( index ) {
-		var sliceIndex = index - this.start;
-
-		var originalBefore = this.original.slice( 0, sliceIndex );
-		var originalAfter = this.original.slice( sliceIndex );
-
-		this.original = originalBefore;
-
-		var newChunk = new Chunk( index, this.end, originalAfter );
-		newChunk.outro = this.outro;
-		this.outro = '';
-
-		this.end = index;
-
-		if ( this.edited ) {
-			// TODO is this block necessary?...
-			newChunk.edit( '', false );
-			this.content = '';
-		} else {
-			this.content = originalBefore;
-		}
-
-		newChunk.next = this.next;
-		if ( newChunk.next ) { newChunk.next.previous = newChunk; }
-		newChunk.previous = this;
-		this.next = newChunk;
-
-		return newChunk;
-	},
-
-	toString: function toString () {
-		return this.intro + this.content + this.outro;
-	},
-
-	trimEnd: function trimEnd ( rx ) {
-		this.outro = this.outro.replace( rx, '' );
-		if ( this.outro.length ) { return true; }
-
-		var trimmed = this.content.replace( rx, '' );
-
-		if ( trimmed.length ) {
-			if ( trimmed !== this.content ) {
-				this.split( this.start + trimmed.length ).edit( '', false );
-			}
-
-			return true;
-		} else {
-			this.edit( '', false );
-
-			this.intro = this.intro.replace( rx, '' );
-			if ( this.intro.length ) { return true; }
-		}
-	},
-
-	trimStart: function trimStart ( rx ) {
-		this.intro = this.intro.replace( rx, '' );
-		if ( this.intro.length ) { return true; }
-
-		var trimmed = this.content.replace( rx, '' );
-
-		if ( trimmed.length ) {
-			if ( trimmed !== this.content ) {
-				this.split( this.end - trimmed.length );
-				this.edit( '', false );
-			}
-
-			return true;
-		} else {
-			this.edit( '', false );
-
-			this.outro = this.outro.replace( rx, '' );
-			if ( this.outro.length ) { return true; }
-		}
-	}
-};
-
-var _btoa;
-
-if ( typeof window !== 'undefined' && typeof window.btoa === 'function' ) {
-	_btoa = window.btoa;
-} else if ( typeof Buffer === 'function' ) {
-	_btoa = function (str) { return new Buffer( str ).toString( 'base64' ); };
-} else {
-	_btoa = function () {
-		throw new Error( 'Unsupported environment: `window.btoa` or `Buffer` should be supported.' );
-	};
-}
-
-var btoa = _btoa;
-
-function SourceMap ( properties ) {
-	this.version = 3;
-
-	this.file           = properties.file;
-	this.sources        = properties.sources;
-	this.sourcesContent = properties.sourcesContent;
-	this.names          = properties.names;
-	this.mappings       = properties.mappings;
-}
-
-SourceMap.prototype = {
-	toString: function toString () {
-		return JSON.stringify( this );
-	},
-
-	toUrl: function toUrl () {
-		return 'data:application/json;charset=utf-8;base64,' + btoa( this.toString() );
-	}
-};
-
-function guessIndent ( code ) {
-	var lines = code.split( '\n' );
-
-	var tabbed = lines.filter( function (line) { return /^\t+/.test( line ); } );
-	var spaced = lines.filter( function (line) { return /^ {2,}/.test( line ); } );
-
-	if ( tabbed.length === 0 && spaced.length === 0 ) {
-		return null;
-	}
-
-	// More lines tabbed than spaced? Assume tabs, and
-	// default to tabs in the case of a tie (or nothing
-	// to go on)
-	if ( tabbed.length >= spaced.length ) {
-		return '\t';
-	}
-
-	// Otherwise, we need to guess the multiple
-	var min = spaced.reduce( function ( previous, current ) {
-		var numSpaces = /^ +/.exec( current )[0].length;
-		return Math.min( numSpaces, previous );
-	}, Infinity );
-
-	return new Array( min + 1 ).join( ' ' );
-}
-
-function getRelativePath ( from, to ) {
-	var fromParts = from.split( /[\/\\]/ );
-	var toParts = to.split( /[\/\\]/ );
-
-	fromParts.pop(); // get dirname
-
-	while ( fromParts[0] === toParts[0] ) {
-		fromParts.shift();
-		toParts.shift();
-	}
-
-	if ( fromParts.length ) {
-		var i = fromParts.length;
-		while ( i-- ) { fromParts[i] = '..'; }
-	}
-
-	return fromParts.concat( toParts ).join( '/' );
-}
-
-var toString$1$1 = Object.prototype.toString;
-
-function isObject ( thing ) {
-	return toString$1$1.call( thing ) === '[object Object]';
-}
-
-function getLocator$1 ( source ) {
-	var originalLines = source.split( '\n' );
-
-	var start = 0;
-	var lineRanges = originalLines.map( function ( line, i ) {
-		var end = start + line.length + 1;
-		var range = { start: start, end: end, line: i };
-
-		start = end;
-		return range;
-	});
-
-	var i = 0;
-
-	function rangeContains ( range, index ) {
-		return range.start <= index && index < range.end;
-	}
-
-	function getLocation ( range, index ) {
-		return { line: range.line, column: index - range.start };
-	}
-
-	return function locate ( index ) {
-		var range = lineRanges[i];
-
-		var d = index >= range.end ? 1 : -1;
-
-		while ( range ) {
-			if ( rangeContains( range, index ) ) { return getLocation( range, index ); }
-
-			i += d;
-			range = lineRanges[i];
-		}
-	};
-}
-
-function Mappings ( hires ) {
-	var this$1 = this;
-
-	var offsets = {
-		generatedCodeColumn: 0,
-		sourceIndex: 0,
-		sourceCodeLine: 0,
-		sourceCodeColumn: 0,
-		sourceCodeName: 0
-	};
-
-	var generatedCodeLine = 0;
-	var generatedCodeColumn = 0;
-
-	this.raw = [];
-	var rawSegments = this.raw[ generatedCodeLine ] = [];
-
-	var pending = null;
-
-	this.addEdit = function ( sourceIndex, content, original, loc, nameIndex ) {
-		if ( content.length ) {
-			rawSegments.push([
-				generatedCodeColumn,
-				sourceIndex,
-				loc.line,
-				loc.column,
-				nameIndex ]);
-		} else if ( pending ) {
-			rawSegments.push( pending );
-		}
-
-		this$1.advance( content );
-		pending = null;
-	};
-
-	this.addUneditedChunk = function ( sourceIndex, chunk, original, loc, sourcemapLocations ) {
-		var originalCharIndex = chunk.start;
-		var first = true;
-
-		while ( originalCharIndex < chunk.end ) {
-			if ( hires || first || sourcemapLocations[ originalCharIndex ] ) {
-				rawSegments.push([
-					generatedCodeColumn,
-					sourceIndex,
-					loc.line,
-					loc.column,
-					-1
-				]);
-			}
-
-			if ( original[ originalCharIndex ] === '\n' ) {
-				loc.line += 1;
-				loc.column = 0;
-				generatedCodeLine += 1;
-				this$1.raw[ generatedCodeLine ] = rawSegments = [];
-				generatedCodeColumn = 0;
-			} else {
-				loc.column += 1;
-				generatedCodeColumn += 1;
-			}
-
-			originalCharIndex += 1;
-			first = false;
-		}
-
-		pending = [
-			generatedCodeColumn,
-			sourceIndex,
-			loc.line,
-			loc.column,
-			-1 ];
-	};
-
-	this.advance = function (str) {
-		if ( !str ) { return; }
-
-		var lines = str.split( '\n' );
-		var lastLine = lines.pop();
-
-		if ( lines.length ) {
-			generatedCodeLine += lines.length;
-			this$1.raw[ generatedCodeLine ] = rawSegments = [];
-			generatedCodeColumn = lastLine.length;
-		} else {
-			generatedCodeColumn += lastLine.length;
-		}
-	};
-
-	this.encode = function () {
-		return this$1.raw.map( function (segments) {
-			var generatedCodeColumn = 0;
-
-			return segments.map( function (segment) {
-				var arr = [
-					segment[0] - generatedCodeColumn,
-					segment[1] - offsets.sourceIndex,
-					segment[2] - offsets.sourceCodeLine,
-					segment[3] - offsets.sourceCodeColumn
-				];
-
-				generatedCodeColumn = segment[0];
-				offsets.sourceIndex = segment[1];
-				offsets.sourceCodeLine = segment[2];
-				offsets.sourceCodeColumn = segment[3];
-
-				if ( ~segment[4] ) {
-					arr.push( segment[4] - offsets.sourceCodeName );
-					offsets.sourceCodeName = segment[4];
-				}
-
-				return encode( arr );
-			}).join( ',' );
-		}).join( ';' );
-	};
-}
-
-var warned = {
-	insertLeft: false,
-	insertRight: false,
-	storeName: false
-};
-
-function MagicString$1 ( string, options ) {
-	if ( options === void 0 ) options = {};
-
-	var chunk = new Chunk( 0, string.length, string );
-
-	Object.defineProperties( this, {
-		original:              { writable: true, value: string },
-		outro:                 { writable: true, value: '' },
-		intro:                 { writable: true, value: '' },
-		firstChunk:            { writable: true, value: chunk },
-		lastChunk:             { writable: true, value: chunk },
-		lastSearchedChunk:     { writable: true, value: chunk },
-		byStart:               { writable: true, value: {} },
-		byEnd:                 { writable: true, value: {} },
-		filename:              { writable: true, value: options.filename },
-		indentExclusionRanges: { writable: true, value: options.indentExclusionRanges },
-		sourcemapLocations:    { writable: true, value: {} },
-		storedNames:           { writable: true, value: {} },
-		indentStr:             { writable: true, value: guessIndent( string ) }
-	});
-
-	this.byStart[ 0 ] = chunk;
-	this.byEnd[ string.length ] = chunk;
-}
-
-MagicString$1.prototype = {
-	addSourcemapLocation: function addSourcemapLocation ( char ) {
-		this.sourcemapLocations[ char ] = true;
-	},
-
-	append: function append ( content ) {
-		if ( typeof content !== 'string' ) { throw new TypeError( 'outro content must be a string' ); }
-
-		this.outro += content;
-		return this;
-	},
-
-	appendLeft: function appendLeft ( index, content ) {
-		if ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }
-
-		this._split( index );
-
-		var chunk = this.byEnd[ index ];
-
-		if ( chunk ) {
-			chunk.appendLeft( content );
-		} else {
-			this.intro += content;
-		}
-
-		return this;
-	},
-
-	appendRight: function appendRight ( index, content ) {
-		if ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }
-
-		this._split( index );
-
-		var chunk = this.byStart[ index ];
-
-		if ( chunk ) {
-			chunk.appendRight( content );
-		} else {
-			this.outro += content;
-		}
-
-		return this;
-	},
-
-	clone: function clone () {
-		var cloned = new MagicString$1( this.original, { filename: this.filename });
-
-		var originalChunk = this.firstChunk;
-		var clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();
-
-		while ( originalChunk ) {
-			cloned.byStart[ clonedChunk.start ] = clonedChunk;
-			cloned.byEnd[ clonedChunk.end ] = clonedChunk;
-
-			var nextOriginalChunk = originalChunk.next;
-			var nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();
-
-			if ( nextClonedChunk ) {
-				clonedChunk.next = nextClonedChunk;
-				nextClonedChunk.previous = clonedChunk;
-
-				clonedChunk = nextClonedChunk;
-			}
-
-			originalChunk = nextOriginalChunk;
-		}
-
-		cloned.lastChunk = clonedChunk;
-
-		if ( this.indentExclusionRanges ) {
-			cloned.indentExclusionRanges = this.indentExclusionRanges.slice();
-		}
-
-		Object.keys( this.sourcemapLocations ).forEach( function (loc) {
-			cloned.sourcemapLocations[ loc ] = true;
-		});
-
-		return cloned;
-	},
-
-	generateMap: function generateMap ( options ) {
-		var this$1 = this;
-
-		options = options || {};
-
-		var sourceIndex = 0;
-		var names = Object.keys( this.storedNames );
-		var mappings = new Mappings( options.hires );
-
-		var locate = getLocator$1( this.original );
-
-		if ( this.intro ) {
-			mappings.advance( this.intro );
-		}
-
-		this.firstChunk.eachNext( function (chunk) {
-			var loc = locate( chunk.start );
-
-			if ( chunk.intro.length ) { mappings.advance( chunk.intro ); }
-
-			if ( chunk.edited ) {
-				mappings.addEdit( sourceIndex, chunk.content, chunk.original, loc, chunk.storeName ? names.indexOf( chunk.original ) : -1 );
-			} else {
-				mappings.addUneditedChunk( sourceIndex, chunk, this$1.original, loc, this$1.sourcemapLocations );
-			}
-
-			if ( chunk.outro.length ) { mappings.advance( chunk.outro ); }
-		});
-
-		var map = new SourceMap({
-			file: ( options.file ? options.file.split( /[\/\\]/ ).pop() : null ),
-			sources: [ options.source ? getRelativePath( options.file || '', options.source ) : null ],
-			sourcesContent: options.includeContent ? [ this.original ] : [ null ],
-			names: names,
-			mappings: mappings.encode()
-		});
-		return map;
-	},
-
-	getIndentString: function getIndentString () {
-		return this.indentStr === null ? '\t' : this.indentStr;
-	},
-
-	indent: function indent ( indentStr, options ) {
-		var this$1 = this;
-
-		var pattern = /^[^\r\n]/gm;
-
-		if ( isObject( indentStr ) ) {
-			options = indentStr;
-			indentStr = undefined;
-		}
-
-		indentStr = indentStr !== undefined ? indentStr : ( this.indentStr || '\t' );
-
-		if ( indentStr === '' ) { return this; } // noop
-
-		options = options || {};
-
-		// Process exclusion ranges
-		var isExcluded = {};
-
-		if ( options.exclude ) {
-			var exclusions = typeof options.exclude[0] === 'number' ? [ options.exclude ] : options.exclude;
-			exclusions.forEach( function (exclusion) {
-				for ( var i = exclusion[0]; i < exclusion[1]; i += 1 ) {
-					isExcluded[i] = true;
-				}
-			});
-		}
-
-		var shouldIndentNextCharacter = options.indentStart !== false;
-		var replacer = function (match) {
-			if ( shouldIndentNextCharacter ) { return ("" + indentStr + match); }
-			shouldIndentNextCharacter = true;
-			return match;
-		};
-
-		this.intro = this.intro.replace( pattern, replacer );
-
-		var charIndex = 0;
-
-		var chunk = this.firstChunk;
-
-		while ( chunk ) {
-			var end = chunk.end;
-
-			if ( chunk.edited ) {
-				if ( !isExcluded[ charIndex ] ) {
-					chunk.content = chunk.content.replace( pattern, replacer );
-
-					if ( chunk.content.length ) {
-						shouldIndentNextCharacter = chunk.content[ chunk.content.length - 1 ] === '\n';
-					}
-				}
-			} else {
-				charIndex = chunk.start;
-
-				while ( charIndex < end ) {
-					if ( !isExcluded[ charIndex ] ) {
-						var char = this$1.original[ charIndex ];
-
-						if ( char === '\n' ) {
-							shouldIndentNextCharacter = true;
-						} else if ( char !== '\r' && shouldIndentNextCharacter ) {
-							shouldIndentNextCharacter = false;
-
-							if ( charIndex === chunk.start ) {
-								chunk.prependRight( indentStr );
-							} else {
-								this$1._splitChunk( chunk, charIndex );
-								chunk = chunk.next;
-								chunk.prependRight( indentStr );
-							}
-						}
-					}
-
-					charIndex += 1;
-				}
-			}
-
-			charIndex = chunk.end;
-			chunk = chunk.next;
-		}
-
-		this.outro = this.outro.replace( pattern, replacer );
-
-		return this;
-	},
-
-	insert: function insert () {
-		throw new Error( 'magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)' );
-	},
-
-	insertLeft: function insertLeft ( index, content ) {
-		if ( !warned.insertLeft ) {
-			console.warn( 'magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead' ); // eslint-disable-line no-console
-			warned.insertLeft = true;
-		}
-
-		return this.appendLeft( index, content );
-	},
-
-	insertRight: function insertRight ( index, content ) {
-		if ( !warned.insertRight ) {
-			console.warn( 'magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead' ); // eslint-disable-line no-console
-			warned.insertRight = true;
-		}
-
-		return this.prependRight( index, content );
-	},
-
-	move: function move ( start, end, index ) {
-		if ( index >= start && index <= end ) { throw new Error( 'Cannot move a selection inside itself' ); }
-
-		this._split( start );
-		this._split( end );
-		this._split( index );
-
-		var first = this.byStart[ start ];
-		var last = this.byEnd[ end ];
-
-		var oldLeft = first.previous;
-		var oldRight = last.next;
-
-		var newRight = this.byStart[ index ];
-		if ( !newRight && last === this.lastChunk ) { return this; }
-		var newLeft = newRight ? newRight.previous : this.lastChunk;
-
-		if ( oldLeft ) { oldLeft.next = oldRight; }
-		if ( oldRight ) { oldRight.previous = oldLeft; }
-
-		if ( newLeft ) { newLeft.next = first; }
-		if ( newRight ) { newRight.previous = last; }
-
-		if ( !first.previous ) { this.firstChunk = last.next; }
-		if ( !last.next ) {
-			this.lastChunk = first.previous;
-			this.lastChunk.next = null;
-		}
-
-		first.previous = newLeft;
-		last.next = newRight || null;
-
-		if ( !newLeft ) { this.firstChunk = first; }
-		if ( !newRight ) { this.lastChunk = last; }
-
-		return this;
-	},
-
-	overwrite: function overwrite ( start, end, content, options ) {
-		var this$1 = this;
-
-		if ( typeof content !== 'string' ) { throw new TypeError( 'replacement content must be a string' ); }
-
-		while ( start < 0 ) { start += this$1.original.length; }
-		while ( end < 0 ) { end += this$1.original.length; }
-
-		if ( end > this.original.length ) { throw new Error( 'end is out of bounds' ); }
-		if ( start === end ) { throw new Error( 'Cannot overwrite a zero-length range – use appendLeft or prependRight instead' ); }
-
-		this._split( start );
-		this._split( end );
-
-		if ( options === true ) {
-			if ( !warned.storeName ) {
-				console.warn( 'The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string' ); // eslint-disable-line no-console
-				warned.storeName = true;
-			}
-
-			options = { storeName: true };
-		}
-		var storeName = options !== undefined ? options.storeName : false;
-		var contentOnly = options !== undefined ? options.contentOnly : false;
-
-		if ( storeName ) {
-			var original = this.original.slice( start, end );
-			this.storedNames[ original ] = true;
-		}
-
-		var first = this.byStart[ start ];
-		var last = this.byEnd[ end ];
-
-		if ( first ) {
-			if ( end > first.end && first.next !== this.byStart[ first.end ] ) {
-				throw new Error( 'Cannot overwrite across a split point' );
-			}
-
-			first.edit( content, storeName, contentOnly );
-
-			if ( first !== last ) {
-				var chunk = first.next;
-				while ( chunk !== last ) {
-					chunk.edit( '', false );
-					chunk = chunk.next;
-				}
-
-				chunk.edit( '', false );
-			}
-		}
-
-		else {
-			// must be inserting at the end
-			var newChunk = new Chunk( start, end, '' ).edit( content, storeName );
-
-			// TODO last chunk in the array may not be the last chunk, if it's moved...
-			last.next = newChunk;
-			newChunk.previous = last;
-		}
-
-		return this;
-	},
-
-	prepend: function prepend ( content ) {
-		if ( typeof content !== 'string' ) { throw new TypeError( 'outro content must be a string' ); }
-
-		this.intro = content + this.intro;
-		return this;
-	},
-
-	prependLeft: function prependLeft ( index, content ) {
-		if ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }
-
-		this._split( index );
-
-		var chunk = this.byEnd[ index ];
-
-		if ( chunk ) {
-			chunk.prependLeft( content );
-		} else {
-			this.intro = content + this.intro;
-		}
-
-		return this;
-	},
-
-	prependRight: function prependRight ( index, content ) {
-		if ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }
-
-		this._split( index );
-
-		var chunk = this.byStart[ index ];
-
-		if ( chunk ) {
-			chunk.prependRight( content );
-		} else {
-			this.outro = content + this.outro;
-		}
-
-		return this;
-	},
-
-	remove: function remove ( start, end ) {
-		var this$1 = this;
-
-		while ( start < 0 ) { start += this$1.original.length; }
-		while ( end < 0 ) { end += this$1.original.length; }
-
-		if ( start === end ) { return this; }
-
-		if ( start < 0 || end > this.original.length ) { throw new Error( 'Character is out of bounds' ); }
-		if ( start > end ) { throw new Error( 'end must be greater than start' ); }
-
-		this._split( start );
-		this._split( end );
-
-		var chunk = this.byStart[ start ];
-
-		while ( chunk ) {
-			chunk.intro = '';
-			chunk.outro = '';
-			chunk.edit( '' );
-
-			chunk = end > chunk.end ? this$1.byStart[ chunk.end ] : null;
-		}
-
-		return this;
-	},
-
-	slice: function slice ( start, end ) {
-		var this$1 = this;
-		if ( start === void 0 ) start = 0;
-		if ( end === void 0 ) end = this.original.length;
-
-		while ( start < 0 ) { start += this$1.original.length; }
-		while ( end < 0 ) { end += this$1.original.length; }
-
-		var result = '';
-
-		// find start chunk
-		var chunk = this.firstChunk;
-		while ( chunk && ( chunk.start > start || chunk.end <= start ) ) {
-
-			// found end chunk before start
-			if ( chunk.start < end && chunk.end >= end ) {
-				return result;
-			}
-
-			chunk = chunk.next;
-		}
-
-		if ( chunk && chunk.edited && chunk.start !== start ) { throw new Error(("Cannot use replaced character " + start + " as slice start anchor.")); }
-
-		var startChunk = chunk;
-		while ( chunk ) {
-			if ( chunk.intro && ( startChunk !== chunk || chunk.start === start ) ) {
-				result += chunk.intro;
-			}
-
-			var containsEnd = chunk.start < end && chunk.end >= end;
-			if ( containsEnd && chunk.edited && chunk.end !== end ) { throw new Error(("Cannot use replaced character " + end + " as slice end anchor.")); }
-
-			var sliceStart = startChunk === chunk ? start - chunk.start : 0;
-			var sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;
-
-			result += chunk.content.slice( sliceStart, sliceEnd );
-
-			if ( chunk.outro && ( !containsEnd || chunk.end === end ) ) {
-				result += chunk.outro;
-			}
-
-			if ( containsEnd ) {
-				break;
-			}
-
-			chunk = chunk.next;
-		}
-
-		return result;
-	},
-
-	// TODO deprecate this? not really very useful
-	snip: function snip ( start, end ) {
-		var clone = this.clone();
-		clone.remove( 0, start );
-		clone.remove( end, clone.original.length );
-
-		return clone;
-	},
-
-	_split: function _split ( index ) {
-		var this$1 = this;
-
-		if ( this.byStart[ index ] || this.byEnd[ index ] ) { return; }
-
-		var chunk = this.lastSearchedChunk;
-		var searchForward = index > chunk.end;
-
-		while ( true ) {
-			if ( chunk.contains( index ) ) { return this$1._splitChunk( chunk, index ); }
-
-			chunk = searchForward ?
-				this$1.byStart[ chunk.end ] :
-				this$1.byEnd[ chunk.start ];
-		}
-	},
-
-	_splitChunk: function _splitChunk ( chunk, index ) {
-		if ( chunk.edited && chunk.content.length ) { // zero-length edited chunks are a special case (overlapping replacements)
-			var loc = getLocator$1( this.original )( index );
-			throw new Error( ("Cannot split a chunk that has already been edited (" + (loc.line) + ":" + (loc.column) + " – \"" + (chunk.original) + "\")") );
-		}
-
-		var newChunk = chunk.split( index );
-
-		this.byEnd[ index ] = chunk;
-		this.byStart[ index ] = newChunk;
-		this.byEnd[ newChunk.end ] = newChunk;
-
-		if ( chunk === this.lastChunk ) { this.lastChunk = newChunk; }
-
-		this.lastSearchedChunk = chunk;
-		return true;
-	},
-
-	toString: function toString () {
-		var str = this.intro;
-
-		var chunk = this.firstChunk;
-		while ( chunk ) {
-			str += chunk.toString();
-			chunk = chunk.next;
-		}
-
-		return str + this.outro;
-	},
-
-	trimLines: function trimLines () {
-		return this.trim('[\\r\\n]');
-	},
-
-	trim: function trim ( charType ) {
-		return this.trimStart( charType ).trimEnd( charType );
-	},
-
-	trimEnd: function trimEnd ( charType ) {
-		var this$1 = this;
-
-		var rx = new RegExp( ( charType || '\\s' ) + '+$' );
-
-		this.outro = this.outro.replace( rx, '' );
-		if ( this.outro.length ) { return this; }
-
-		var chunk = this.lastChunk;
-
-		do {
-			var end = chunk.end;
-			var aborted = chunk.trimEnd( rx );
-
-			// if chunk was trimmed, we have a new lastChunk
-			if ( chunk.end !== end ) {
-				if ( this$1.lastChunk === chunk ) {
-					this$1.lastChunk = chunk.next;
-				}
-
-				this$1.byEnd[ chunk.end ] = chunk;
-				this$1.byStart[ chunk.next.start ] = chunk.next;
-				this$1.byEnd[ chunk.next.end ] = chunk.next;
-			}
-
-			if ( aborted ) { return this$1; }
-			chunk = chunk.previous;
-		} while ( chunk );
-
-		return this;
-	},
-
-	trimStart: function trimStart ( charType ) {
-		var this$1 = this;
-
-		var rx = new RegExp( '^' + ( charType || '\\s' ) + '+' );
-
-		this.intro = this.intro.replace( rx, '' );
-		if ( this.intro.length ) { return this; }
-
-		var chunk = this.firstChunk;
-
-		do {
-			var end = chunk.end;
-			var aborted = chunk.trimStart( rx );
-
-			if ( chunk.end !== end ) {
-				// special case...
-				if ( chunk === this$1.lastChunk ) { this$1.lastChunk = chunk.next; }
-
-				this$1.byEnd[ chunk.end ] = chunk;
-				this$1.byStart[ chunk.next.start ] = chunk.next;
-				this$1.byEnd[ chunk.next.end ] = chunk.next;
-			}
-
-			if ( aborted ) { return this$1; }
-			chunk = chunk.next;
-		} while ( chunk );
-
-		return this;
-	}
-};
-
-var hasOwnProp = Object.prototype.hasOwnProperty;
-
-function Bundle ( options ) {
-	if ( options === void 0 ) options = {};
-
-	this.intro = options.intro || '';
-	this.separator = options.separator !== undefined ? options.separator : '\n';
-
-	this.sources = [];
-
-	this.uniqueSources = [];
-	this.uniqueSourceIndexByFilename = {};
-}
-
-Bundle.prototype = {
-	addSource: function addSource ( source ) {
-		if ( source instanceof MagicString$1 ) {
-			return this.addSource({
-				content: source,
-				filename: source.filename,
-				separator: this.separator
-			});
-		}
-
-		if ( !isObject( source ) || !source.content ) {
-			throw new Error( 'bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`' );
-		}
-
-		[ 'filename', 'indentExclusionRanges', 'separator' ].forEach( function (option) {
-			if ( !hasOwnProp.call( source, option ) ) { source[ option ] = source.content[ option ]; }
-		});
-
-		if ( source.separator === undefined ) { // TODO there's a bunch of this sort of thing, needs cleaning up
-			source.separator = this.separator;
-		}
-
-		if ( source.filename ) {
-			if ( !hasOwnProp.call( this.uniqueSourceIndexByFilename, source.filename ) ) {
-				this.uniqueSourceIndexByFilename[ source.filename ] = this.uniqueSources.length;
-				this.uniqueSources.push({ filename: source.filename, content: source.content.original });
-			} else {
-				var uniqueSource = this.uniqueSources[ this.uniqueSourceIndexByFilename[ source.filename ] ];
-				if ( source.content.original !== uniqueSource.content ) {
-					throw new Error( ("Illegal source: same filename (" + (source.filename) + "), different contents") );
-				}
-			}
-		}
-
-		this.sources.push( source );
-		return this;
-	},
-
-	append: function append ( str, options ) {
-		this.addSource({
-			content: new MagicString$1( str ),
-			separator: ( options && options.separator ) || ''
-		});
-
-		return this;
-	},
-
-	clone: function clone () {
-		var bundle = new Bundle({
-			intro: this.intro,
-			separator: this.separator
-		});
-
-		this.sources.forEach( function (source) {
-			bundle.addSource({
-				filename: source.filename,
-				content: source.content.clone(),
-				separator: source.separator
-			});
-		});
-
-		return bundle;
-	},
-
-	generateMap: function generateMap ( options ) {
-		var this$1 = this;
-		if ( options === void 0 ) options = {};
-
-		var names = [];
-		this.sources.forEach( function (source) {
-			Object.keys( source.content.storedNames ).forEach( function (name) {
-				if ( !~names.indexOf( name ) ) { names.push( name ); }
-			});
-		});
-
-		var mappings = new Mappings( options.hires );
-
-		if ( this.intro ) {
-			mappings.advance( this.intro );
-		}
-
-		this.sources.forEach( function ( source, i ) {
-			if ( i > 0 ) {
-				mappings.advance( this$1.separator );
-			}
-
-			var sourceIndex = source.filename ? this$1.uniqueSourceIndexByFilename[ source.filename ] : -1;
-			var magicString = source.content;
-			var locate = getLocator$1( magicString.original );
-
-			if ( magicString.intro ) {
-				mappings.advance( magicString.intro );
-			}
-
-			magicString.firstChunk.eachNext( function (chunk) {
-				var loc = locate( chunk.start );
-
-				if ( chunk.intro.length ) { mappings.advance( chunk.intro ); }
-
-				if ( source.filename ) {
-					if ( chunk.edited ) {
-						mappings.addEdit( sourceIndex, chunk.content, chunk.original, loc, chunk.storeName ? names.indexOf( chunk.original ) : -1 );
-					} else {
-						mappings.addUneditedChunk( sourceIndex, chunk, magicString.original, loc, magicString.sourcemapLocations );
-					}
-				}
-
-				else {
-					mappings.advance( chunk.content );
-				}
-
-				if ( chunk.outro.length ) { mappings.advance( chunk.outro ); }
-			});
-
-			if ( magicString.outro ) {
-				mappings.advance( magicString.outro );
-			}
-		});
-
-		return new SourceMap({
-			file: ( options.file ? options.file.split( /[\/\\]/ ).pop() : null ),
-			sources: this.uniqueSources.map( function (source) {
-				return options.file ? getRelativePath( options.file, source.filename ) : source.filename;
-			}),
-			sourcesContent: this.uniqueSources.map( function (source) {
-				return options.includeContent ? source.content : null;
-			}),
-			names: names,
-			mappings: mappings.encode()
-		});
-	},
-
-	getIndentString: function getIndentString () {
-		var indentStringCounts = {};
-
-		this.sources.forEach( function (source) {
-			var indentStr = source.content.indentStr;
-
-			if ( indentStr === null ) { return; }
-
-			if ( !indentStringCounts[ indentStr ] ) { indentStringCounts[ indentStr ] = 0; }
-			indentStringCounts[ indentStr ] += 1;
-		});
-
-		return ( Object.keys( indentStringCounts ).sort( function ( a, b ) {
-			return indentStringCounts[a] - indentStringCounts[b];
-		})[0] ) || '\t';
-	},
-
-	indent: function indent ( indentStr ) {
-		var this$1 = this;
-
-		if ( !arguments.length ) {
-			indentStr = this.getIndentString();
-		}
-
-		if ( indentStr === '' ) { return this; } // noop
-
-		var trailingNewline = !this.intro || this.intro.slice( -1 ) === '\n';
-
-		this.sources.forEach( function ( source, i ) {
-			var separator = source.separator !== undefined ? source.separator : this$1.separator;
-			var indentStart = trailingNewline || ( i > 0 && /\r?\n$/.test( separator ) );
-
-			source.content.indent( indentStr, {
-				exclude: source.indentExclusionRanges,
-				indentStart: indentStart//: trailingNewline || /\r?\n$/.test( separator )  //true///\r?\n/.test( separator )
-			});
-
-			// TODO this is a very slow way to determine this
-			trailingNewline = source.content.toString().slice( 0, -1 ) === '\n';
-		});
-
-		if ( this.intro ) {
-			this.intro = indentStr + this.intro.replace( /^[^\n]/gm, function ( match, index ) {
-				return index > 0 ? indentStr + match : match;
-			});
-		}
-
-		return this;
-	},
-
-	prepend: function prepend ( str ) {
-		this.intro = str + this.intro;
-		return this;
-	},
-
-	toString: function toString () {
-		var this$1 = this;
-
-		var body = this.sources.map( function ( source, i ) {
-			var separator = source.separator !== undefined ? source.separator : this$1.separator;
-			var str = ( i > 0 ? separator : '' ) + source.content.toString();
-
-			return str;
-		}).join( '' );
-
-		return this.intro + body;
-	},
-
-	trimLines: function trimLines () {
-		return this.trim('[\\r\\n]');
-	},
-
-	trim: function trim ( charType ) {
-		return this.trimStart( charType ).trimEnd( charType );
-	},
-
-	trimStart: function trimStart ( charType ) {
-		var this$1 = this;
-
-		var rx = new RegExp( '^' + ( charType || '\\s' ) + '+' );
-		this.intro = this.intro.replace( rx, '' );
-
-		if ( !this.intro ) {
-			var source;
-			var i = 0;
-
-			do {
-				source = this$1.sources[i];
-
-				if ( !source ) {
-					break;
-				}
-
-				source.content.trimStart( charType );
-				i += 1;
-			} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?
-		}
-
-		return this;
-	},
-
-	trimEnd: function trimEnd ( charType ) {
-		var this$1 = this;
-
-		var rx = new RegExp( ( charType || '\\s' ) + '+$' );
-
-		var source;
-		var i = this.sources.length - 1;
-
-		do {
-			source = this$1.sources[i];
-
-			if ( !source ) {
-				this$1.intro = this$1.intro.replace( rx, '' );
-				break;
-			}
-
-			source.content.trimEnd( charType );
-			i -= 1;
-		} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?
-
-		return this;
-	}
-};
-
-function annotateWithScopes(expression) {
-    const globals = new Set();
-    let scope = new Scope(null, false);
-    walk(expression, {
-        enter(node, parent) {
-            if (/Function/.test(node.type)) {
-                if (node.type === 'FunctionDeclaration') {
-                    scope.declarations.add(node.id.name);
-                }
-                else {
-                    node._scope = scope = new Scope(scope, false);
-                    if (node.id)
-                        scope.declarations.add(node.id.name);
-                }
-                node.params.forEach((param) => {
-                    extractNames(param).forEach(name => {
-                        scope.declarations.add(name);
-                    });
-                });
-            }
-            else if (/For(?:In|Of)Statement/.test(node.type)) {
-                node._scope = scope = new Scope(scope, true);
-            }
-            else if (node.type === 'BlockStatement') {
-                node._scope = scope = new Scope(scope, true);
-            }
-            else if (/(Function|Class|Variable)Declaration/.test(node.type)) {
-                scope.addDeclaration(node);
-            }
-            else if (isReference(node, parent)) {
-                if (!scope.has(node.name)) {
-                    globals.add(node.name);
-                }
-            }
-        },
-        leave(node) {
-            if (node._scope) {
-                scope = scope.parent;
-            }
-        },
-    });
-    return { scope, globals };
-}
-class Scope {
-    constructor(parent, block) {
-        this.parent = parent;
-        this.block = block;
-        this.declarations = new Set();
-    }
-    addDeclaration(node) {
-        if (node.kind === 'var' && !this.block && this.parent) {
-            this.parent.addDeclaration(node);
-        }
-        else if (node.type === 'VariableDeclaration') {
-            node.declarations.forEach((declarator) => {
-                extractNames(declarator.id).forEach(name => {
-                    this.declarations.add(name);
-                });
-            });
-        }
-        else {
-            this.declarations.add(node.id.name);
-        }
-    }
-    has(name) {
-        return (this.declarations.has(name) || (this.parent && this.parent.has(name)));
-    }
-}
-function extractNames(param) {
-    const names = [];
-    extractors[param.type](names, param);
-    return names;
-}
-const extractors = {
-    Identifier(names, param) {
-        names.push(param.name);
-    },
-    ObjectPattern(names, param) {
-        param.properties.forEach((prop) => {
-            extractors[prop.value.type](names, prop.value);
-        });
-    },
-    ArrayPattern(names, param) {
-        param.elements.forEach((element) => {
-            if (element)
-                extractors[element.type](names, element);
-        });
-    },
-    RestElement(names, param) {
-        extractors[param.argument.type](names, param.argument);
-    },
-    AssignmentPattern(names, param) {
-        extractors[param.left.type](names, param.left);
-    },
-};
-
-const start = /\n(\t+)/;
-function deindent(strings, ...values) {
-    const indentation = start.exec(strings[0])[1];
-    const pattern = new RegExp(`^${indentation}`, 'gm');
-    let result = strings[0].replace(start, '').replace(pattern, '');
-    let trailingIndentation = getTrailingIndentation(result);
-    for (let i = 1; i < strings.length; i += 1) {
-        let expression = values[i - 1];
-        const string = strings[i].replace(pattern, '');
-        if (Array.isArray(expression)) {
-            expression = expression.length ? expression.join('\n') : null;
-        }
-        if (expression || expression === '') {
-            const value = String(expression).replace(/\n/g, `\n${trailingIndentation}`);
-            result += value + string;
-        }
-        else {
-            let c = result.length;
-            while (/\s/.test(result[c - 1]))
-                c -= 1;
-            result = result.slice(0, c) + string;
-        }
-        trailingIndentation = getTrailingIndentation(result);
-    }
-    return result.trim().replace(/\t+$/gm, '');
-}
-function getTrailingIndentation(str) {
-    let i = str.length;
-    while (str[i - 1] === ' ' || str[i - 1] === '\t')
-        i -= 1;
-    return str.slice(i, str.length);
-}
-
-function stringify(data, options = {}) {
-    return JSON.stringify(escape(data, options));
-}
-function escape(data, { onlyEscapeAtSymbol = false } = {}) {
-    return data.replace(onlyEscapeAtSymbol ? /(%+|@+)/g : /(%+|@+|#+)/g, (match) => {
-        return match + match[0];
-    });
-}
-const escaped = {
-    '&': '&amp;',
-    '<': '&lt;',
-    '>': '&gt;',
-};
-function escapeHTML(html) {
-    return String(html).replace(/[&<>]/g, match => escaped[match]);
-}
-function escapeTemplate(str) {
-    return str.replace(/(\${|`|\\)/g, '\\$1');
-}
-
-var ChunkType;
-(function (ChunkType) {
-    ChunkType[ChunkType["Line"] = 0] = "Line";
-    ChunkType[ChunkType["Block"] = 1] = "Block";
-})(ChunkType || (ChunkType = {}));
-class CodeBuilder {
-    constructor(str = '') {
-        this.result = str;
-        const initial = str
-            ? /\n/.test(str) ? ChunkType.Block : ChunkType.Line
-            : null;
-        this.first = initial;
-        this.last = initial;
-        this.lastCondition = null;
-        this.conditionStack = [];
-        this.indent = '';
-    }
-    addConditional(condition, body) {
-        this.reifyConditions();
-        body = body.replace(/^/gm, `${this.indent}\t`);
-        if (condition === this.lastCondition) {
-            this.result += `\n${body}`;
-        }
-        else {
-            if (this.lastCondition) {
-                this.result += `\n${this.indent}}`;
-            }
-            this.result += `${this.last === ChunkType.Block ? '\n\n' : '\n'}${this.indent}if (${condition}) {\n${body}`;
-            this.lastCondition = condition;
-        }
-        this.last = ChunkType.Block;
-    }
-    addLine(line) {
-        this.reifyConditions();
-        if (this.lastCondition) {
-            this.result += `\n${this.indent}}`;
-            this.lastCondition = null;
-        }
-        if (this.last === ChunkType.Block) {
-            this.result += `\n\n${this.indent}${line}`;
-        }
-        else if (this.last === ChunkType.Line) {
-            this.result += `\n${this.indent}${line}`;
-        }
-        else {
-            this.result += line;
-        }
-        this.last = ChunkType.Line;
-        if (!this.first)
-            this.first = ChunkType.Line;
-    }
-    addLineAtStart(line) {
-        this.reifyConditions();
-        if (this.first === ChunkType.Block) {
-            this.result = `${line}\n\n${this.indent}${this.result}`;
-        }
-        else if (this.first === ChunkType.Line) {
-            this.result = `${line}\n${this.indent}${this.result}`;
-        }
-        else {
-            this.result += line;
-        }
-        this.first = ChunkType.Line;
-        if (!this.last)
-            this.last = ChunkType.Line;
-    }
-    addBlock(block) {
-        this.reifyConditions();
-        if (this.indent)
-            block = block.replace(/^/gm, `${this.indent}`);
-        if (this.lastCondition) {
-            this.result += `\n${this.indent}}`;
-            this.lastCondition = null;
-        }
-        if (this.result) {
-            this.result += `\n\n${this.indent}${block}`;
-        }
-        else {
-            this.result += block;
-        }
-        this.last = ChunkType.Block;
-        if (!this.first)
-            this.first = ChunkType.Block;
-    }
-    addBlockAtStart(block) {
-        this.reifyConditions();
-        if (this.result) {
-            this.result = `${block}\n\n${this.indent}${this.result}`;
-        }
-        else {
-            this.result += block;
-        }
-        this.first = ChunkType.Block;
-        if (!this.last)
-            this.last = ChunkType.Block;
-    }
-    isEmpty() {
-        return this.result === '';
-    }
-    pushCondition(condition) {
-        this.conditionStack.push({ condition, used: false });
-    }
-    popCondition() {
-        const { used } = this.conditionStack.pop();
-        this.indent = repeat('\t', this.conditionStack.length);
-        if (used)
-            this.addLine('}');
-    }
-    reifyConditions() {
-        for (let i = 0; i < this.conditionStack.length; i += 1) {
-            const condition = this.conditionStack[i];
-            if (!condition.used) {
-                const line = `if (${condition.condition}) {`;
-                if (this.last === ChunkType.Block) {
-                    this.result += `\n\n${this.indent}${line}`;
-                }
-                else if (this.last === ChunkType.Line) {
-                    this.result += `\n${this.indent}${line}`;
-                }
-                else {
-                    this.result += line;
-                }
-                this.last = ChunkType.Line;
-                if (!this.first)
-                    this.first = ChunkType.Line;
-                this.indent = repeat('\t', this.conditionStack.length);
-                condition.used = true;
-            }
-        }
-    }
-    toString() {
-        return this.result.trim() + (this.lastCondition ? `\n}` : ``);
-    }
-}
-
-var globalWhitelist = new Set([
-    'Array',
-    'Boolean',
-    'console',
-    'Date',
-    'decodeURI',
-    'decodeURIComponent',
-    'encodeURI',
-    'encodeURIComponent',
-    'Infinity',
-    'Intl',
-    'isFinite',
-    'isNaN',
-    'JSON',
-    'Map',
-    'Math',
-    'NaN',
-    'Number',
-    'Object',
-    'parseFloat',
-    'parseInt',
-    'RegExp',
-    'Set',
-    'String',
-    'undefined',
-]);
-
-// this file is auto-generated, do not edit it
-const shared = {
-    "appendNode": "function appendNode(node, target) {\n\ttarget.appendChild(node);\n}",
-    "insertNode": "function insertNode(node, target, anchor) {\n\ttarget.insertBefore(node, anchor);\n}",
-    "detachNode": "function detachNode(node) {\n\tnode.parentNode.removeChild(node);\n}",
-    "detachBetween": "function detachBetween(before, after) {\n\twhile (before.nextSibling && before.nextSibling !== after) {\n\t\tbefore.parentNode.removeChild(before.nextSibling);\n\t}\n}",
-    "detachBefore": "function detachBefore(after) {\n\twhile (after.previousSibling) {\n\t\tafter.parentNode.removeChild(after.previousSibling);\n\t}\n}",
-    "detachAfter": "function detachAfter(before) {\n\twhile (before.nextSibling) {\n\t\tbefore.parentNode.removeChild(before.nextSibling);\n\t}\n}",
-    "reinsertBetween": "function reinsertBetween(before, after, target) {\n\twhile (before.nextSibling && before.nextSibling !== after) {\n\t\ttarget.appendChild(before.parentNode.removeChild(before.nextSibling));\n\t}\n}",
-    "reinsertChildren": "function reinsertChildren(parent, target) {\n\twhile (parent.firstChild) target.appendChild(parent.firstChild);\n}",
-    "reinsertAfter": "function reinsertAfter(before, target) {\n\twhile (before.nextSibling) target.appendChild(before.nextSibling);\n}",
-    "reinsertBefore": "function reinsertBefore(after, target) {\n\tvar parent = after.parentNode;\n\twhile (parent.firstChild !== after) target.appendChild(parent.firstChild);\n}",
-    "destroyEach": "function destroyEach(iterations) {\n\tfor (var i = 0; i < iterations.length; i += 1) {\n\t\tif (iterations[i]) iterations[i].d();\n\t}\n}",
-    "createFragment": "function createFragment() {\n\treturn document.createDocumentFragment();\n}",
-    "createElement": "function createElement(name) {\n\treturn document.createElement(name);\n}",
-    "createSvgElement": "function createSvgElement(name) {\n\treturn document.createElementNS('http://www.w3.org/2000/svg', name);\n}",
-    "createText": "function createText(data) {\n\treturn document.createTextNode(data);\n}",
-    "createComment": "function createComment() {\n\treturn document.createComment('');\n}",
-    "addListener": "function addListener(node, event, handler) {\n\tnode.addEventListener(event, handler, false);\n}",
-    "removeListener": "function removeListener(node, event, handler) {\n\tnode.removeEventListener(event, handler, false);\n}",
-    "setAttribute": "function setAttribute(node, attribute, value) {\n\tnode.setAttribute(attribute, value);\n}",
-    "setAttributes": "function setAttributes(node, attributes) {\n\tfor (var key in attributes) {\n\t\tif (key in node) {\n\t\t\tnode[key] = attributes[key];\n\t\t} else {\n\t\t\tif (attributes[key] === undefined) removeAttribute(node, key);\n\t\t\telse setAttribute(node, key, attributes[key]);\n\t\t}\n\t}\n}",
-    "removeAttribute": "function removeAttribute(node, attribute) {\n\tnode.removeAttribute(attribute);\n}",
-    "setXlinkAttribute": "function setXlinkAttribute(node, attribute, value) {\n\tnode.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}",
-    "getBindingGroupValue": "function getBindingGroupValue(group) {\n\tvar value = [];\n\tfor (var i = 0; i < group.length; i += 1) {\n\t\tif (group[i].checked) value.push(group[i].__value);\n\t}\n\treturn value;\n}",
-    "toNumber": "function toNumber(value) {\n\treturn value === '' ? undefined : +value;\n}",
-    "timeRangesToArray": "function timeRangesToArray(ranges) {\n\tvar array = [];\n\tfor (var i = 0; i < ranges.length; i += 1) {\n\t\tarray.push({ start: ranges.start(i), end: ranges.end(i) });\n\t}\n\treturn array;\n}",
-    "children": "function children (element) {\n\treturn Array.from(element.childNodes);\n}",
-    "claimElement": "function claimElement (nodes, name, attributes, svg) {\n\tfor (var i = 0; i < nodes.length; i += 1) {\n\t\tvar node = nodes[i];\n\t\tif (node.nodeName === name) {\n\t\t\tfor (var j = 0; j < node.attributes.length; j += 1) {\n\t\t\t\tvar attribute = node.attributes[j];\n\t\t\t\tif (!attributes[attribute.name]) node.removeAttribute(attribute.name);\n\t\t\t}\n\t\t\treturn nodes.splice(i, 1)[0]; // TODO strip unwanted attributes\n\t\t}\n\t}\n\n\treturn svg ? createSvgElement(name) : createElement(name);\n}",
-    "claimText": "function claimText (nodes, data) {\n\tfor (var i = 0; i < nodes.length; i += 1) {\n\t\tvar node = nodes[i];\n\t\tif (node.nodeType === 3) {\n\t\t\tnode.data = data;\n\t\t\treturn nodes.splice(i, 1)[0];\n\t\t}\n\t}\n\n\treturn createText(data);\n}",
-    "setInputType": "function setInputType(input, type) {\n\ttry {\n\t\tinput.type = type;\n\t} catch (e) {}\n}",
-    "setStyle": "function setStyle(node, key, value) {\n\tnode.style.setProperty(key, value);\n}",
-    "selectOption": "function selectOption(select, value) {\n\tfor (var i = 0; i < select.options.length; i += 1) {\n\t\tvar option = select.options[i];\n\n\t\tif (option.__value === value) {\n\t\t\toption.selected = true;\n\t\t\treturn;\n\t\t}\n\t}\n}",
-    "selectOptions": "function selectOptions(select, value) {\n\tfor (var i = 0; i < select.options.length; i += 1) {\n\t\tvar option = select.options[i];\n\t\toption.selected = ~value.indexOf(option.__value);\n\t}\n}",
-    "selectValue": "function selectValue(select) {\n\tvar selectedOption = select.querySelector(':checked') || select.options[0];\n\treturn selectedOption && selectedOption.__value;\n}",
-    "selectMultipleValue": "function selectMultipleValue(select) {\n\treturn [].map.call(select.querySelectorAll(':checked'), function(option) {\n\t\treturn option.__value;\n\t});\n}",
-    "blankObject": "function blankObject() {\n\treturn Object.create(null);\n}",
-    "destroy": "function destroy(detach) {\n\tthis.destroy = noop;\n\tthis.fire('destroy');\n\tthis.set = this.get = noop;\n\n\tif (detach !== false) this._fragment.u();\n\tthis._fragment.d();\n\tthis._fragment = this._state = null;\n}",
-    "destroyDev": "function destroyDev(detach) {\n\tdestroy.call(this, detach);\n\tthis.destroy = function() {\n\t\tconsole.warn('Component was already destroyed');\n\t};\n}",
-    "_differs": "function _differs(a, b) {\n\treturn a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}",
-    "_differsImmutable": "function _differsImmutable(a, b) {\n\treturn a != a ? b == b : a !== b;\n}",
-    "dispatchObservers": "function dispatchObservers(component, group, changed, newState, oldState) {\n\tfor (var key in group) {\n\t\tif (!changed[key]) continue;\n\n\t\tvar newValue = newState[key];\n\t\tvar oldValue = oldState[key];\n\n\t\tvar callbacks = group[key];\n\t\tif (!callbacks) continue;\n\n\t\tfor (var i = 0; i < callbacks.length; i += 1) {\n\t\t\tvar callback = callbacks[i];\n\t\t\tif (callback.__calling) continue;\n\n\t\t\tcallback.__calling = true;\n\t\t\tcallback.call(component, newValue, oldValue);\n\t\t\tcallback.__calling = false;\n\t\t}\n\t}\n}",
-    "fire": "function fire(eventName, data) {\n\tvar handlers =\n\t\teventName in this._handlers && this._handlers[eventName].slice();\n\tif (!handlers) return;\n\n\tfor (var i = 0; i < handlers.length; i += 1) {\n\t\thandlers[i].call(this, data);\n\t}\n}",
-    "get": "function get(key) {\n\treturn key ? this._state[key] : this._state;\n}",
-    "init": "function init(component, options) {\n\tcomponent._observers = { pre: blankObject(), post: blankObject() };\n\tcomponent._handlers = blankObject();\n\tcomponent._bind = options._bind;\n\n\tcomponent.options = options;\n\tcomponent.root = options.root || component;\n\tcomponent.store = component.root.store || options.store;\n}",
-    "observe": "function observe(key, callback, options) {\n\tvar group = options && options.defer\n\t\t? this._observers.post\n\t\t: this._observers.pre;\n\n\t(group[key] || (group[key] = [])).push(callback);\n\n\tif (!options || options.init !== false) {\n\t\tcallback.__calling = true;\n\t\tcallback.call(this, this._state[key]);\n\t\tcallback.__calling = false;\n\t}\n\n\treturn {\n\t\tcancel: function() {\n\t\t\tvar index = group[key].indexOf(callback);\n\t\t\tif (~index) group[key].splice(index, 1);\n\t\t}\n\t};\n}",
-    "observeDev": "function observeDev(key, callback, options) {\n\tvar c = (key = '' + key).search(/[.[]/);\n\tif (c > -1) {\n\t\tvar message =\n\t\t\t'The first argument to component.observe(...) must be the name of a top-level property';\n\t\tif (c > 0)\n\t\t\tmessage += \", i.e. '\" + key.slice(0, c) + \"' rather than '\" + key + \"'\";\n\n\t\tthrow new Error(message);\n\t}\n\n\treturn observe.call(this, key, callback, options);\n}",
-    "on": "function on(eventName, handler) {\n\tif (eventName === 'teardown') return this.on('destroy', handler);\n\n\tvar handlers = this._handlers[eventName] || (this._handlers[eventName] = []);\n\thandlers.push(handler);\n\n\treturn {\n\t\tcancel: function() {\n\t\t\tvar index = handlers.indexOf(handler);\n\t\t\tif (~index) handlers.splice(index, 1);\n\t\t}\n\t};\n}",
-    "onDev": "function onDev(eventName, handler) {\n\tif (eventName === 'teardown') {\n\t\tconsole.warn(\n\t\t\t\"Use component.on('destroy', ...) instead of component.on('teardown', ...) which has been deprecated and will be unsupported in Svelte 2\"\n\t\t);\n\t\treturn this.on('destroy', handler);\n\t}\n\n\treturn on.call(this, eventName, handler);\n}",
-    "run": "function run(fn) {\n\tfn();\n}",
-    "set": "function set(newState) {\n\tthis._set(assign({}, newState));\n\tif (this.root._lock) return;\n\tthis.root._lock = true;\n\tcallAll(this.root._beforecreate);\n\tcallAll(this.root._oncreate);\n\tcallAll(this.root._aftercreate);\n\tthis.root._lock = false;\n}",
-    "_set": "function _set(newState) {\n\tvar oldState = this._state,\n\t\tchanged = {},\n\t\tdirty = false;\n\n\tfor (var key in newState) {\n\t\tif (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;\n\t}\n\tif (!dirty) return;\n\n\tthis._state = assign(assign({}, oldState), newState);\n\tthis._recompute(changed, this._state);\n\tif (this._bind) this._bind(changed, this._state);\n\n\tif (this._fragment) {\n\t\tdispatchObservers(this, this._observers.pre, changed, this._state, oldState);\n\t\tthis._fragment.p(changed, this._state);\n\t\tdispatchObservers(this, this._observers.post, changed, this._state, oldState);\n\t}\n}",
-    "setDev": "function setDev(newState) {\n\tif (typeof newState !== 'object') {\n\t\tthrow new Error(\n\t\t\tthis._debugName + '.set was called without an object of data key-values to update.'\n\t\t);\n\t}\n\n\tthis._checkReadOnly(newState);\n\tset.call(this, newState);\n}",
-    "callAll": "function callAll(fns) {\n\twhile (fns && fns.length) fns.shift()();\n}",
-    "_mount": "function _mount(target, anchor) {\n\tthis._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);\n}",
-    "_unmount": "function _unmount() {\n\tif (this._fragment) this._fragment.u();\n}",
-    "isPromise": "function isPromise(value) {\n\treturn value && typeof value.then === 'function';\n}",
-    "PENDING": "{}",
-    "SUCCESS": "{}",
-    "FAILURE": "{}",
-    "removeFromStore": "function removeFromStore() {\n\tthis.store._remove(this);\n}",
-    "proto": "{\n\tdestroy: destroy,\n\tget: get,\n\tfire: fire,\n\tobserve: observe,\n\ton: on,\n\tset: set,\n\tteardown: destroy,\n\t_recompute: noop,\n\t_set: _set,\n\t_mount: _mount,\n\t_unmount: _unmount,\n\t_differs: _differs\n}",
-    "protoDev": "{\n\tdestroy: destroyDev,\n\tget: get,\n\tfire: fire,\n\tobserve: observeDev,\n\ton: onDev,\n\tset: setDev,\n\tteardown: destroyDev,\n\t_recompute: noop,\n\t_set: _set,\n\t_mount: _mount,\n\t_unmount: _unmount,\n\t_differs: _differs\n}",
-    "destroyBlock": "function destroyBlock(block, lookup) {\n\tblock.u();\n\tblock.d();\n\tlookup[block.key] = null;\n}",
-    "outroAndDestroyBlock": "function outroAndDestroyBlock(block, lookup) {\n\tblock.o(function() {\n\t\tdestroyBlock(block, lookup);\n\t});\n}",
-    "updateKeyedEach": "function updateKeyedEach(old_blocks, component, changed, key_prop, dynamic, list, lookup, node, has_outro, create_each_block, intro_method, next, get_context) {\n\tvar o = old_blocks.length;\n\tvar n = list.length;\n\n\tvar i = o;\n\tvar old_indexes = {};\n\twhile (i--) old_indexes[old_blocks[i].key] = i;\n\n\tvar new_blocks = [];\n\tvar new_lookup = {};\n\tvar deltas = {};\n\n\tvar i = n;\n\twhile (i--) {\n\t\tvar key = list[i][key_prop];\n\t\tvar block = lookup[key];\n\n\t\tif (!block) {\n\t\t\tblock = create_each_block(component, key, get_context(i));\n\t\t\tblock.c();\n\t\t} else if (dynamic) {\n\t\t\tblock.p(changed, get_context(i));\n\t\t}\n\n\t\tnew_blocks[i] = new_lookup[key] = block;\n\n\t\tif (key in old_indexes) deltas[key] = Math.abs(i - old_indexes[key]);\n\t}\n\n\tvar will_move = {};\n\tvar did_move = {};\n\n\tvar destroy = has_outro ? outroAndDestroyBlock : destroyBlock;\n\n\tfunction insert(block) {\n\t\tblock[intro_method](node, next);\n\t\tlookup[block.key] = block;\n\t\tnext = block.first;\n\t\tn--;\n\t}\n\n\twhile (o && n) {\n\t\tvar new_block = new_blocks[n - 1];\n\t\tvar old_block = old_blocks[o - 1];\n\t\tvar new_key = new_block.key;\n\t\tvar old_key = old_block.key;\n\n\t\tif (new_block === old_block) {\n\t\t\t// do nothing\n\t\t\tnext = new_block.first;\n\t\t\to--;\n\t\t\tn--;\n\t\t}\n\n\t\telse if (!new_lookup[old_key]) {\n\t\t\t// remove old block\n\t\t\tdestroy(old_block, lookup);\n\t\t\to--;\n\t\t}\n\n\t\telse if (!lookup[new_key] || will_move[new_key]) {\n\t\t\tinsert(new_block);\n\t\t}\n\n\t\telse if (did_move[old_key]) {\n\t\t\to--;\n\n\t\t} else if (deltas[new_key] > deltas[old_key]) {\n\t\t\tdid_move[new_key] = true;\n\t\t\tinsert(new_block);\n\n\t\t} else {\n\t\t\twill_move[old_key] = true;\n\t\t\to--;\n\t\t}\n\t}\n\n\twhile (o--) {\n\t\tvar old_block = old_blocks[o];\n\t\tif (!new_lookup[old_block.key]) destroy(old_block, lookup);\n\t}\n\n\twhile (n) insert(new_blocks[n - 1]);\n\n\treturn new_blocks;\n}",
-    "getSpreadUpdate": "function getSpreadUpdate(levels, updates) {\n\tvar update = {};\n\n\tvar to_null_out = {};\n\tvar accounted_for = {};\n\n\tvar i = levels.length;\n\twhile (i--) {\n\t\tvar o = levels[i];\n\t\tvar n = updates[i];\n\n\t\tif (n) {\n\t\t\tfor (var key in o) {\n\t\t\t\tif (!(key in n)) to_null_out[key] = 1;\n\t\t\t}\n\n\t\t\tfor (var key in n) {\n\t\t\t\tif (!accounted_for[key]) {\n\t\t\t\t\tupdate[key] = n[key];\n\t\t\t\t\taccounted_for[key] = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels[i] = n;\n\t\t} else {\n\t\t\tfor (var key in o) {\n\t\t\t\taccounted_for[key] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (var key in to_null_out) {\n\t\tif (!(key in update)) update[key] = undefined;\n\t}\n\n\treturn update;\n}",
-    "linear": "function linear(t) {\n\treturn t;\n}",
-    "generateRule": "function generateRule(\n\ta,\n\tb,\n\tdelta,\n\tduration,\n\tease,\n\tfn\n) {\n\tvar keyframes = '{\\n';\n\n\tfor (var p = 0; p <= 1; p += 16.666 / duration) {\n\t\tvar t = a + delta * ease(p);\n\t\tkeyframes += p * 100 + '%{' + fn(t) + '}\\n';\n\t}\n\n\treturn keyframes + '100% {' + fn(b) + '}\\n}';\n}",
-    "hash": "function hash(str) {\n\tvar hash = 5381;\n\tvar i = str.length;\n\n\twhile (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n\treturn hash >>> 0;\n}",
-    "wrapTransition": "function wrapTransition(component, node, fn, params, intro, outgroup) {\n\tvar obj = fn(node, params);\n\tvar duration = obj.duration || 300;\n\tvar ease = obj.easing || linear;\n\tvar cssText;\n\n\t// TODO share <style> tag between all transitions?\n\tif (obj.css && !transitionManager.stylesheet) {\n\t\tvar style = createElement('style');\n\t\tdocument.head.appendChild(style);\n\t\ttransitionManager.stylesheet = style.sheet;\n\t}\n\n\tif (intro) {\n\t\tif (obj.css && obj.delay) {\n\t\t\tcssText = node.style.cssText;\n\t\t\tnode.style.cssText += obj.css(0);\n\t\t}\n\n\t\tif (obj.tick) obj.tick(0);\n\t}\n\n\treturn {\n\t\tt: intro ? 0 : 1,\n\t\trunning: false,\n\t\tprogram: null,\n\t\tpending: null,\n\t\trun: function(intro, callback) {\n\t\t\tvar program = {\n\t\t\t\tstart: window.performance.now() + (obj.delay || 0),\n\t\t\t\tintro: intro,\n\t\t\t\tcallback: callback\n\t\t\t};\n\n\t\t\tif (obj.delay) {\n\t\t\t\tthis.pending = program;\n\t\t\t} else {\n\t\t\t\tthis.start(program);\n\t\t\t}\n\n\t\t\tif (!this.running) {\n\t\t\t\tthis.running = true;\n\t\t\t\ttransitionManager.add(this);\n\t\t\t}\n\t\t},\n\t\tstart: function(program) {\n\t\t\tcomponent.fire(program.intro ? 'intro.start' : 'outro.start', { node: node });\n\n\t\t\tprogram.a = this.t;\n\t\t\tprogram.b = program.intro ? 1 : 0;\n\t\t\tprogram.delta = program.b - program.a;\n\t\t\tprogram.duration = duration * Math.abs(program.b - program.a);\n\t\t\tprogram.end = program.start + program.duration;\n\n\t\t\tif (obj.css) {\n\t\t\t\tif (obj.delay) node.style.cssText = cssText;\n\n\t\t\t\tprogram.rule = generateRule(\n\t\t\t\t\tprogram.a,\n\t\t\t\t\tprogram.b,\n\t\t\t\t\tprogram.delta,\n\t\t\t\t\tprogram.duration,\n\t\t\t\t\tease,\n\t\t\t\t\tobj.css\n\t\t\t\t);\n\n\t\t\t\ttransitionManager.addRule(program.rule, program.name = '__svelte_' + hash(program.rule));\n\n\t\t\t\tnode.style.animation = (node.style.animation || '')\n\t\t\t\t\t.split(', ')\n\t\t\t\t\t.filter(function(anim) {\n\t\t\t\t\t\t// when introing, discard old animations if there are any\n\t\t\t\t\t\treturn anim && (program.delta < 0 || !/__svelte/.test(anim));\n\t\t\t\t\t})\n\t\t\t\t\t.concat(program.name + ' ' + program.duration + 'ms linear 1 forwards')\n\t\t\t\t\t.join(', ');\n\t\t\t}\n\n\t\t\tthis.program = program;\n\t\t\tthis.pending = null;\n\t\t},\n\t\tupdate: function(now) {\n\t\t\tvar program = this.program;\n\t\t\tif (!program) return;\n\n\t\t\tvar p = now - program.start;\n\t\t\tthis.t = program.a + program.delta * ease(p / program.duration);\n\t\t\tif (obj.tick) obj.tick(this.t);\n\t\t},\n\t\tdone: function() {\n\t\t\tvar program = this.program;\n\t\t\tthis.t = program.b;\n\t\t\tif (obj.tick) obj.tick(this.t);\n\t\t\tif (obj.css) transitionManager.deleteRule(node, program.name);\n\t\t\tprogram.callback();\n\t\t\tprogram = null;\n\t\t\tthis.running = !!this.pending;\n\t\t},\n\t\tabort: function() {\n\t\t\tif (obj.tick) obj.tick(1);\n\t\t\tif (obj.css) transitionManager.deleteRule(node, this.program.name);\n\t\t\tthis.program = this.pending = null;\n\t\t\tthis.running = false;\n\t\t}\n\t};\n}",
-    "transitionManager": "{\n\trunning: false,\n\ttransitions: [],\n\tbound: null,\n\tstylesheet: null,\n\tactiveRules: {},\n\n\tadd: function(transition) {\n\t\tthis.transitions.push(transition);\n\n\t\tif (!this.running) {\n\t\t\tthis.running = true;\n\t\t\trequestAnimationFrame(this.bound || (this.bound = this.next.bind(this)));\n\t\t}\n\t},\n\n\taddRule: function(rule, name) {\n\t\tif (!this.activeRules[name]) {\n\t\t\tthis.activeRules[name] = true;\n\t\t\tthis.stylesheet.insertRule('@keyframes ' + name + ' ' + rule, this.stylesheet.cssRules.length);\n\t\t}\n\t},\n\n\tnext: function() {\n\t\tthis.running = false;\n\n\t\tvar now = window.performance.now();\n\t\tvar i = this.transitions.length;\n\n\t\twhile (i--) {\n\t\t\tvar transition = this.transitions[i];\n\n\t\t\tif (transition.program && now >= transition.program.end) {\n\t\t\t\ttransition.done();\n\t\t\t}\n\n\t\t\tif (transition.pending && now >= transition.pending.start) {\n\t\t\t\ttransition.start(transition.pending);\n\t\t\t}\n\n\t\t\tif (transition.running) {\n\t\t\t\ttransition.update(now);\n\t\t\t\tthis.running = true;\n\t\t\t} else if (!transition.pending) {\n\t\t\t\tthis.transitions.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (this.running) {\n\t\t\trequestAnimationFrame(this.bound);\n\t\t} else if (this.stylesheet) {\n\t\t\tvar i = this.stylesheet.cssRules.length;\n\t\t\twhile (i--) this.stylesheet.deleteRule(i);\n\t\t\tthis.activeRules = {};\n\t\t}\n\t},\n\n\tdeleteRule: function(node, name) {\n\t\tnode.style.animation = node.style.animation\n\t\t\t.split(', ')\n\t\t\t.filter(function(anim) {\n\t\t\t\treturn anim.indexOf(name) === -1;\n\t\t\t})\n\t\t\t.join(', ');\n\t}\n}",
-    "noop": "function noop() {}",
-    "assign": "function assign(tar, src) {\n\tfor (var k in src) tar[k] = src[k];\n\treturn tar;\n}"
-};
-
-const keys = {
-    ObjectExpression: 'properties',
-    Program: 'body',
-};
-const offsets = {
-    ObjectExpression: [1, -1],
-    Program: [0, 0],
-};
-function removeNode(code, parent, node) {
-    const key = keys[parent.type];
-    const offset = offsets[parent.type];
-    if (!key || !offset)
-        throw new Error(`not implemented: ${parent.type}`);
-    const list = parent[key];
-    const i = list.indexOf(node);
-    if (i === -1)
-        throw new Error('node not in list');
-    let a;
-    let b;
-    if (list.length === 1) {
-        // remove everything, leave {}
-        a = parent.start + offset[0];
-        b = parent.end + offset[1];
-    }
-    else if (i === 0) {
-        // remove everything before second node, including comments
-        a = parent.start + offset[0];
-        while (/\s/.test(code.original[a]))
-            a += 1;
-        b = list[i].end;
-        while (/[\s,]/.test(code.original[b]))
-            b += 1;
-    }
-    else {
-        // remove the end of the previous node to the end of this one
-        a = list[i - 1].end;
-        b = node.end;
-    }
-    code.remove(a, b);
-    list.splice(i, 1);
-    return;
-}
-
-const wrappers = { es, amd, cjs, iife, umd, eval: expr };
-function wrapModule(code, format, name, options, banner, sharedPath, helpers, imports, source) {
-    if (format === 'es')
-        return es(code, name, options, banner, sharedPath, helpers, imports, source);
-    const dependencies = imports.map((declaration, i) => {
-        const defaultImport = declaration.specifiers.find((x) => x.type === 'ImportDefaultSpecifier' ||
-            (x.type === 'ImportSpecifier' && x.imported.name === 'default'));
-        const namespaceImport = declaration.specifiers.find((x) => x.type === 'ImportNamespaceSpecifier');
-        const namedImports = declaration.specifiers.filter((x) => x.type === 'ImportSpecifier' && x.imported.name !== 'default');
-        const name = defaultImport || namespaceImport
-            ? (defaultImport || namespaceImport).local.name
-            : `__import${i}`;
-        const statements = [];
-        namedImports.forEach((specifier) => {
-            statements.push(`var ${specifier.local.name} = ${name}.${specifier.imported.name};`);
-        });
-        if (defaultImport) {
-            statements.push(`${name} = (${name} && ${name}.__esModule) ? ${name}["default"] : ${name};`);
-        }
-        return { name, statements, source: declaration.source.value };
-    });
-    if (format === 'amd')
-        return amd(code, name, options, banner, dependencies);
-    if (format === 'cjs')
-        return cjs(code, name, options, banner, sharedPath, helpers, dependencies);
-    if (format === 'iife')
-        return iife(code, name, options, banner, dependencies);
-    if (format === 'umd')
-        return umd(code, name, options, banner, dependencies);
-    if (format === 'eval')
-        return expr(code, name, options, banner, dependencies);
-    throw new Error(`options.format is invalid (must be ${list$1(Object.keys(wrappers))})`);
-}
-function es(code, name, options, banner, sharedPath, helpers, imports, source) {
-    const importHelpers = helpers && (`import { ${helpers.map(h => h.name === h.alias ? h.name : `${h.name} as ${h.alias}`).join(', ')} } from ${JSON.stringify(sharedPath)};`);
-    const importBlock = imports.length > 0 && (imports
-        .map((declaration) => source.slice(declaration.start, declaration.end))
-        .join('\n'));
-    return deindent `
-		${banner}
-		${importHelpers}
-		${importBlock}
-
-		${code}
-		export default ${name};`;
-}
-function amd(code, name, options, banner, dependencies) {
-    const sourceString = dependencies.length
-        ? `[${dependencies.map(d => `"${removeExtension(d.source)}"`).join(', ')}], `
-        : '';
-    const id = options.amd && options.amd.id;
-    return deindent `
-		define(${id ? `"${id}", ` : ''}${sourceString}function(${paramString(dependencies)}) { "use strict";
-			${getCompatibilityStatements(dependencies)}
-
-			${code}
-			return ${name};
-		});`;
-}
-function cjs(code, name, options, banner, sharedPath, helpers, dependencies) {
-    const SHARED = '__shared';
-    const helperBlock = helpers && (`var ${SHARED} = require(${JSON.stringify(sharedPath)});\n` +
-        helpers.map(helper => {
-            return `var ${helper.alias} = ${SHARED}.${helper.name};`;
-        }).join('\n'));
-    const requireBlock = dependencies.length > 0 && (dependencies
-        .map(d => `var ${d.name} = require("${d.source}");`)
-        .join('\n\n'));
-    return deindent `
-		${banner}
-		"use strict";
-
-		${helperBlock}
-		${requireBlock}
-		${getCompatibilityStatements(dependencies)}
-
-		${code}
-
-		module.exports = ${name};`;
-}
-function iife(code, name, options, banner, dependencies) {
-    if (!options.name) {
-        throw new Error(`Missing required 'name' option for IIFE export`);
-    }
-    const globals = getGlobals(dependencies, options);
-    return deindent `
-		${banner}
-		var ${options.name} = (function(${paramString(dependencies)}) { "use strict";
-			${getCompatibilityStatements(dependencies)}
-
-			${code}
-			return ${name};
-		}(${globals.join(', ')}));`;
-}
-function umd(code, name, options, banner, dependencies) {
-    if (!options.name) {
-        throw new Error(`Missing required 'name' option for UMD export`);
-    }
-    const amdId = options.amd && options.amd.id ? `'${options.amd.id}', ` : '';
-    const amdDeps = dependencies.length
-        ? `[${dependencies.map(d => `"${removeExtension(d.source)}"`).join(', ')}], `
-        : '';
-    const cjsDeps = dependencies
-        .map(d => `require("${d.source}")`)
-        .join(', ');
-    const globals = getGlobals(dependencies, options);
-    return deindent `
-		${banner}
-		(function(global, factory) {
-			typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(${cjsDeps}) :
-			typeof define === "function" && define.amd ? define(${amdId}${amdDeps}factory) :
-			(global.${options.name} = factory(${globals.join(', ')}));
-		}(this, (function (${paramString(dependencies)}) { "use strict";
-
-			${getCompatibilityStatements(dependencies)}
-
-			${code}
-
-			return ${name};
-
-		})));`;
-}
-function expr(code, name, options, banner, dependencies) {
-    const globals = getGlobals(dependencies, options);
-    return deindent `
-		(function (${paramString(dependencies)}) { "use strict";
-			${banner}
-
-			${getCompatibilityStatements(dependencies)}
-
-			${code}
-
-			return ${name};
-		}(${globals.join(', ')}))`;
-}
-function paramString(dependencies) {
-    return dependencies.map(dep => dep.name).join(', ');
-}
-function removeExtension(file) {
-    const index = file.lastIndexOf('.');
-    return ~index ? file.slice(0, index) : file;
-}
-function getCompatibilityStatements(dependencies) {
-    if (!dependencies.length)
-        return null;
-    const statements = [];
-    dependencies.forEach(dependency => {
-        statements.push(...dependency.statements);
-    });
-    return statements.join('\n');
-}
-function getGlobals(dependencies, options) {
-    const { globals, onerror, onwarn } = options;
-    const globalFn = getGlobalFn(globals);
-    return dependencies.map(d => {
-        let name = globalFn(d.source);
-        if (!name) {
-            if (d.name.startsWith('__import')) {
-                const error = new Error(`Could not determine name for imported module '${d.source}' – use options.globals`);
-                onerror(error);
-            }
-            else {
-                const warning = {
-                    message: `No name was supplied for imported module '${d.source}'. Guessing '${d.name}', but you should use options.globals`,
-                };
-                onwarn(warning);
-            }
-            name = d.name;
-        }
-        return name;
-    });
-}
-function getGlobalFn(globals) {
-    if (typeof globals === 'function')
-        return globals;
-    if (typeof globals === 'object') {
-        return id => globals[id];
-    }
-    return () => undefined;
-}
-
-function clone(node) {
-    const cloned = {};
-    for (const key in node) {
-        const value = node[key];
-        if (Array.isArray(value)) {
-            cloned[key] = value.map(clone);
-        }
-        else if (value && typeof value === 'object') {
-            cloned[key] = clone(value);
-        }
-        else {
-            cloned[key] = value;
-        }
-    }
-    return cloned;
-}
-
-const test = typeof process !== 'undefined' && process.env.TEST;
-
-const svgAttributes = 'accent-height accumulate additive alignment-baseline allowReorder alphabetic amplitude arabic-form ascent attributeName attributeType autoReverse azimuth baseFrequency baseline-shift baseProfile bbox begin bias by calcMode cap-height class clip clipPathUnits clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominant-baseline dur dx dy edgeMode elevation enable-background end exponent externalResourcesRequired fill fill-opacity fill-rule filter filterRes filterUnits flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight format from fr fx fy g1 g2 glyph-name glyph-orientation-horizontal glyph-orientation-vertical glyphRef gradientTransform gradientUnits hanging height href horiz-adv-x horiz-origin-x id ideographic image-rendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lang lengthAdjust letter-spacing lighting-color limitingConeAngle local marker-end marker-mid marker-start markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical max media method min mode name numOctaves offset onabort onactivate onbegin onclick onend onerror onfocusin onfocusout onload onmousedown onmousemove onmouseout onmouseover onmouseup onrepeat onresize onscroll onunload opacity operator order orient orientation origin overflow overline-position overline-thickness panose-1 paint-order pathLength patternContentUnits patternTransform patternUnits pointer-events points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shape-rendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stop-color stop-opacity strikethrough-position strikethrough-thickness string stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width style surfaceScale systemLanguage tabindex tableValues target targetX targetY text-anchor text-decoration text-rendering textLength to transform type u1 u2 underline-position underline-thickness unicode unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical values version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget visibility width widths word-spacing writing-mode x x-height x1 x2 xChannelSelector xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space y y1 y2 yChannelSelector z zoomAndPan'.split(' ');
-const svgAttributeLookup = new Map();
-svgAttributes.forEach(name => {
-    svgAttributeLookup.set(name.toLowerCase(), name);
-});
-function fixAttributeCasing(name) {
-    name = name.toLowerCase();
-    return svgAttributeLookup.get(name) || name;
-}
-
-const binaryOperators = {
-    '**': 15,
-    '*': 14,
-    '/': 14,
-    '%': 14,
-    '+': 13,
-    '-': 13,
-    '<<': 12,
-    '>>': 12,
-    '>>>': 12,
-    '<': 11,
-    '<=': 11,
-    '>': 11,
-    '>=': 11,
-    'in': 11,
-    'instanceof': 11,
-    '==': 10,
-    '!=': 10,
-    '===': 10,
-    '!==': 10,
-    '&': 9,
-    '^': 8,
-    '|': 7
-};
-const logicalOperators = {
-    '&&': 6,
-    '||': 5
-};
-const precedence = {
-    Literal: () => 21,
-    Identifier: () => 21,
-    ParenthesizedExpression: () => 20,
-    MemberExpression: () => 19,
-    NewExpression: () => 19,
-    CallExpression: () => 19,
-    UpdateExpression: () => 17,
-    UnaryExpression: () => 16,
-    BinaryExpression: (expression) => binaryOperators[expression.operator],
-    LogicalExpression: (expression) => logicalOperators[expression.operator],
-    ConditionalExpression: () => 4,
-    AssignmentExpression: () => 3,
-    YieldExpression: () => 2,
-    SpreadElement: () => 1,
-    SequenceExpression: () => 0
-};
-function getExpressionPrecedence(expression) {
-    return expression.type in precedence ? precedence[expression.type](expression) : 0;
-}
-
-class Attribute {
-    constructor({ generator, name, value, parent }) {
-        this.type = 'Attribute';
-        this.generator = generator;
-        this.parent = parent;
-        this.name = name;
-        this.value = value;
-    }
-    render(block) {
-        const node = this.parent;
-        const name = fixAttributeCasing(this.name);
-        if (name === 'style') {
-            const styleProps = optimizeStyle(this.value);
-            if (styleProps) {
-                this.renderStyle(block, styleProps);
-                return;
-            }
-        }
-        let metadata = node.namespace ? null : attributeLookup[name];
-        if (metadata && metadata.appliesTo && !~metadata.appliesTo.indexOf(node.name))
-            metadata = null;
-        const isIndirectlyBoundValue = name === 'value' &&
-            (node.name === 'option' || // TODO check it's actually bound
-                (node.name === 'input' &&
-                    node.attributes.find((attribute) => attribute.type === 'Binding' && /checked|group/.test(attribute.name))));
-        const propertyName = isIndirectlyBoundValue
-            ? '__value'
-            : metadata && metadata.propertyName;
-        // xlink is a special case... we could maybe extend this to generic
-        // namespaced attributes but I'm not sure that's applicable in
-        // HTML5?
-        const method = name.slice(0, 6) === 'xlink:'
-            ? '@setXlinkAttribute'
-            : '@setAttribute';
-        const isDynamic = this.isDynamic();
-        const isLegacyInputType = this.generator.legacy && name === 'type' && this.parent.name === 'input';
-        const isDataSet = /^data-/.test(name) && !this.generator.legacy && !node.namespace;
-        const camelCaseName = isDataSet ? name.replace('data-', '').replace(/(-\w)/g, function (m) {
-            return m[1].toUpperCase();
-        }) : name;
-        if (isDynamic) {
-            let value;
-            const allDependencies = new Set();
-            let shouldCache;
-            let hasChangeableIndex;
-            // TODO some of this code is repeated in Tag.ts — would be good to
-            // DRY it out if that's possible without introducing crazy indirection
-            if (this.value.length === 1) {
-                // single {{tag}} — may be a non-string
-                const { expression } = this.value[0];
-                const { indexes } = block.contextualise(expression);
-                const { dependencies, snippet } = this.value[0].metadata;
-                value = snippet;
-                dependencies.forEach(d => {
-                    allDependencies.add(d);
-                });
-                hasChangeableIndex = Array.from(indexes).some(index => block.changeableIndexes.get(index));
-                shouldCache = (expression.type !== 'Identifier' ||
-                    block.contexts.has(expression.name) ||
-                    hasChangeableIndex);
-            }
-            else {
-                // '{{foo}} {{bar}}' — treat as string concatenation
-                value =
-                    (this.value[0].type === 'Text' ? '' : `"" + `) +
-                        this.value
-                            .map((chunk) => {
-                            if (chunk.type === 'Text') {
-                                return stringify(chunk.data);
-                            }
-                            else {
-                                const { indexes } = block.contextualise(chunk.expression);
-                                const { dependencies, snippet } = chunk.metadata;
-                                if (Array.from(indexes).some(index => block.changeableIndexes.get(index))) {
-                                    hasChangeableIndex = true;
-                                }
-                                dependencies.forEach(d => {
-                                    allDependencies.add(d);
-                                });
-                                return getExpressionPrecedence(chunk.expression) <= 13 ? `(${snippet})` : snippet;
-                            }
-                        })
-                            .join(' + ');
-                shouldCache = true;
-            }
-            const isSelectValueAttribute = name === 'value' && node.name === 'select';
-            const last = (shouldCache || isSelectValueAttribute) && block.getUniqueName(`${node.var}_${name.replace(/[^a-zA-Z_$]/g, '_')}_value`);
-            if (shouldCache || isSelectValueAttribute)
-                block.addVariable(last);
-            let updater;
-            const init = shouldCache ? `${last} = ${value}` : value;
-            if (isLegacyInputType) {
-                block.builders.hydrate.addLine(`@setInputType(${node.var}, ${init});`);
-                updater = `@setInputType(${node.var}, ${shouldCache ? last : value});`;
-            }
-            else if (isSelectValueAttribute) {
-                // annoying special case
-                const isMultipleSelect = node.getStaticAttributeValue('multiple');
-                const i = block.getUniqueName('i');
-                const option = block.getUniqueName('option');
-                const ifStatement = isMultipleSelect
-                    ? deindent `
-						${option}.selected = ~${last}.indexOf(${option}.__value);`
-                    : deindent `
-						if (${option}.__value === ${last}) {
-							${option}.selected = true;
-							break;
-						}`;
-                updater = deindent `
-					for (var ${i} = 0; ${i} < ${node.var}.options.length; ${i} += 1) {
-						var ${option} = ${node.var}.options[${i}];
-
-						${ifStatement}
-					}
-				`;
-                block.builders.hydrate.addBlock(deindent `
-					${last} = ${value};
-					${updater}
-				`);
-                block.builders.update.addLine(`${last} = ${value};`);
-            }
-            else if (propertyName) {
-                block.builders.hydrate.addLine(`${node.var}.${propertyName} = ${init};`);
-                updater = `${node.var}.${propertyName} = ${shouldCache ? last : value};`;
-            }
-            else if (isDataSet) {
-                block.builders.hydrate.addLine(`${node.var}.dataset.${camelCaseName} = ${init};`);
-                updater = `${node.var}.dataset.${camelCaseName} = ${shouldCache ? last : value};`;
-            }
-            else {
-                block.builders.hydrate.addLine(`${method}(${node.var}, "${name}", ${init});`);
-                updater = `${method}(${node.var}, "${name}", ${shouldCache ? last : value});`;
-            }
-            if (allDependencies.size || hasChangeableIndex || isSelectValueAttribute) {
-                const dependencies = Array.from(allDependencies);
-                const changedCheck = ((block.hasOutroMethod ? `#outroing || ` : '') +
-                    dependencies.map(dependency => `changed.${dependency}`).join(' || '));
-                const updateCachedValue = `${last} !== (${last} = ${value})`;
-                const condition = shouldCache ?
-                    (dependencies.length ? `(${changedCheck}) && ${updateCachedValue}` : updateCachedValue) :
-                    changedCheck;
-                block.builders.update.addConditional(condition, updater);
-            }
-        }
-        else {
-            const value = this.value === true
-                ? 'true'
-                : this.value.length === 0 ? `""` : stringify(this.value[0].data);
-            const statement = (isLegacyInputType
-                ? `@setInputType(${node.var}, ${value});`
-                : propertyName
-                    ? `${node.var}.${propertyName} = ${value};`
-                    : isDataSet
-                        ? `${node.var}.dataset.${camelCaseName} = ${value};`
-                        : `${method}(${node.var}, "${name}", ${value});`);
-            block.builders.hydrate.addLine(statement);
-            // special case – autofocus. has to be handled in a bit of a weird way
-            if (this.value === true && name === 'autofocus') {
-                block.autofocus = node.var;
-            }
-        }
-        if (isIndirectlyBoundValue) {
-            const updateValue = `${node.var}.value = ${node.var}.__value;`;
-            block.builders.hydrate.addLine(updateValue);
-            if (isDynamic)
-                block.builders.update.addLine(updateValue);
-        }
-    }
-    renderStyle(block, styleProps) {
-        styleProps.forEach((prop) => {
-            let value;
-            if (isDynamic$1(prop.value)) {
-                const allDependencies = new Set();
-                let hasChangeableIndex;
-                value =
-                    ((prop.value.length === 1 || prop.value[0].type === 'Text') ? '' : `"" + `) +
-                        prop.value
-                            .map((chunk) => {
-                            if (chunk.type === 'Text') {
-                                return stringify(chunk.data);
-                            }
-                            else {
-                                const { indexes } = block.contextualise(chunk.expression);
-                                const { dependencies, snippet } = chunk.metadata;
-                                if (Array.from(indexes).some(index => block.changeableIndexes.get(index))) {
-                                    hasChangeableIndex = true;
-                                }
-                                dependencies.forEach(d => {
-                                    allDependencies.add(d);
-                                });
-                                return getExpressionPrecedence(chunk.expression) <= 13 ? `( ${snippet} )` : snippet;
-                            }
-                        })
-                            .join(' + ');
-                if (allDependencies.size || hasChangeableIndex) {
-                    const dependencies = Array.from(allDependencies);
-                    const condition = ((block.hasOutroMethod ? `#outroing || ` : '') +
-                        dependencies.map(dependency => `changed.${dependency}`).join(' || '));
-                    block.builders.update.addConditional(condition, `@setStyle(${this.parent.var}, "${prop.key}", ${value});`);
-                }
-            }
-            else {
-                value = stringify(prop.value[0].data);
-            }
-            block.builders.hydrate.addLine(`@setStyle(${this.parent.var}, "${prop.key}", ${value});`);
-        });
-    }
-    isDynamic() {
-        if (this.value === true || this.value.length === 0)
-            return false;
-        if (this.value.length > 1)
-            return true;
-        return this.value[0].type !== 'Text';
-    }
-}
-// source: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
-const attributeLookup = {
-    accept: { appliesTo: ['form', 'input'] },
-    'accept-charset': { propertyName: 'acceptCharset', appliesTo: ['form'] },
-    accesskey: { propertyName: 'accessKey' },
-    action: { appliesTo: ['form'] },
-    align: {
-        appliesTo: [
-            'applet',
-            'caption',
-            'col',
-            'colgroup',
-            'hr',
-            'iframe',
-            'img',
-            'table',
-            'tbody',
-            'td',
-            'tfoot',
-            'th',
-            'thead',
-            'tr',
-        ],
-    },
-    allowfullscreen: { propertyName: 'allowFullscreen', appliesTo: ['iframe'] },
-    alt: { appliesTo: ['applet', 'area', 'img', 'input'] },
-    async: { appliesTo: ['script'] },
-    autocomplete: { appliesTo: ['form', 'input'] },
-    autofocus: { appliesTo: ['button', 'input', 'keygen', 'select', 'textarea'] },
-    autoplay: { appliesTo: ['audio', 'video'] },
-    autosave: { appliesTo: ['input'] },
-    bgcolor: {
-        propertyName: 'bgColor',
-        appliesTo: [
-            'body',
-            'col',
-            'colgroup',
-            'marquee',
-            'table',
-            'tbody',
-            'tfoot',
-            'td',
-            'th',
-            'tr',
-        ],
-    },
-    border: { appliesTo: ['img', 'object', 'table'] },
-    buffered: { appliesTo: ['audio', 'video'] },
-    challenge: { appliesTo: ['keygen'] },
-    charset: { appliesTo: ['meta', 'script'] },
-    checked: { appliesTo: ['command', 'input'] },
-    cite: { appliesTo: ['blockquote', 'del', 'ins', 'q'] },
-    class: { propertyName: 'className' },
-    code: { appliesTo: ['applet'] },
-    codebase: { propertyName: 'codeBase', appliesTo: ['applet'] },
-    color: { appliesTo: ['basefont', 'font', 'hr'] },
-    cols: { appliesTo: ['textarea'] },
-    colspan: { propertyName: 'colSpan', appliesTo: ['td', 'th'] },
-    content: { appliesTo: ['meta'] },
-    contenteditable: { propertyName: 'contentEditable' },
-    contextmenu: {},
-    controls: { appliesTo: ['audio', 'video'] },
-    coords: { appliesTo: ['area'] },
-    data: { appliesTo: ['object'] },
-    datetime: { propertyName: 'dateTime', appliesTo: ['del', 'ins', 'time'] },
-    default: { appliesTo: ['track'] },
-    defer: { appliesTo: ['script'] },
-    dir: {},
-    dirname: { propertyName: 'dirName', appliesTo: ['input', 'textarea'] },
-    disabled: {
-        appliesTo: [
-            'button',
-            'command',
-            'fieldset',
-            'input',
-            'keygen',
-            'optgroup',
-            'option',
-            'select',
-            'textarea',
-        ],
-    },
-    download: { appliesTo: ['a', 'area'] },
-    draggable: {},
-    dropzone: {},
-    enctype: { appliesTo: ['form'] },
-    for: { propertyName: 'htmlFor', appliesTo: ['label', 'output'] },
-    form: {
-        appliesTo: [
-            'button',
-            'fieldset',
-            'input',
-            'keygen',
-            'label',
-            'meter',
-            'object',
-            'output',
-            'progress',
-            'select',
-            'textarea',
-        ],
-    },
-    formaction: { appliesTo: ['input', 'button'] },
-    headers: { appliesTo: ['td', 'th'] },
-    height: {
-        appliesTo: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],
-    },
-    hidden: {},
-    high: { appliesTo: ['meter'] },
-    href: { appliesTo: ['a', 'area', 'base', 'link'] },
-    hreflang: { appliesTo: ['a', 'area', 'link'] },
-    'http-equiv': { propertyName: 'httpEquiv', appliesTo: ['meta'] },
-    icon: { appliesTo: ['command'] },
-    id: {},
-    indeterminate: { appliesTo: ['input'] },
-    ismap: { propertyName: 'isMap', appliesTo: ['img'] },
-    itemprop: {},
-    keytype: { appliesTo: ['keygen'] },
-    kind: { appliesTo: ['track'] },
-    label: { appliesTo: ['track'] },
-    lang: {},
-    language: { appliesTo: ['script'] },
-    loop: { appliesTo: ['audio', 'bgsound', 'marquee', 'video'] },
-    low: { appliesTo: ['meter'] },
-    manifest: { appliesTo: ['html'] },
-    max: { appliesTo: ['input', 'meter', 'progress'] },
-    maxlength: { propertyName: 'maxLength', appliesTo: ['input', 'textarea'] },
-    media: { appliesTo: ['a', 'area', 'link', 'source', 'style'] },
-    method: { appliesTo: ['form'] },
-    min: { appliesTo: ['input', 'meter'] },
-    multiple: { appliesTo: ['input', 'select'] },
-    muted: { appliesTo: ['audio', 'video'] },
-    name: {
-        appliesTo: [
-            'button',
-            'form',
-            'fieldset',
-            'iframe',
-            'input',
-            'keygen',
-            'object',
-            'output',
-            'select',
-            'textarea',
-            'map',
-            'meta',
-            'param',
-        ],
-    },
-    novalidate: { propertyName: 'noValidate', appliesTo: ['form'] },
-    open: { appliesTo: ['details'] },
-    optimum: { appliesTo: ['meter'] },
-    pattern: { appliesTo: ['input'] },
-    ping: { appliesTo: ['a', 'area'] },
-    placeholder: { appliesTo: ['input', 'textarea'] },
-    poster: { appliesTo: ['video'] },
-    preload: { appliesTo: ['audio', 'video'] },
-    radiogroup: { appliesTo: ['command'] },
-    readonly: { propertyName: 'readOnly', appliesTo: ['input', 'textarea'] },
-    rel: { appliesTo: ['a', 'area', 'link'] },
-    required: { appliesTo: ['input', 'select', 'textarea'] },
-    reversed: { appliesTo: ['ol'] },
-    rows: { appliesTo: ['textarea'] },
-    rowspan: { propertyName: 'rowSpan', appliesTo: ['td', 'th'] },
-    sandbox: { appliesTo: ['iframe'] },
-    scope: { appliesTo: ['th'] },
-    scoped: { appliesTo: ['style'] },
-    seamless: { appliesTo: ['iframe'] },
-    selected: { appliesTo: ['option'] },
-    shape: { appliesTo: ['a', 'area'] },
-    size: { appliesTo: ['input', 'select'] },
-    sizes: { appliesTo: ['link', 'img', 'source'] },
-    span: { appliesTo: ['col', 'colgroup'] },
-    spellcheck: {},
-    src: {
-        appliesTo: [
-            'audio',
-            'embed',
-            'iframe',
-            'img',
-            'input',
-            'script',
-            'source',
-            'track',
-            'video',
-        ],
-    },
-    srcdoc: { appliesTo: ['iframe'] },
-    srclang: { appliesTo: ['track'] },
-    srcset: { appliesTo: ['img'] },
-    start: { appliesTo: ['ol'] },
-    step: { appliesTo: ['input'] },
-    style: { propertyName: 'style.cssText' },
-    summary: { appliesTo: ['table'] },
-    tabindex: { propertyName: 'tabIndex' },
-    target: { appliesTo: ['a', 'area', 'base', 'form'] },
-    title: {},
-    type: {
-        appliesTo: [
-            'button',
-            'command',
-            'embed',
-            'object',
-            'script',
-            'source',
-            'style',
-            'menu',
-        ],
-    },
-    usemap: { propertyName: 'useMap', appliesTo: ['img', 'input', 'object'] },
-    value: {
-        appliesTo: [
-            'button',
-            'option',
-            'input',
-            'li',
-            'meter',
-            'progress',
-            'param',
-            'select',
-            'textarea',
-        ],
-    },
-    volume: { appliesTo: ['audio', 'video'] },
-    width: {
-        appliesTo: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],
-    },
-    wrap: { appliesTo: ['textarea'] },
-};
-Object.keys(attributeLookup).forEach(name => {
-    const metadata = attributeLookup[name];
-    if (!metadata.propertyName)
-        metadata.propertyName = name;
-});
-function optimizeStyle(value) {
-    const props = [];
-    let chunks = value.slice();
-    while (chunks.length) {
-        const chunk = chunks[0];
-        if (chunk.type !== 'Text')
-            return null;
-        const keyMatch = /^\s*([\w-]+):\s*/.exec(chunk.data);
-        if (!keyMatch)
-            return null;
-        const key = keyMatch[1];
-        const offset = keyMatch.index + keyMatch[0].length;
-        const remainingData = chunk.data.slice(offset);
-        if (remainingData) {
-            chunks[0] = {
-                start: chunk.start + offset,
-                end: chunk.end,
-                type: 'Text',
-                data: remainingData
-            };
-        }
-        else {
-            chunks.shift();
-        }
-        const result = getStyleValue(chunks);
-        if (!result)
-            return null;
-        props.push({ key, value: result.value });
-        chunks = result.chunks;
-    }
-    return props;
-}
-function getStyleValue(chunks) {
-    const value = [];
-    let inUrl = false;
-    let quoteMark = null;
-    let escaped = false;
-    while (chunks.length) {
-        const chunk = chunks.shift();
-        if (chunk.type === 'Text') {
-            let c = 0;
-            while (c < chunk.data.length) {
-                const char = chunk.data[c];
-                if (escaped) {
-                    escaped = false;
-                }
-                else if (char === '\\') {
-                    escaped = true;
-                }
-                else if (char === quoteMark) {
-                }
-                else if (char === '"' || char === "'") {
-                    quoteMark = char;
-                }
-                else if (char === ')' && inUrl) {
-                    inUrl = false;
-                }
-                else if (char === 'u' && chunk.data.slice(c, c + 4) === 'url(') {
-                    inUrl = true;
-                }
-                else if (char === ';' && !inUrl && !quoteMark) {
-                    break;
-                }
-                c += 1;
-            }
-            if (c > 0) {
-                value.push({
-                    type: 'Text',
-                    start: chunk.start,
-                    end: chunk.start + c,
-                    data: chunk.data.slice(0, c)
-                });
-            }
-            while (/[;\s]/.test(chunk.data[c]))
-                c += 1;
-            const remainingData = chunk.data.slice(c);
-            if (remainingData) {
-                chunks.unshift({
-                    start: chunk.start + c,
-                    end: chunk.end,
-                    type: 'Text',
-                    data: remainingData
-                });
-                break;
-            }
-        }
-        else {
-            value.push(chunk);
-        }
-    }
-    return {
-        chunks,
-        value
-    };
-}
-function isDynamic$1(value) {
-    return value.length > 1 || value[0].type !== 'Text';
-}
-
-let Node$1 = class Node {
-    constructor(data) {
-        Object.assign(this, data);
-    }
-    cannotUseInnerHTML() {
-        if (this.canUseInnerHTML !== false) {
-            this.canUseInnerHTML = false;
-            if (this.parent) {
-                if (!this.parent.cannotUseInnerHTML)
-                    console.log(this.parent.type, this.type);
-                this.parent.cannotUseInnerHTML();
-            }
-        }
-    }
-    init(block, stripWhitespace, nextSibling) {
-        // implemented by subclasses
-    }
-    initChildren(block, stripWhitespace, nextSibling) {
-        // glue text nodes together
-        const cleaned = [];
-        let lastChild;
-        let windowComponent;
-        this.children.forEach((child) => {
-            if (child.type === 'Comment')
-                return;
-            // special case — this is an easy way to remove whitespace surrounding
-            // <:Window/>. lil hacky but it works
-            if (child.type === 'Window') {
-                windowComponent = child;
-                return;
-            }
-            if (child.type === 'Text' && lastChild && lastChild.type === 'Text') {
-                lastChild.data += child.data;
-                lastChild.end = child.end;
-            }
-            else {
-                if (child.type === 'Text' && stripWhitespace && cleaned.length === 0) {
-                    child.data = trimStart(child.data);
-                    if (child.data)
-                        cleaned.push(child);
-                }
-                else {
-                    cleaned.push(child);
-                }
-            }
-            lastChild = child;
-        });
-        lastChild = null;
-        cleaned.forEach((child, i) => {
-            child.canUseInnerHTML = !this.generator.hydratable;
-            child.init(block, stripWhitespace, cleaned[i + 1] || nextSibling);
-            if (child.shouldSkip)
-                return;
-            if (lastChild)
-                lastChild.next = child;
-            child.prev = lastChild;
-            lastChild = child;
-        });
-        // We want to remove trailing whitespace inside an element/component/block,
-        // *unless* there is no whitespace between this node and its next sibling
-        if (stripWhitespace && lastChild && lastChild.type === 'Text') {
-            const shouldTrim = (nextSibling ? (nextSibling.type === 'Text' && /^\s/.test(nextSibling.data)) : !this.hasAncestor('EachBlock'));
-            if (shouldTrim) {
-                lastChild.data = trimEnd(lastChild.data);
-                if (!lastChild.data) {
-                    cleaned.pop();
-                    lastChild = cleaned[cleaned.length - 1];
-                    lastChild.next = null;
-                }
-            }
-        }
-        this.children = cleaned;
-        if (windowComponent)
-            cleaned.unshift(windowComponent);
-    }
-    build(block, parentNode, parentNodes) {
-        // implemented by subclasses
-    }
-    isDomNode() {
-        return this.type === 'Element' || this.type === 'Text' || this.type === 'MustacheTag';
-    }
-    hasAncestor(type) {
-        return this.parent ?
-            this.parent.type === type || this.parent.hasAncestor(type) :
-            false;
-    }
-    findNearest(selector) {
-        if (selector.test(this.type))
-            return this;
-        if (this.parent)
-            return this.parent.findNearest(selector);
-    }
-    getOrCreateAnchor(block, parentNode, parentNodes) {
-        // TODO use this in EachBlock and IfBlock — tricky because
-        // children need to be created first
-        const needsAnchor = this.next ? !this.next.isDomNode() : !parentNode || !this.parent.isDomNode();
-        const anchor = needsAnchor
-            ? block.getUniqueName(`${this.var}_anchor`)
-            : (this.next && this.next.var) || 'null';
-        if (needsAnchor) {
-            block.addElement(anchor, `@createComment()`, parentNodes && `@createComment()`, parentNode);
-        }
-        return anchor;
-    }
-    getUpdateMountNode(anchor) {
-        return this.parent.isDomNode() ? this.parent.var : `${anchor}.parentNode`;
-    }
-    remount(name) {
-        return `${this.var}.m(${name}._slotted${this.generator.legacy ? `["default"]` : `.default`}, null);`;
-    }
-};
-
-function createDebuggingComment(node, generator) {
-    const { locate, source } = generator;
-    let c = node.start;
-    if (node.type === 'ElseBlock') {
-        while (source[c] !== '{')
-            c -= 1;
-        c -= 1;
-    }
-    let d = node.expression ? node.expression.end : c;
-    while (source[d] !== '}')
-        d += 1;
-    d += 2;
-    const start = locate(c);
-    const loc = `(${start.line + 1}:${start.column})`;
-    return `${loc} ${source.slice(c, d)}`.replace(/\s/g, ' ');
-}
-
-class AwaitBlock extends Node$1 {
-    init(block, stripWhitespace, nextSibling) {
-        this.cannotUseInnerHTML();
-        this.var = block.getUniqueName('await_block');
-        block.addDependencies(this.metadata.dependencies);
-        let dynamic = false;
-        [
-            ['pending', null],
-            ['then', this.value],
-            ['catch', this.error]
-        ].forEach(([status, arg]) => {
-            const child = this[status];
-            child.block = block.child({
-                comment: createDebuggingComment(child, this.generator),
-                name: this.generator.getUniqueName(`create_${status}_block`),
-                contexts: new Map(block.contexts),
-                contextTypes: new Map(block.contextTypes)
-            });
-            if (arg) {
-                child.block.context = arg;
-                child.block.contexts.set(arg, arg); // TODO should be using getUniqueName
-                child.block.contextTypes.set(arg, status);
-            }
-            child.initChildren(child.block, stripWhitespace, nextSibling);
-            this.generator.blocks.push(child.block);
-            if (child.block.dependencies.size > 0) {
-                dynamic = true;
-                block.addDependencies(child.block.dependencies);
-            }
-        });
-        this.pending.block.hasUpdateMethod = dynamic;
-        this.then.block.hasUpdateMethod = dynamic;
-        this.catch.block.hasUpdateMethod = dynamic;
-    }
-    build(block, parentNode, parentNodes) {
-        const name = this.var;
-        const anchor = this.getOrCreateAnchor(block, parentNode, parentNodes);
-        const updateMountNode = this.getUpdateMountNode(anchor);
-        block.contextualise(this.expression);
-        const { snippet } = this.metadata;
-        const promise = block.getUniqueName(`promise`);
-        const resolved = block.getUniqueName(`resolved`);
-        const await_block = block.getUniqueName(`await_block`);
-        const await_block_type = block.getUniqueName(`await_block_type`);
-        const token = block.getUniqueName(`token`);
-        const await_token = block.getUniqueName(`await_token`);
-        const handle_promise = block.getUniqueName(`handle_promise`);
-        const replace_await_block = block.getUniqueName(`replace_await_block`);
-        const old_block = block.getUniqueName(`old_block`);
-        const value = block.getUniqueName(`value`);
-        const error = block.getUniqueName(`error`);
-        const create_pending_block = this.pending.block.name;
-        const create_then_block = this.then.block.name;
-        const create_catch_block = this.catch.block.name;
-        block.addVariable(await_block);
-        block.addVariable(await_block_type);
-        block.addVariable(await_token);
-        block.addVariable(promise);
-        block.addVariable(resolved);
-        // the `#component.root.set({})` below is just a cheap way to flush
-        // any oncreate handlers. We could have a dedicated `flush()` method
-        // but it's probably not worth it
-        block.builders.init.addBlock(deindent `
-			function ${replace_await_block}(${token}, type, state) {
-				if (${token} !== ${await_token}) return;
-
-				var ${old_block} = ${await_block};
-				${await_block} = type && (${await_block_type} = type)(#component, state);
-
-				if (${old_block}) {
-					${old_block}.u();
-					${old_block}.d();
-					${await_block}.c();
-					${await_block}.m(${updateMountNode}, ${anchor});
-
-					#component.root.set({});
-				}
-			}
-
-			function ${handle_promise}(${promise}, state) {
-				var ${token} = ${await_token} = {};
-
-				if (@isPromise(${promise})) {
-					${promise}.then(function(${value}) {
-						${this.then.block.context ? deindent `
-							var state = #component.get();
-							${resolved} = { ${this.then.block.context}: ${value} };
-							${replace_await_block}(${token}, ${create_then_block}, @assign(@assign({}, state), ${resolved}));
-						` : deindent `
-							${replace_await_block}(${token}, null, null);
-						`}
-					}, function (${error}) {
-						${this.catch.block.context ? deindent `
-							var state = #component.get();
-							${resolved} = { ${this.catch.block.context}: ${error} };
-							${replace_await_block}(${token}, ${create_catch_block}, @assign(@assign({}, state), ${resolved}));
-						` : deindent `
-							${replace_await_block}(${token}, null, null);
-						`}
-					});
-
-					// if we previously had a then/catch block, destroy it
-					if (${await_block_type} !== ${create_pending_block}) {
-						${replace_await_block}(${token}, ${create_pending_block}, state);
-						return true;
-					}
-				} else {
-					${resolved} = { ${this.then.block.context}: ${promise} };
-					if (${await_block_type} !== ${create_then_block}) {
-						${replace_await_block}(${token}, ${create_then_block}, @assign(@assign({}, state), ${resolved}));
-						return true;
-					}
-				}
-			}
-
-			${handle_promise}(${promise} = ${snippet}, state);
-		`);
-        block.builders.create.addBlock(deindent `
-			${await_block}.c();
-		`);
-        if (parentNodes) {
-            block.builders.claim.addBlock(deindent `
-				${await_block}.l(${parentNodes});
-			`);
-        }
-        const initialMountNode = parentNode || '#target';
-        const anchorNode = parentNode ? 'null' : 'anchor';
-        block.builders.mount.addBlock(deindent `
-			${await_block}.m(${initialMountNode}, ${anchorNode});
-		`);
-        const conditions = [];
-        if (this.metadata.dependencies) {
-            conditions.push(`(${this.metadata.dependencies.map(dep => `'${dep}' in changed`).join(' || ')})`);
-        }
-        conditions.push(`${promise} !== (${promise} = ${snippet})`, `${handle_promise}(${promise}, state)`);
-        if (this.pending.block.hasUpdateMethod) {
-            block.builders.update.addBlock(deindent `
-				if (${conditions.join(' && ')}) {
-					// nothing
-				} else {
-					${await_block}.p(changed, @assign(@assign({}, state), ${resolved}));
-				}
-			`);
-        }
-        else {
-            block.builders.update.addBlock(deindent `
-				if (${conditions.join(' && ')}) {
-					${await_block}.c();
-					${await_block}.m(${anchor}.parentNode, ${anchor});
-				}
-			`);
-        }
-        block.builders.unmount.addBlock(deindent `
-			${await_block}.u();
-		`);
-        block.builders.destroy.addBlock(deindent `
-			${await_token} = null;
-			${await_block}.d();
-		`);
-        [this.pending, this.then, this.catch].forEach(status => {
-            status.children.forEach(child => {
-                child.build(status.block, null, 'nodes');
-            });
-        });
-    }
-}
-
-class Action extends Node$1 {
-}
-
-function getObject(node) {
-    while (node.type === 'MemberExpression')
-        node = node.object;
-    return node;
-}
-
-function getTailSnippet(node) {
-    const end = node.end;
-    while (node.type === 'MemberExpression')
-        node = node.object;
-    const start = node.end;
-    return `[✂${start}-${end}✂]`;
-}
-
-const readOnlyMediaAttributes = new Set([
-    'duration',
-    'buffered',
-    'seekable',
-    'played'
-]);
-class Binding extends Node$1 {
-    munge(block, allUsedContexts) {
-        const node = this.parent;
-        const needsLock = node.name !== 'input' || !/radio|checkbox|range|color/.test(node.getStaticAttributeValue('type'));
-        const isReadOnly = node.isMediaNode() && readOnlyMediaAttributes.has(this.name);
-        let updateCondition;
-        const { name } = getObject(this.value);
-        const { contexts } = block.contextualise(this.value);
-        const { snippet } = this.metadata;
-        // special case: if you have e.g. `<input type=checkbox bind:checked=selected.done>`
-        // and `selected` is an object chosen with a <select>, then when `checked` changes,
-        // we need to tell the component to update all the values `selected` might be
-        // pointing to
-        // TODO should this happen in preprocess?
-        const dependencies = this.metadata.dependencies.slice();
-        this.metadata.dependencies.forEach((prop) => {
-            const indirectDependencies = this.generator.indirectDependencies.get(prop);
-            if (indirectDependencies) {
-                indirectDependencies.forEach(indirectDependency => {
-                    if (!~dependencies.indexOf(indirectDependency))
-                        dependencies.push(indirectDependency);
-                });
-            }
-        });
-        contexts.forEach(context => {
-            allUsedContexts.add(context);
-        });
-        // view to model
-        const valueFromDom = getValueFromDom(this.generator, node, this);
-        const handler = getEventHandler(this.generator, block, name, snippet, this, dependencies, valueFromDom);
-        // model to view
-        let updateDom = getDomUpdater(node, this, snippet);
-        let initialUpdate = updateDom;
-        // special cases
-        if (this.name === 'group') {
-            const bindingGroup = getBindingGroup(this.generator, this.value);
-            block.builders.hydrate.addLine(`#component._bindingGroups[${bindingGroup}].push(${node.var});`);
-            block.builders.destroy.addLine(`#component._bindingGroups[${bindingGroup}].splice(#component._bindingGroups[${bindingGroup}].indexOf(${node.var}), 1);`);
-        }
-        if (this.name === 'currentTime' || this.name === 'volume') {
-            updateCondition = `!isNaN(${snippet})`;
-            if (this.name === 'currentTime')
-                initialUpdate = null;
-        }
-        if (this.name === 'paused') {
-            // this is necessary to prevent audio restarting by itself
-            const last = block.getUniqueName(`${node.var}_is_paused`);
-            block.addVariable(last, 'true');
-            updateCondition = `${last} !== (${last} = ${snippet})`;
-            updateDom = `${node.var}[${last} ? "pause" : "play"]();`;
-            initialUpdate = null;
-        }
-        return {
-            name: this.name,
-            object: name,
-            handler,
-            updateDom,
-            initialUpdate,
-            needsLock: !isReadOnly && needsLock,
-            updateCondition,
-            isReadOnlyMediaAttribute: this.isReadOnlyMediaAttribute()
-        };
-    }
-    isReadOnlyMediaAttribute() {
-        return readOnlyMediaAttributes.has(this.name);
-    }
-}
-function getDomUpdater(node, binding, snippet) {
-    if (binding.isReadOnlyMediaAttribute()) {
-        return null;
-    }
-    if (node.name === 'select') {
-        return node.getStaticAttributeValue('multiple') === true ?
-            `@selectOptions(${node.var}, ${snippet})` :
-            `@selectOption(${node.var}, ${snippet})`;
-    }
-    if (binding.name === 'group') {
-        const type = node.getStaticAttributeValue('type');
-        const condition = type === 'checkbox'
-            ? `~${snippet}.indexOf(${node.var}.__value)`
-            : `${node.var}.__value === ${snippet}`;
-        return `${node.var}.checked = ${condition};`;
-    }
-    return `${node.var}.${binding.name} = ${snippet};`;
-}
-function getBindingGroup(generator, value) {
-    const { parts } = flatten(value); // TODO handle cases involving computed member expressions
-    const keypath = parts.join('.');
-    // TODO handle contextual bindings — `keypath` should include unique ID of
-    // each block that provides context
-    let index = generator.bindingGroups.indexOf(keypath);
-    if (index === -1) {
-        index = generator.bindingGroups.length;
-        generator.bindingGroups.push(keypath);
-    }
-    return index;
-}
-function getEventHandler(generator, block, name, snippet, attribute, dependencies, value) {
-    let storeDependencies = [];
-    if (generator.options.store) {
-        storeDependencies = dependencies.filter(prop => prop[0] === '$').map(prop => prop.slice(1));
-        dependencies = dependencies.filter(prop => prop[0] !== '$');
-    }
-    if (block.contexts.has(name)) {
-        const tail = attribute.value.type === 'MemberExpression'
-            ? getTailSnippet(attribute.value)
-            : '';
-        const list = `context.${block.listNames.get(name)}`;
-        const index = `context.${block.indexNames.get(name)}`;
-        return {
-            usesContext: true,
-            usesState: true,
-            usesStore: storeDependencies.length > 0,
-            mutation: `${list}[${index}]${tail} = ${value};`,
-            props: dependencies.map(prop => `${prop}: state.${prop}`),
-            storeProps: storeDependencies.map(prop => `${prop}: $.${prop}`)
-        };
-    }
-    if (attribute.value.type === 'MemberExpression') {
-        // This is a little confusing, and should probably be tidied up
-        // at some point. It addresses a tricky bug (#893), wherein
-        // Svelte tries to `set()` a computed property, which throws an
-        // error in dev mode. a) it's possible that we should be
-        // replacing computations with *their* dependencies, and b)
-        // we should probably populate `generator.readonly` sooner so
-        // that we don't have to do the `.some()` here
-        dependencies = dependencies.filter(prop => !generator.computations.some(computation => computation.key === prop));
-        return {
-            usesContext: false,
-            usesState: true,
-            usesStore: storeDependencies.length > 0,
-            mutation: `${snippet} = ${value}`,
-            props: dependencies.map((prop) => `${prop}: state.${prop}`),
-            storeProps: storeDependencies.map(prop => `${prop}: $.${prop}`)
-        };
-    }
-    let props;
-    let storeProps;
-    if (generator.options.store && name[0] === '$') {
-        props = [];
-        storeProps = [`${name.slice(1)}: ${value}`];
-    }
-    else {
-        props = [`${name}: ${value}`];
-        storeProps = [];
-    }
-    return {
-        usesContext: false,
-        usesState: false,
-        usesStore: false,
-        mutation: null,
-        props,
-        storeProps
-    };
-}
-function getValueFromDom(generator, node, binding) {
-    // <select bind:value='selected>
-    if (node.name === 'select') {
-        return node.getStaticAttributeValue('multiple') === true ?
-            `@selectMultipleValue(${node.var})` :
-            `@selectValue(${node.var})`;
-    }
-    const type = node.getStaticAttributeValue('type');
-    // <input type='checkbox' bind:group='foo'>
-    if (binding.name === 'group') {
-        const bindingGroup = getBindingGroup(generator, binding.value);
-        if (type === 'checkbox') {
-            return `@getBindingGroupValue(#component._bindingGroups[${bindingGroup}])`;
-        }
-        return `${node.var}.__value`;
-    }
-    // <input type='range|number' bind:value>
-    if (type === 'range' || type === 'number') {
-        return `@toNumber(${node.var}.${binding.name})`;
-    }
-    if ((binding.name === 'buffered' || binding.name === 'seekable' || binding.name === 'played')) {
-        return `@timeRangesToArray(${node.var}.${binding.name})`;
-    }
-    // everything else
-    return `${node.var}.${binding.name}`;
-}
-
-class CatchBlock extends Node$1 {
-}
-
-let Comment$1 = class Comment extends Node$1 {
-};
-
-function stringifyProps(props) {
-    if (!props.length)
-        return '{}';
-    const joined = props.join(', ');
-    if (joined.length > 40) {
-        // make larger data objects readable
-        return `{\n\t${props.join(',\n\t')}\n}`;
-    }
-    return `{ ${joined} }`;
-}
-
-function quoteIfNecessary(name, legacy) {
-    if (!isValidIdentifier(name) || (legacy && reservedNames.has(name)))
-        return `"${name}"`;
-    return name;
-}
-
-function mungeAttribute(attribute, block) {
-    if (attribute.type === 'Spread') {
-        block.contextualise(attribute.expression); // TODO remove
-        const { dependencies, snippet } = attribute.metadata;
-        return {
-            spread: true,
-            name: null,
-            value: snippet,
-            dynamic: dependencies.length > 0,
-            dependencies
-        };
-    }
-    if (attribute.value === true) {
-        // attributes without values, e.g. <textarea readonly>
-        return {
-            spread: false,
-            name: attribute.name,
-            value: true,
-            dynamic: false,
-            dependencies: []
-        };
-    }
-    if (attribute.value.length === 0) {
-        return {
-            spread: false,
-            name: attribute.name,
-            value: `''`,
-            dynamic: false,
-            dependencies: []
-        };
-    }
-    if (attribute.value.length === 1) {
-        const value = attribute.value[0];
-        if (value.type === 'Text') {
-            // static attributes
-            return {
-                spread: false,
-                name: attribute.name,
-                value: isNaN(value.data) ? stringify(value.data) : value.data,
-                dynamic: false,
-                dependencies: []
-            };
-        }
-        // simple dynamic attributes
-        block.contextualise(value.expression); // TODO remove
-        const { dependencies, snippet } = value.metadata;
-        // TODO only update attributes that have changed
-        return {
-            spread: false,
-            name: attribute.name,
-            value: snippet,
-            dependencies,
-            dynamic: true
-        };
-    }
-    // otherwise we're dealing with a complex dynamic attribute
-    const allDependencies = new Set();
-    const value = (attribute.value[0].type === 'Text' ? '' : `"" + `) +
-        attribute.value
-            .map((chunk) => {
-            if (chunk.type === 'Text') {
-                return stringify(chunk.data);
-            }
-            else {
-                block.contextualise(chunk.expression); // TODO remove
-                const { dependencies, snippet } = chunk.metadata;
-                dependencies.forEach((dependency) => {
-                    allDependencies.add(dependency);
-                });
-                return getExpressionPrecedence(chunk.expression) <= 13 ? `(${snippet})` : snippet;
-            }
-        })
-            .join(' + ');
-    return {
-        spread: false,
-        name: attribute.name,
-        value,
-        dependencies: Array.from(allDependencies),
-        dynamic: true
-    };
-}
-
-class Component extends Node$1 {
-    init(block, stripWhitespace, nextSibling) {
-        this.cannotUseInnerHTML();
-        this.attributes.forEach((attribute) => {
-            if (attribute.type === 'Attribute' && attribute.value !== true) {
-                attribute.value.forEach((chunk) => {
-                    if (chunk.type !== 'Text') {
-                        const dependencies = chunk.metadata.dependencies;
-                        block.addDependencies(dependencies);
-                    }
-                });
-            }
-            else {
-                if (attribute.type === 'EventHandler' && attribute.expression) {
-                    attribute.expression.arguments.forEach((arg) => {
-                        block.addDependencies(arg.metadata.dependencies);
-                    });
-                }
-                else if (attribute.type === 'Binding') {
-                    block.addDependencies(attribute.metadata.dependencies);
-                }
-            }
-        });
-        this.var = block.getUniqueName((this.name === ':Self' ? this.generator.name :
-            this.name === ':Component' ? 'switch_instance' :
-                this.name).toLowerCase());
-        if (this.children.length) {
-            this._slots = new Set(['default']);
-            this.children.forEach(child => {
-                child.init(block, stripWhitespace, nextSibling);
-            });
-        }
-    }
-    build(block, parentNode, parentNodes) {
-        const { generator } = this;
-        generator.hasComponents = true;
-        const name = this.var;
-        const componentInitProperties = [`root: #component.root`];
-        if (this.children.length > 0) {
-            const slots = Array.from(this._slots).map(name => `${quoteIfNecessary(name, generator.legacy)}: @createFragment()`);
-            componentInitProperties.push(`slots: { ${slots.join(', ')} }`);
-            this.children.forEach((child) => {
-                child.build(block, `${this.var}._slotted${generator.legacy ? `["default"]` : `.default`}`, 'nodes');
-            });
-        }
-        const allContexts = new Set();
-        const statements = [];
-        const name_initial_data = block.getUniqueName(`${name}_initial_data`);
-        const name_changes = block.getUniqueName(`${name}_changes`);
-        let name_updating;
-        let beforecreate = null;
-        const attributes = this.attributes
-            .filter(a => a.type === 'Attribute' || a.type === 'Spread')
-            .map(a => mungeAttribute(a, block));
-        const bindings = this.attributes
-            .filter(a => a.type === 'Binding')
-            .map(a => mungeBinding(a, block));
-        const eventHandlers = this.attributes
-            .filter((a) => a.type === 'EventHandler')
-            .map(a => mungeEventHandler(generator, this, a, block, allContexts));
-        const ref = this.attributes.find((a) => a.type === 'Ref');
-        if (ref)
-            generator.usesRefs = true;
-        const updates = [];
-        const usesSpread = !!attributes.find(a => a.spread);
-        const attributeObject = usesSpread
-            ? '{}'
-            : stringifyProps(attributes.map((attribute) => `${attribute.name}: ${attribute.value}`));
-        if (attributes.length || bindings.length) {
-            componentInitProperties.push(`data: ${name_initial_data}`);
-        }
-        if ((!usesSpread && attributes.filter(a => a.dynamic).length) || bindings.length) {
-            updates.push(`var ${name_changes} = {};`);
-        }
-        if (attributes.length) {
-            if (usesSpread) {
-                const levels = block.getUniqueName(`${this.var}_spread_levels`);
-                const initialProps = [];
-                const changes = [];
-                attributes
-                    .forEach(munged => {
-                    const { spread, name, dynamic, value, dependencies } = munged;
-                    if (spread) {
-                        initialProps.push(value);
-                        const condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');
-                        changes.push(condition ? `${condition} && ${value}` : value);
-                    }
-                    else {
-                        const obj = `{ ${quoteIfNecessary(name, this.generator.legacy)}: ${value} }`;
-                        initialProps.push(obj);
-                        const condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');
-                        changes.push(condition ? `${condition} && ${obj}` : obj);
-                    }
-                });
-                block.addVariable(levels);
-                statements.push(deindent `
-					${levels} = [
-						${initialProps.join(',\n')}
-					];
-
-					for (var #i = 0; #i < ${levels}.length; #i += 1) {
-						${name_initial_data} = @assign(${name_initial_data}, ${levels}[#i]);
-					}
-				`);
-                updates.push(deindent `
-					var ${name_changes} = @getSpreadUpdate(${levels}, [
-						${changes.join(',\n')}
-					]);
-				`);
-            }
-            else {
-                attributes
-                    .filter((attribute) => attribute.dynamic)
-                    .forEach((attribute) => {
-                    if (attribute.dependencies.length) {
-                        updates.push(deindent `
-								if (${attribute.dependencies
-                            .map(dependency => `changed.${dependency}`)
-                            .join(' || ')}) ${name_changes}.${attribute.name} = ${attribute.value};
-							`);
-                    }
-                    else {
-                        // TODO this is an odd situation to encounter – I *think* it should only happen with
-                        // each block indices, in which case it may be possible to optimise this
-                        updates.push(`${name_changes}.${attribute.name} = ${attribute.value};`);
-                    }
-                });
-            }
-        }
-        if (bindings.length) {
-            generator.hasComplexBindings = true;
-            name_updating = block.alias(`${name}_updating`);
-            block.addVariable(name_updating, '{}');
-            let hasLocalBindings = false;
-            let hasStoreBindings = false;
-            const builder = new CodeBuilder();
-            bindings.forEach((binding) => {
-                let { name: key } = getObject(binding.value);
-                binding.contexts.forEach(context => {
-                    allContexts.add(context);
-                });
-                let setFromChild;
-                if (block.contexts.has(key)) {
-                    const computed = isComputed$1(binding.value);
-                    const tail = binding.value.type === 'MemberExpression' ? getTailSnippet(binding.value) : '';
-                    const list = block.listNames.get(key);
-                    const index = block.indexNames.get(key);
-                    setFromChild = deindent `
-						${list}[${index}]${tail} = childState.${binding.name};
-
-						${binding.dependencies
-                        .map((name) => {
-                        const isStoreProp = generator.options.store && name[0] === '$';
-                        const prop = isStoreProp ? name.slice(1) : name;
-                        const newState = isStoreProp ? 'newStoreState' : 'newState';
-                        if (isStoreProp)
-                            hasStoreBindings = true;
-                        else
-                            hasLocalBindings = true;
-                        return `${newState}.${prop} = state.${name};`;
-                    })}
-					`;
-                }
-                else {
-                    const isStoreProp = generator.options.store && key[0] === '$';
-                    const prop = isStoreProp ? key.slice(1) : key;
-                    const newState = isStoreProp ? 'newStoreState' : 'newState';
-                    if (isStoreProp)
-                        hasStoreBindings = true;
-                    else
-                        hasLocalBindings = true;
-                    if (binding.value.type === 'MemberExpression') {
-                        setFromChild = deindent `
-							${binding.snippet} = childState.${binding.name};
-							${newState}.${prop} = state.${key};
-						`;
-                    }
-                    else {
-                        setFromChild = `${newState}.${prop} = childState.${binding.name};`;
-                    }
-                }
-                statements.push(deindent `
-					if (${binding.prop} in ${binding.obj}) {
-						${name_initial_data}.${binding.name} = ${binding.snippet};
-						${name_updating}.${binding.name} = true;
-					}`);
-                builder.addConditional(`!${name_updating}.${binding.name} && changed.${binding.name}`, setFromChild);
-                updates.push(deindent `
-					if (!${name_updating}.${binding.name} && ${binding.dependencies.map((dependency) => `changed.${dependency}`).join(' || ')}) {
-						${name_changes}.${binding.name} = ${binding.snippet};
-						${name_updating}.${binding.name} = true;
-					}
-				`);
-            });
-            const initialisers = [
-                'state = #component.get()',
-                hasLocalBindings && 'newState = {}',
-                hasStoreBindings && 'newStoreState = {}',
-            ].filter(Boolean).join(', ');
-            componentInitProperties.push(deindent `
-				_bind: function(changed, childState) {
-					var ${initialisers};
-					${builder}
-					${hasStoreBindings && `#component.store.set(newStoreState);`}
-					${hasLocalBindings && `#component._set(newState);`}
-					${name_updating} = {};
-				}
-			`);
-            beforecreate = deindent `
-				#component.root._beforecreate.push(function() {
-					${name}._bind({ ${bindings.map(b => `${b.name}: 1`).join(', ')} }, ${name}.get());
-				});
-			`;
-        }
-        if (this.name === ':Component') {
-            const switch_value = block.getUniqueName('switch_value');
-            const switch_props = block.getUniqueName('switch_props');
-            block.contextualise(this.expression);
-            const { dependencies, snippet } = this.metadata;
-            const anchor = this.getOrCreateAnchor(block, parentNode, parentNodes);
-            block.builders.init.addBlock(deindent `
-				var ${switch_value} = ${snippet};
-
-				function ${switch_props}(state) {
-					${(attributes.length || bindings.length) && deindent `
-					var ${name_initial_data} = ${attributeObject};`}
-					${statements}
-					return {
-						${componentInitProperties.join(',\n')}
-					};
-				}
-
-				if (${switch_value}) {
-					var ${name} = new ${switch_value}(${switch_props}(state));
-
-					${beforecreate}
-				}
-
-				${eventHandlers.map(handler => deindent `
-					function ${handler.var}(event) {
-						${handler.body}
-					}
-
-					if (${name}) ${name}.on("${handler.name}", ${handler.var});
-				`)}
-			`);
-            block.builders.create.addLine(`if (${name}) ${name}._fragment.c();`);
-            if (parentNodes) {
-                block.builders.claim.addLine(`if (${name}) ${name}._fragment.l(${parentNodes});`);
-            }
-            block.builders.mount.addBlock(deindent `
-				if (${name}) {
-					${name}._mount(${parentNode || '#target'}, ${parentNode ? 'null' : 'anchor'});
-					${ref && `#component.refs.${ref.name} = ${name};`}
-				}
-			`);
-            const updateMountNode = this.getUpdateMountNode(anchor);
-            block.builders.update.addBlock(deindent `
-				if (${switch_value} !== (${switch_value} = ${snippet})) {
-					if (${name}) ${name}.destroy();
-
-					if (${switch_value}) {
-						${name} = new ${switch_value}(${switch_props}(state));
-						${name}._fragment.c();
-
-						${this.children.map(child => child.remount(name))}
-						${name}._mount(${updateMountNode}, ${anchor});
-
-						${eventHandlers.map(handler => deindent `
-							${name}.on("${handler.name}", ${handler.var});
-						`)}
-
-						${ref && `#component.refs.${ref.name} = ${name};`}
-					}
-
-					${ref && deindent `
-						else if (#component.refs.${ref.name} === ${name}) {
-							#component.refs.${ref.name} = null;
-						}`}
-				}
-			`);
-            if (updates.length) {
-                block.builders.update.addBlock(deindent `
-					else {
-						${updates}
-						${name}._set(${name_changes});
-						${bindings.length && `${name_updating} = {};`}
-					}
-				`);
-            }
-            if (!parentNode)
-                block.builders.unmount.addLine(`if (${name}) ${name}._unmount();`);
-            block.builders.destroy.addLine(`if (${name}) ${name}.destroy(false);`);
-        }
-        else {
-            const expression = this.name === ':Self'
-                ? generator.name
-                : `%components-${this.name}`;
-            block.builders.init.addBlock(deindent `
-				${(attributes.length || bindings.length) && deindent `
-				var ${name_initial_data} = ${attributeObject};`}
-				${statements}
-				var ${name} = new ${expression}({
-					${componentInitProperties.join(',\n')}
-				});
-
-				${beforecreate}
-
-				${eventHandlers.map(handler => deindent `
-					${name}.on("${handler.name}", function(event) {
-						${handler.body}
-					});
-				`)}
-
-				${ref && `#component.refs.${ref.name} = ${name};`}
-			`);
-            block.builders.create.addLine(`${name}._fragment.c();`);
-            if (parentNodes) {
-                block.builders.claim.addLine(`${name}._fragment.l(${parentNodes});`);
-            }
-            block.builders.mount.addLine(`${name}._mount(${parentNode || '#target'}, ${parentNode ? 'null' : 'anchor'});`);
-            if (updates.length) {
-                block.builders.update.addBlock(deindent `
-					${updates}
-					${name}._set(${name_changes});
-					${bindings.length && `${name_updating} = {};`}
-				`);
-            }
-            if (!parentNode)
-                block.builders.unmount.addLine(`${name}._unmount();`);
-            block.builders.destroy.addLine(deindent `
-				${name}.destroy(false);
-				${ref && `if (#component.refs.${ref.name} === ${name}) #component.refs.${ref.name} = null;`}
-			`);
-        }
-    }
-    remount(name) {
-        return `${this.var}._mount(${name}._slotted${this.generator.legacy ? `["default"]` : `.default`}, null);`;
-    }
-}
-function mungeBinding(binding, block) {
-    const { name } = getObject(binding.value);
-    const { contexts } = block.contextualise(binding.value);
-    const { dependencies, snippet } = binding.metadata;
-    const contextual = block.contexts.has(name);
-    let obj;
-    let prop;
-    if (contextual) {
-        obj = `state.${block.listNames.get(name)}`;
-        prop = `${block.indexNames.get(name)}`;
-    }
-    else if (binding.value.type === 'MemberExpression') {
-        prop = `[✂${binding.value.property.start}-${binding.value.property.end}✂]`;
-        if (!binding.value.computed)
-            prop = `'${prop}'`;
-        obj = `[✂${binding.value.object.start}-${binding.value.object.end}✂]`;
-    }
-    else {
-        obj = 'state';
-        prop = `'${name}'`;
-    }
-    return {
-        name: binding.name,
-        value: binding.value,
-        contexts,
-        snippet,
-        obj,
-        prop,
-        dependencies
-    };
-}
-function mungeEventHandler(generator, node, handler, block, allContexts) {
-    let body;
-    if (handler.expression) {
-        generator.addSourcemapLocations(handler.expression);
-        // TODO try out repetition between this and element counterpart
-        const flattened = flatten(handler.expression.callee);
-        if (!validCalleeObjects.has(flattened.name)) {
-            // allow event.stopPropagation(), this.select() etc
-            // TODO verify that it's a valid callee (i.e. built-in or declared method)
-            generator.code.prependRight(handler.expression.start, `${block.alias('component')}.`);
-        }
-        handler.expression.arguments.forEach((arg) => {
-            const { contexts } = block.contextualise(arg, null, true);
-            contexts.forEach(context => {
-                allContexts.add(context);
-            });
-        });
-        body = deindent `
-			[✂${handler.expression.start}-${handler.expression.end}✂];
-		`;
-    }
-    else {
-        body = deindent `
-			${block.alias('component')}.fire('${handler.name}', event);
-		`;
-    }
-    return {
-        name: handler.name,
-        var: block.getUniqueName(`${node.var}_${handler.name}`),
-        body
-    };
-}
-function isComputed$1(node) {
-    while (node.type === 'MemberExpression') {
-        if (node.computed)
-            return true;
-        node = node.object;
-    }
-    return false;
-}
-
-class EachBlock extends Node$1 {
-    init(block, stripWhitespace, nextSibling) {
-        this.cannotUseInnerHTML();
-        this.var = block.getUniqueName(`each`);
-        this.iterations = block.getUniqueName(`${this.var}_blocks`);
-        this.each_context = block.getUniqueName(`${this.var}_context`);
-        const { dependencies } = this.metadata;
-        block.addDependencies(dependencies);
-        this.block = block.child({
-            comment: createDebuggingComment(this, this.generator),
-            name: this.generator.getUniqueName('create_each_block'),
-            context: this.context,
-            key: this.key,
-            contexts: new Map(block.contexts),
-            contextTypes: new Map(block.contextTypes),
-            indexes: new Map(block.indexes),
-            changeableIndexes: new Map(block.changeableIndexes),
-            indexNames: new Map(block.indexNames),
-            listNames: new Map(block.listNames)
-        });
-        const listName = this.generator.getUniqueName('each_value');
-        const indexName = this.index || this.generator.getUniqueName(`${this.context}_index`);
-        this.block.contextTypes.set(this.context, 'each');
-        this.block.indexNames.set(this.context, indexName);
-        this.block.listNames.set(this.context, listName);
-        if (this.index) {
-            this.block.getUniqueName(this.index); // this prevents name collisions (#1254)
-            this.block.indexes.set(this.index, this.context);
-            this.block.changeableIndexes.set(this.index, this.key); // TODO is this right?
-        }
-        const context = this.block.getUniqueName(this.context);
-        this.block.contexts.set(this.context, context); // TODO this is now redundant?
-        if (this.destructuredContexts) {
-            for (let i = 0; i < this.destructuredContexts.length; i += 1) {
-                const context = this.block.getUniqueName(this.destructuredContexts[i]);
-                this.block.contexts.set(this.destructuredContexts[i], context);
-            }
-        }
-        this.contextProps = [
-            `${listName}: ${listName}`,
-            `${this.context}: ${listName}[#i]`,
-            `${indexName}: #i`
-        ];
-        if (this.destructuredContexts) {
-            for (let i = 0; i < this.destructuredContexts.length; i += 1) {
-                this.contextProps.push(`${this.destructuredContexts[i]}: ${listName}[#i][${i}]`);
-            }
-        }
-        this.generator.blocks.push(this.block);
-        this.initChildren(this.block, stripWhitespace, nextSibling);
-        block.addDependencies(this.block.dependencies);
-        this.block.hasUpdateMethod = this.block.dependencies.size > 0;
-        if (this.else) {
-            this.else.block = block.child({
-                comment: createDebuggingComment(this.else, this.generator),
-                name: this.generator.getUniqueName(`${this.block.name}_else`),
-            });
-            this.generator.blocks.push(this.else.block);
-            this.else.initChildren(this.else.block, stripWhitespace, nextSibling);
-            this.else.block.hasUpdateMethod = this.else.block.dependencies.size > 0;
-        }
-    }
-    build(block, parentNode, parentNodes) {
-        if (this.children.length === 0)
-            return;
-        const { generator } = this;
-        const each = this.var;
-        const create_each_block = this.block.name;
-        const each_block_value = this.block.listNames.get(this.context);
-        const iterations = this.iterations;
-        const needsAnchor = this.next ? !this.next.isDomNode() : !parentNode || !this.parent.isDomNode();
-        const anchor = needsAnchor
-            ? block.getUniqueName(`${each}_anchor`)
-            : (this.next && this.next.var) || 'null';
-        // hack the sourcemap, so that if data is missing the bug
-        // is easy to find
-        let c = this.start + 3;
-        while (generator.source[c] !== 'e')
-            c += 1;
-        generator.code.overwrite(c, c + 4, 'length');
-        const length = `[✂${c}-${c + 4}✂]`;
-        const mountOrIntro = this.block.hasIntroMethod ? 'i' : 'm';
-        const vars = {
-            each,
-            create_each_block,
-            each_block_value,
-            length,
-            iterations,
-            anchor,
-            mountOrIntro,
-        };
-        block.contextualise(this.expression);
-        const { snippet } = this.metadata;
-        block.builders.init.addLine(`var ${each_block_value} = ${snippet};`);
-        if (this.key) {
-            this.buildKeyed(block, parentNode, parentNodes, snippet, vars);
-        }
-        else {
-            this.buildUnkeyed(block, parentNode, parentNodes, snippet, vars);
-        }
-        if (needsAnchor) {
-            block.addElement(anchor, `@createComment()`, parentNodes && `@createComment()`, parentNode);
-        }
-        if (this.else) {
-            const each_block_else = generator.getUniqueName(`${each}_else`);
-            block.builders.init.addLine(`var ${each_block_else} = null;`);
-            // TODO neaten this up... will end up with an empty line in the block
-            block.builders.init.addBlock(deindent `
-				if (!${each_block_value}.${length}) {
-					${each_block_else} = ${this.else.block.name}(#component, state);
-					${each_block_else}.c();
-				}
-			`);
-            block.builders.mount.addBlock(deindent `
-				if (${each_block_else}) {
-					${each_block_else}.${mountOrIntro}(${parentNode || '#target'}, null);
-				}
-			`);
-            const initialMountNode = parentNode || `${anchor}.parentNode`;
-            if (this.else.block.hasUpdateMethod) {
-                block.builders.update.addBlock(deindent `
-					if (!${each_block_value}.${length} && ${each_block_else}) {
-						${each_block_else}.p(changed, state);
-					} else if (!${each_block_value}.${length}) {
-						${each_block_else} = ${this.else.block.name}(#component, state);
-						${each_block_else}.c();
-						${each_block_else}.${mountOrIntro}(${initialMountNode}, ${anchor});
-					} else if (${each_block_else}) {
-						${each_block_else}.u();
-						${each_block_else}.d();
-						${each_block_else} = null;
-					}
-				`);
-            }
-            else {
-                block.builders.update.addBlock(deindent `
-					if (${each_block_value}.${length}) {
-						if (${each_block_else}) {
-							${each_block_else}.u();
-							${each_block_else}.d();
-							${each_block_else} = null;
-						}
-					} else if (!${each_block_else}) {
-						${each_block_else} = ${this.else.block.name}(#component, state);
-						${each_block_else}.c();
-						${each_block_else}.${mountOrIntro}(${initialMountNode}, ${anchor});
-					}
-				`);
-            }
-            block.builders.unmount.addLine(`if (${each_block_else}) ${each_block_else}.u()`);
-            block.builders.destroy.addBlock(deindent `
-				if (${each_block_else}) ${each_block_else}.d();
-			`);
-        }
-        this.children.forEach((child) => {
-            child.build(this.block, null, 'nodes');
-        });
-        if (this.else) {
-            this.else.children.forEach((child) => {
-                child.build(this.else.block, null, 'nodes');
-            });
-        }
-    }
-    buildKeyed(block, parentNode, parentNodes, snippet, { each, create_each_block, each_block_value, length, anchor, mountOrIntro, }) {
-        const key = block.getUniqueName('key');
-        const blocks = block.getUniqueName(`${each}_blocks`);
-        const lookup = block.getUniqueName(`${each}_lookup`);
-        block.addVariable(blocks, '[]');
-        block.addVariable(lookup, `@blankObject()`);
-        if (this.children[0].isDomNode()) {
-            this.block.first = this.children[0].var;
-        }
-        else {
-            this.block.first = this.block.getUniqueName('first');
-            this.block.addElement(this.block.first, `@createComment()`, parentNodes && `@createComment()`, null);
-        }
-        block.builders.init.addBlock(deindent `
-			for (var #i = 0; #i < ${each_block_value}.${length}; #i += 1) {
-				var ${key} = ${each_block_value}[#i].${this.key};
-				${blocks}[#i] = ${lookup}[${key}] = ${create_each_block}(#component, ${key}, @assign(@assign({}, state), {
-					${this.contextProps.join(',\n')}
-				}));
-			}
-		`);
-        const initialMountNode = parentNode || '#target';
-        const updateMountNode = this.getUpdateMountNode(anchor);
-        const anchorNode = parentNode ? 'null' : 'anchor';
-        block.builders.create.addBlock(deindent `
-			for (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].c();
-		`);
-        if (parentNodes) {
-            block.builders.claim.addBlock(deindent `
-				for (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].l(${parentNodes});
-			`);
-        }
-        block.builders.mount.addBlock(deindent `
-			for (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].${mountOrIntro}(${initialMountNode}, ${anchorNode});
-		`);
-        const dynamic = this.block.hasUpdateMethod;
-        block.builders.update.addBlock(deindent `
-			var ${each_block_value} = ${snippet};
-
-			${blocks} = @updateKeyedEach(${blocks}, #component, changed, "${this.key}", ${dynamic ? '1' : '0'}, ${each_block_value}, ${lookup}, ${updateMountNode}, ${String(this.block.hasOutroMethod)}, ${create_each_block}, "${mountOrIntro}", ${anchor}, function(#i) {
-				return @assign(@assign({}, state), {
-					${this.contextProps.join(',\n')}
-				});
-			});
-		`);
-        if (!parentNode) {
-            block.builders.unmount.addBlock(deindent `
-				for (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].u();
-			`);
-        }
-        block.builders.destroy.addBlock(deindent `
-			for (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].d();
-		`);
-    }
-    buildUnkeyed(block, parentNode, parentNodes, snippet, { create_each_block, each_block_value, length, iterations, anchor, mountOrIntro, }) {
-        block.builders.init.addBlock(deindent `
-			var ${iterations} = [];
-
-			for (var #i = 0; #i < ${each_block_value}.${length}; #i += 1) {
-				${iterations}[#i] = ${create_each_block}(#component, @assign(@assign({}, state), {
-					${this.contextProps.join(',\n')}
-				}));
-			}
-		`);
-        const initialMountNode = parentNode || '#target';
-        const updateMountNode = this.getUpdateMountNode(anchor);
-        const anchorNode = parentNode ? 'null' : 'anchor';
-        block.builders.create.addBlock(deindent `
-			for (var #i = 0; #i < ${iterations}.length; #i += 1) {
-				${iterations}[#i].c();
-			}
-		`);
-        if (parentNodes) {
-            block.builders.claim.addBlock(deindent `
-				for (var #i = 0; #i < ${iterations}.length; #i += 1) {
-					${iterations}[#i].l(${parentNodes});
-				}
-			`);
-        }
-        block.builders.mount.addBlock(deindent `
-			for (var #i = 0; #i < ${iterations}.length; #i += 1) {
-				${iterations}[#i].${mountOrIntro}(${initialMountNode}, ${anchorNode});
-			}
-		`);
-        const allDependencies = new Set(this.block.dependencies);
-        const { dependencies } = this.metadata;
-        dependencies.forEach((dependency) => {
-            allDependencies.add(dependency);
-        });
-        // TODO do this for keyed blocks as well
-        const condition = Array.from(allDependencies)
-            .map(dependency => `changed.${dependency}`)
-            .join(' || ');
-        if (condition !== '') {
-            const forLoopBody = this.block.hasUpdateMethod
-                ? this.block.hasIntroMethod
-                    ? deindent `
-						if (${iterations}[#i]) {
-							${iterations}[#i].p(changed, ${this.each_context});
-						} else {
-							${iterations}[#i] = ${create_each_block}(#component, ${this.each_context});
-							${iterations}[#i].c();
-						}
-						${iterations}[#i].i(${updateMountNode}, ${anchor});
-					`
-                    : deindent `
-						if (${iterations}[#i]) {
-							${iterations}[#i].p(changed, ${this.each_context});
-						} else {
-							${iterations}[#i] = ${create_each_block}(#component, ${this.each_context});
-							${iterations}[#i].c();
-							${iterations}[#i].m(${updateMountNode}, ${anchor});
-						}
-					`
-                : deindent `
-					${iterations}[#i] = ${create_each_block}(#component, ${this.each_context});
-					${iterations}[#i].c();
-					${iterations}[#i].${mountOrIntro}(${updateMountNode}, ${anchor});
-				`;
-            const start = this.block.hasUpdateMethod ? '0' : `${iterations}.length`;
-            const outro = block.getUniqueName('outro');
-            const destroy = this.block.hasOutroMethod
-                ? deindent `
-					function ${outro}(i) {
-						if (${iterations}[i]) {
-							${iterations}[i].o(function() {
-								${iterations}[i].u();
-								${iterations}[i].d();
-								${iterations}[i] = null;
-							});
-						}
-					}
-
-					for (; #i < ${iterations}.length; #i += 1) ${outro}(#i);
-				`
-                : deindent `
-					for (; #i < ${iterations}.length; #i += 1) {
-						${iterations}[#i].u();
-						${iterations}[#i].d();
-					}
-					${iterations}.length = ${each_block_value}.${length};
-				`;
-            block.builders.update.addBlock(deindent `
-				var ${each_block_value} = ${snippet};
-
-				if (${condition}) {
-					for (var #i = ${start}; #i < ${each_block_value}.${length}; #i += 1) {
-						var ${this.each_context} = @assign(@assign({}, state), {
-							${this.contextProps.join(',\n')}
-						});
-
-						${forLoopBody}
-					}
-
-					${destroy}
-				}
-			`);
-        }
-        block.builders.unmount.addBlock(deindent `
-			for (var #i = 0; #i < ${iterations}.length; #i += 1) {
-				${iterations}[#i].u();
-			}
-		`);
-        block.builders.destroy.addBlock(`@destroyEach(${iterations});`);
-    }
-    remount(name) {
-        // TODO consider keyed blocks
-        return `for (var #i = 0; #i < ${this.iterations}.length; #i += 1) ${this.iterations}[#i].m(${name}._slotted${this.generator.legacy ? `["default"]` : `.default`}, null);`;
-    }
-}
-
-class Element extends Node$1 {
-    init(block, stripWhitespace, nextSibling) {
-        if (this.name === 'slot' || this.name === 'option') {
-            this.cannotUseInnerHTML();
-        }
-        const parentElement = this.parent && this.parent.findNearest(/^Element/);
-        this.namespace = this.name === 'svg' ?
-            svg :
-            parentElement ? parentElement.namespace : this.generator.namespace;
-        this.attributes.forEach(attribute => {
-            if (attribute.type === 'Attribute' && attribute.value !== true) {
-                // special case — xmlns
-                if (attribute.name === 'xmlns') {
-                    // TODO this attribute must be static – enforce at compile time
-                    this.namespace = attribute.value[0].data;
-                }
-                attribute.value.forEach((chunk) => {
-                    if (chunk.type !== 'Text') {
-                        if (this.parent)
-                            this.parent.cannotUseInnerHTML();
-                        const dependencies = chunk.metadata.dependencies;
-                        block.addDependencies(dependencies);
-                        // special case — <option value='{{foo}}'> — see below
-                        if (this.name === 'option' &&
-                            attribute.name === 'value') {
-                            let select = this.parent;
-                            while (select && (select.type !== 'Element' || select.name !== 'select'))
-                                select = select.parent;
-                            if (select && select.selectBindingDependencies) {
-                                select.selectBindingDependencies.forEach(prop => {
-                                    dependencies.forEach((dependency) => {
-                                        this.generator.indirectDependencies.get(prop).add(dependency);
-                                    });
-                                });
-                            }
-                        }
-                    }
-                });
-            }
-            else {
-                if (this.parent)
-                    this.parent.cannotUseInnerHTML();
-                if (attribute.type === 'EventHandler' && attribute.expression) {
-                    attribute.expression.arguments.forEach((arg) => {
-                        block.addDependencies(arg.metadata.dependencies);
-                    });
-                }
-                else if (attribute.type === 'Binding') {
-                    block.addDependencies(attribute.metadata.dependencies);
-                }
-                else if (attribute.type === 'Transition') {
-                    if (attribute.intro)
-                        this.generator.hasIntroTransitions = block.hasIntroMethod = true;
-                    if (attribute.outro) {
-                        this.generator.hasOutroTransitions = block.hasOutroMethod = true;
-                        block.outros += 1;
-                    }
-                }
-                else if (attribute.type === 'Action' && attribute.expression) {
-                    block.addDependencies(attribute.metadata.dependencies);
-                }
-            }
-        });
-        const valueAttribute = this.attributes.find((attribute) => attribute.name === 'value');
-        if (this.name === 'textarea') {
-            // this is an egregious hack, but it's the easiest way to get <textarea>
-            // children treated the same way as a value attribute
-            if (this.children.length > 0) {
-                this.attributes.push(new Attribute({
-                    generator: this.generator,
-                    name: 'value',
-                    value: this.children,
-                    parent: this
-                }));
-                this.children = [];
-            }
-        }
-        // special case — in a case like this...
-        //
-        //   <select bind:value='foo'>
-        //     <option value='{{bar}}'>bar</option>
-        //     <option value='{{baz}}'>baz</option>
-        //   </option>
-        //
-        // ...we need to know that `foo` depends on `bar` and `baz`,
-        // so that if `foo.qux` changes, we know that we need to
-        // mark `bar` and `baz` as dirty too
-        if (this.name === 'select') {
-            const binding = this.attributes.find(node => node.type === 'Binding' && node.name === 'value');
-            if (binding) {
-                // TODO does this also apply to e.g. `<input type='checkbox' bind:group='foo'>`?
-                const dependencies = binding.metadata.dependencies;
-                this.selectBindingDependencies = dependencies;
-                dependencies.forEach((prop) => {
-                    this.generator.indirectDependencies.set(prop, new Set());
-                });
-            }
-            else {
-                this.selectBindingDependencies = null;
-            }
-        }
-        const slot = this.getStaticAttributeValue('slot');
-        if (slot && this.hasAncestor('Component')) {
-            this.cannotUseInnerHTML();
-            this.slotted = true;
-            // TODO validate slots — no nesting, no dynamic names...
-            const component = this.findNearest(/^Component/);
-            component._slots.add(slot);
-        }
-        if (this.spread) {
-            block.addDependencies(this.spread.metadata.dependencies);
-        }
-        this.var = block.getUniqueName(this.name.replace(/[^a-zA-Z0-9_$]/g, '_'));
-        if (this.children.length) {
-            if (this.name === 'pre' || this.name === 'textarea')
-                stripWhitespace = false;
-            this.initChildren(block, stripWhitespace, nextSibling);
-        }
-    }
-    build(block, parentNode, parentNodes) {
-        const { generator } = this;
-        if (this.name === 'slot') {
-            const slotName = this.getStaticAttributeValue('name') || 'default';
-            this.generator.slots.add(slotName);
-        }
-        if (this.name === 'noscript')
-            return;
-        const childState = {
-            parentNode: this.var,
-            parentNodes: parentNodes && block.getUniqueName(`${this.var}_nodes`) // if we're in unclaimable territory, i.e. <head>, parentNodes is null
-        };
-        const name = this.var;
-        const allUsedContexts = new Set();
-        const slot = this.attributes.find((attribute) => attribute.name === 'slot');
-        const initialMountNode = this.slotted ?
-            `${this.findNearest(/^Component/).var}._slotted.${slot.value[0].data}` : // TODO this looks bonkers
-            parentNode;
-        block.addVariable(name);
-        const renderStatement = getRenderStatement(this.generator, this.namespace, this.name);
-        block.builders.create.addLine(`${name} = ${renderStatement};`);
-        if (this.generator.hydratable) {
-            if (parentNodes) {
-                block.builders.claim.addBlock(deindent `
-					${name} = ${getClaimStatement(generator, this.namespace, parentNodes, this)};
-					var ${childState.parentNodes} = @children(${name});
-				`);
-            }
-            else {
-                block.builders.claim.addLine(`${name} = ${renderStatement};`);
-            }
-        }
-        if (initialMountNode) {
-            block.builders.mount.addLine(`@appendNode(${name}, ${initialMountNode});`);
-            if (initialMountNode === 'document.head') {
-                block.builders.unmount.addLine(`@detachNode(${name});`);
-            }
-        }
-        else {
-            block.builders.mount.addLine(`@insertNode(${name}, #target, anchor);`);
-            // TODO we eventually need to consider what happens to elements
-            // that belong to the same outgroup as an outroing element...
-            block.builders.unmount.addLine(`@detachNode(${name});`);
-        }
-        // TODO move this into a class as well?
-        if (this._cssRefAttribute) {
-            block.builders.hydrate.addLine(`@setAttribute(${name}, "svelte-ref-${this._cssRefAttribute}", "");`);
-        }
-        // insert static children with textContent or innerHTML
-        if (!this.namespace && this.canUseInnerHTML && this.children.length > 0) {
-            if (this.children.length === 1 && this.children[0].type === 'Text') {
-                block.builders.create.addLine(`${name}.textContent = ${stringify(this.children[0].data)};`);
-            }
-            else {
-                block.builders.create.addLine(`${name}.innerHTML = ${stringify(this.children.map(toHTML).join(''))};`);
-            }
-        }
-        else {
-            this.children.forEach((child) => {
-                child.build(block, childState.parentNode, childState.parentNodes);
-            });
-        }
-        this.addBindings(block, allUsedContexts);
-        const eventHandlerUsesComponent = this.addEventHandlers(block, allUsedContexts);
-        this.addRefs(block);
-        this.addAttributes(block);
-        this.addTransitions(block);
-        this.addActions(block);
-        if (allUsedContexts.size || eventHandlerUsesComponent) {
-            const initialProps = [];
-            const updates = [];
-            if (eventHandlerUsesComponent) {
-                initialProps.push(`component: #component`);
-            }
-            allUsedContexts.forEach((contextName) => {
-                if (contextName === 'state')
-                    return;
-                if (block.contextTypes.get(contextName) !== 'each')
-                    return;
-                const listName = block.listNames.get(contextName);
-                const indexName = block.indexNames.get(contextName);
-                initialProps.push(`${listName}: state.${listName},\n${indexName}: state.${indexName}`);
-                updates.push(`${name}._svelte.${listName} = state.${listName};\n${name}._svelte.${indexName} = state.${indexName};`);
-            });
-            if (initialProps.length) {
-                block.builders.hydrate.addBlock(deindent `
-					${name}._svelte = {
-						${initialProps.join(',\n')}
-					};
-				`);
-            }
-            if (updates.length) {
-                block.builders.update.addBlock(updates.join('\n'));
-            }
-        }
-        if (this.initialUpdate) {
-            block.builders.mount.addBlock(this.initialUpdate);
-        }
-        if (childState.parentNodes) {
-            block.builders.claim.addLine(`${childState.parentNodes}.forEach(@detachNode);`);
-        }
-        function toHTML(node) {
-            if (node.type === 'Text') {
-                return node.parent &&
-                    node.parent.type === 'Element' &&
-                    (node.parent.name === 'script' || node.parent.name === 'style')
-                    ? node.data
-                    : escapeHTML(node.data);
-            }
-            if (node.name === 'noscript')
-                return '';
-            let open = `<${node.name}`;
-            if (node._cssRefAttribute) {
-                open += ` svelte-ref-${node._cssRefAttribute}`;
-            }
-            node.attributes.forEach((attr) => {
-                open += ` ${fixAttributeCasing(attr.name)}${stringifyAttributeValue(attr.value)}`;
-            });
-            if (isVoidElementName(node.name))
-                return open + '>';
-            return `${open}>${node.children.map(toHTML).join('')}</${node.name}>`;
-        }
-    }
-    addBindings(block, allUsedContexts) {
-        const bindings = this.attributes.filter((a) => a.type === 'Binding');
-        if (bindings.length === 0)
-            return;
-        if (this.name === 'select' || this.isMediaNode())
-            this.generator.hasComplexBindings = true;
-        const needsLock = this.name !== 'input' || !/radio|checkbox|range|color/.test(this.getStaticAttributeValue('type'));
-        const mungedBindings = bindings.map(binding => binding.munge(block, allUsedContexts));
-        const lock = mungedBindings.some(binding => binding.needsLock) ?
-            block.getUniqueName(`${this.var}_updating`) :
-            null;
-        if (lock)
-            block.addVariable(lock, 'false');
-        const groups = events$1
-            .map(event => {
-            return {
-                events: event.eventNames,
-                bindings: mungedBindings.filter(binding => event.filter(this, binding.name))
-            };
-        })
-            .filter(group => group.bindings.length);
-        groups.forEach(group => {
-            const handler = block.getUniqueName(`${this.var}_${group.events.join('_')}_handler`);
-            const needsLock = group.bindings.some(binding => binding.needsLock);
-            group.bindings.forEach(binding => {
-                if (!binding.updateDom)
-                    return;
-                const updateConditions = needsLock ? [`!${lock}`] : [];
-                if (binding.updateCondition)
-                    updateConditions.push(binding.updateCondition);
-                block.builders.update.addLine(updateConditions.length ? `if (${updateConditions.join(' && ')}) ${binding.updateDom}` : binding.updateDom);
-            });
-            const usesContext = group.bindings.some(binding => binding.handler.usesContext);
-            const usesState = group.bindings.some(binding => binding.handler.usesState);
-            const usesStore = group.bindings.some(binding => binding.handler.usesStore);
-            const mutations = group.bindings.map(binding => binding.handler.mutation).filter(Boolean).join('\n');
-            const props = new Set();
-            const storeProps = new Set();
-            group.bindings.forEach(binding => {
-                binding.handler.props.forEach(prop => {
-                    props.add(prop);
-                });
-                binding.handler.storeProps.forEach(prop => {
-                    storeProps.add(prop);
-                });
-            }); // TODO use stringifyProps here, once indenting is fixed
-            // media bindings — awkward special case. The native timeupdate events
-            // fire too infrequently, so we need to take matters into our
-            // own hands
-            let animation_frame;
-            if (group.events[0] === 'timeupdate') {
-                animation_frame = block.getUniqueName(`${this.var}_animationframe`);
-                block.addVariable(animation_frame);
-            }
-            block.builders.init.addBlock(deindent `
-				function ${handler}() {
-					${animation_frame && deindent `
-							cancelAnimationFrame(${animation_frame});
-							if (!${this.var}.paused) ${animation_frame} = requestAnimationFrame(${handler});`}
-					${usesContext && `var context = ${this.var}._svelte;`}
-					${usesState && `var state = #component.get();`}
-					${usesStore && `var $ = #component.store.get();`}
-					${needsLock && `${lock} = true;`}
-					${mutations.length > 0 && mutations}
-					${props.size > 0 && `#component.set({ ${Array.from(props).join(', ')} });`}
-					${storeProps.size > 0 && `#component.store.set({ ${Array.from(storeProps).join(', ')} });`}
-					${needsLock && `${lock} = false;`}
-				}
-			`);
-            group.events.forEach(name => {
-                block.builders.hydrate.addLine(`@addListener(${this.var}, "${name}", ${handler});`);
-                block.builders.destroy.addLine(`@removeListener(${this.var}, "${name}", ${handler});`);
-            });
-            const allInitialStateIsDefined = group.bindings
-                .map(binding => `'${binding.object}' in state`)
-                .join(' && ');
-            if (this.name === 'select' || group.bindings.find(binding => binding.name === 'indeterminate' || binding.isReadOnlyMediaAttribute)) {
-                this.generator.hasComplexBindings = true;
-                block.builders.hydrate.addLine(`if (!(${allInitialStateIsDefined})) #component.root._beforecreate.push(${handler});`);
-            }
-        });
-        this.initialUpdate = mungedBindings.map(binding => binding.initialUpdate).filter(Boolean).join('\n');
-    }
-    addAttributes(block) {
-        if (this.attributes.find(attr => attr.type === 'Spread')) {
-            this.addSpreadAttributes(block);
-            return;
-        }
-        this.attributes.filter((a) => a.type === 'Attribute').forEach((attribute) => {
-            attribute.render(block);
-        });
-    }
-    addSpreadAttributes(block) {
-        const levels = block.getUniqueName(`${this.var}_levels`);
-        const data = block.getUniqueName(`${this.var}_data`);
-        const initialProps = [];
-        const updates = [];
-        this.attributes
-            .filter(attr => attr.type === 'Attribute' || attr.type === 'Spread')
-            .forEach(attr => {
-            if (attr.type === 'Attribute') {
-                const { dynamic, value, dependencies } = mungeAttribute(attr, block);
-                const snippet = `{ ${quoteIfNecessary(attr.name, this.generator.legacy)}: ${value} }`;
-                initialProps.push(snippet);
-                const condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');
-                updates.push(condition ? `${condition} && ${snippet}` : snippet);
-            }
-            else {
-                block.contextualise(attr.expression); // TODO gah
-                const { snippet, dependencies } = attr.metadata;
-                initialProps.push(snippet);
-                const condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');
-                updates.push(condition ? `${condition} && ${snippet}` : snippet);
-            }
-        });
-        block.builders.init.addBlock(deindent `
-			var ${levels} = [
-				${initialProps.join(',\n')}
-			];
-
-			var ${data} = {};
-			for (var #i = 0; #i < ${levels}.length; #i += 1) {
-				${data} = @assign(${data}, ${levels}[#i]);
-			}
-		`);
-        block.builders.hydrate.addLine(`@setAttributes(${this.var}, ${data});`);
-        block.builders.update.addBlock(deindent `
-			@setAttributes(${this.var}, @getSpreadUpdate(${levels}, [
-				${updates.join(',\n')}
-			]));
-		`);
-    }
-    addEventHandlers(block, allUsedContexts) {
-        const { generator } = this;
-        let eventHandlerUsesComponent = false;
-        this.attributes.filter((a) => a.type === 'EventHandler').forEach((attribute) => {
-            const isCustomEvent = generator.events.has(attribute.name);
-            const shouldHoist = !isCustomEvent && this.hasAncestor('EachBlock');
-            const context = shouldHoist ? null : this.var;
-            const usedContexts = [];
-            if (attribute.expression) {
-                generator.addSourcemapLocations(attribute.expression);
-                const flattened = flatten(attribute.expression.callee);
-                if (!validCalleeObjects.has(flattened.name)) {
-                    // allow event.stopPropagation(), this.select() etc
-                    // TODO verify that it's a valid callee (i.e. built-in or declared method)
-                    generator.code.prependRight(attribute.expression.start, `${block.alias('component')}.`);
-                    if (shouldHoist)
-                        eventHandlerUsesComponent = true; // this feels a bit hacky but it works!
-                }
-                attribute.expression.arguments.forEach((arg) => {
-                    const { contexts } = block.contextualise(arg, context, true);
-                    contexts.forEach(context => {
-                        if (!~usedContexts.indexOf(context))
-                            usedContexts.push(context);
-                        allUsedContexts.add(context);
-                    });
-                });
-            }
-            const ctx = context || 'this';
-            const declarations = usedContexts
-                .map(name => {
-                if (name === 'state') {
-                    if (shouldHoist)
-                        eventHandlerUsesComponent = true;
-                    return `var state = ${block.alias('component')}.get();`;
-                }
-                const contextType = block.contextTypes.get(name);
-                if (contextType === 'each') {
-                    const listName = block.listNames.get(name);
-                    const indexName = block.indexNames.get(name);
-                    const contextName = block.contexts.get(name);
-                    return `var ${listName} = ${ctx}._svelte.${listName}, ${indexName} = ${ctx}._svelte.${indexName}, ${contextName} = ${listName}[${indexName}];`;
-                }
-            })
-                .filter(Boolean);
-            // get a name for the event handler that is globally unique
-            // if hoisted, locally unique otherwise
-            const handlerName = (shouldHoist ? generator : block).getUniqueName(`${attribute.name.replace(/[^a-zA-Z0-9_$]/g, '_')}_handler`);
-            // create the handler body
-            const handlerBody = deindent `
-				${eventHandlerUsesComponent &&
-                `var ${block.alias('component')} = ${ctx}._svelte.component;`}
-				${declarations}
-				${attribute.expression ?
-                `[✂${attribute.expression.start}-${attribute.expression.end}✂];` :
-                `${block.alias('component')}.fire("${attribute.name}", event);`}
-			`;
-            if (isCustomEvent) {
-                block.addVariable(handlerName);
-                block.builders.hydrate.addBlock(deindent `
-					${handlerName} = %events-${attribute.name}.call(#component, ${this.var}, function(event) {
-						${handlerBody}
-					});
-				`);
-                if (generator.options.dev) {
-                    block.builders.hydrate.addBlock(deindent `
-						if (${handlerName}.teardown) {
-							console.warn("Return 'destroy()' from custom event handlers. Returning 'teardown()' has been deprecated and will be unsupported in Svelte 2");
-						}
-					`);
-                }
-                block.builders.destroy.addLine(deindent `
-					${handlerName}[${handlerName}.destroy ? 'destroy' : 'teardown']();
-				`);
-            }
-            else {
-                const handler = deindent `
-					function ${handlerName}(event) {
-						${handlerBody}
-					}
-				`;
-                if (shouldHoist) {
-                    generator.blocks.push(handler);
-                }
-                else {
-                    block.builders.init.addBlock(handler);
-                }
-                block.builders.hydrate.addLine(`@addListener(${this.var}, "${attribute.name}", ${handlerName});`);
-                block.builders.destroy.addLine(`@removeListener(${this.var}, "${attribute.name}", ${handlerName});`);
-            }
-        });
-        return eventHandlerUsesComponent;
-    }
-    addRefs(block) {
-        // TODO it should surely be an error to have more than one ref
-        this.attributes.filter((a) => a.type === 'Ref').forEach((attribute) => {
-            const ref = `#component.refs.${attribute.name}`;
-            block.builders.mount.addLine(`${ref} = ${this.var};`);
-            block.builders.destroy.addLine(`if (${ref} === ${this.var}) ${ref} = null;`);
-            this.generator.usesRefs = true; // so component.refs object is created
-        });
-    }
-    addTransitions(block) {
-        const intro = this.attributes.find((a) => a.type === 'Transition' && a.intro);
-        const outro = this.attributes.find((a) => a.type === 'Transition' && a.outro);
-        if (!intro && !outro)
-            return;
-        if (intro === outro) {
-            block.contextualise(intro.expression); // TODO remove all these
-            const name = block.getUniqueName(`${this.var}_transition`);
-            const snippet = intro.expression
-                ? intro.metadata.snippet
-                : '{}';
-            block.addVariable(name);
-            const fn = `%transitions-${intro.name}`;
-            block.builders.intro.addBlock(deindent `
-				#component.root._aftercreate.push(function() {
-					if (!${name}) ${name} = @wrapTransition(#component, ${this.var}, ${fn}, ${snippet}, true, null);
-					${name}.run(true, function() {
-						#component.fire("intro.end", { node: ${this.var} });
-					});
-				});
-			`);
-            block.builders.outro.addBlock(deindent `
-				${name}.run(false, function() {
-					#component.fire("outro.end", { node: ${this.var} });
-					if (--#outros === 0) #outrocallback();
-					${name} = null;
-				});
-			`);
-        }
-        else {
-            const introName = intro && block.getUniqueName(`${this.var}_intro`);
-            const outroName = outro && block.getUniqueName(`${this.var}_outro`);
-            if (intro) {
-                block.contextualise(intro.expression);
-                block.addVariable(introName);
-                const snippet = intro.expression
-                    ? intro.metadata.snippet
-                    : '{}';
-                const fn = `%transitions-${intro.name}`; // TODO add built-in transitions?
-                if (outro) {
-                    block.builders.intro.addBlock(deindent `
-						if (${introName}) ${introName}.abort();
-						if (${outroName}) ${outroName}.abort();
-					`);
-                }
-                block.builders.intro.addBlock(deindent `
-					#component.root._aftercreate.push(function() {
-						${introName} = @wrapTransition(#component, ${this.var}, ${fn}, ${snippet}, true, null);
-						${introName}.run(true, function() {
-							#component.fire("intro.end", { node: ${this.var} });
-						});
-					});
-				`);
-            }
-            if (outro) {
-                block.contextualise(outro.expression);
-                block.addVariable(outroName);
-                const snippet = outro.expression
-                    ? outro.metadata.snippet
-                    : '{}';
-                const fn = `%transitions-${outro.name}`;
-                // TODO hide elements that have outro'd (unless they belong to a still-outroing
-                // group) prior to their removal from the DOM
-                block.builders.outro.addBlock(deindent `
-					${outroName} = @wrapTransition(#component, ${this.var}, ${fn}, ${snippet}, false, null);
-					${outroName}.run(false, function() {
-						#component.fire("outro.end", { node: ${this.var} });
-						if (--#outros === 0) #outrocallback();
-					});
-				`);
-            }
-        }
-    }
-    addActions(block) {
-        this.attributes.filter((a) => a.type === 'Action').forEach((attribute) => {
-            const { expression } = attribute;
-            let snippet, dependencies;
-            if (expression) {
-                this.generator.addSourcemapLocations(expression);
-                block.contextualise(expression);
-                snippet = attribute.metadata.snippet;
-                dependencies = attribute.metadata.dependencies;
-            }
-            const name = block.getUniqueName(`${attribute.name.replace(/[^a-zA-Z0-9_$]/g, '_')}_action`);
-            block.addVariable(name);
-            const fn = `%actions-${attribute.name}`;
-            block.builders.hydrate.addLine(`${name} = ${fn}.call(#component, ${this.var}${snippet ? `, ${snippet}` : ''}) || {};`);
-            if (dependencies && dependencies.length) {
-                let conditional = `typeof ${name}.update === 'function' && `;
-                const deps = dependencies.map(dependency => `changed.${dependency}`).join(' || ');
-                conditional += dependencies.length > 1 ? `(${deps})` : deps;
-                block.builders.update.addConditional(conditional, `${name}.update.call(#component, ${snippet});`);
-            }
-            block.builders.destroy.addLine(`if (typeof ${name}.destroy === 'function') ${name}.destroy.call(#component);`);
-        });
-    }
-    getStaticAttributeValue(name) {
-        const attribute = this.attributes.find((attr) => attr.type === 'Attribute' && attr.name.toLowerCase() === name);
-        if (!attribute)
-            return null;
-        if (attribute.value === true)
-            return true;
-        if (attribute.value.length === 0)
-            return '';
-        if (attribute.value.length === 1 && attribute.value[0].type === 'Text') {
-            return attribute.value[0].data;
-        }
-        return null;
-    }
-    isMediaNode() {
-        return this.name === 'audio' || this.name === 'video';
-    }
-    remount(name) {
-        const slot = this.attributes.find(attribute => attribute.name === 'slot');
-        if (slot) {
-            return `@appendNode(${this.var}, ${name}._slotted.${this.getStaticAttributeValue('slot')});`;
-        }
-        return `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `["default"]` : `.default`});`;
-    }
-    addCssClass() {
-        const classAttribute = this.attributes.find(a => a.name === 'class');
-        if (classAttribute && classAttribute.value !== true) {
-            if (classAttribute.value.length === 1 && classAttribute.value[0].type === 'Text') {
-                classAttribute.value[0].data += ` ${this.generator.stylesheet.id}`;
-            }
-            else {
-                classAttribute.value.push(new Node$1({ type: 'Text', data: ` ${this.generator.stylesheet.id}` }));
-            }
-        }
-        else {
-            this.attributes.push(new Attribute({
-                generator: this.generator,
-                name: 'class',
-                value: [new Node$1({ type: 'Text', data: `${this.generator.stylesheet.id}` })],
-                parent: this,
-            }));
-        }
-    }
-}
-function getRenderStatement(generator, namespace, name) {
-    if (namespace === 'http://www.w3.org/2000/svg') {
-        return `@createSvgElement("${name}")`;
-    }
-    if (namespace) {
-        return `document.createElementNS("${namespace}", "${name}")`;
-    }
-    return `@createElement("${name}")`;
-}
-function getClaimStatement(generator, namespace, nodes, node) {
-    const attributes = node.attributes
-        .filter((attr) => attr.type === 'Attribute')
-        .map((attr) => `${quoteProp(attr.name, generator.legacy)}: true`)
-        .join(', ');
-    const name = namespace ? node.name : node.name.toUpperCase();
-    return `@claimElement(${nodes}, "${name}", ${attributes
-        ? `{ ${attributes} }`
-        : `{}`}, ${namespace === svg ? true : false})`;
-}
-function quoteProp(name, legacy) {
-    const isLegacyPropName = legacy && reservedNames.has(name);
-    if (/[^a-zA-Z_$0-9]/.test(name) || isLegacyPropName)
-        return `"${name}"`;
-    return name;
-}
-function stringifyAttributeValue(value) {
-    if (value === true)
-        return '';
-    if (value.length === 0)
-        return `=""`;
-    const data = value[0].data;
-    return `=${JSON.stringify(data)}`;
-}
-const events$1 = [
-    {
-        eventNames: ['input'],
-        filter: (node, name) => node.name === 'textarea' ||
-            node.name === 'input' && !/radio|checkbox/.test(node.getStaticAttributeValue('type'))
-    },
-    {
-        eventNames: ['change'],
-        filter: (node, name) => node.name === 'select' ||
-            node.name === 'input' && /radio|checkbox|range/.test(node.getStaticAttributeValue('type'))
-    },
-    // media events
-    {
-        eventNames: ['timeupdate'],
-        filter: (node, name) => node.isMediaNode() &&
-            (name === 'currentTime' || name === 'played')
-    },
-    {
-        eventNames: ['durationchange'],
-        filter: (node, name) => node.isMediaNode() &&
-            name === 'duration'
-    },
-    {
-        eventNames: ['play', 'pause'],
-        filter: (node, name) => node.isMediaNode() &&
-            name === 'paused'
-    },
-    {
-        eventNames: ['progress'],
-        filter: (node, name) => node.isMediaNode() &&
-            name === 'buffered'
-    },
-    {
-        eventNames: ['loadedmetadata'],
-        filter: (node, name) => node.isMediaNode() &&
-            (name === 'buffered' || name === 'seekable')
-    },
-    {
-        eventNames: ['volumechange'],
-        filter: (node, name) => node.isMediaNode() &&
-            name === 'volume'
-    }
-];
-
-class ElseBlock extends Node$1 {
-}
-
-class EventHandler extends Node$1 {
-}
-
-let Block$1 = class Block {
-    constructor(options) {
-        this.generator = options.generator;
-        this.name = options.name;
-        this.expression = options.expression;
-        this.context = options.context;
-        this.destructuredContexts = options.destructuredContexts;
-        this.comment = options.comment;
-        // for keyed each blocks
-        this.key = options.key;
-        this.first = null;
-        this.contexts = options.contexts;
-        this.contextTypes = options.contextTypes;
-        this.indexes = options.indexes;
-        this.changeableIndexes = options.changeableIndexes;
-        this.dependencies = new Set();
-        this.indexNames = options.indexNames;
-        this.listNames = options.listNames;
-        this.builders = {
-            init: new CodeBuilder(),
-            create: new CodeBuilder(),
-            claim: new CodeBuilder(),
-            hydrate: new CodeBuilder(),
-            mount: new CodeBuilder(),
-            intro: new CodeBuilder(),
-            update: new CodeBuilder(),
-            outro: new CodeBuilder(),
-            unmount: new CodeBuilder(),
-            detachRaw: new CodeBuilder(),
-            destroy: new CodeBuilder(),
-        };
-        this.hasIntroMethod = false; // a block could have an intro method but not intro transitions, e.g. if a sibling block has intros
-        this.hasOutroMethod = false;
-        this.outros = 0;
-        this.getUniqueName = this.generator.getUniqueNameMaker([...this.contexts.values()]);
-        this.variables = new Map();
-        this.aliases = new Map()
-            .set('component', this.getUniqueName('component'))
-            .set('state', this.getUniqueName('state'));
-        if (this.key)
-            this.aliases.set('key', this.getUniqueName('key'));
-        this.hasUpdateMethod = false; // determined later
-    }
-    addDependencies(dependencies) {
-        dependencies.forEach(dependency => {
-            this.dependencies.add(dependency);
-        });
-    }
-    addElement(name, renderStatement, claimStatement, parentNode) {
-        this.addVariable(name);
-        this.builders.create.addLine(`${name} = ${renderStatement};`);
-        this.builders.claim.addLine(`${name} = ${claimStatement || renderStatement};`);
-        if (parentNode) {
-            this.builders.mount.addLine(`@appendNode(${name}, ${parentNode});`);
-            if (parentNode === 'document.head')
-                this.builders.unmount.addLine(`@detachNode(${name});`);
-        }
-        else {
-            this.builders.mount.addLine(`@insertNode(${name}, #target, anchor);`);
-            this.builders.unmount.addLine(`@detachNode(${name});`);
-        }
-    }
-    addVariable(name, init) {
-        if (this.variables.has(name) && this.variables.get(name) !== init) {
-            throw new Error(`Variable '${name}' already initialised with a different value`);
-        }
-        this.variables.set(name, init);
-    }
-    alias(name) {
-        if (!this.aliases.has(name)) {
-            this.aliases.set(name, this.getUniqueName(name));
-        }
-        return this.aliases.get(name);
-    }
-    child(options) {
-        return new Block$1(Object.assign({}, this, { key: null }, options, { parent: this }));
-    }
-    contextualise(expression, context, isEventHandler) {
-        return this.generator.contextualise(this.contexts, this.indexes, expression, context, isEventHandler);
-    }
-    toString() {
-        let introing;
-        const hasIntros = !this.builders.intro.isEmpty();
-        if (hasIntros) {
-            introing = this.getUniqueName('introing');
-            this.addVariable(introing);
-        }
-        let outroing;
-        const hasOutros = !this.builders.outro.isEmpty();
-        if (hasOutros) {
-            outroing = this.alias('outroing');
-            this.addVariable(outroing);
-        }
-        if (this.autofocus) {
-            this.builders.mount.addLine(`${this.autofocus}.focus();`);
-        }
-        // TODO `this.contexts` is possibly redundant post-#1122
-        const initializers = [];
-        this.contexts.forEach((name, context) => {
-            // TODO only the ones that are actually used in this block...
-            const listName = this.listNames.get(context);
-            const indexName = this.indexNames.get(context);
-            initializers.push(`${name} = state.${context}`, `${listName} = state.${listName}`, `${indexName} = state.${indexName}`);
-            this.hasUpdateMethod = true;
-        });
-        // minor hack – we need to ensure that any {{{triples}}} are detached first
-        this.builders.unmount.addBlockAtStart(this.builders.detachRaw.toString());
-        const properties = new CodeBuilder();
-        let localKey;
-        if (this.key) {
-            localKey = this.getUniqueName('key');
-            properties.addBlock(`key: ${localKey},`);
-        }
-        if (this.first) {
-            properties.addBlock(`first: null,`);
-            this.builders.hydrate.addLine(`this.first = ${this.first};`);
-        }
-        if (this.builders.create.isEmpty() && this.builders.hydrate.isEmpty()) {
-            properties.addBlock(`c: @noop,`);
-        }
-        else {
-            properties.addBlock(deindent `
-				c: function create() {
-					${this.builders.create}
-					${!this.builders.hydrate.isEmpty() && `this.h();`}
-				},
-			`);
-        }
-        if (this.generator.hydratable) {
-            if (this.builders.claim.isEmpty() && this.builders.hydrate.isEmpty()) {
-                properties.addBlock(`l: @noop,`);
-            }
-            else {
-                properties.addBlock(deindent `
-					l: function claim(nodes) {
-						${this.builders.claim}
-						${!this.builders.hydrate.isEmpty() && `this.h();`}
-					},
-				`);
-            }
-        }
-        if (!this.builders.hydrate.isEmpty()) {
-            properties.addBlock(deindent `
-				h: function hydrate() {
-					${this.builders.hydrate}
-				},
-			`);
-        }
-        if (this.builders.mount.isEmpty()) {
-            properties.addBlock(`m: @noop,`);
-        }
-        else {
-            properties.addBlock(deindent `
-				m: function mount(#target, anchor) {
-					${this.builders.mount}
-				},
-			`);
-        }
-        if (this.hasUpdateMethod) {
-            if (this.builders.update.isEmpty() && initializers.length === 0) {
-                properties.addBlock(`p: @noop,`);
-            }
-            else {
-                properties.addBlock(deindent `
-					p: function update(changed, state) {
-						${initializers.map(str => `${str};`)}
-						${this.builders.update}
-					},
-				`);
-            }
-        }
-        if (this.hasIntroMethod) {
-            if (hasIntros) {
-                properties.addBlock(deindent `
-					i: function intro(#target, anchor) {
-						if (${introing}) return;
-						${introing} = true;
-						${hasOutros && `${outroing} = false;`}
-
-						${this.builders.intro}
-
-						this.m(#target, anchor);
-					},
-				`);
-            }
-            else {
-                properties.addBlock(deindent `
-					i: function intro(#target, anchor) {
-						this.m(#target, anchor);
-					},
-				`);
-            }
-        }
-        if (this.hasOutroMethod) {
-            if (hasOutros) {
-                properties.addBlock(deindent `
-					o: function outro(#outrocallback) {
-						if (${outroing}) return;
-						${outroing} = true;
-						${hasIntros && `${introing} = false;`}
-
-						var #outros = ${this.outros};
-
-						${this.builders.outro}
-					},
-				`);
-            }
-            else {
-                properties.addBlock(deindent `
-					o: @run,
-				`);
-            }
-        }
-        if (this.builders.unmount.isEmpty()) {
-            properties.addBlock(`u: @noop,`);
-        }
-        else {
-            properties.addBlock(deindent `
-				u: function unmount() {
-					${this.builders.unmount}
-				},
-			`);
-        }
-        if (this.builders.destroy.isEmpty()) {
-            properties.addBlock(`d: @noop`);
-        }
-        else {
-            properties.addBlock(deindent `
-				d: function destroy() {
-					${this.builders.destroy}
-				}
-			`);
-        }
-        return deindent `
-			${this.comment && `// ${escape(this.comment)}`}
-			function ${this.name}(#component${this.key ? `, ${localKey}` : ''}, state) {
-				${initializers.length > 0 &&
-            `var ${initializers.join(', ')};`}
-				${this.variables.size > 0 &&
-            `var ${Array.from(this.variables.keys())
-                .map(key => {
-                const init = this.variables.get(key);
-                return init !== undefined ? `${key} = ${init}` : key;
-            })
-                .join(', ')};`}
-
-				${!this.builders.init.isEmpty() && this.builders.init}
-
-				return {
-					${properties}
-				};
-			}
-		`.replace(/(#+)(\w*)/g, (match, sigil, name) => {
-            return sigil === '#' ? this.alias(name) : sigil.slice(1) + name;
-        });
-    }
-};
-
-class Fragment extends Node$1 {
-    init() {
-        this.block = new Block$1({
-            generator: this.generator,
-            name: '@create_main_fragment',
-            key: null,
-            contexts: new Map(),
-            indexes: new Map(),
-            changeableIndexes: new Map(),
-            indexNames: new Map(),
-            listNames: new Map(),
-            dependencies: new Set(),
-        });
-        this.generator.blocks.push(this.block);
-        this.initChildren(this.block, true, null);
-        this.block.hasUpdateMethod = true;
-    }
-    build() {
-        this.init();
-        this.children.forEach(child => {
-            child.build(this.block, null, 'nodes');
-        });
-    }
-}
-
-class Head extends Node$1 {
-    init(block, stripWhitespace, nextSibling) {
-        this.initChildren(block, true, null);
-    }
-    build(block, parentNode, parentNodes) {
-        this.var = 'document.head';
-        this.children.forEach((child) => {
-            child.build(block, 'document.head', null);
-        });
-    }
-}
-
-function isElseIf(node) {
-    return (node && node.children.length === 1 && node.children[0].type === 'IfBlock');
-}
-function isElseBranch(branch) {
-    return branch.block && !branch.condition;
-}
-class IfBlock extends Node$1 {
-    init(block, stripWhitespace, nextSibling) {
-        const { generator } = this;
-        this.cannotUseInnerHTML();
-        const blocks = [];
-        let dynamic = false;
-        let hasIntros = false;
-        let hasOutros = false;
-        function attachBlocks(node) {
-            node.var = block.getUniqueName(`if_block`);
-            block.addDependencies(node.metadata.dependencies);
-            node.block = block.child({
-                comment: createDebuggingComment(node, generator),
-                name: generator.getUniqueName(`create_if_block`),
-            });
-            blocks.push(node.block);
-            node.initChildren(node.block, stripWhitespace, nextSibling);
-            if (node.block.dependencies.size > 0) {
-                dynamic = true;
-                block.addDependencies(node.block.dependencies);
-            }
-            if (node.block.hasIntroMethod)
-                hasIntros = true;
-            if (node.block.hasOutroMethod)
-                hasOutros = true;
-            if (isElseIf(node.else)) {
-                attachBlocks(node.else.children[0]);
-            }
-            else if (node.else) {
-                node.else.block = block.child({
-                    comment: createDebuggingComment(node.else, generator),
-                    name: generator.getUniqueName(`create_if_block`),
-                });
-                blocks.push(node.else.block);
-                node.else.initChildren(node.else.block, stripWhitespace, nextSibling);
-                if (node.else.block.dependencies.size > 0) {
-                    dynamic = true;
-                    block.addDependencies(node.else.block.dependencies);
-                }
-            }
-        }
-        attachBlocks(this);
-        blocks.forEach(block => {
-            block.hasUpdateMethod = dynamic;
-            block.hasIntroMethod = hasIntros;
-            block.hasOutroMethod = hasOutros;
-        });
-        generator.blocks.push(...blocks);
-    }
-    build(block, parentNode, parentNodes) {
-        const name = this.var;
-        const needsAnchor = this.next ? !this.next.isDomNode() : !parentNode || !this.parent.isDomNode();
-        const anchor = needsAnchor
-            ? block.getUniqueName(`${name}_anchor`)
-            : (this.next && this.next.var) || 'null';
-        const branches = this.getBranches(block, parentNode, parentNodes, this);
-        const hasElse = isElseBranch(branches[branches.length - 1]);
-        const if_name = hasElse ? '' : `if (${name}) `;
-        const dynamic = branches[0].hasUpdateMethod; // can use [0] as proxy for all, since they necessarily have the same value
-        const hasOutros = branches[0].hasOutroMethod;
-        const vars = { name, anchor, if_name, hasElse };
-        if (this.else) {
-            if (hasOutros) {
-                this.buildCompoundWithOutros(block, parentNode, parentNodes, branches, dynamic, vars);
-            }
-            else {
-                this.buildCompound(block, parentNode, parentNodes, branches, dynamic, vars);
-            }
-        }
-        else {
-            this.buildSimple(block, parentNode, parentNodes, branches[0], dynamic, vars);
-        }
-        block.builders.create.addLine(`${if_name}${name}.c();`);
-        if (parentNodes) {
-            block.builders.claim.addLine(`${if_name}${name}.l(${parentNodes});`);
-        }
-        if (needsAnchor) {
-            block.addElement(anchor, `@createComment()`, parentNodes && `@createComment()`, parentNode);
-        }
-    }
-    buildCompound(block, parentNode, parentNodes, branches, dynamic, { name, anchor, hasElse, if_name }) {
-        const select_block_type = this.generator.getUniqueName(`select_block_type`);
-        const current_block_type = block.getUniqueName(`current_block_type`);
-        const current_block_type_and = hasElse ? '' : `${current_block_type} && `;
-        block.builders.init.addBlock(deindent `
-			function ${select_block_type}(state) {
-				${branches
-            .map(({ condition, block }) => `${condition ? `if (${condition}) ` : ''}return ${block};`)
-            .join('\n')}
-			}
-		`);
-        block.builders.init.addBlock(deindent `
-			var ${current_block_type} = ${select_block_type}(state);
-			var ${name} = ${current_block_type_and}${current_block_type}(#component, state);
-		`);
-        const mountOrIntro = branches[0].hasIntroMethod ? 'i' : 'm';
-        const initialMountNode = parentNode || '#target';
-        const anchorNode = parentNode ? 'null' : 'anchor';
-        block.builders.mount.addLine(`${if_name}${name}.${mountOrIntro}(${initialMountNode}, ${anchorNode});`);
-        const updateMountNode = this.getUpdateMountNode(anchor);
-        const changeBlock = deindent `
-			${hasElse
-            ? deindent `
-					${name}.u();
-					${name}.d();
-				`
-            : deindent `
-					if (${name}) {
-						${name}.u();
-						${name}.d();
-					}`}
-			${name} = ${current_block_type_and}${current_block_type}(#component, state);
-			${if_name}${name}.c();
-			${if_name}${name}.${mountOrIntro}(${updateMountNode}, ${anchor});
-		`;
-        if (dynamic) {
-            block.builders.update.addBlock(deindent `
-				if (${current_block_type} === (${current_block_type} = ${select_block_type}(state)) && ${name}) {
-					${name}.p(changed, state);
-				} else {
-					${changeBlock}
-				}
-			`);
-        }
-        else {
-            block.builders.update.addBlock(deindent `
-				if (${current_block_type} !== (${current_block_type} = ${select_block_type}(state))) {
-					${changeBlock}
-				}
-			`);
-        }
-        block.builders.unmount.addLine(`${if_name}${name}.u();`);
-        block.builders.destroy.addLine(`${if_name}${name}.d();`);
-    }
-    // if any of the siblings have outros, we need to keep references to the blocks
-    // (TODO does this only apply to bidi transitions?)
-    buildCompoundWithOutros(block, parentNode, parentNodes, branches, dynamic, { name, anchor, hasElse }) {
-        const select_block_type = block.getUniqueName(`select_block_type`);
-        const current_block_type_index = block.getUniqueName(`current_block_type_index`);
-        const previous_block_index = block.getUniqueName(`previous_block_index`);
-        const if_block_creators = block.getUniqueName(`if_block_creators`);
-        const if_blocks = block.getUniqueName(`if_blocks`);
-        const if_current_block_type_index = hasElse
-            ? ''
-            : `if (~${current_block_type_index}) `;
-        block.addVariable(current_block_type_index);
-        block.addVariable(name);
-        block.builders.init.addBlock(deindent `
-			var ${if_block_creators} = [
-				${branches.map(branch => branch.block).join(',\n')}
-			];
-
-			var ${if_blocks} = [];
-
-			function ${select_block_type}(state) {
-				${branches
-            .map(({ condition, block }, i) => `${condition ? `if (${condition}) ` : ''}return ${block ? i : -1};`)
-            .join('\n')}
-			}
-		`);
-        if (hasElse) {
-            block.builders.init.addBlock(deindent `
-				${current_block_type_index} = ${select_block_type}(state);
-				${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#component, state);
-			`);
-        }
-        else {
-            block.builders.init.addBlock(deindent `
-				if (~(${current_block_type_index} = ${select_block_type}(state))) {
-					${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#component, state);
-				}
-			`);
-        }
-        const mountOrIntro = branches[0].hasIntroMethod ? 'i' : 'm';
-        const initialMountNode = parentNode || '#target';
-        const anchorNode = parentNode ? 'null' : 'anchor';
-        block.builders.mount.addLine(`${if_current_block_type_index}${if_blocks}[${current_block_type_index}].${mountOrIntro}(${initialMountNode}, ${anchorNode});`);
-        const updateMountNode = this.getUpdateMountNode(anchor);
-        const destroyOldBlock = deindent `
-			${name}.o(function() {
-				${if_blocks}[ ${previous_block_index} ].u();
-				${if_blocks}[ ${previous_block_index} ].d();
-				${if_blocks}[ ${previous_block_index} ] = null;
-			});
-		`;
-        const createNewBlock = deindent `
-			${name} = ${if_blocks}[${current_block_type_index}];
-			if (!${name}) {
-				${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#component, state);
-				${name}.c();
-			}
-			${name}.${mountOrIntro}(${updateMountNode}, ${anchor});
-		`;
-        const changeBlock = hasElse
-            ? deindent `
-				${destroyOldBlock}
-
-				${createNewBlock}
-			`
-            : deindent `
-				if (${name}) {
-					${destroyOldBlock}
-				}
-
-				if (~${current_block_type_index}) {
-					${createNewBlock}
-				} else {
-					${name} = null;
-				}
-			`;
-        if (dynamic) {
-            block.builders.update.addBlock(deindent `
-				var ${previous_block_index} = ${current_block_type_index};
-				${current_block_type_index} = ${select_block_type}(state);
-				if (${current_block_type_index} === ${previous_block_index}) {
-					${if_current_block_type_index}${if_blocks}[${current_block_type_index}].p(changed, state);
-				} else {
-					${changeBlock}
-				}
-			`);
-        }
-        else {
-            block.builders.update.addBlock(deindent `
-				var ${previous_block_index} = ${current_block_type_index};
-				${current_block_type_index} = ${select_block_type}(state);
-				if (${current_block_type_index} !== ${previous_block_index}) {
-					${changeBlock}
-				}
-			`);
-        }
-        block.builders.destroy.addLine(deindent `
-			${if_current_block_type_index}{
-				${if_blocks}[${current_block_type_index}].u();
-				${if_blocks}[${current_block_type_index}].d();
-			}
-		`);
-    }
-    buildSimple(block, parentNode, parentNodes, branch, dynamic, { name, anchor, if_name }) {
-        block.builders.init.addBlock(deindent `
-			var ${name} = (${branch.condition}) && ${branch.block}(#component, state);
-		`);
-        const mountOrIntro = branch.hasIntroMethod ? 'i' : 'm';
-        const initialMountNode = parentNode || '#target';
-        const anchorNode = parentNode ? 'null' : 'anchor';
-        block.builders.mount.addLine(`if (${name}) ${name}.${mountOrIntro}(${initialMountNode}, ${anchorNode});`);
-        const updateMountNode = this.getUpdateMountNode(anchor);
-        const enter = dynamic
-            ? branch.hasIntroMethod
-                ? deindent `
-					if (${name}) {
-						${name}.p(changed, state);
-					} else {
-						${name} = ${branch.block}(#component, state);
-						if (${name}) ${name}.c();
-					}
-
-					${name}.i(${updateMountNode}, ${anchor});
-				`
-                : deindent `
-					if (${name}) {
-						${name}.p(changed, state);
-					} else {
-						${name} = ${branch.block}(#component, state);
-						${name}.c();
-						${name}.m(${updateMountNode}, ${anchor});
-					}
-				`
-            : branch.hasIntroMethod
-                ? deindent `
-					if (!${name}) {
-						${name} = ${branch.block}(#component, state);
-						${name}.c();
-					}
-					${name}.i(${updateMountNode}, ${anchor});
-				`
-                : deindent `
-					if (!${name}) {
-						${name} = ${branch.block}(#component, state);
-						${name}.c();
-						${name}.m(${updateMountNode}, ${anchor});
-					}
-				`;
-        // no `p()` here — we don't want to update outroing nodes,
-        // as that will typically result in glitching
-        const exit = branch.hasOutroMethod
-            ? deindent `
-				${name}.o(function() {
-					${name}.u();
-					${name}.d();
-					${name} = null;
-				});
-			`
-            : deindent `
-				${name}.u();
-				${name}.d();
-				${name} = null;
-			`;
-        block.builders.update.addBlock(deindent `
-			if (${branch.condition}) {
-				${enter}
-			} else if (${name}) {
-				${exit}
-			}
-		`);
-        block.builders.unmount.addLine(`${if_name}${name}.u();`);
-        block.builders.destroy.addLine(`${if_name}${name}.d();`);
-    }
-    getBranches(block, parentNode, parentNodes, node) {
-        block.contextualise(node.expression); // TODO remove
-        const branches = [
-            {
-                condition: node.metadata.snippet,
-                block: node.block.name,
-                hasUpdateMethod: node.block.hasUpdateMethod,
-                hasIntroMethod: node.block.hasIntroMethod,
-                hasOutroMethod: node.block.hasOutroMethod,
-            },
-        ];
-        this.visitChildren(block, node);
-        if (isElseIf(node.else)) {
-            branches.push(...this.getBranches(block, parentNode, parentNodes, node.else.children[0]));
-        }
-        else {
-            branches.push({
-                condition: null,
-                block: node.else ? node.else.block.name : null,
-                hasUpdateMethod: node.else ? node.else.block.hasUpdateMethod : false,
-                hasIntroMethod: node.else ? node.else.block.hasIntroMethod : false,
-                hasOutroMethod: node.else ? node.else.block.hasOutroMethod : false,
-            });
-            if (node.else) {
-                this.visitChildren(block, node.else);
-            }
-        }
-        return branches;
-    }
-    visitChildren(block, node) {
-        node.children.forEach((child) => {
-            child.build(node.block, null, 'nodes');
-        });
-    }
-}
-
-class Tag extends Node$1 {
-    renameThisMethod(block, update) {
-        const { indexes } = block.contextualise(this.expression);
-        const { dependencies, snippet } = this.metadata;
-        const hasChangeableIndex = Array.from(indexes).some(index => block.changeableIndexes.get(index));
-        const shouldCache = (this.expression.type !== 'Identifier' ||
-            block.contexts.has(this.expression.name) ||
-            hasChangeableIndex);
-        const value = shouldCache && block.getUniqueName(`${this.var}_value`);
-        const content = shouldCache ? value : snippet;
-        if (shouldCache)
-            block.addVariable(value, snippet);
-        if (dependencies.length || hasChangeableIndex) {
-            const changedCheck = ((block.hasOutroMethod ? `#outroing || ` : '') +
-                dependencies.map((dependency) => `changed.${dependency}`).join(' || '));
-            const updateCachedValue = `${value} !== (${value} = ${snippet})`;
-            const condition = shouldCache ?
-                (dependencies.length ? `(${changedCheck}) && ${updateCachedValue}` : updateCachedValue) :
-                changedCheck;
-            block.builders.update.addConditional(condition, update(content));
-        }
-        return { init: content };
-    }
-}
-
-class MustacheTag extends Tag {
-    init(block) {
-        this.cannotUseInnerHTML();
-        this.var = block.getUniqueName('text');
-        block.addDependencies(this.metadata.dependencies);
-    }
-    build(block, parentNode, parentNodes) {
-        const { init } = this.renameThisMethod(block, value => `${this.var}.data = ${value};`);
-        block.addElement(this.var, `@createText(${init})`, parentNodes && `@claimText(${parentNodes}, ${init})`, parentNode);
-    }
-    remount(name) {
-        return `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `["default"]` : `.default`});`;
-    }
-}
-
-class PendingBlock extends Node$1 {
-}
-
-class RawMustacheTag extends Tag {
-    init(block) {
-        this.cannotUseInnerHTML();
-        this.var = block.getUniqueName('raw');
-        block.addDependencies(this.metadata.dependencies);
-    }
-    build(block, parentNode, parentNodes) {
-        const name = this.var;
-        const needsAnchorBefore = this.prev ? this.prev.type !== 'Element' : !parentNode;
-        const needsAnchorAfter = this.next ? this.next.type !== 'Element' : !parentNode;
-        const anchorBefore = needsAnchorBefore
-            ? block.getUniqueName(`${name}_before`)
-            : (this.prev && this.prev.var) || 'null';
-        const anchorAfter = needsAnchorAfter
-            ? block.getUniqueName(`${name}_after`)
-            : (this.next && this.next.var) || 'null';
-        let detach;
-        let insert;
-        let useInnerHTML = false;
-        if (anchorBefore === 'null' && anchorAfter === 'null') {
-            useInnerHTML = true;
-            detach = `${parentNode}.innerHTML = '';`;
-            insert = content => `${parentNode}.innerHTML = ${content};`;
-        }
-        else if (anchorBefore === 'null') {
-            detach = `@detachBefore(${anchorAfter});`;
-            insert = content => `${anchorAfter}.insertAdjacentHTML("beforebegin", ${content});`;
-        }
-        else if (anchorAfter === 'null') {
-            detach = `@detachAfter(${anchorBefore});`;
-            insert = content => `${anchorBefore}.insertAdjacentHTML("afterend", ${content});`;
-        }
-        else {
-            detach = `@detachBetween(${anchorBefore}, ${anchorAfter});`;
-            insert = content => `${anchorBefore}.insertAdjacentHTML("afterend", ${content});`;
-        }
-        const { init } = this.renameThisMethod(block, content => deindent `
-				${!useInnerHTML && detach}
-				${insert(content)}
-			`);
-        // we would have used comments here, but the `insertAdjacentHTML` api only
-        // exists for `Element`s.
-        if (needsAnchorBefore) {
-            block.addElement(anchorBefore, `@createElement('noscript')`, parentNodes && `@createElement('noscript')`, parentNode);
-        }
-        function addAnchorAfter() {
-            block.addElement(anchorAfter, `@createElement('noscript')`, parentNodes && `@createElement('noscript')`, parentNode);
-        }
-        if (needsAnchorAfter && anchorBefore === 'null') {
-            // anchorAfter needs to be in the DOM before we
-            // insert the HTML...
-            addAnchorAfter();
-        }
-        block.builders.mount.addLine(insert(init));
-        block.builders.detachRaw.addBlock(detach);
-        if (needsAnchorAfter && anchorBefore !== 'null') {
-            // ...otherwise it should go afterwards
-            addAnchorAfter();
-        }
-    }
-    remount(name) {
-        return `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `["default"]` : `.default`});`;
-    }
-}
-
-class Ref extends Node$1 {
-}
-
-class Slot extends Element {
-    init(block, stripWhitespace, nextSibling) {
-        this.cannotUseInnerHTML();
-        this.var = block.getUniqueName('slot');
-        if (this.children.length) {
-            this.initChildren(block, stripWhitespace, nextSibling);
-        }
-    }
-    build(block, parentNode, parentNodes) {
-        const { generator } = this;
-        const slotName = this.getStaticAttributeValue('name') || 'default';
-        generator.slots.add(slotName);
-        const content_name = block.getUniqueName(`slot_content_${slotName}`);
-        const prop = !isValidIdentifier(slotName) || (generator.legacy && reservedNames.has(slotName)) ? `["${slotName}"]` : `.${slotName}`;
-        block.addVariable(content_name, `#component._slotted${prop}`);
-        const needsAnchorBefore = this.prev ? this.prev.type !== 'Element' : !parentNode;
-        const needsAnchorAfter = this.next ? this.next.type !== 'Element' : !parentNode;
-        const anchorBefore = needsAnchorBefore
-            ? block.getUniqueName(`${content_name}_before`)
-            : (this.prev && this.prev.var) || 'null';
-        const anchorAfter = needsAnchorAfter
-            ? block.getUniqueName(`${content_name}_after`)
-            : (this.next && this.next.var) || 'null';
-        if (needsAnchorBefore)
-            block.addVariable(anchorBefore);
-        if (needsAnchorAfter)
-            block.addVariable(anchorAfter);
-        let mountBefore = block.builders.mount.toString();
-        let unmountBefore = block.builders.unmount.toString();
-        block.builders.create.pushCondition(`!${content_name}`);
-        block.builders.hydrate.pushCondition(`!${content_name}`);
-        block.builders.mount.pushCondition(`!${content_name}`);
-        block.builders.update.pushCondition(`!${content_name}`);
-        block.builders.unmount.pushCondition(`!${content_name}`);
-        block.builders.destroy.pushCondition(`!${content_name}`);
-        this.children.forEach((child) => {
-            child.build(block, parentNode, parentNodes);
-        });
-        block.builders.create.popCondition();
-        block.builders.hydrate.popCondition();
-        block.builders.mount.popCondition();
-        block.builders.update.popCondition();
-        block.builders.unmount.popCondition();
-        block.builders.destroy.popCondition();
-        const mountLeadin = block.builders.mount.toString() !== mountBefore
-            ? `else`
-            : `if (${content_name})`;
-        if (parentNode) {
-            block.builders.mount.addBlock(deindent `
-				${mountLeadin} {
-					${needsAnchorBefore && `@appendNode(${anchorBefore} || (${anchorBefore} = @createComment()), ${parentNode});`}
-					@appendNode(${content_name}, ${parentNode});
-					${needsAnchorAfter && `@appendNode(${anchorAfter} || (${anchorAfter} = @createComment()), ${parentNode});`}
-				}
-			`);
-        }
-        else {
-            block.builders.mount.addBlock(deindent `
-				${mountLeadin} {
-					${needsAnchorBefore && `@insertNode(${anchorBefore} || (${anchorBefore} = @createComment()), #target, anchor);`}
-					@insertNode(${content_name}, #target, anchor);
-					${needsAnchorAfter && `@insertNode(${anchorAfter} || (${anchorAfter} = @createComment()), #target, anchor);`}
-				}
-			`);
-        }
-        // if the slot is unmounted, move nodes back into the document fragment,
-        // so that it can be reinserted later
-        // TODO so that this can work with public API, component._slotted should
-        // be all fragments, derived from options.slots. Not === options.slots
-        const unmountLeadin = block.builders.unmount.toString() !== unmountBefore
-            ? `else`
-            : `if (${content_name})`;
-        if (anchorBefore === 'null' && anchorAfter === 'null') {
-            block.builders.unmount.addBlock(deindent `
-				${unmountLeadin} {
-					@reinsertChildren(${parentNode}, ${content_name});
-				}
-			`);
-        }
-        else if (anchorBefore === 'null') {
-            block.builders.unmount.addBlock(deindent `
-				${unmountLeadin} {
-					@reinsertBefore(${anchorAfter}, ${content_name});
-				}
-			`);
-        }
-        else if (anchorAfter === 'null') {
-            block.builders.unmount.addBlock(deindent `
-				${unmountLeadin} {
-					@reinsertAfter(${anchorBefore}, ${content_name});
-				}
-			`);
-        }
-        else {
-            block.builders.unmount.addBlock(deindent `
-				${unmountLeadin} {
-					@reinsertBetween(${anchorBefore}, ${anchorAfter}, ${content_name});
-					@detachNode(${anchorBefore});
-					@detachNode(${anchorAfter});
-				}
-			`);
-        }
-    }
-    getStaticAttributeValue(name) {
-        const attribute = this.attributes.find((attr) => attr.name.toLowerCase() === name);
-        if (!attribute)
-            return null;
-        if (attribute.value === true)
-            return true;
-        if (attribute.value.length === 0)
-            return '';
-        if (attribute.value.length === 1 && attribute.value[0].type === 'Text') {
-            return attribute.value[0].data;
-        }
-        return null;
-    }
-}
-
-// Whitespace inside one of these elements will not result in
-// a whitespace node being created in any circumstances. (This
-// list is almost certainly very incomplete)
-const elementsWithoutText = new Set([
-    'audio',
-    'datalist',
-    'dl',
-    'ol',
-    'optgroup',
-    'select',
-    'ul',
-    'video',
-]);
-function shouldSkip$1(node) {
-    if (/\S/.test(node.data))
-        return false;
-    const parentElement = node.findNearest(/(?:Element|Component|Head)/);
-    if (!parentElement)
-        return false;
-    if (parentElement.type === 'Head')
-        return true;
-    if (parentElement.type === 'Component')
-        return parentElement.children.length === 1 && node === parentElement.children[0];
-    return parentElement.namespace || elementsWithoutText.has(parentElement.name);
-}
-class Text extends Node$1 {
-    init(block) {
-        const parentElement = this.findNearest(/(?:Element|Component)/);
-        if (shouldSkip$1(this)) {
-            this.shouldSkip = true;
-            return;
-        }
-        this.var = block.getUniqueName(`text`);
-    }
-    build(block, parentNode, parentNodes) {
-        if (this.shouldSkip)
-            return;
-        block.addElement(this.var, `@createText(${stringify(this.data)})`, parentNodes && `@claimText(${parentNodes}, ${stringify(this.data)})`, parentNode);
-    }
-    remount(name) {
-        return `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `["default"]` : `.default`});`;
-    }
-}
-
-class ThenBlock extends Node$1 {
-}
-
-class Title extends Node$1 {
-    build(block, parentNode, parentNodes) {
-        const isDynamic = !!this.children.find(node => node.type !== 'Text');
-        if (isDynamic) {
-            let value;
-            const allDependencies = new Set();
-            let shouldCache;
-            // TODO some of this code is repeated in Tag.ts — would be good to
-            // DRY it out if that's possible without introducing crazy indirection
-            if (this.children.length === 1) {
-                // single {{tag}} — may be a non-string
-                const { expression } = this.children[0];
-                const { indexes } = block.contextualise(expression);
-                const { dependencies, snippet } = this.children[0].metadata;
-                value = snippet;
-                dependencies.forEach(d => {
-                    allDependencies.add(d);
-                });
-                shouldCache = (expression.type !== 'Identifier' ||
-                    block.contexts.has(expression.name));
-            }
-            else {
-                // '{{foo}} {{bar}}' — treat as string concatenation
-                value =
-                    (this.children[0].type === 'Text' ? '' : `"" + `) +
-                        this.children
-                            .map((chunk) => {
-                            if (chunk.type === 'Text') {
-                                return stringify(chunk.data);
-                            }
-                            else {
-                                const { indexes } = block.contextualise(chunk.expression);
-                                const { dependencies, snippet } = chunk.metadata;
-                                dependencies.forEach(d => {
-                                    allDependencies.add(d);
-                                });
-                                return getExpressionPrecedence(chunk.expression) <= 13 ? `(${snippet})` : snippet;
-                            }
-                        })
-                            .join(' + ');
-                shouldCache = true;
-            }
-            const last = shouldCache && block.getUniqueName(`title_value`);
-            if (shouldCache)
-                block.addVariable(last);
-            let updater;
-            const init = shouldCache ? `${last} = ${value}` : value;
-            block.builders.init.addLine(`document.title = ${init};`);
-            updater = `document.title = ${shouldCache ? last : value};`;
-            if (allDependencies.size) {
-                const dependencies = Array.from(allDependencies);
-                const changedCheck = ((block.hasOutroMethod ? `#outroing || ` : '') +
-                    dependencies.map(dependency => `changed.${dependency}`).join(' || '));
-                const updateCachedValue = `${last} !== (${last} = ${value})`;
-                const condition = shouldCache ?
-                    (dependencies.length ? `(${changedCheck}) && ${updateCachedValue}` : updateCachedValue) :
-                    changedCheck;
-                block.builders.update.addConditional(condition, updater);
-            }
-        }
-        else {
-            const value = stringify(this.children[0].data);
-            block.builders.hydrate.addLine(`document.title = ${value};`);
-        }
-    }
-}
-
-class Transition extends Node$1 {
-}
-
-const associatedEvents = {
-    innerWidth: 'resize',
-    innerHeight: 'resize',
-    outerWidth: 'resize',
-    outerHeight: 'resize',
-    scrollX: 'scroll',
-    scrollY: 'scroll',
-};
-const properties = {
-    scrollX: 'pageXOffset',
-    scrollY: 'pageYOffset'
-};
-const readonly = new Set([
-    'innerWidth',
-    'innerHeight',
-    'outerWidth',
-    'outerHeight',
-    'online',
-]);
-class Window extends Node$1 {
-    build(block, parentNode, parentNodes) {
-        const { generator } = this;
-        const events = {};
-        const bindings = {};
-        this.attributes.forEach((attribute) => {
-            if (attribute.type === 'EventHandler') {
-                // TODO verify that it's a valid callee (i.e. built-in or declared method)
-                generator.addSourcemapLocations(attribute.expression);
-                const isCustomEvent = generator.events.has(attribute.name);
-                let usesState = false;
-                attribute.expression.arguments.forEach((arg) => {
-                    block.contextualise(arg, null, true);
-                    const { dependencies } = arg.metadata;
-                    if (dependencies.length)
-                        usesState = true;
-                });
-                const flattened = flatten(attribute.expression.callee);
-                if (flattened.name !== 'event' && flattened.name !== 'this') {
-                    // allow event.stopPropagation(), this.select() etc
-                    generator.code.prependRight(attribute.expression.start, `${block.alias('component')}.`);
-                }
-                const handlerName = block.getUniqueName(`onwindow${attribute.name}`);
-                const handlerBody = deindent `
-					${usesState && `var state = #component.get();`}
-					[✂${attribute.expression.start}-${attribute.expression.end}✂];
-				`;
-                if (isCustomEvent) {
-                    // TODO dry this out
-                    block.addVariable(handlerName);
-                    block.builders.hydrate.addBlock(deindent `
-						${handlerName} = %events-${attribute.name}.call(#component, window, function(event) {
-							${handlerBody}
-						});
-					`);
-                    if (generator.options.dev) {
-                        block.builders.hydrate.addBlock(deindent `
-							if (${handlerName}.teardown) {
-								console.warn("Return 'destroy()' from custom event handlers. Returning 'teardown()' has been deprecated and will be unsupported in Svelte 2");
-							}
-						`);
-                    }
-                    block.builders.destroy.addLine(deindent `
-						${handlerName}[${handlerName}.destroy ? 'destroy' : 'teardown']();
-					`);
-                }
-                else {
-                    block.builders.init.addBlock(deindent `
-						function ${handlerName}(event) {
-							${handlerBody}
-						}
-						window.addEventListener("${attribute.name}", ${handlerName});
-					`);
-                    block.builders.destroy.addBlock(deindent `
-						window.removeEventListener("${attribute.name}", ${handlerName});
-					`);
-                }
-            }
-            if (attribute.type === 'Binding') {
-                // in dev mode, throw if read-only values are written to
-                if (readonly.has(attribute.name)) {
-                    generator.readonly.add(attribute.value.name);
-                }
-                bindings[attribute.name] = attribute.value.name;
-                // bind:online is a special case, we need to listen for two separate events
-                if (attribute.name === 'online')
-                    return;
-                const associatedEvent = associatedEvents[attribute.name];
-                const property = properties[attribute.name] || attribute.name;
-                if (!events[associatedEvent])
-                    events[associatedEvent] = [];
-                events[associatedEvent].push(`${attribute.value.name}: this.${property}`);
-                // add initial value
-                generator.metaBindings.push(`this._state.${attribute.value.name} = window.${property};`);
-            }
-        });
-        const lock = block.getUniqueName(`window_updating`);
-        const clear = block.getUniqueName(`clear_window_updating`);
-        const timeout = block.getUniqueName(`window_updating_timeout`);
-        Object.keys(events).forEach(event => {
-            const handlerName = block.getUniqueName(`onwindow${event}`);
-            const props = events[event].join(',\n');
-            if (event === 'scroll') {
-                // TODO other bidirectional bindings...
-                block.addVariable(lock, 'false');
-                block.addVariable(clear, `function() { ${lock} = false; }`);
-                block.addVariable(timeout);
-            }
-            const handlerBody = deindent `
-				${event === 'scroll' && deindent `
-					if (${lock}) return;
-					${lock} = true;
-				`}
-				${generator.options.dev && `component._updatingReadonlyProperty = true;`}
-
-				#component.set({
-					${props}
-				});
-
-				${generator.options.dev && `component._updatingReadonlyProperty = false;`}
-				${event === 'scroll' && `${lock} = false;`}
-			`;
-            block.builders.init.addBlock(deindent `
-				function ${handlerName}(event) {
-					${handlerBody}
-				}
-				window.addEventListener("${event}", ${handlerName});
-			`);
-            block.builders.destroy.addBlock(deindent `
-				window.removeEventListener("${event}", ${handlerName});
-			`);
-        });
-        // special case... might need to abstract this out if we add more special cases
-        if (bindings.scrollX && bindings.scrollY) {
-            const observerCallback = block.getUniqueName(`scrollobserver`);
-            block.builders.init.addBlock(deindent `
-				function ${observerCallback}() {
-					${lock} = true;
-					clearTimeout(${timeout});
-					var x = ${bindings.scrollX
-                ? `#component.get("${bindings.scrollX}")`
-                : `window.pageXOffset`};
-					var y = ${bindings.scrollY
-                ? `#component.get("${bindings.scrollY}")`
-                : `window.pageYOffset`};
-					window.scrollTo(x, y);
-					${timeout} = setTimeout(${clear}, 100);
-				}
-			`);
-            if (bindings.scrollX)
-                block.builders.init.addLine(`#component.observe("${bindings.scrollX}", ${observerCallback});`);
-            if (bindings.scrollY)
-                block.builders.init.addLine(`#component.observe("${bindings.scrollY}", ${observerCallback});`);
-        }
-        else if (bindings.scrollX || bindings.scrollY) {
-            const isX = !!bindings.scrollX;
-            block.builders.init.addBlock(deindent `
-				#component.observe("${bindings.scrollX || bindings.scrollY}", function(${isX ? 'x' : 'y'}) {
-					${lock} = true;
-					clearTimeout(${timeout});
-					window.scrollTo(${isX ? 'x, window.pageYOffset' : 'window.pageXOffset, y'});
-					${timeout} = setTimeout(${clear}, 100);
-				});
-			`);
-        }
-        // another special case. (I'm starting to think these are all special cases.)
-        if (bindings.online) {
-            const handlerName = block.getUniqueName(`onlinestatuschanged`);
-            block.builders.init.addBlock(deindent `
-				function ${handlerName}(event) {
-					#component.set({ ${bindings.online}: navigator.onLine });
-				}
-				window.addEventListener("online", ${handlerName});
-				window.addEventListener("offline", ${handlerName});
-			`);
-            // add initial value
-            generator.metaBindings.push(`this._state.${bindings.online} = navigator.onLine;`);
-            block.builders.destroy.addBlock(deindent `
-				window.removeEventListener("online", ${handlerName});
-				window.removeEventListener("offline", ${handlerName});
-			`);
-        }
-    }
-}
-
-const nodes = {
-    Attribute,
-    AwaitBlock,
-    Action,
-    Binding,
-    CatchBlock,
-    Comment: Comment$1,
-    Component,
-    EachBlock,
-    Element,
-    ElseBlock,
-    EventHandler,
-    Fragment,
-    Head,
-    IfBlock,
-    MustacheTag,
-    PendingBlock,
-    RawMustacheTag,
-    Ref,
-    Slot,
-    Text,
-    ThenBlock,
-    Title,
-    Transition,
-    Window
-};
-
-function detectIndentation(str) {
-    const pattern = /^[\t\s]{1,4}/gm;
-    let match;
-    while (match = pattern.exec(str)) {
-        if (match[0][0] === '\t')
-            return '\t';
-        if (match[0].length === 2)
-            return '  ';
-    }
-    return '    ';
-}
-function getIndentationLevel(str, b) {
-    let a = b;
-    while (a > 0 && str[a - 1] !== '\n')
-        a -= 1;
-    return /^\s*/.exec(str.slice(a, b))[0];
-}
-function getIndentExclusionRanges(node) {
-    const ranges = [];
-    walk(node, {
-        enter(node) {
-            if (node.type === 'TemplateElement')
-                ranges.push(node);
-        }
-    });
-    return ranges;
-}
-function removeIndentation(code, start, end, indentationLevel, ranges) {
-    const str = code.original.slice(start, end);
-    const pattern = new RegExp(`^${indentationLevel}`, 'gm');
-    let match;
-    while (match = pattern.exec(str)) {
-        // TODO bail if we're inside an exclusion range
-        code.remove(start + match.index, start + match.index + indentationLevel.length);
-    }
-}
-// We need to tell estree-walker that it should always
-// look for an `else` block, otherwise it might get
-// the wrong idea about the shape of each/if blocks
-childKeys.EachBlock = childKeys.IfBlock = ['children', 'else'];
-childKeys.Attribute = ['value'];
-class Generator {
-    constructor(parsed, source, name, stylesheet, options, stats, dom) {
-        stats.start('compile');
-        this.stats = stats;
-        this.ast = clone(parsed);
-        this.parsed = parsed;
-        this.source = source;
-        this.options = options;
-        this.imports = [];
-        this.helpers = new Set();
-        this.components = new Set();
-        this.events = new Set();
-        this.transitions = new Set();
-        this.actions = new Set();
-        this.importedComponents = new Map();
-        this.slots = new Set();
-        this.bindingGroups = [];
-        this.indirectDependencies = new Map();
-        this.locate = getLocator(this.source);
-        // track which properties are needed, so we can provide useful info
-        // in dev mode
-        this.expectedProperties = new Set();
-        this.code = new MagicString$1(source);
-        this.usesRefs = false;
-        // styles
-        this.stylesheet = stylesheet;
-        // allow compiler to deconflict user's `import { get } from 'whatever'` and
-        // Svelte's builtin `import { get, ... } from 'svelte/shared.ts'`;
-        this.userVars = new Set();
-        this.templateVars = new Map();
-        this.aliases = new Map();
-        this.usedNames = new Set();
-        this.computations = [];
-        this.templateProperties = {};
-        this.walkJs(dom);
-        this.name = this.alias(name);
-        if (options.customElement === true) {
-            this.customElement = {
-                tag: this.tag,
-                props: this.props
-            };
-        }
-        else {
-            this.customElement = options.customElement;
-        }
-        if (this.customElement && !this.customElement.tag) {
-            throw new Error(`No tag name specified`); // TODO better error
-        }
-        this.walkTemplate();
-        if (!this.customElement)
-            this.stylesheet.reify();
-    }
-    addSourcemapLocations(node) {
-        walk(node, {
-            enter: (node) => {
-                this.code.addSourcemapLocation(node.start);
-                this.code.addSourcemapLocation(node.end);
-            },
-        });
-    }
-    alias(name) {
-        if (!this.aliases.has(name)) {
-            this.aliases.set(name, this.getUniqueName(name));
-        }
-        return this.aliases.get(name);
-    }
-    contextualise(contexts, indexes, expression, context, isEventHandler) {
-        // this.addSourcemapLocations(expression);
-        const usedContexts = new Set();
-        const usedIndexes = new Set();
-        const { code, helpers } = this;
-        let scope;
-        let lexicalDepth = 0;
-        const self = this;
-        walk(expression, {
-            enter(node, parent, key) {
-                if (/^Function/.test(node.type))
-                    lexicalDepth += 1;
-                if (node._scope) {
-                    scope = node._scope;
-                    return;
-                }
-                if (node.type === 'ThisExpression') {
-                    if (lexicalDepth === 0 && context)
-                        code.overwrite(node.start, node.end, context, {
-                            storeName: true,
-                            contentOnly: false,
-                        });
-                }
-                else if (isReference(node, parent)) {
-                    const { name } = flatten(node);
-                    if (scope && scope.has(name))
-                        return;
-                    if (name === 'event' && isEventHandler) {
-                        // noop
-                    }
-                    else if (contexts.has(name)) {
-                        const contextName = contexts.get(name);
-                        if (contextName !== name) {
-                            // this is true for 'reserved' names like `state` and `component`,
-                            // also destructured contexts
-                            code.overwrite(node.start, node.start + name.length, contextName, { storeName: true, contentOnly: false });
-                            const destructuredName = contextName.replace(/\[\d+\]/, '');
-                            if (destructuredName !== contextName) {
-                                // so that hoisting the context works correctly
-                                usedContexts.add(destructuredName);
-                            }
-                        }
-                        usedContexts.add(name);
-                    }
-                    else if (helpers.has(name)) {
-                        let object = node;
-                        while (object.type === 'MemberExpression')
-                            object = object.object;
-                        const alias = self.templateVars.get(`helpers-${name}`);
-                        if (alias !== name)
-                            code.overwrite(object.start, object.end, alias);
-                    }
-                    else if (indexes.has(name)) {
-                        const context = indexes.get(name);
-                        usedContexts.add(context); // TODO is this right?
-                        usedIndexes.add(name);
-                    }
-                    else {
-                        // handle shorthand properties
-                        if (parent && parent.type === 'Property' && parent.shorthand) {
-                            if (key === 'key') {
-                                code.appendLeft(node.start, `${name}: `);
-                                return;
-                            }
-                        }
-                        code.prependRight(node.start, `state.`);
-                        usedContexts.add('state');
-                    }
-                    this.skip();
-                }
-            },
-            leave(node) {
-                if (/^Function/.test(node.type))
-                    lexicalDepth -= 1;
-                if (node._scope)
-                    scope = scope.parent;
-            },
-        });
-        return {
-            contexts: usedContexts,
-            indexes: usedIndexes
-        };
-    }
-    generate(result, options, { banner = '', sharedPath, helpers, name, format }) {
-        const pattern = /\[✂(\d+)-(\d+)$/;
-        const module = wrapModule(result, format, name, options, banner, sharedPath, helpers, this.imports, this.source);
-        const parts = module.split('✂]');
-        const finalChunk = parts.pop();
-        const compiled = new Bundle({ separator: '' });
-        function addString(str) {
-            compiled.addSource({
-                content: new MagicString$1(str),
-            });
-        }
-        const { filename } = options;
-        // special case — the source file doesn't actually get used anywhere. we need
-        // to add an empty file to populate map.sources and map.sourcesContent
-        if (!parts.length) {
-            compiled.addSource({
-                filename,
-                content: new MagicString$1(this.source).remove(0, this.source.length),
-            });
-        }
-        parts.forEach((str) => {
-            const chunk = str.replace(pattern, '');
-            if (chunk)
-                addString(chunk);
-            const match = pattern.exec(str);
-            const snippet = this.code.snip(+match[1], +match[2]);
-            compiled.addSource({
-                filename,
-                content: snippet,
-            });
-        });
-        addString(finalChunk);
-        const css = this.customElement ?
-            { code: null, map: null } :
-            this.stylesheet.render(options.cssOutputFilename, true);
-        const js = {
-            code: compiled.toString(),
-            map: compiled.generateMap({
-                includeContent: true,
-                file: options.outputFilename,
-            })
-        };
-        Object.getOwnPropertyNames(String.prototype).forEach(name => {
-            const descriptor = Object.getOwnPropertyDescriptor(String.prototype, name);
-            if (typeof descriptor.value === 'function') {
-                Object.defineProperty(css, name, {
-                    value: (...args) => {
-                        return css.code === null
-                            ? null
-                            : css.code[name].call(css.code, ...args);
-                    }
-                });
-            }
-        });
-        this.stats.stop('compile');
-        return {
-            ast: this.ast,
-            js,
-            css,
-            stats: this.stats.render(this),
-            // TODO deprecate
-            code: js.code,
-            map: js.map,
-            cssMap: css.map
-        };
-    }
-    getUniqueName(name) {
-        if (test)
-            name = `${name}$`;
-        let alias = name;
-        for (let i = 1; reservedNames.has(alias) ||
-            this.userVars.has(alias) ||
-            this.usedNames.has(alias); alias = `${name}_${i++}`)
-            ;
-        this.usedNames.add(alias);
-        return alias;
-    }
-    getUniqueNameMaker(names) {
-        const localUsedNames = new Set();
-        function add(name) {
-            localUsedNames.add(name);
-        }
-        reservedNames.forEach(add);
-        this.userVars.forEach(add);
-        names.forEach(add);
-        return (name) => {
-            if (test)
-                name = `${name}$`;
-            let alias = name;
-            for (let i = 1; this.usedNames.has(alias) ||
-                localUsedNames.has(alias); alias = `${name}_${i++}`)
-                ;
-            localUsedNames.add(alias);
-            return alias;
-        };
-    }
-    walkJs(dom) {
-        const { code, source, computations, templateProperties, imports } = this;
-        const { js } = this.parsed;
-        const componentDefinition = new CodeBuilder();
-        if (js) {
-            this.addSourcemapLocations(js.content);
-            const indentation = detectIndentation(source.slice(js.start, js.end));
-            const indentationLevel = getIndentationLevel(source, js.content.body[0].start);
-            const indentExclusionRanges = getIndentExclusionRanges(js.content);
-            const { scope, globals } = annotateWithScopes(js.content);
-            scope.declarations.forEach(name => {
-                this.userVars.add(name);
-            });
-            globals.forEach(name => {
-                this.userVars.add(name);
-            });
-            const body = js.content.body.slice(); // slice, because we're going to be mutating the original
-            // imports need to be hoisted out of the IIFE
-            for (let i = 0; i < body.length; i += 1) {
-                const node = body[i];
-                if (node.type === 'ImportDeclaration') {
-                    removeNode(code, js.content, node);
-                    imports.push(node);
-                    node.specifiers.forEach((specifier) => {
-                        this.userVars.add(specifier.local.name);
-                    });
-                }
-            }
-            const defaultExport = this.defaultExport = body.find((node) => node.type === 'ExportDefaultDeclaration');
-            if (defaultExport) {
-                defaultExport.declaration.properties.forEach((prop) => {
-                    templateProperties[getMethodName(prop.key)] = prop;
-                });
-                ['helpers', 'events', 'components', 'transitions', 'actions'].forEach(key => {
-                    if (templateProperties[key]) {
-                        templateProperties[key].value.properties.forEach((prop) => {
-                            this[key].add(getMethodName(prop.key));
-                        });
-                    }
-                });
-                const addArrowFunctionExpression = (name, node) => {
-                    const { body, params, async } = node;
-                    const fnKeyword = async ? 'async function' : 'function';
-                    const paramString = params.length ?
-                        `[✂${params[0].start}-${params[params.length - 1].end}✂]` :
-                        ``;
-                    if (body.type === 'BlockStatement') {
-                        componentDefinition.addBlock(deindent `
-							${fnKeyword} ${name}(${paramString}) [✂${body.start}-${body.end}✂]
-						`);
-                    }
-                    else {
-                        componentDefinition.addBlock(deindent `
-							${fnKeyword} ${name}(${paramString}) {
-								return [✂${body.start}-${body.end}✂];
-							}
-						`);
-                    }
-                };
-                const addFunctionExpression = (name, node) => {
-                    const { async } = node;
-                    const fnKeyword = async ? 'async function' : 'function';
-                    let c = node.start;
-                    while (this.source[c] !== '(')
-                        c += 1;
-                    componentDefinition.addBlock(deindent `
-						${fnKeyword} ${name}[✂${c}-${node.end}✂];
-					`);
-                };
-                const addValue = (name, node) => {
-                    componentDefinition.addBlock(deindent `
-						var ${name} = [✂${node.start}-${node.end}✂];
-					`);
-                };
-                const addDeclaration = (key, node, disambiguator, conflicts) => {
-                    const qualified = disambiguator ? `${disambiguator}-${key}` : key;
-                    if (node.type === 'Identifier' && node.name === key) {
-                        this.templateVars.set(qualified, key);
-                        return;
-                    }
-                    let deconflicted = key;
-                    if (conflicts)
-                        while (deconflicted in conflicts)
-                            deconflicted += '_';
-                    let name = this.getUniqueName(deconflicted);
-                    this.templateVars.set(qualified, name);
-                    // deindent
-                    const indentationLevel = getIndentationLevel(source, node.start);
-                    if (indentationLevel) {
-                        removeIndentation(code, node.start, node.end, indentationLevel, indentExclusionRanges);
-                    }
-                    if (node.type === 'ArrowFunctionExpression') {
-                        addArrowFunctionExpression(name, node);
-                    }
-                    else if (node.type === 'FunctionExpression') {
-                        addFunctionExpression(name, node);
-                    }
-                    else {
-                        addValue(name, node);
-                    }
-                };
-                if (templateProperties.components) {
-                    templateProperties.components.value.properties.forEach((property) => {
-                        addDeclaration(getMethodName(property.key), property.value, 'components');
-                    });
-                }
-                if (templateProperties.computed) {
-                    const dependencies = new Map();
-                    templateProperties.computed.value.properties.forEach((prop) => {
-                        const key = getMethodName(prop.key);
-                        const value = prop.value;
-                        const deps = value.params.map((param) => param.type === 'AssignmentPattern' ? param.left.name : param.name);
-                        deps.forEach(dep => {
-                            this.expectedProperties.add(dep);
-                        });
-                        dependencies.set(key, deps);
-                    });
-                    const visited = new Set();
-                    const visit = (key) => {
-                        if (!dependencies.has(key))
-                            return; // not a computation
-                        if (visited.has(key))
-                            return;
-                        visited.add(key);
-                        const deps = dependencies.get(key);
-                        deps.forEach(visit);
-                        computations.push({ key, deps });
-                        const prop = templateProperties.computed.value.properties.find((prop) => getMethodName(prop.key) === key);
-                        addDeclaration(key, prop.value, 'computed', {
-                            state: true,
-                            changed: true
-                        });
-                    };
-                    templateProperties.computed.value.properties.forEach((prop) => visit(getMethodName(prop.key)));
-                }
-                if (templateProperties.data) {
-                    addDeclaration('data', templateProperties.data.value);
-                }
-                if (templateProperties.events && dom) {
-                    templateProperties.events.value.properties.forEach((property) => {
-                        addDeclaration(getMethodName(property.key), property.value, 'events');
-                    });
-                }
-                if (templateProperties.helpers) {
-                    templateProperties.helpers.value.properties.forEach((property) => {
-                        addDeclaration(getMethodName(property.key), property.value, 'helpers');
-                    });
-                }
-                if (templateProperties.methods && dom) {
-                    addDeclaration('methods', templateProperties.methods.value);
-                }
-                if (templateProperties.namespace) {
-                    const ns = nodeToString(templateProperties.namespace.value);
-                    this.namespace = namespaces[ns] || ns;
-                }
-                if (templateProperties.onrender)
-                    templateProperties.oncreate = templateProperties.onrender; // remove after v2
-                if (templateProperties.oncreate && dom) {
-                    addDeclaration('oncreate', templateProperties.oncreate.value);
-                }
-                if (templateProperties.onteardown)
-                    templateProperties.ondestroy = templateProperties.onteardown; // remove after v2
-                if (templateProperties.ondestroy && dom) {
-                    addDeclaration('ondestroy', templateProperties.ondestroy.value);
-                }
-                if (templateProperties.preload) {
-                    addDeclaration('preload', templateProperties.preload.value);
-                }
-                if (templateProperties.props) {
-                    this.props = templateProperties.props.value.elements.map((element) => nodeToString(element));
-                }
-                if (templateProperties.setup) {
-                    addDeclaration('setup', templateProperties.setup.value);
-                }
-                if (templateProperties.store) {
-                    addDeclaration('store', templateProperties.store.value);
-                }
-                if (templateProperties.tag) {
-                    this.tag = nodeToString(templateProperties.tag.value);
-                }
-                if (templateProperties.transitions) {
-                    templateProperties.transitions.value.properties.forEach((property) => {
-                        addDeclaration(getMethodName(property.key), property.value, 'transitions');
-                    });
-                }
-                if (templateProperties.actions) {
-                    templateProperties.actions.value.properties.forEach((property) => {
-                        addDeclaration(getMethodName(property.key), property.value, 'actions');
-                    });
-                }
-            }
-            if (indentationLevel) {
-                if (defaultExport) {
-                    removeIndentation(code, js.content.start, defaultExport.start, indentationLevel, indentExclusionRanges);
-                    removeIndentation(code, defaultExport.end, js.content.end, indentationLevel, indentExclusionRanges);
-                }
-                else {
-                    removeIndentation(code, js.content.start, js.content.end, indentationLevel, indentExclusionRanges);
-                }
-            }
-            let a = js.content.start;
-            while (/\s/.test(source[a]))
-                a += 1;
-            let b = js.content.end;
-            while (/\s/.test(source[b - 1]))
-                b -= 1;
-            if (defaultExport) {
-                this.javascript = '';
-                if (a !== defaultExport.start)
-                    this.javascript += `[✂${a}-${defaultExport.start}✂]`;
-                if (!componentDefinition.isEmpty())
-                    this.javascript += componentDefinition;
-                if (defaultExport.end !== b)
-                    this.javascript += `[✂${defaultExport.end}-${b}✂]`;
-            }
-            else {
-                this.javascript = a === b ? null : `[✂${a}-${b}✂]`;
-            }
-        }
-    }
-    walkTemplate() {
-        const generator = this;
-        const { code, expectedProperties, helpers } = this;
-        const { html: html$$1 } = this.parsed;
-        const contextualise = (node, contextDependencies, indexes, isEventHandler) => {
-            this.addSourcemapLocations(node); // TODO this involves an additional walk — can we roll it in somewhere else?
-            let { scope } = annotateWithScopes(node);
-            const dependencies = new Set();
-            walk(node, {
-                enter(node, parent) {
-                    code.addSourcemapLocation(node.start);
-                    code.addSourcemapLocation(node.end);
-                    if (node._scope) {
-                        scope = node._scope;
-                        return;
-                    }
-                    if (isReference(node, parent)) {
-                        const { name } = flatten(node);
-                        if (scope && scope.has(name) || helpers.has(name) || (name === 'event' && isEventHandler))
-                            return;
-                        if (contextDependencies.has(name)) {
-                            contextDependencies.get(name).forEach(dependency => {
-                                dependencies.add(dependency);
-                            });
-                        }
-                        else if (!indexes.has(name)) {
-                            dependencies.add(name);
-                        }
-                        this.skip();
-                    }
-                },
-                leave(node, parent) {
-                    if (node._scope)
-                        scope = scope.parent;
-                }
-            });
-            dependencies.forEach(dependency => {
-                expectedProperties.add(dependency);
-            });
-            return {
-                snippet: `[✂${node.start}-${node.end}✂]`,
-                dependencies: Array.from(dependencies)
-            };
-        };
-        let contextDependencies = new Map();
-        const contextDependenciesStack = [contextDependencies];
-        let indexes = new Set();
-        const indexesStack = [indexes];
-        function parentIsHead(node) {
-            if (!node)
-                return false;
-            if (node.type === 'Component' || node.type === 'Element')
-                return false;
-            if (node.type === 'Head')
-                return true;
-            return parentIsHead(node.parent);
-        }
-        walk(html$$1, {
-            enter(node, parent, key) {
-                // TODO this is hacky as hell
-                if (key === 'parent')
-                    return this.skip();
-                node.parent = parent;
-                node.generator = generator;
-                if (node.type === 'Element' && (node.name === ':Component' || node.name === ':Self' || generator.components.has(node.name))) {
-                    node.type = 'Component';
-                    Object.setPrototypeOf(node, nodes.Component.prototype);
-                }
-                else if (node.type === 'Element' && node.name === 'title' && parentIsHead(parent)) {
-                    node.type = 'Title';
-                    Object.setPrototypeOf(node, nodes.Title.prototype);
-                }
-                else if (node.type === 'Element' && node.name === 'slot' && !generator.customElement) {
-                    node.type = 'Slot';
-                    Object.setPrototypeOf(node, nodes.Slot.prototype);
-                }
-                else if (node.type in nodes) {
-                    Object.setPrototypeOf(node, nodes[node.type].prototype);
-                }
-                if (node.type === 'Element') {
-                    generator.stylesheet.apply(node);
-                }
-                if (node.type === 'EachBlock') {
-                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);
-                    contextDependencies = new Map(contextDependencies);
-                    contextDependencies.set(node.context, node.metadata.dependencies);
-                    if (node.destructuredContexts) {
-                        node.destructuredContexts.forEach((name) => {
-                            contextDependencies.set(name, node.metadata.dependencies);
-                        });
-                    }
-                    contextDependenciesStack.push(contextDependencies);
-                    if (node.index) {
-                        indexes = new Set(indexes);
-                        indexes.add(node.index);
-                        indexesStack.push(indexes);
-                    }
-                }
-                if (node.type === 'AwaitBlock') {
-                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);
-                    contextDependencies = new Map(contextDependencies);
-                    contextDependencies.set(node.value, node.metadata.dependencies);
-                    contextDependencies.set(node.error, node.metadata.dependencies);
-                    contextDependenciesStack.push(contextDependencies);
-                }
-                if (node.type === 'IfBlock') {
-                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);
-                }
-                if (node.type === 'MustacheTag' || node.type === 'RawMustacheTag' || node.type === 'AttributeShorthand') {
-                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);
-                    this.skip();
-                }
-                if (node.type === 'Binding') {
-                    node.metadata = contextualise(node.value, contextDependencies, indexes, false);
-                    this.skip();
-                }
-                if (node.type === 'EventHandler' && node.expression) {
-                    node.expression.arguments.forEach((arg) => {
-                        arg.metadata = contextualise(arg, contextDependencies, indexes, true);
-                    });
-                    this.skip();
-                }
-                if (node.type === 'Transition' && node.expression) {
-                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);
-                    this.skip();
-                }
-                if (node.type === 'Action' && node.expression) {
-                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);
-                    if (node.expression.type === 'CallExpression') {
-                        node.expression.arguments.forEach((arg) => {
-                            arg.metadata = contextualise(arg, contextDependencies, indexes, true);
-                        });
-                    }
-                    this.skip();
-                }
-                if (node.type === 'Component' && node.name === ':Component') {
-                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);
-                }
-                if (node.type === 'Spread') {
-                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);
-                }
-            },
-            leave(node, parent) {
-                if (node.type === 'EachBlock') {
-                    contextDependenciesStack.pop();
-                    contextDependencies = contextDependenciesStack[contextDependenciesStack.length - 1];
-                    if (node.index) {
-                        indexesStack.pop();
-                        indexes = indexesStack[indexesStack.length - 1];
-                    }
-                }
-                if (node.type === 'Element' && node.name === 'option') {
-                    // Special case — treat these the same way:
-                    //   <option>{{foo}}</option>
-                    //   <option value='{{foo}}'>{{foo}}</option>
-                    const valueAttribute = node.attributes.find((attribute) => attribute.name === 'value');
-                    if (!valueAttribute) {
-                        node.attributes.push(new nodes.Attribute({
-                            generator,
-                            name: 'value',
-                            value: node.children,
-                            parent: node
-                        }));
-                    }
-                }
-            }
-        });
-    }
-}
-
-class DomGenerator extends Generator {
-    constructor(parsed, source, name, stylesheet, options, stats) {
-        super(parsed, source, name, stylesheet, options, stats, true);
-        this.blocks = [];
-        this.readonly = new Set();
-        this.hydratable = options.hydratable;
-        this.legacy = options.legacy;
-        this.needsEncapsulateHelper = false;
-        // initial values for e.g. window.innerWidth, if there's a <:Window> meta tag
-        this.metaBindings = [];
-    }
-}
-function dom(parsed, source, stylesheet, options, stats) {
-    const format = options.format || 'es';
-    const generator = new DomGenerator(parsed, source, options.name || 'SvelteComponent', stylesheet, options, stats);
-    const { computations, name, templateProperties, namespace, } = generator;
-    parsed.html.build();
-    const { block } = parsed.html;
-    // prevent fragment being created twice (#1063)
-    if (options.customElement)
-        block.builders.create.addLine(`this.c = @noop;`);
-    generator.stylesheet.warnOnUnusedSelectors(options.onwarn);
-    const builder = new CodeBuilder();
-    const computationBuilder = new CodeBuilder();
-    const computationDeps = new Set();
-    if (computations.length) {
-        computations.forEach(({ key, deps }) => {
-            deps.forEach(dep => {
-                computationDeps.add(dep);
-            });
-            if (generator.readonly.has(key)) {
-                // <:Window> bindings
-                throw new Error(`Cannot have a computed value '${key}' that clashes with a read-only property`);
-            }
-            generator.readonly.add(key);
-            const condition = `${deps.map(dep => `changed.${dep}`).join(' || ')}`;
-            const statement = `if (this._differs(state.${key}, (state.${key} = %computed-${key}(${deps
-                .map(dep => `state.${dep}`)
-                .join(', ')})))) changed.${key} = true;`;
-            computationBuilder.addConditional(condition, statement);
-        });
-    }
-    if (generator.javascript) {
-        builder.addBlock(generator.javascript);
-    }
-    const css = generator.stylesheet.render(options.filename, !generator.customElement);
-    const styles = generator.stylesheet.hasStyles && stringify(options.dev ?
-        `${css.code}\n/*# sourceMappingURL=${css.map.toUrl()} */` :
-        css.code, { onlyEscapeAtSymbol: true });
-    if (styles && generator.options.css !== false && !generator.customElement) {
-        builder.addBlock(deindent `
-			function @add_css() {
-				var style = @createElement("style");
-				style.id = '${generator.stylesheet.id}-style';
-				style.textContent = ${styles};
-				@appendNode(style, document.head);
-			}
-		`);
-    }
-    generator.blocks.forEach(block => {
-        builder.addBlock(block.toString());
-    });
-    const sharedPath = options.shared === true
-        ? 'svelte/shared.js'
-        : options.shared || '';
-    let prototypeBase = `${name}.prototype`;
-    templateProperties.methods && (prototypeBase = `@assign(${prototypeBase}, %methods)`);
-    const proto = sharedPath
-        ? `@proto`
-        : deindent `
-		{
-			${['destroy', 'get', 'fire', 'observe', 'on', 'set', 'teardown', '_set', '_mount', '_unmount', '_differs']
-            .map(n => `${n}: @${n === 'teardown' ? 'destroy' : n}`)
-            .join(',\n')}
-		}`;
-    const debugName = `<${generator.customElement ? generator.tag : name}>`;
-    // generate initial state object
-    const expectedProperties = Array.from(generator.expectedProperties);
-    const globals = expectedProperties.filter(prop => globalWhitelist.has(prop));
-    const storeProps = options.store || templateProperties.store ? expectedProperties.filter(prop => prop[0] === '$') : [];
-    const initialState = [];
-    if (globals.length > 0) {
-        initialState.push(`{ ${globals.map(prop => `${prop} : ${prop}`).join(', ')} }`);
-    }
-    if (storeProps.length > 0) {
-        initialState.push(`this.store._init([${storeProps.map(prop => `"${prop.slice(1)}"`)}])`);
-    }
-    if (templateProperties.data) {
-        initialState.push(`%data()`);
-    }
-    else if (globals.length === 0 && storeProps.length === 0) {
-        initialState.push('{}');
-    }
-    initialState.push(`options.data`);
-    const constructorBody = deindent `
-		${options.dev && `this._debugName = '${debugName}';`}
-		${options.dev && !generator.customElement &&
-        `if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");`}
-		@init(this, options);
-		${templateProperties.store && `this.store = %store();`}
-		${generator.usesRefs && `this.refs = {};`}
-		this._state = ${initialState.reduce((state, piece) => `@assign(${state}, ${piece})`)};
-		${storeProps.length > 0 && `this.store._add(this, [${storeProps.map(prop => `"${prop.slice(1)}"`)}]);`}
-		${generator.metaBindings}
-		${computations.length && `this._recompute({ ${Array.from(computationDeps).map(dep => `${dep}: 1`).join(', ')} }, this._state);`}
-		${options.dev &&
-        Array.from(generator.expectedProperties).map(prop => {
-            if (globalWhitelist.has(prop))
-                return;
-            if (computations.find(c => c.key === prop))
-                return;
-            const message = generator.components.has(prop) ?
-                `${debugName} expected to find '${prop}' in \`data\`, but found it in \`components\` instead` :
-                `${debugName} was created without expected data property '${prop}'`;
-            const conditions = [`!('${prop}' in this._state)`];
-            if (generator.customElement)
-                conditions.push(`!('${prop}' in this.attributes)`);
-            return `if (${conditions.join(' && ')}) console.warn("${message}");`;
-        })}
-		${generator.bindingGroups.length &&
-        `this._bindingGroups = [${Array(generator.bindingGroups.length).fill('[]').join(', ')}];`}
-
-		${(templateProperties.ondestroy || storeProps.length) && (`this._handlers.destroy = [${[templateProperties.ondestroy && `%ondestroy`, storeProps.length && `@removeFromStore`].filter(Boolean).join(', ')}];`)}
-
-		${generator.slots.size && `this._slotted = options.slots || {};`}
-
-		${generator.customElement ?
-        deindent `
-				this.attachShadow({ mode: 'open' });
-				${css.code && `this.shadowRoot.innerHTML = \`<style>${escape(css.code, { onlyEscapeAtSymbol: true }).replace(/\\/g, '\\\\')}${options.dev ? `\n/*# sourceMappingURL=${css.map.toUrl()} */` : ''}</style>\`;`}
-			` :
-        (generator.stylesheet.hasStyles && options.css !== false &&
-            `if (!document.getElementById("${generator.stylesheet.id}-style")) @add_css();`)}
-
-		${templateProperties.oncreate && `var _oncreate = %oncreate.bind(this);`}
-
-		${(templateProperties.oncreate || generator.hasComponents || generator.hasComplexBindings || generator.hasIntroTransitions) && deindent `
-			if (!options.root) {
-				this._oncreate = [];
-				${(generator.hasComponents || generator.hasComplexBindings) && `this._beforecreate = [];`}
-				${(generator.hasComponents || generator.hasIntroTransitions) && `this._aftercreate = [];`}
-			}
-		`}
-
-		${generator.slots.size && `this.slots = {};`}
-
-		this._fragment = @create_main_fragment(this, this._state);
-
-		${(templateProperties.oncreate) && deindent `
-			this.root._oncreate.push(_oncreate);
-		`}
-
-		${generator.customElement ? deindent `
-			this._fragment.c();
-			this._fragment.${block.hasIntroMethod ? 'i' : 'm'}(this.shadowRoot, null);
-
-			if (options.target) this._mount(options.target, options.anchor);
-		` : deindent `
-			if (options.target) {
-				${generator.hydratable
-        ? deindent `
-						var nodes = @children(options.target);
-						options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
-						nodes.forEach(@detachNode);
-					` :
-        deindent `
-						${options.dev && `if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the \`hydratable: true\` option");`}
-						this._fragment.c();
-					`}
-				this._mount(options.target, options.anchor);
-
-				${(generator.hasComponents || generator.hasComplexBindings || templateProperties.oncreate || generator.hasIntroTransitions) && deindent `
-					${generator.hasComponents && `this._lock = true;`}
-					${(generator.hasComponents || generator.hasComplexBindings) && `@callAll(this._beforecreate);`}
-					${(generator.hasComponents || templateProperties.oncreate) && `@callAll(this._oncreate);`}
-					${(generator.hasComponents || generator.hasIntroTransitions) && `@callAll(this._aftercreate);`}
-					${generator.hasComponents && `this._lock = false;`}
-				`}
-			}
-		`}
-	`;
-    if (generator.customElement) {
-        const props = generator.props || Array.from(generator.expectedProperties);
-        builder.addBlock(deindent `
-			class ${name} extends HTMLElement {
-				constructor(options = {}) {
-					super();
-					${constructorBody}
-				}
-
-				static get observedAttributes() {
-					return ${JSON.stringify(props)};
-				}
-
-				${props.map(prop => deindent `
-					get ${prop}() {
-						return this.get('${prop}');
-					}
-
-					set ${prop}(value) {
-						this.set({ ${prop}: value });
-					}
-				`).join('\n\n')}
-
-				${generator.slots.size && deindent `
-					connectedCallback() {
-						Object.keys(this._slotted).forEach(key => {
-							this.appendChild(this._slotted[key]);
-						});
-					}`}
-
-				attributeChangedCallback(attr, oldValue, newValue) {
-					this.set({ [attr]: newValue });
-				}
-
-				${(generator.hasComponents || generator.hasComplexBindings || templateProperties.oncreate || generator.hasIntroTransitions) && deindent `
-					connectedCallback() {
-						${generator.hasComponents && `this._lock = true;`}
-						${(generator.hasComponents || generator.hasComplexBindings) && `@callAll(this._beforecreate);`}
-						${(generator.hasComponents || templateProperties.oncreate) && `@callAll(this._oncreate);`}
-						${(generator.hasComponents || generator.hasIntroTransitions) && `@callAll(this._aftercreate);`}
-						${generator.hasComponents && `this._lock = false;`}
-					}
-				`}
-			}
-
-			customElements.define("${generator.tag}", ${name});
-			@assign(@assign(${prototypeBase}, ${proto}), {
-				_mount(target, anchor) {
-					target.insertBefore(this, anchor);
-				},
-
-				_unmount() {
-					this.parentNode.removeChild(this);
-				}
-			});
-		`);
-    }
-    else {
-        builder.addBlock(deindent `
-			function ${name}(options) {
-				${constructorBody}
-			}
-
-			@assign(${prototypeBase}, ${proto});
-		`);
-    }
-    const immutable = templateProperties.immutable ? templateProperties.immutable.value.value : options.immutable;
-    builder.addBlock(deindent `
-		${options.dev && deindent `
-			${name}.prototype._checkReadOnly = function _checkReadOnly(newState) {
-				${Array.from(generator.readonly).map(prop => `if ('${prop}' in newState && !this._updatingReadonlyProperty) throw new Error("${debugName}: Cannot set read-only property '${prop}'");`)}
-			};
-		`}
-
-		${computations.length ? deindent `
-			${name}.prototype._recompute = function _recompute(changed, state) {
-				${computationBuilder}
-			}
-		` : (!sharedPath && `${name}.prototype._recompute = @noop;`)}
-
-		${templateProperties.setup && `%setup(${name});`}
-
-		${templateProperties.preload && `${name}.preload = %preload;`}
-
-		${immutable && `${name}.prototype._differs = @_differsImmutable;`}
-	`);
-    const usedHelpers = new Set();
-    let result = builder
-        .toString()
-        .replace(/(%+|@+)(\w*(?:-\w*)?)/g, (match, sigil, name) => {
-        if (sigil === '@') {
-            if (name in shared) {
-                if (options.dev && `${name}Dev` in shared)
-                    name = `${name}Dev`;
-                usedHelpers.add(name);
-            }
-            return generator.alias(name);
-        }
-        if (sigil === '%') {
-            return generator.templateVars.get(name);
-        }
-        return sigil.slice(1) + name;
-    });
-    let helpers;
-    if (sharedPath) {
-        if (format !== 'es' && format !== 'cjs') {
-            throw new Error(`Components with shared helpers must be compiled with \`format: 'es'\` or \`format: 'cjs'\``);
-        }
-        const used = Array.from(usedHelpers).sort();
-        helpers = used.map(name => {
-            const alias = generator.alias(name);
-            return { name, alias };
-        });
-    }
-    else {
-        let inlineHelpers = '';
-        usedHelpers.forEach(key => {
-            const str = shared[key];
-            const code = new MagicString$1(str);
-            const expression = parseExpressionAt(str, 0);
-            let { scope } = annotateWithScopes(expression);
-            walk(expression, {
-                enter(node, parent) {
-                    if (node._scope)
-                        scope = node._scope;
-                    if (node.type === 'Identifier' &&
-                        isReference(node, parent) &&
-                        !scope.has(node.name)) {
-                        if (node.name in shared) {
-                            // this helper function depends on another one
-                            const dependency = node.name;
-                            usedHelpers.add(dependency);
-                            const alias = generator.alias(dependency);
-                            if (alias !== node.name)
-                                code.overwrite(node.start, node.end, alias);
-                        }
-                    }
-                },
-                leave(node) {
-                    if (node._scope)
-                        scope = scope.parent;
-                },
-            });
-            if (key === 'transitionManager') {
-                // special case
-                const global = `_svelteTransitionManager`;
-                inlineHelpers += `\n\nvar ${generator.alias('transitionManager')} = window.${global} || (window.${global} = ${code});\n\n`;
-            }
-            else {
-                const alias = generator.alias(expression.id.name);
-                if (alias !== expression.id.name)
-                    code.overwrite(expression.id.start, expression.id.end, alias);
-                inlineHelpers += `\n\n${code}`;
-            }
-        });
-        result += inlineHelpers;
-    }
-    const filename = options.filename && (typeof process !== 'undefined' ? options.filename.replace(process.cwd(), '').replace(/^[\/\\]/, '') : options.filename);
-    return generator.generate(result, options, {
-        banner: `/* ${filename ? `${filename} ` : ``}generated by Svelte v${"1.60.3"} */`,
-        sharedPath,
-        helpers,
-        name,
-        format,
-    });
-}
-
-let Block$2 = class Block {
-    constructor(options) {
-        Object.assign(this, options);
-    }
-    addBinding(binding, name) {
-        const conditions = [`!('${binding.name}' in state)`].concat(
-        // TODO handle contextual bindings...
-        this.conditions.map(c => `(${c})`));
-        const { name: prop } = getObject(binding.value);
-        this.generator.bindings.push(deindent `
-			if (${conditions.join('&&')}) {
-				tmp = ${name}.data();
-				if ('${prop}' in tmp) {
-					state.${binding.name} = tmp.${prop};
-					settled = false;
-				}
-			}
-		`);
-    }
-    child(options) {
-        return new Block$2(Object.assign({}, this, options, { parent: this }));
-    }
-    contextualise(expression, context, isEventHandler) {
-        return this.generator.contextualise(this.contexts, this.indexes, expression, context, isEventHandler);
-    }
-};
-
-function visitAwaitBlock(generator, block, node) {
-    block.contextualise(node.expression);
-    const { dependencies, snippet } = node.metadata;
-    // TODO should this be the generator's job? It's duplicated between
-    // here and the equivalent DOM compiler visitor
-    const contexts = new Map(block.contexts);
-    contexts.set(node.value, '__value');
-    const contextDependencies = new Map(block.contextDependencies);
-    contextDependencies.set(node.value, dependencies);
-    const childBlock = block.child({
-        contextDependencies,
-        contexts
-    });
-    generator.append('${(function(__value) { if(__isPromise(__value)) return `');
-    node.pending.children.forEach((child) => {
-        visit$1(generator, childBlock, child);
-    });
-    generator.append('`; return `');
-    node.then.children.forEach((child) => {
-        visit$1(generator, childBlock, child);
-    });
-    generator.append(`\`;}(${snippet})) }`);
-}
-
-function visitComment(generator, block, node) {
-    // Allow option to preserve comments, otherwise ignore
-    if (generator && generator.options && generator.options.preserveComments) {
-        generator.append(`<!--${node.data}-->`);
-    }
-}
-
-function visitComponent(generator, block, node) {
-    function stringifyAttribute(chunk) {
-        if (chunk.type === 'Text') {
-            return escapeTemplate(escape(chunk.data));
-        }
-        if (chunk.type === 'MustacheTag') {
-            block.contextualise(chunk.expression);
-            const { snippet } = chunk.metadata;
-            return '${__escape( ' + snippet + ')}';
-        }
-    }
-    const attributes = [];
-    const bindings = [];
-    let usesSpread;
-    node.attributes.forEach((attribute) => {
-        if (attribute.type === 'Attribute' || attribute.type === 'Spread') {
-            if (attribute.type === 'Spread')
-                usesSpread = true;
-            attributes.push(attribute);
-        }
-        else if (attribute.type === 'Binding') {
-            bindings.push(attribute);
-        }
-    });
-    const bindingProps = bindings.map(binding => {
-        const { name } = getObject(binding.value);
-        const tail = binding.value.type === 'MemberExpression'
-            ? getTailSnippet(binding.value)
-            : '';
-        const keypath = block.contexts.has(name)
-            ? `${name}${tail}`
-            : `state.${name}${tail}`;
-        return `${binding.name}: ${keypath}`;
-    });
-    function getAttributeValue(attribute) {
-        if (attribute.value === true)
-            return `true`;
-        if (attribute.value.length === 0)
-            return `''`;
-        if (attribute.value.length === 1) {
-            const chunk = attribute.value[0];
-            if (chunk.type === 'Text') {
-                return isNaN(chunk.data) ? stringify(chunk.data) : chunk.data;
-            }
-            block.contextualise(chunk.expression);
-            const { snippet } = chunk.metadata;
-            return snippet;
-        }
-        return '`' + attribute.value.map(stringifyAttribute).join('') + '`';
-    }
-    const props = usesSpread
-        ? `Object.assign(${attributes
-            .map(attribute => {
-            if (attribute.type === 'Spread') {
-                block.contextualise(attribute.expression);
-                return attribute.metadata.snippet;
-            }
-            else {
-                return `{ ${attribute.name}: ${getAttributeValue(attribute)} }`;
-            }
-        })
-            .concat(bindingProps.map(p => `{ ${p} }`))
-            .join(', ')})`
-        : `{ ${attributes
-            .map(attribute => `${attribute.name}: ${getAttributeValue(attribute)}`)
-            .concat(bindingProps)
-            .join(', ')} }`;
-    const isDynamicComponent = node.name === ':Component';
-    if (isDynamicComponent)
-        block.contextualise(node.expression);
-    const expression = (node.name === ':Self' ? generator.name :
-        isDynamicComponent ? `((${node.metadata.snippet}) || __missingComponent)` :
-            `%components-${node.name}`);
-    bindings.forEach(binding => {
-        block.addBinding(binding, expression);
-    });
-    let open = `\${${expression}._render(__result, ${props}`;
-    const options = [];
-    if (generator.options.store) {
-        options.push(`store: options.store`);
-    }
-    if (node.children.length) {
-        const appendTarget = {
-            slots: { default: '' },
-            slotStack: ['default']
-        };
-        generator.appendTargets.push(appendTarget);
-        node.children.forEach((child) => {
-            visit$1(generator, block, child);
-        });
-        const slotted = Object.keys(appendTarget.slots)
-            .map(name => `${name}: () => \`${appendTarget.slots[name]}\``)
-            .join(', ');
-        options.push(`slotted: { ${slotted} }`);
-        generator.appendTargets.pop();
-    }
-    if (options.length) {
-        open += `, { ${options.join(', ')} }`;
-    }
-    generator.append(open);
-    generator.append(')}');
-}
-
-function visitEachBlock(generator, block, node) {
-    block.contextualise(node.expression);
-    const { dependencies, snippet } = node.metadata;
-    const open = `\${ ${node.else ? `${snippet}.length ? ` : ''}${snippet}.map(${node.index ? `(${node.context}, ${node.index})` : `(${node.context})`} => \``;
-    generator.append(open);
-    // TODO should this be the generator's job? It's duplicated between
-    // here and the equivalent DOM compiler visitor
-    const contexts = new Map(block.contexts);
-    contexts.set(node.context, node.context);
-    const indexes = new Map(block.indexes);
-    if (node.index)
-        indexes.set(node.index, node.context);
-    const contextDependencies = new Map(block.contextDependencies);
-    contextDependencies.set(node.context, dependencies);
-    if (node.destructuredContexts) {
-        for (let i = 0; i < node.destructuredContexts.length; i += 1) {
-            contexts.set(node.destructuredContexts[i], `${node.context}[${i}]`);
-            contextDependencies.set(node.destructuredContexts[i], dependencies);
-        }
-    }
-    const childBlock = block.child({
-        contexts,
-        indexes,
-        contextDependencies,
-    });
-    node.children.forEach((child) => {
-        visit$1(generator, childBlock, child);
-    });
-    const close = `\`).join("")`;
-    generator.append(close);
-    if (node.else) {
-        generator.append(` : \``);
-        node.else.children.forEach((child) => {
-            visit$1(generator, block, child);
-        });
-        generator.append(`\``);
-    }
-    generator.append('}');
-}
-
-function visitSlot(generator, block, node) {
-    const name = node.attributes.find((attribute) => attribute.name);
-    const slotName = name && name.value[0].data || 'default';
-    generator.append(`\${options && options.slotted && options.slotted.${slotName} ? options.slotted.${slotName}() : \``);
-    node.children.forEach((child) => {
-        visit$1(generator, block, child);
-    });
-    generator.append(`\`}`);
-}
-
-function stringifyAttributeValue$1(block, chunks) {
-    return chunks
-        .map((chunk) => {
-        if (chunk.type === 'Text') {
-            return escapeTemplate(escape(chunk.data).replace(/"/g, '&quot;'));
-        }
-        block.contextualise(chunk.expression);
-        const { snippet } = chunk.metadata;
-        return '${__escape(' + snippet + ')}';
-    })
-        .join('');
-}
-
-// source: https://gist.github.com/ArjanSchouten/0b8574a6ad7f5065a5e7
-const booleanAttributes = new Set('async autocomplete autofocus autoplay border challenge checked compact contenteditable controls default defer disabled formnovalidate frameborder hidden indeterminate ismap loop multiple muted nohref noresize noshade novalidate nowrap open readonly required reversed scoped scrolling seamless selected sortable spellcheck translate'.split(' '));
-function visitElement(generator, block, node) {
-    if (node.name === 'slot') {
-        visitSlot(generator, block, node);
-        return;
-    }
-    let openingTag = `<${node.name}`;
-    let textareaContents; // awkward special case
-    const slot = node.getStaticAttributeValue('slot');
-    if (slot && node.hasAncestor('Component')) {
-        const slot = node.attributes.find((attribute) => attribute.name === 'slot');
-        const slotName = slot.value[0].data;
-        const appendTarget = generator.appendTargets[generator.appendTargets.length - 1];
-        appendTarget.slotStack.push(slotName);
-        appendTarget.slots[slotName] = '';
-    }
-    if (node.attributes.find(attr => attr.type === 'Spread')) {
-        // TODO dry this out
-        const args = [];
-        node.attributes.forEach((attribute) => {
-            if (attribute.type === 'Spread') {
-                block.contextualise(attribute.expression);
-                args.push(attribute.metadata.snippet);
-            }
-            else if (attribute.type === 'Attribute') {
-                if (attribute.name === 'value' && node.name === 'textarea') {
-                    textareaContents = stringifyAttributeValue$1(block, attribute.value);
-                }
-                else if (attribute.value === true) {
-                    args.push(`{ ${quoteIfNecessary(attribute.name)}: true }`);
-                }
-                else if (booleanAttributes.has(attribute.name) &&
-                    attribute.value.length === 1 &&
-                    attribute.value[0].type !== 'Text') {
-                    // a boolean attribute with one non-Text chunk
-                    block.contextualise(attribute.value[0].expression);
-                    args.push(`{ ${quoteIfNecessary(attribute.name)}: ${attribute.value[0].metadata.snippet} }`);
-                }
-                else {
-                    args.push(`{ ${quoteIfNecessary(attribute.name)}: \`${stringifyAttributeValue$1(block, attribute.value)}\` }`);
-                }
-            }
-        });
-        openingTag += "${__spread([" + args.join(', ') + "])}";
-    }
-    else {
-        node.attributes.forEach((attribute) => {
-            if (attribute.type !== 'Attribute')
-                return;
-            if (attribute.name === 'value' && node.name === 'textarea') {
-                textareaContents = stringifyAttributeValue$1(block, attribute.value);
-            }
-            else if (attribute.value === true) {
-                openingTag += ` ${attribute.name}`;
-            }
-            else if (booleanAttributes.has(attribute.name) &&
-                attribute.value.length === 1 &&
-                attribute.value[0].type !== 'Text') {
-                // a boolean attribute with one non-Text chunk
-                block.contextualise(attribute.value[0].expression);
-                openingTag += '${' + attribute.value[0].metadata.snippet + ' ? " ' + attribute.name + '" : "" }';
-            }
-            else {
-                openingTag += ` ${attribute.name}="${stringifyAttributeValue$1(block, attribute.value)}"`;
-            }
-        });
-    }
-    if (node._cssRefAttribute) {
-        openingTag += ` svelte-ref-${node._cssRefAttribute}`;
-    }
-    openingTag += '>';
-    generator.append(openingTag);
-    if (node.name === 'textarea' && textareaContents !== undefined) {
-        generator.append(textareaContents);
-    }
-    else {
-        node.children.forEach((child) => {
-            visit$1(generator, block, child);
-        });
-    }
-    if (!isVoidElementName(node.name)) {
-        generator.append(`</${node.name}>`);
-    }
-}
-
-function visitDocument(generator, block, node) {
-    generator.append('${(__result.head += `');
-    node.children.forEach((child) => {
-        visit$1(generator, block, child);
-    });
-    generator.append('`, "")}');
-}
-
-function visitIfBlock(generator, block, node) {
-    block.contextualise(node.expression);
-    const { snippet } = node.metadata;
-    generator.append('${ ' + snippet + ' ? `');
-    const childBlock = block.child({
-        conditions: block.conditions.concat(snippet),
-    });
-    node.children.forEach((child) => {
-        visit$1(generator, childBlock, child);
-    });
-    generator.append('` : `');
-    if (node.else) {
-        node.else.children.forEach((child) => {
-            visit$1(generator, childBlock, child);
-        });
-    }
-    generator.append('` }');
-}
-
-function visitMustacheTag(generator, block, node) {
-    block.contextualise(node.expression);
-    const { snippet } = node.metadata;
-    generator.append(node.parent &&
-        node.parent.type === 'Element' &&
-        node.parent.name === 'style'
-        ? '${' + snippet + '}'
-        : '${__escape(' + snippet + ')}');
-}
-
-function visitRawMustacheTag(generator, block, node) {
-    block.contextualise(node.expression);
-    const { snippet } = node.metadata;
-    generator.append('${' + snippet + '}');
-}
-
-function visitText(generator, block, node) {
-    let text = node.data;
-    if (!node.parent ||
-        node.parent.type !== 'Element' ||
-        (node.parent.name !== 'script' && node.parent.name !== 'style')) {
-        // unless this Text node is inside a <script> or <style> element, escape &,<,>
-        text = escapeHTML(text);
-    }
-    generator.append(escape(escapeTemplate(text)));
-}
-
-function visitTitle(generator, block, node) {
-    generator.append(`<title>`);
-    node.children.forEach((child) => {
-        visit$1(generator, block, child);
-    });
-    generator.append(`</title>`);
-}
-
-function visitWindow() {
-    // noop
-}
-
-var visitors = {
-    AwaitBlock: visitAwaitBlock,
-    Comment: visitComment,
-    Component: visitComponent,
-    EachBlock: visitEachBlock,
-    Element: visitElement,
-    Head: visitDocument,
-    IfBlock: visitIfBlock,
-    MustacheTag: visitMustacheTag,
-    RawMustacheTag: visitRawMustacheTag,
-    Slot: visitSlot,
-    Text: visitText,
-    Title: visitTitle,
-    Window: visitWindow
-};
-
-function visit$1(generator, block, node) {
-    const visitor = visitors[node.type];
-    visitor(generator, block, node);
-}
-
-class SsrGenerator extends Generator {
-    constructor(parsed, source, name, stylesheet, options, stats) {
-        super(parsed, source, name, stylesheet, options, stats, false);
-        this.bindings = [];
-        this.renderCode = '';
-        this.appendTargets = [];
-        this.stylesheet.warnOnUnusedSelectors(options.onwarn);
-    }
-    append(code) {
-        if (this.appendTargets.length) {
-            const appendTarget = this.appendTargets[this.appendTargets.length - 1];
-            const slotName = appendTarget.slotStack[appendTarget.slotStack.length - 1];
-            appendTarget.slots[slotName] += code;
-        }
-        else {
-            this.renderCode += code;
-        }
-    }
-}
-function ssr(parsed, source, stylesheet, options, stats) {
-    const format = options.format || 'cjs';
-    const generator = new SsrGenerator(parsed, source, options.name || 'SvelteComponent', stylesheet, options, stats);
-    const { computations, name, templateProperties } = generator;
-    // create main render() function
-    const mainBlock = new Block$2({
-        generator,
-        contexts: new Map(),
-        indexes: new Map(),
-        conditions: [],
-    });
-    trim(parsed.html.children).forEach((node) => {
-        visit$1(generator, mainBlock, node);
-    });
-    const css = generator.customElement ?
-        { code: null, map: null } :
-        generator.stylesheet.render(options.filename, true);
-    // generate initial state object
-    const expectedProperties = Array.from(generator.expectedProperties);
-    const globals = expectedProperties.filter(prop => globalWhitelist.has(prop));
-    const storeProps = options.store || templateProperties.store ? expectedProperties.filter(prop => prop[0] === '$') : [];
-    const initialState = [];
-    if (globals.length > 0) {
-        initialState.push(`{ ${globals.map(prop => `${prop} : ${prop}`).join(', ')} }`);
-    }
-    if (storeProps.length > 0) {
-        const initialize = `_init([${storeProps.map(prop => `"${prop.slice(1)}"`)}])`;
-        if (options.store || templateProperties.store) {
-            initialState.push(`options.store.${initialize}`);
-        }
-    }
-    if (templateProperties.data) {
-        initialState.push(`%data()`);
-    }
-    else if (globals.length === 0 && storeProps.length === 0) {
-        initialState.push('{}');
-    }
-    initialState.push('state');
-    // TODO concatenate CSS maps
-    const result = deindent `
-		${generator.javascript}
-
-		var ${name} = {};
-
-		${options.filename && `${name}.filename = ${stringify(options.filename)}`};
-
-		${name}.data = function() {
-			return ${templateProperties.data ? `%data()` : `{}`};
-		};
-
-		${name}.render = function(state, options = {}) {
-			var components = new Set();
-
-			function addComponent(component) {
-				components.add(component);
-			}
-
-			var result = { head: '', addComponent };
-			var html = ${name}._render(result, state, options);
-
-			var cssCode = Array.from(components).map(c => c.css && c.css.code).filter(Boolean).join('\\n');
-
-			return {
-				html,
-				head: result.head,
-				css: { code: cssCode, map: null },
-				toString() {
-					return html;
-				}
-			};
-		}
-
-		${name}._render = function(__result, state, options) {
-			${templateProperties.store && `options.store = %store();`}
-			__result.addComponent(${name});
-
-			state = Object.assign(${initialState.join(', ')});
-
-			${computations.map(({ key, deps }) => `state.${key} = %computed-${key}(${deps.map(dep => `state.${dep}`).join(', ')});`)}
-
-			${generator.bindings.length &&
-        deindent `
-				var settled = false;
-				var tmp;
-
-				while (!settled) {
-					settled = true;
-
-					${generator.bindings.join('\n\n')}
-				}
-			`}
-
-			return \`${generator.renderCode}\`;
-		};
-
-		${name}.css = {
-			code: ${css.code ? stringify(css.code) : `''`},
-			map: ${css.map ? stringify(css.map.toString()) : 'null'}
-		};
-
-		var warned = false;
-		${name}.renderCss = function() {
-			if (!warned) {
-				console.error('Component.renderCss(...) is deprecated and will be removed in v2 — use Component.render(...).css instead');
-				warned = true;
-			}
-
-			var components = [];
-
-			${generator.stylesheet.hasStyles &&
-        deindent `
-				components.push({
-					filename: ${name}.filename,
-					css: ${name}.css && ${name}.css.code,
-					map: ${name}.css && ${name}.css.map
-				});
-			`}
-
-			${templateProperties.components &&
-        deindent `
-				var seen = {};
-
-				function addComponent(component) {
-					var result = component.renderCss();
-					result.components.forEach(x => {
-						if (seen[x.filename]) return;
-						seen[x.filename] = true;
-						components.push(x);
-					});
-				}
-
-				${templateProperties.components.value.properties.map((prop) => {
-            return `addComponent(%components-${getMethodName(prop.key)});`;
-        })}
-			`}
-
-			return {
-				css: components.map(x => x.css).join('\\n'),
-				map: null,
-				components
-			};
-		};
-
-		${templateProperties.preload && `${name}.preload = %preload;`}
-
-		${
-    // TODO this is a bit hacky
-    /__escape/.test(generator.renderCode) && deindent `
-				var escaped = {
-					'"': '&quot;',
-					"'": '&##39;',
-					'&': '&amp;',
-					'<': '&lt;',
-					'>': '&gt;'
-				};
-
-				function __escape(html) {
-					return String(html).replace(/["'&<>]/g, match => escaped[match]);
-				}
-			`}
-
-		${/__isPromise/.test(generator.renderCode) && deindent `
-				function __isPromise(value) {
-					return value && typeof value.then === 'function';
-				}
-			`}
-
-		${/__missingComponent/.test(generator.renderCode) && deindent `
-				var __missingComponent = {
-					_render: () => ''
-				};
-			`}
-
-		${/__spread/.test(generator.renderCode) && deindent `
-				function __spread(args) {
-					const attributes = Object.assign({}, ...args);
-					let str = '';
-
-					Object.keys(attributes).forEach(name => {
-						const value = attributes[name];
-						if (value === undefined) return;
-						if (value === true) str += " " + name;
-						str += " " + name + "=" + JSON.stringify(value);
-					});
-
-					return str;
-				}
-			`}
-	`.replace(/(@+|#+|%+)(\w*(?:-\w*)?)/g, (match, sigil, name) => {
-        if (sigil === '@')
-            return generator.alias(name);
-        if (sigil === '%')
-            return generator.templateVars.get(name);
-        return sigil.slice(1) + name;
-    });
-    return generator.generate(result, options, { name, format });
-}
-function trim(nodes) {
-    let start = 0;
-    for (; start < nodes.length; start += 1) {
-        const node = nodes[start];
-        if (node.type !== 'Text')
-            break;
-        node.data = node.data.replace(/^\s+/, '');
-        if (node.data)
-            break;
-    }
-    let end = nodes.length;
-    for (; end > start; end -= 1) {
-        const node = nodes[end - 1];
-        if (node.type !== 'Text')
-            break;
-        node.data = node.data.replace(/\s+$/, '');
-        if (node.data)
-            break;
-    }
-    return nodes.slice(start, end);
-}
-
-const now = (typeof process !== 'undefined' && process.hrtime)
-    ? () => {
-        const t = process.hrtime();
-        return t[0] * 1e3 + t[1] / 1e6;
-    }
-    : () => window.performance.now();
-function collapseTimings(timings) {
-    const result = {};
-    timings.forEach(timing => {
-        result[timing.label] = Object.assign({
-            total: timing.end - timing.start
-        }, timing.children && collapseTimings(timing.children));
-    });
-    return result;
-}
-let Stats$1 = class Stats {
-    constructor() {
-        this.startTime = now();
-        this.stack = [];
-        this.currentChildren = this.timings = [];
-        this.warnings = [];
-    }
-    start(label) {
-        const timing = {
-            label,
-            start: now(),
-            end: null,
-            children: []
-        };
-        this.currentChildren.push(timing);
-        this.stack.push(timing);
-        this.currentTiming = timing;
-        this.currentChildren = timing.children;
-    }
-    stop(label) {
-        if (label !== this.currentTiming.label) {
-            throw new Error(`Mismatched timing labels`);
-        }
-        this.currentTiming.end = now();
-        this.stack.pop();
-        this.currentTiming = this.stack[this.stack.length - 1];
-        this.currentChildren = this.currentTiming ? this.currentTiming.children : this.timings;
-    }
-    render(generator) {
-        const timings = Object.assign({
-            total: now() - this.startTime
-        }, collapseTimings(this.timings));
-        const imports = generator.imports.map(node => {
-            return {
-                source: node.source.value,
-                specifiers: node.specifiers.map(specifier => {
-                    return {
-                        name: (specifier.type === 'ImportDefaultSpecifier' ? 'default' :
-                            specifier.type === 'ImportNamespaceSpecifier' ? '*' :
-                                specifier.imported.name),
-                        as: specifier.local.name
-                    };
-                })
-            };
-        });
-        const hooks = {};
-        if (generator.templateProperties.oncreate)
-            hooks.oncreate = true;
-        if (generator.templateProperties.ondestroy)
-            hooks.ondestroy = true;
-        return {
-            timings,
-            warnings: this.warnings,
-            imports,
-            hooks
-        };
-    }
-};
-
-function assign$1(tar, src) {
-	for (var k in src) tar[k] = src[k];
-	return tar;
-}
-
-const UNKNOWN = {};
-function gatherPossibleValues(node, set) {
-    if (node.type === 'Literal') {
-        set.add(node.value);
-    }
-    else if (node.type === 'ConditionalExpression') {
-        gatherPossibleValues(node.consequent, set);
-        gatherPossibleValues(node.alternate, set);
-    }
-    else {
-        set.add(UNKNOWN);
-    }
-}
-
-let Selector$1 = class Selector {
-    constructor(node, stylesheet) {
-        this.node = node;
-        this.stylesheet = stylesheet;
-        this.blocks = groupSelectors(node);
-        // take trailing :global(...) selectors out of consideration
-        let i = this.blocks.length;
-        while (i > 0) {
-            if (!this.blocks[i - 1].global)
-                break;
-            i -= 1;
-        }
-        this.localBlocks = this.blocks.slice(0, i);
-        this.used = this.blocks[0].global;
-    }
-    apply(node, stack) {
-        const toEncapsulate = [];
-        applySelector(this.localBlocks.slice(), node, stack.slice(), toEncapsulate);
-        if (toEncapsulate.length > 0) {
-            toEncapsulate.filter((_, i) => i === 0 || i === toEncapsulate.length - 1).forEach(({ node, block }) => {
-                this.stylesheet.nodesWithCssClass.add(node);
-                block.shouldEncapsulate = true;
-            });
-            this.used = true;
-        }
-    }
-    minify(code) {
-        let c = null;
-        this.blocks.forEach((block, i) => {
-            if (i > 0) {
-                if (block.start - c > 1) {
-                    code.overwrite(c, block.start, block.combinator.name || ' ');
-                }
-            }
-            c = block.end;
-        });
-    }
-    transform(code, attr) {
-        function encapsulateBlock(block) {
-            let i = block.selectors.length;
-            while (i--) {
-                const selector = block.selectors[i];
-                if (selector.type === 'PseudoElementSelector' || selector.type === 'PseudoClassSelector')
-                    continue;
-                if (selector.type === 'TypeSelector' && selector.name === '*') {
-                    code.overwrite(selector.start, selector.end, attr);
-                }
-                else {
-                    code.appendLeft(selector.end, attr);
-                }
-                break;
-            }
-            i = block.selectors.length;
-            while (i--) {
-                const selector = block.selectors[i];
-                if (selector.type === 'RefSelector') {
-                    code.overwrite(selector.start, selector.end, `[svelte-ref-${selector.name}]`, {
-                        contentOnly: true,
-                        storeName: false
-                    });
-                }
-            }
-        }
-        this.blocks.forEach((block, i) => {
-            if (block.global) {
-                const selector = block.selectors[0];
-                const first = selector.children[0];
-                const last = selector.children[selector.children.length - 1];
-                code.remove(selector.start, first.start).remove(last.end, selector.end);
-            }
-            if (block.shouldEncapsulate)
-                encapsulateBlock(block);
-        });
-    }
-    validate(validator) {
-        this.blocks.forEach((block) => {
-            let i = block.selectors.length;
-            while (i-- > 1) {
-                const selector = block.selectors[i];
-                if (selector.type === 'PseudoClassSelector' && selector.name === 'global') {
-                    validator.error(`:global(...) must be the first element in a compound selector`, selector);
-                }
-            }
-        });
-        let start = 0;
-        let end = this.blocks.length;
-        for (; start < end; start += 1) {
-            if (!this.blocks[start].global)
-                break;
-        }
-        for (; end > start; end -= 1) {
-            if (!this.blocks[end - 1].global)
-                break;
-        }
-        for (let i = start; i < end; i += 1) {
-            if (this.blocks[i].global) {
-                validator.error(`:global(...) can be at the start or end of a selector sequence, but not in the middle`, this.blocks[i].selectors[0]);
-            }
-        }
-    }
-};
-function applySelector(blocks, node, stack, toEncapsulate) {
-    const block = blocks.pop();
-    if (!block)
-        return false;
-    if (!node) {
-        return blocks.every(block => block.global);
-    }
-    let i = block.selectors.length;
-    let j = stack.length;
-    while (i--) {
-        const selector = block.selectors[i];
-        if (selector.type === 'PseudoClassSelector' && selector.name === 'global') {
-            // TODO shouldn't see this here... maybe we should enforce that :global(...)
-            // cannot be sandwiched between non-global selectors?
-            return false;
-        }
-        if (selector.type === 'PseudoClassSelector' || selector.type === 'PseudoElementSelector') {
-            continue;
-        }
-        if (selector.type === 'ClassSelector') {
-            if (!attributeMatches(node, 'class', selector.name, '~=', false))
-                return false;
-        }
-        else if (selector.type === 'IdSelector') {
-            if (!attributeMatches(node, 'id', selector.name, '=', false))
-                return false;
-        }
-        else if (selector.type === 'AttributeSelector') {
-            if (!attributeMatches(node, selector.name.name, selector.value && unquote(selector.value), selector.matcher, selector.flags))
-                return false;
-        }
-        else if (selector.type === 'TypeSelector') {
-            // remove toLowerCase() in v2, when uppercase elements will be forbidden
-            if (node.name.toLowerCase() !== selector.name.toLowerCase() && selector.name !== '*')
-                return false;
-        }
-        else if (selector.type === 'RefSelector') {
-            if (node.attributes.some((attr) => attr.type === 'Ref' && attr.name === selector.name)) {
-                node._cssRefAttribute = selector.name;
-                toEncapsulate.push({ node, block });
-                return true;
-            }
-            return;
-        }
-        else {
-            // bail. TODO figure out what these could be
-            toEncapsulate.push({ node, block });
-            return true;
-        }
-    }
-    if (block.combinator) {
-        if (block.combinator.type === 'WhiteSpace') {
-            while (stack.length) {
-                if (applySelector(blocks.slice(), stack.pop(), stack, toEncapsulate)) {
-                    toEncapsulate.push({ node, block });
-                    return true;
-                }
-            }
-            return false;
-        }
-        else if (block.combinator.name === '>') {
-            if (applySelector(blocks, stack.pop(), stack, toEncapsulate)) {
-                toEncapsulate.push({ node, block });
-                return true;
-            }
-            return false;
-        }
-        // TODO other combinators
-        toEncapsulate.push({ node, block });
-        return true;
-    }
-    toEncapsulate.push({ node, block });
-    return true;
-}
-const operators = {
-    '=': (value, flags) => new RegExp(`^${value}$`, flags),
-    '~=': (value, flags) => new RegExp(`\\b${value}\\b`, flags),
-    '|=': (value, flags) => new RegExp(`^${value}(-.+)?$`, flags),
-    '^=': (value, flags) => new RegExp(`^${value}`, flags),
-    '$=': (value, flags) => new RegExp(`${value}$`, flags),
-    '*=': (value, flags) => new RegExp(value, flags)
-};
-function attributeMatches(node, name, expectedValue, operator, caseInsensitive) {
-    const spread = node.attributes.find(attr => attr.type === 'Spread');
-    if (spread)
-        return true;
-    const attr = node.attributes.find((attr) => attr.name === name);
-    if (!attr)
-        return false;
-    if (attr.value === true)
-        return operator === null;
-    if (attr.value.length > 1)
-        return true;
-    if (!expectedValue)
-        return true;
-    const pattern = operators[operator](expectedValue, caseInsensitive ? 'i' : '');
-    const value = attr.value[0];
-    if (!value)
-        return false;
-    if (value.type === 'Text')
-        return pattern.test(value.data);
-    const possibleValues = new Set();
-    gatherPossibleValues(value.expression, possibleValues);
-    if (possibleValues.has(UNKNOWN))
-        return true;
-    for (const x of Array.from(possibleValues)) {
-        if (pattern.test(x))
-            return true;
-    }
-    return false;
-}
-function unquote(value) {
-    if (value.type === 'Identifier')
-        return value.name;
-    const str = value.value;
-    if (str[0] === str[str.length - 1] && str[0] === "'" || str[0] === '"') {
-        return str.slice(1, str.length - 1);
-    }
-    return str;
-}
-let Block$3 = class Block {
-    constructor(combinator) {
-        this.combinator = combinator;
-        this.global = false;
-        this.selectors = [];
-        this.start = null;
-        this.end = null;
-        this.shouldEncapsulate = false;
-    }
-    add(selector) {
-        if (this.selectors.length === 0) {
-            this.start = selector.start;
-            this.global = selector.type === 'PseudoClassSelector' && selector.name === 'global';
-        }
-        this.selectors.push(selector);
-        this.end = selector.end;
-    }
-};
-function groupSelectors(selector) {
-    let block = new Block$3(null);
-    const blocks = [block];
-    selector.children.forEach((child, i) => {
-        if (child.type === 'WhiteSpace' || child.type === 'Combinator') {
-            block = new Block$3(child);
-            blocks.push(block);
-        }
-        else {
-            block.add(child);
-        }
-    });
-    return blocks;
-}
-
-let Rule$1 = class Rule {
-    constructor(node, stylesheet, parent) {
-        this.node = node;
-        this.parent = parent;
-        this.selectors = node.selector.children.map((node) => new Selector$1(node, stylesheet));
-        this.declarations = node.block.children.map((node) => new Declaration$1(node));
-    }
-    apply(node, stack) {
-        this.selectors.forEach(selector => selector.apply(node, stack)); // TODO move the logic in here?
-    }
-    isUsed(dev) {
-        if (this.parent && this.parent.node.type === 'Atrule' && this.parent.node.name === 'keyframes')
-            return true;
-        if (this.declarations.length === 0)
-            return dev;
-        return this.selectors.some(s => s.used);
-    }
-    minify(code, cascade, dev) {
-        let c = this.node.start;
-        let started = false;
-        this.selectors.forEach((selector, i) => {
-            if (cascade || selector.used) {
-                const separator = started ? ',' : '';
-                if ((selector.node.start - c) > separator.length) {
-                    code.overwrite(c, selector.node.start, separator);
-                }
-                if (!cascade)
-                    selector.minify(code);
-                c = selector.node.end;
-                started = true;
-            }
-        });
-        code.remove(c, this.node.block.start);
-        c = this.node.block.start + 1;
-        this.declarations.forEach((declaration, i) => {
-            const separator = i > 0 ? ';' : '';
-            if ((declaration.node.start - c) > separator.length) {
-                code.overwrite(c, declaration.node.start, separator);
-            }
-            declaration.minify(code);
-            c = declaration.node.end;
-        });
-        code.remove(c, this.node.block.end - 1);
-    }
-    transform(code, id, keyframes, cascade) {
-        if (this.parent && this.parent.node.type === 'Atrule' && this.parent.node.name === 'keyframes')
-            return true;
-        const attr = `.${id}`;
-        if (cascade) {
-            this.selectors.forEach(selector => {
-                // TODO disable cascading (without :global(...)) in v2
-                const { start, end, children } = selector.node;
-                const css = code.original;
-                const selectorString = css.slice(start, end);
-                const firstToken = children[0];
-                let transformed;
-                if (firstToken.type === 'TypeSelector') {
-                    const insert = firstToken.end;
-                    const head = firstToken.name === '*' ? '' : css.slice(start, insert);
-                    const tail = css.slice(insert, end);
-                    transformed = `${head}${attr}${tail},${attr} ${selectorString}`;
-                }
-                else {
-                    transformed = `${attr}${selectorString},${attr} ${selectorString}`;
-                }
-                code.overwrite(start, end, transformed);
-            });
-        }
-        else {
-            this.selectors.forEach(selector => selector.transform(code, attr));
-        }
-        this.declarations.forEach(declaration => declaration.transform(code, keyframes));
-    }
-    validate(validator) {
-        this.selectors.forEach(selector => {
-            selector.validate(validator);
-        });
-    }
-    warnOnUnusedSelector(handler) {
-        this.selectors.forEach(selector => {
-            if (!selector.used)
-                handler(selector);
-        });
-    }
-};
-let Declaration$1 = class Declaration {
-    constructor(node) {
-        this.node = node;
-    }
-    transform(code, keyframes) {
-        const property = this.node.property && this.node.property.toLowerCase();
-        if (property === 'animation' || property === 'animation-name') {
-            this.node.value.children.forEach((block) => {
-                if (block.type === 'Identifier') {
-                    const name = block.name;
-                    if (keyframes.has(name)) {
-                        code.overwrite(block.start, block.end, keyframes.get(name));
-                    }
-                }
-            });
-        }
-    }
-    minify(code) {
-        if (!this.node.property)
-            return; // @apply, and possibly other weird cases?
-        const c = this.node.start + this.node.property.length;
-        const first = this.node.value.children ?
-            this.node.value.children[0] :
-            this.node.value;
-        let start = first.start;
-        while (/\s/.test(code.original[start]))
-            start += 1;
-        if (start - c > 1) {
-            code.overwrite(c, start, ':');
-        }
-    }
-};
-let Atrule$1 = class Atrule {
-    constructor(node) {
-        this.node = node;
-        this.children = [];
-    }
-    apply(node, stack) {
-        if (this.node.name === 'media' || this.node.name === 'supports') {
-            this.children.forEach(child => {
-                child.apply(node, stack);
-            });
-        }
-        else if (this.node.name === 'keyframes') {
-            this.children.forEach((rule) => {
-                rule.selectors.forEach(selector => {
-                    selector.used = true;
-                });
-            });
-        }
-    }
-    isUsed(dev) {
-        return true; // TODO
-    }
-    minify(code, cascade, dev) {
-        if (this.node.name === 'media') {
-            const expressionChar = code.original[this.node.expression.start];
-            let c = this.node.start + (expressionChar === '(' ? 6 : 7);
-            if (this.node.expression.start > c)
-                code.remove(c, this.node.expression.start);
-            this.node.expression.children.forEach((query) => {
-                // TODO minify queries
-                c = query.end;
-            });
-            code.remove(c, this.node.block.start);
-        }
-        else if (this.node.name === 'keyframes') {
-            let c = this.node.start + 10;
-            if (this.node.expression.start - c > 1)
-                code.overwrite(c, this.node.expression.start, ' ');
-            c = this.node.expression.end;
-            if (this.node.block.start - c > 0)
-                code.remove(c, this.node.block.start);
-        }
-        else if (this.node.name === 'supports') {
-            let c = this.node.start + 9;
-            if (this.node.expression.start - c > 1)
-                code.overwrite(c, this.node.expression.start, ' ');
-            this.node.expression.children.forEach((query) => {
-                // TODO minify queries
-                c = query.end;
-            });
-            code.remove(c, this.node.block.start);
-        }
-        // TODO other atrules
-        if (this.node.block) {
-            let c = this.node.block.start + 1;
-            this.children.forEach(child => {
-                if (cascade || child.isUsed(dev)) {
-                    code.remove(c, child.node.start);
-                    child.minify(code, cascade, dev);
-                    c = child.node.end;
-                }
-            });
-            code.remove(c, this.node.block.end - 1);
-        }
-    }
-    transform(code, id, keyframes, cascade) {
-        if (this.node.name === 'keyframes') {
-            this.node.expression.children.forEach(({ type, name, start, end }) => {
-                if (type === 'Identifier') {
-                    if (name.startsWith('-global-')) {
-                        code.remove(start, start + 8);
-                    }
-                    else {
-                        code.overwrite(start, end, keyframes.get(name));
-                    }
-                }
-            });
-        }
-        this.children.forEach(child => {
-            child.transform(code, id, keyframes, cascade);
-        });
-    }
-    validate(validator) {
-        this.children.forEach(child => {
-            child.validate(validator);
-        });
-    }
-    warnOnUnusedSelector(handler) {
-        if (this.node.name !== 'media')
-            return;
-        this.children.forEach(child => {
-            child.warnOnUnusedSelector(handler);
-        });
-    }
-};
-class Stylesheet {
-    constructor(source, parsed, filename, cascade, dev) {
-        this.source = source;
-        this.parsed = parsed;
-        this.cascade = cascade;
-        this.filename = filename;
-        this.dev = dev;
-        this.children = [];
-        this.keyframes = new Map();
-        this.nodesWithCssClass = new Set();
-        if (parsed.css && parsed.css.children.length) {
-            this.id = `svelte-${hash(parsed.css.content.styles)}`;
-            this.hasStyles = true;
-            const stack = [];
-            let currentAtrule = null;
-            walk(this.parsed.css, {
-                enter: (node) => {
-                    if (node.type === 'Atrule') {
-                        const last = stack[stack.length - 1];
-                        const atrule = new Atrule$1(node);
-                        stack.push(atrule);
-                        // this is an awkward special case — @apply (and
-                        // possibly other future constructs)
-                        if (last && !(last instanceof Atrule$1))
-                            return;
-                        if (currentAtrule) {
-                            currentAtrule.children.push(atrule);
-                        }
-                        else {
-                            this.children.push(atrule);
-                        }
-                        if (node.name === 'keyframes') {
-                            node.expression.children.forEach((expression) => {
-                                if (expression.type === 'Identifier' && !expression.name.startsWith('-global-')) {
-                                    this.keyframes.set(expression.name, `${this.id}-${expression.name}`);
-                                }
-                            });
-                        }
-                        currentAtrule = atrule;
-                    }
-                    if (node.type === 'Rule') {
-                        const rule = new Rule$1(node, this, currentAtrule);
-                        stack.push(rule);
-                        if (currentAtrule) {
-                            currentAtrule.children.push(rule);
-                        }
-                        else {
-                            this.children.push(rule);
-                        }
-                    }
-                },
-                leave: (node) => {
-                    if (node.type === 'Rule' || node.type === 'Atrule')
-                        stack.pop();
-                    if (node.type === 'Atrule')
-                        currentAtrule = stack[stack.length - 1];
-                }
-            });
-        }
-        else {
-            this.hasStyles = false;
-        }
-    }
-    apply(node) {
-        if (!this.hasStyles)
-            return;
-        const stack = [];
-        let parent = node;
-        while (parent = parent.parent) {
-            if (parent.type === 'Element')
-                stack.unshift(parent);
-        }
-        if (this.cascade) {
-            if (stack.length === 0)
-                this.nodesWithCssClass.add(node);
-            return;
-        }
-        for (let i = 0; i < this.children.length; i += 1) {
-            const child = this.children[i];
-            child.apply(node, stack);
-        }
-    }
-    reify() {
-        this.nodesWithCssClass.forEach((node) => {
-            node.addCssClass();
-        });
-    }
-    render(cssOutputFilename, shouldTransformSelectors) {
-        if (!this.hasStyles) {
-            return { code: null, map: null };
-        }
-        const code = new MagicString$1(this.source);
-        walk(this.parsed.css, {
-            enter: (node) => {
-                code.addSourcemapLocation(node.start);
-                code.addSourcemapLocation(node.end);
-            }
-        });
-        if (shouldTransformSelectors) {
-            this.children.forEach((child) => {
-                child.transform(code, this.id, this.keyframes, this.cascade);
-            });
-        }
-        let c = 0;
-        this.children.forEach(child => {
-            if (this.cascade || child.isUsed(this.dev)) {
-                code.remove(c, child.node.start);
-                child.minify(code, this.cascade, this.dev);
-                c = child.node.end;
-            }
-        });
-        code.remove(c, this.source.length);
-        return {
-            code: code.toString(),
-            map: code.generateMap({
-                includeContent: true,
-                source: this.filename,
-                file: cssOutputFilename
-            })
-        };
-    }
-    validate(validator) {
-        this.children.forEach(child => {
-            child.validate(validator);
-        });
-    }
-    warnOnUnusedSelectors(onwarn) {
-        if (this.cascade)
-            return;
-        let locator;
-        const handler = (selector) => {
-            const pos = selector.node.start;
-            if (!locator)
-                locator = getLocator(this.source);
-            const { line, column } = locator(pos);
-            const frame = getCodeFrame(this.source, line, column);
-            const message = `Unused CSS selector`;
-            onwarn({
-                message,
-                frame,
-                loc: { line: line + 1, column },
-                pos,
-                filename: this.filename,
-                toString: () => `${message} (${line + 1}:${column})\n${frame}`,
-            });
-        };
-        this.children.forEach(child => {
-            child.warnOnUnusedSelector(handler);
-        });
-    }
-}
-
-const version$1 = '1.60.3';
-function normalizeOptions(options) {
-    let normalizedOptions = assign$1({ generate: 'dom' }, options);
-    const { onwarn, onerror } = normalizedOptions;
-    normalizedOptions.onwarn = onwarn
-        ? (warning) => onwarn(warning, defaultOnwarn)
-        : defaultOnwarn;
-    normalizedOptions.onerror = onerror
-        ? (error) => onerror(error, defaultOnerror)
-        : defaultOnerror;
-    return normalizedOptions;
-}
-function defaultOnwarn(warning) {
-    if (warning.loc) {
-        console.warn(`(${warning.loc.line}:${warning.loc.column}) – ${warning.message}`); // eslint-disable-line no-console
-    }
-    else {
-        console.warn(warning.message); // eslint-disable-line no-console
-    }
-}
-function defaultOnerror(error) {
-    throw error;
-}
-function parseAttributeValue(value) {
-    return /^['"]/.test(value) ?
-        value.slice(1, -1) :
-        value;
-}
-function parseAttributes(str) {
-    const attrs = {};
-    str.split(/\s+/).filter(Boolean).forEach(attr => {
-        const [name, value] = attr.split('=');
-        attrs[name] = value ? parseAttributeValue(value) : true;
-    });
-    return attrs;
-}
-function replaceTagContents(source, type, preprocessor, options) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const exp = new RegExp(`<${type}([\\S\\s]*?)>([\\S\\s]*?)<\\/${type}>`, 'ig');
-        const match = exp.exec(source);
-        if (match) {
-            const attributes = parseAttributes(match[1]);
-            const content = match[2];
-            const processed = yield preprocessor({
-                content,
-                attributes,
-                filename: options.filename
-            });
-            if (processed && processed.code) {
-                return (source.slice(0, match.index) +
-                    `<${type}>${processed.code}</${type}>` +
-                    source.slice(match.index + match[0].length));
-            }
-        }
-        return source;
-    });
-}
-function preprocess(source, options) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const { markup, style, script } = options;
-        if (!!markup) {
-            const processed = yield markup({
-                content: source,
-                filename: options.filename
-            });
-            source = processed.code;
-        }
-        if (!!style) {
-            source = yield replaceTagContents(source, 'style', style, options);
-        }
-        if (!!script) {
-            source = yield replaceTagContents(source, 'script', script, options);
-        }
-        return {
-            // TODO return separated output, in future version where svelte.compile supports it:
-            // style: { code: styleCode, map: styleMap },
-            // script { code: scriptCode, map: scriptMap },
-            // markup { code: markupCode, map: markupMap },
-            toString() {
-                return source;
-            }
-        };
-    });
-}
-function compile(source, _options) {
-    const options = normalizeOptions(_options);
-    let parsed;
-    const stats = new Stats$1();
-    try {
-        stats.start('parse');
-        parsed = parse$1(source, options);
-        stats.stop('parse');
-    }
-    catch (err) {
-        options.onerror(err);
-        return;
-    }
-    stats.start('stylesheet');
-    const stylesheet = new Stylesheet(source, parsed, options.filename, options.cascade !== false, options.dev);
-    stats.stop('stylesheet');
-    stats.start('validate');
-    // TODO remove this when we remove svelte.validate from public API — we
-    // can use the stats object instead
-    const onwarn = options.onwarn;
-    options.onwarn = warning => {
-        stats.warnings.push(warning);
-        onwarn(warning);
-    };
-    validate(parsed, source, stylesheet, options);
-    stats.stop('validate');
-    const compiler = options.generate === 'ssr' ? ssr : dom;
-    return compiler(parsed, source, stylesheet, options, stats);
-}
-function create$1(source, _options = {}) {
-    _options.format = 'eval';
-    const compiled = compile(source, _options);
-    if (!compiled || !compiled.code) {
-        return;
-    }
-    try {
-        return (eval)(compiled.code);
-    }
-    catch (err) {
-        if (_options.onerror) {
-            _options.onerror(err);
-            return;
-        }
-        else {
-            throw err;
-        }
-    }
-}
-
-exports.preprocess = preprocess;
-exports.compile = compile;
-exports.create = create$1;
-exports.parse = parse$1;
-exports.validate = validate;
-exports.Stylesheet = Stylesheet;
-exports.VERSION = version$1;
-
-Object.defineProperty(exports, '__esModule', { value: true });
-
-})));
-//# sourceMappingURL=svelte.js.map
diff --git a/node_modules/svelte/compiler/svelte.js.map b/node_modules/svelte/compiler/svelte.js.map
deleted file mode 100644
index 05ab6b5..0000000
--- a/node_modules/svelte/compiler/svelte.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"svelte.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/acorn/dist/acorn.es.js","../src/parse/read/expression.ts","../node_modules/acorn-dynamic-import/src/inject.js","../src/utils/repeat.ts","../src/parse/read/script.ts","../node_modules/css-tree/lib/tokenizer/error.js","../node_modules/css-tree/lib/tokenizer/const.js","../node_modules/css-tree/lib/tokenizer/utils.js","../node_modules/css-tree/lib/tokenizer/Tokenizer.js","../node_modules/css-tree/lib/tokenizer/index.js","../node_modules/css-tree/lib/utils/list.js","../node_modules/css-tree/lib/parser/sequence.js","../node_modules/css-tree/lib/parser/create.js","../node_modules/css-tree/lib/syntax/scope/default.js","../node_modules/css-tree/lib/syntax/scope/atruleExpression.js","../node_modules/css-tree/lib/syntax/scope/selector.js","../node_modules/css-tree/lib/syntax/function/element.js","../node_modules/css-tree/lib/syntax/function/expression.js","../node_modules/css-tree/lib/syntax/function/var.js","../node_modules/css-tree/lib/syntax/scope/value.js","../node_modules/css-tree/lib/syntax/scope/index.js","../node_modules/css-tree/lib/syntax/atrule/font-face.js","../node_modules/css-tree/lib/syntax/atrule/import.js","../node_modules/css-tree/lib/syntax/atrule/media.js","../node_modules/css-tree/lib/syntax/atrule/page.js","../node_modules/css-tree/lib/syntax/atrule/supports.js","../node_modules/css-tree/lib/syntax/atrule/index.js","../node_modules/css-tree/lib/syntax/pseudo/dir.js","../node_modules/css-tree/lib/syntax/pseudo/has.js","../node_modules/css-tree/lib/syntax/pseudo/lang.js","../node_modules/css-tree/lib/syntax/pseudo/common/selectorList.js","../node_modules/css-tree/lib/syntax/pseudo/matches.js","../node_modules/css-tree/lib/syntax/pseudo/not.js","../node_modules/css-tree/lib/syntax/pseudo/common/nthWithOfClause.js","../node_modules/css-tree/lib/syntax/pseudo/nth-child.js","../node_modules/css-tree/lib/syntax/pseudo/nth-last-child.js","../node_modules/css-tree/lib/syntax/pseudo/common/nth.js","../node_modules/css-tree/lib/syntax/pseudo/nth-last-of-type.js","../node_modules/css-tree/lib/syntax/pseudo/nth-of-type.js","../node_modules/css-tree/lib/syntax/pseudo/slotted.js","../node_modules/css-tree/lib/syntax/pseudo/index.js","../node_modules/css-tree/lib/syntax/node/AnPlusB.js","../node_modules/css-tree/lib/syntax/node/Atrule.js","../node_modules/css-tree/lib/syntax/node/AtruleExpression.js","../node_modules/css-tree/lib/syntax/node/AttributeSelector.js","../node_modules/css-tree/lib/syntax/node/Block.js","../node_modules/css-tree/lib/syntax/node/Brackets.js","../node_modules/css-tree/lib/syntax/node/CDC.js","../node_modules/css-tree/lib/syntax/node/CDO.js","../node_modules/css-tree/lib/syntax/node/ClassSelector.js","../node_modules/css-tree/lib/syntax/node/Combinator.js","../node_modules/css-tree/lib/syntax/node/Comment.js","../node_modules/css-tree/lib/syntax/node/Declaration.js","../node_modules/css-tree/lib/syntax/node/DeclarationList.js","../node_modules/css-tree/lib/syntax/node/Dimension.js","../node_modules/css-tree/lib/syntax/node/Function.js","../node_modules/css-tree/lib/syntax/node/HexColor.js","../node_modules/css-tree/lib/syntax/node/Identifier.js","../node_modules/css-tree/lib/syntax/node/IdSelector.js","../node_modules/css-tree/lib/syntax/node/MediaFeature.js","../node_modules/css-tree/lib/syntax/node/MediaQuery.js","../node_modules/css-tree/lib/syntax/node/MediaQueryList.js","../node_modules/css-tree/lib/syntax/node/Nth.js","../node_modules/css-tree/lib/syntax/node/Number.js","../node_modules/css-tree/lib/syntax/node/Operator.js","../node_modules/css-tree/lib/syntax/node/Parentheses.js","../node_modules/css-tree/lib/syntax/node/Percentage.js","../node_modules/css-tree/lib/syntax/node/PseudoClassSelector.js","../node_modules/css-tree/lib/syntax/node/PseudoElementSelector.js","../node_modules/css-tree/lib/syntax/node/Ratio.js","../node_modules/css-tree/lib/syntax/node/Raw.js","../node_modules/css-tree/lib/syntax/node/Rule.js","../node_modules/css-tree/lib/syntax/node/Selector.js","../node_modules/css-tree/lib/syntax/node/SelectorList.js","../node_modules/css-tree/lib/syntax/node/String.js","../node_modules/css-tree/lib/syntax/node/StyleSheet.js","../node_modules/css-tree/lib/syntax/node/TypeSelector.js","../node_modules/css-tree/lib/syntax/node/UnicodeRange.js","../node_modules/css-tree/lib/syntax/node/Url.js","../node_modules/css-tree/lib/syntax/node/Value.js","../node_modules/css-tree/lib/syntax/node/WhiteSpace.js","../node_modules/css-tree/lib/syntax/node/index.js","../node_modules/css-tree/lib/syntax/config/parser.js","../node_modules/css-tree/lib/parser/index.js","../node_modules/estree-walker/dist/estree-walker.es.js","../src/parse/read/style.ts","../src/parse/read/directives.ts","../src/parse/utils/entities.ts","../src/parse/utils/html.ts","../src/utils/isVoidElementName.ts","../src/parse/state/tag.ts","../src/utils/patterns.ts","../src/utils/trim.ts","../src/parse/state/mustache.ts","../src/parse/state/text.ts","../src/parse/state/fragment.ts","../src/utils/reservedNames.ts","../src/utils/fullCharCodeAt.ts","../src/utils/hash.ts","../node_modules/locate-character/dist/locate-character.es.js","../src/utils/getCodeFrame.ts","../src/utils/error.ts","../src/parse/index.ts","../src/validate/js/propValidators/data.ts","../src/utils/getName.ts","../src/validate/js/utils/checkForDupes.ts","../src/validate/js/utils/checkForComputedKeys.ts","../src/validate/js/propValidators/actions.ts","../src/utils/isValidIdentifier.ts","../src/utils/walkThroughTopFunctionScope.ts","../src/utils/isThisGetCallExpression.ts","../src/validate/js/propValidators/computed.ts","../node_modules/is-reference/dist/is-reference.es.js","../src/validate/js/utils/usesThisOrArguments.ts","../src/validate/js/propValidators/oncreate.ts","../src/validate/js/propValidators/ondestroy.ts","../src/validate/js/propValidators/onrender.ts","../src/validate/js/propValidators/onteardown.ts","../src/validate/js/propValidators/helpers.ts","../src/validate/js/utils/checkForAccessors.ts","../src/validate/js/propValidators/methods.ts","../src/validate/js/propValidators/components.ts","../src/validate/js/propValidators/events.ts","../src/utils/namespaces.ts","../src/utils/nodeToString.ts","../src/validate/utils/FuzzySet.ts","../src/validate/utils/fuzzymatch.ts","../src/validate/js/propValidators/namespace.ts","../src/validate/js/propValidators/preload.ts","../src/validate/js/propValidators/props.ts","../src/validate/js/propValidators/tag.ts","../src/validate/js/propValidators/transitions.ts","../src/validate/js/propValidators/setup.ts","../src/validate/js/propValidators/store.ts","../src/validate/js/propValidators/immutable.ts","../src/validate/js/propValidators/index.ts","../src/validate/js/index.ts","../src/utils/flattenReference.ts","../src/utils/list.ts","../src/utils/validCalleeObjects.ts","../src/validate/html/validateEventHandler.ts","../src/validate/html/validateElement.ts","../src/validate/html/validateWindow.ts","../src/validate/html/validateHead.ts","../src/utils/getStaticAttributeValue.ts","../src/validate/html/a11y.ts","../src/validate/html/index.ts","../src/validate/index.ts","../node_modules/vlq/src/vlq.js","../node_modules/magic-string/dist/magic-string.es.js","../src/utils/annotateWithScopes.ts","../src/utils/deindent.ts","../src/utils/stringify.ts","../src/utils/CodeBuilder.ts","../src/utils/globalWhitelist.ts","../src/generators/dom/shared.ts","../src/utils/removeNode.ts","../src/generators/wrapModule.ts","../src/utils/clone.ts","../src/config.ts","../src/utils/fixAttributeCasing.ts","../src/utils/getExpressionPrecedence.ts","../src/generators/nodes/Attribute.ts","../src/generators/nodes/shared/Node.ts","../src/utils/createDebuggingComment.ts","../src/generators/nodes/AwaitBlock.ts","../src/generators/nodes/Action.ts","../src/utils/getObject.ts","../src/utils/getTailSnippet.ts","../src/generators/nodes/Binding.ts","../src/generators/nodes/CatchBlock.ts","../src/generators/nodes/Comment.ts","../src/utils/stringifyProps.ts","../src/utils/quoteIfNecessary.ts","../src/generators/nodes/shared/mungeAttribute.ts","../src/generators/nodes/Component.ts","../src/generators/nodes/EachBlock.ts","../src/generators/nodes/Element.ts","../src/generators/nodes/ElseBlock.ts","../src/generators/nodes/EventHandler.ts","../src/generators/dom/Block.ts","../src/generators/nodes/Fragment.ts","../src/generators/nodes/Head.ts","../src/generators/nodes/IfBlock.ts","../src/generators/nodes/shared/Tag.ts","../src/generators/nodes/MustacheTag.ts","../src/generators/nodes/PendingBlock.ts","../src/generators/nodes/RawMustacheTag.ts","../src/generators/nodes/Ref.ts","../src/generators/nodes/Slot.ts","../src/generators/nodes/Text.ts","../src/generators/nodes/ThenBlock.ts","../src/generators/nodes/Title.ts","../src/generators/nodes/Transition.ts","../src/generators/nodes/Window.ts","../src/generators/nodes/index.ts","../src/generators/Generator.ts","../src/generators/dom/index.ts","../src/generators/server-side-rendering/Block.ts","../src/generators/server-side-rendering/visitors/AwaitBlock.ts","../src/generators/server-side-rendering/visitors/Comment.ts","../src/generators/server-side-rendering/visitors/Component.ts","../src/generators/server-side-rendering/visitors/EachBlock.ts","../src/generators/server-side-rendering/visitors/Slot.ts","../src/generators/server-side-rendering/visitors/shared/stringifyAttributeValue.ts","../src/generators/server-side-rendering/visitors/Element.ts","../src/generators/server-side-rendering/visitors/Head.ts","../src/generators/server-side-rendering/visitors/IfBlock.ts","../src/generators/server-side-rendering/visitors/MustacheTag.ts","../src/generators/server-side-rendering/visitors/RawMustacheTag.ts","../src/generators/server-side-rendering/visitors/Text.ts","../src/generators/server-side-rendering/visitors/Title.ts","../src/generators/server-side-rendering/visitors/Window.ts","../src/generators/server-side-rendering/visitors/index.ts","../src/generators/server-side-rendering/visit.ts","../src/generators/server-side-rendering/index.ts","../src/Stats.ts","../src/shared/utils.js","../src/css/gatherPossibleValues.ts","../src/css/Selector.ts","../src/css/Stylesheet.ts","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312e\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fea\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,55,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,698,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,1,31,6124,20,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,19719,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true};\nvar startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\"),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features. The default is 7.\n  ecmaVersion: 7,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion >= 2015)\n    { options.ecmaVersion -= 2009; }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Registered plugins\nvar plugins = {};\n\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n  var reserved = \"\";\n  if (!options.allowReserved) {\n    for (var v = options.ecmaVersion;; v--)\n      { if (reserved = reservedWords[v]) { break } }\n    if (options.sourceType == \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = keywordRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = keywordRegexp(reservedStrict);\n  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Load plugins\n  this.loadPlugins(options.plugins);\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Flags to track whether we are in a function, a generator, an async function.\n  this.inFunction = this.inGenerator = this.inAsync = false;\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = 0;\n  // Labels in scope.\n  this.labels = [];\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterFunctionScope();\n\n  // For RegExp validation\n  this.regexpState = null;\n};\n\n// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\nParser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\nParser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\nParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name]);\n};\n\nParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = plugins[name];\n    if (!plugin) { throw new Error(\"Plugin '\" + name + \"' not found\") }\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\"|;)/;\npp.strictDirective = function(start) {\n  var this$1 = this;\n\n  for (;;) {\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this$1.input)[0].length;\n    var match = literal.exec(this$1.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) == \"use strict\") { return true }\n    start += match[0].length;\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var this$1 = this;\n\n  var exports = {};\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this$1.parseStatement(true, true, exports);\n    node.body.push(stmt);\n  }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"};\nvar switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function() {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  if (nextCh === 91 || nextCh == 123) { return true } // '{' and '['\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(declaration, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet()) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    if (!declaration && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false)\n  case types._class:\n    if (!declaration) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (!declaration && kind != \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock()\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (!declaration) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var this$1 = this;\n\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this$1.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterLexicalScope();\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n        !(kind !== \"var\" && init$1.declarations[0].init)) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync) {\n  this.next();\n  return this.parseFunction(node, true, false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(!this.strict && this.type == types._function);\n  node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.type == types._function) : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  var this$1 = this;\n\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterLexicalScope();\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type != types.braceR;) {\n    if (this$1.type === types._case || this$1.type === types._default) {\n      var isCase = this$1.type === types._case;\n      if (cur) { this$1.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this$1.startNode());\n      cur.consequent = [];\n      this$1.next();\n      if (isCase) {\n        cur.test = this$1.parseExpression();\n      } else {\n        if (sawDefault) { this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this$1.expect(types.colon);\n    } else {\n      if (!cur) { this$1.unexpected(); }\n      cur.consequent.push(this$1.parseStatement(true));\n    }\n  }\n  this.exitLexicalScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.enterLexicalScope();\n    this.checkLVal(clause.param, \"let\");\n    this.expect(types.parenR);\n    clause.body = this.parseBlock(false);\n    this.exitLexicalScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr) {\n  var this$1 = this;\n\n  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this$1.labels[i];\n    if (label$1.statementStart == node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this$1.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(true);\n  if (node.body.type == \"ClassDeclaration\" ||\n      node.body.type == \"VariableDeclaration\" && node.body.kind != \"var\" ||\n      node.body.type == \"FunctionDeclaration\" && (this.strict || node.body.generator))\n    { this.raiseRecoverable(node.body.start, \"Invalid labeled declaration\"); }\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope) {\n  var this$1 = this;\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n\n  var node = this.startNode();\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) {\n    this.enterLexicalScope();\n  }\n  while (!this.eat(types.braceR)) {\n    var stmt = this$1.parseStatement(true);\n    node.body.push(stmt);\n  }\n  if (createNewLexicalScope) {\n    this.exitLexicalScope();\n  }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var type = this.type === types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  if (type == \"ForInStatement\") {\n    if (init.type === \"AssignmentPattern\" ||\n      (init.type === \"VariableDeclaration\" && init.declarations[0].init != null &&\n       (this.strict || init.declarations[0].id.type !== \"Identifier\")))\n      { this.raise(init.start, \"Invalid assignment in for-in loop head\"); }\n  }\n  node.left = init;\n  node.right = type == \"ForInStatement\" ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type)\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  var this$1 = this;\n\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this$1.startNode();\n    this$1.parseVarId(decl, kind);\n    if (this$1.eat(types.eq)) {\n      decl.init = this$1.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n      this$1.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === types._in || this$1.isContextual(\"of\")))) {\n      this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n    if (!this$1.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom(kind);\n  this.checkLVal(decl.id, kind, false);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync)\n    { node.generator = this.eat(types.star); }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (isStatement) {\n    node.id = isStatement === \"nullableID\" && this.type != types.name ? null : this.parseIdent();\n    if (node.id) {\n      this.checkLVal(node.id, \"var\");\n    }\n  }\n\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  if (!isStatement)\n    { node.id = this.type == types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  var this$1 = this;\n\n  this.next();\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    var member = this$1.parseClassMember(classBody);\n    if (member && member.type === \"MethodDefinition\" && member.kind === \"constructor\") {\n      if (hadConstructor) { this$1.raise(member.start, \"Duplicate constructor in the same class\"); }\n      hadConstructor = true;\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassMember = function(classBody) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) { return null }\n\n  var method = this.startNode();\n  var tryContextual = function (k, noLineBreak) {\n    if ( noLineBreak === void 0 ) noLineBreak = false;\n\n    var start = this$1.start, startLoc = this$1.startLoc;\n    if (!this$1.eatContextual(k)) { return false }\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n    if (method.key) { this$1.unexpected(); }\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n  if (!method.key) { this.parsePropertyName(method); }\n  var key = method.key;\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n      key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    method.kind = \"constructor\";\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n  this.parseClassMethod(classBody, method, isGenerator, isAsync);\n  if (method.kind === \"get\" && method.value.params.length !== 0)\n    { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && method.value.params.length !== 1)\n    { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n  return method\n};\n\npp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {\n  method.value = this.parseMethod(isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  var this$1 = this;\n\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, \"nullableID\", false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        var spec = list[i];\n\n        this$1.checkUnreserved(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var this$1 = this;\n\n  var type = pat.type;\n  if (type == \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type == \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this$1.checkPatternExport(exports, prop);\n      } }\n  else if (type == \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this$1.checkPatternExport(exports, elt); }\n    } }\n  else if (type == \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type == \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type == \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type == \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  var this$1 = this;\n\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this$1.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this$1.startNode();\n    node.local = this$1.parseIdent(true);\n    node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local;\n    this$1.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this$1.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, \"let\");\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, \"let\");\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this$1.startNode();\n    node$2.imported = this$1.parseIdent(true);\n    if (this$1.eatContextual(\"as\")) {\n      node$2.local = this$1.parseIdent();\n    } else {\n      this$1.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this$1.checkLVal(node$2.local, \"let\");\n    nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  var this$1 = this;\n\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Can not use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this$1.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this$1.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type == \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding);\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var this$1 = this;\n\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this$1.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this$1.expect(types.comma); }\n    if (allowEmpty && this$1.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n      break\n    } else if (this$1.type === types.ellipsis) {\n      var rest = this$1.parseRestBinding();\n      this$1.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n      this$1.expect(close);\n      break\n    } else {\n      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);\n      this$1.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\npp$2.checkLVal = function(expr, bindingType, checkClashes) {\n  var this$1 = this;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n      checkClashes[expr.name] = true;\n    }\n    if (bindingType && bindingType !== \"none\") {\n      if (\n        bindingType === \"var\" && !this.canDeclareVarName(expr.name) ||\n        bindingType !== \"var\" && !this.canDeclareLexicalName(expr.name)\n      ) {\n        this.raiseRecoverable(expr.start, (\"Identifier '\" + (expr.name) + \"' has already been declared\"));\n      }\n      if (bindingType === \"var\") {\n        this.declareVarName(expr.name);\n      } else {\n        this.declareLexicalName(expr.name);\n      }\n    }\n    break\n\n  case \"MemberExpression\":\n    if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1)\n      {\n    var prop = list[i];\n\n    this$1.checkLVal(prop, bindingType, checkClashes);\n  }\n    break\n\n  case \"Property\":\n    // AssignmentProperty has type == \"Property\"\n    this.checkLVal(expr.value, bindingType, checkClashes);\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this$1.checkLVal(elem, bindingType, checkClashes); }\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, bindingType, checkClashes);\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, bindingType, checkClashes);\n    break\n\n  default:\n    this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }\n        // Backwards-compat kludge. Can be removed in version 6.0\n        else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) { return this.parseYield() }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type == types.parenL || this.type == types.name)\n    { this.potentialArrowAt = this.start; }\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n    if (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }\n    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start == startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.inAsync && this.isContextual(\"await\")) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLVal(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.operator = this$1.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  else\n    { return expr }\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var this$1 = this;\n\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd == base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n  for (var computed = (void 0);;) {\n    if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {\n      var node = this$1.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);\n      node.computed = !!computed;\n      if (computed) { this$1.expect(types.bracketR); }\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this$1.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos;\n      this$1.yieldPos = 0;\n      this$1.awaitPos = 0;\n      var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {\n        this$1.checkPatternErrors(refDestructuringErrors, false);\n        this$1.checkYieldAwaitInDefaultParams();\n        this$1.yieldPos = oldYieldPos;\n        this$1.awaitPos = oldAwaitPos;\n        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this$1.checkExpressionErrors(refDestructuringErrors, true);\n      this$1.yieldPos = oldYieldPos || this$1.yieldPos;\n      this$1.awaitPos = oldAwaitPos || this$1.awaitPos;\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      base = this$1.finishNode(node$1, \"CallExpression\");\n    } else if (this$1.type === types.backQuote) {\n      var node$2 = this$1.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this$1.parseTemplate({isTagged: true});\n      base = this$1.finishNode(node$2, \"TaggedTemplateExpression\");\n    } else {\n      return base\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  var node, canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.inFunction)\n      { this.raise(this.start, \"'super' outside of function or class\"); }\n    node = this.startNode();\n    this.next();\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super Arguments\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(this.type !== types.name);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n        id = this.parseIdent();\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, false)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    while (this.type !== types.parenR) {\n      first ? first = false : this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this$1.type === types.ellipsis) {\n        spreadStart = this$1.start;\n        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));\n        if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\" || containsEsc)\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); }\n    if (!this.inFunction)\n      { this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  var this$1 = this;\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this$1.expect(types.dollarBraceL);\n    node.expressions.push(this$1.parseExpression());\n    this$1.expect(types.braceR);\n    node.quasis.push(curElt = this$1.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var this$1 = this;\n\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this$1.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type != types.comma && this.type != types.braceR)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    this.checkUnreserved(prop.key);\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync) {\n  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.enterFunctionScope();\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = false;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));\n    node.body = this.parseBlock(false);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitFunctionScope();\n\n  if (this.strict && node.id) {\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    this.checkLVal(node.id, \"none\");\n  }\n  this.strict = oldStrict;\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var this$1 = this;\n\n  var nameHash = {};\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this$1.checkLVal(param, \"var\", allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this$1.type === types.comma)\n      { elt = null; }\n    else if (this$1.type === types.ellipsis) {\n      elt = this$1.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this$1.start; }\n    } else {\n      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Can not use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Can not use 'await' as identifier inside an async function\"); }\n  if (this.isKeyword(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") != -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Can not use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") { liberal = false; }\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) { this.checkUnreserved(node); }\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function() {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type == types.semi || this.canInsertSemicolon() || (this.type != types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\n// Object.assign polyfill\nvar assign = Object.assign || function(target) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  for (var i = 0, list = sources; i < list.length; i += 1) {\n    var source = list[i];\n\n    for (var key in source) {\n      if (has(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterFunctionScope = function() {\n  // var: a hash of var-declared names in the current lexical scope\n  // lexical: a hash of lexically-declared names in the current lexical scope\n  // childVar: a hash of var-declared names in all child lexical scopes of the current lexical scope (within the current function scope)\n  // parentLexical: a hash of lexically-declared names in all parent lexical scopes of the current lexical scope (within the current function scope)\n  this.scopeStack.push({var: {}, lexical: {}, childVar: {}, parentLexical: {}});\n};\n\npp$5.exitFunctionScope = function() {\n  this.scopeStack.pop();\n};\n\npp$5.enterLexicalScope = function() {\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n  var childScope = {var: {}, lexical: {}, childVar: {}, parentLexical: {}};\n\n  this.scopeStack.push(childScope);\n  assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);\n};\n\npp$5.exitLexicalScope = function() {\n  var childScope = this.scopeStack.pop();\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  assign(parentScope.childVar, childScope.var, childScope.childVar);\n};\n\n/**\n * A name can be declared with `var` if there are no variables with the same name declared with `let`/`const`\n * in the current lexical scope or any of the parent lexical scopes in this function.\n */\npp$5.canDeclareVarName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name)\n};\n\n/**\n * A name can be declared with `let`/`const` if there are no variables with the same name declared with `let`/`const`\n * in the current scope, and there are no variables with the same name declared with `var` in the current scope or in\n * any child lexical scopes in this function.\n */\npp$5.canDeclareLexicalName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name)\n};\n\npp$5.declareVarName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].var[name] = true;\n};\n\npp$5.declareLexicalName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType == types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType == types.arrow)\n    { return true }\n  if (prevType == types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType == types._var || prevType == types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  var this$1 = this;\n\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this$1.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType == types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType == types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6) {\n    if (this.value == \"of\" && !this.exprAllowed ||\n        this.value == \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\nvar data = {\n  \"$LONE\": [\n    \"ASCII\",\n    \"ASCII_Hex_Digit\",\n    \"AHex\",\n    \"Alphabetic\",\n    \"Alpha\",\n    \"Any\",\n    \"Assigned\",\n    \"Bidi_Control\",\n    \"Bidi_C\",\n    \"Bidi_Mirrored\",\n    \"Bidi_M\",\n    \"Case_Ignorable\",\n    \"CI\",\n    \"Cased\",\n    \"Changes_When_Casefolded\",\n    \"CWCF\",\n    \"Changes_When_Casemapped\",\n    \"CWCM\",\n    \"Changes_When_Lowercased\",\n    \"CWL\",\n    \"Changes_When_NFKC_Casefolded\",\n    \"CWKCF\",\n    \"Changes_When_Titlecased\",\n    \"CWT\",\n    \"Changes_When_Uppercased\",\n    \"CWU\",\n    \"Dash\",\n    \"Default_Ignorable_Code_Point\",\n    \"DI\",\n    \"Deprecated\",\n    \"Dep\",\n    \"Diacritic\",\n    \"Dia\",\n    \"Emoji\",\n    \"Emoji_Component\",\n    \"Emoji_Modifier\",\n    \"Emoji_Modifier_Base\",\n    \"Emoji_Presentation\",\n    \"Extender\",\n    \"Ext\",\n    \"Grapheme_Base\",\n    \"Gr_Base\",\n    \"Grapheme_Extend\",\n    \"Gr_Ext\",\n    \"Hex_Digit\",\n    \"Hex\",\n    \"IDS_Binary_Operator\",\n    \"IDSB\",\n    \"IDS_Trinary_Operator\",\n    \"IDST\",\n    \"ID_Continue\",\n    \"IDC\",\n    \"ID_Start\",\n    \"IDS\",\n    \"Ideographic\",\n    \"Ideo\",\n    \"Join_Control\",\n    \"Join_C\",\n    \"Logical_Order_Exception\",\n    \"LOE\",\n    \"Lowercase\",\n    \"Lower\",\n    \"Math\",\n    \"Noncharacter_Code_Point\",\n    \"NChar\",\n    \"Pattern_Syntax\",\n    \"Pat_Syn\",\n    \"Pattern_White_Space\",\n    \"Pat_WS\",\n    \"Quotation_Mark\",\n    \"QMark\",\n    \"Radical\",\n    \"Regional_Indicator\",\n    \"RI\",\n    \"Sentence_Terminal\",\n    \"STerm\",\n    \"Soft_Dotted\",\n    \"SD\",\n    \"Terminal_Punctuation\",\n    \"Term\",\n    \"Unified_Ideograph\",\n    \"UIdeo\",\n    \"Uppercase\",\n    \"Upper\",\n    \"Variation_Selector\",\n    \"VS\",\n    \"White_Space\",\n    \"space\",\n    \"XID_Continue\",\n    \"XIDC\",\n    \"XID_Start\",\n    \"XIDS\"\n  ],\n  \"General_Category\": [\n    \"Cased_Letter\",\n    \"LC\",\n    \"Close_Punctuation\",\n    \"Pe\",\n    \"Connector_Punctuation\",\n    \"Pc\",\n    \"Control\",\n    \"Cc\",\n    \"cntrl\",\n    \"Currency_Symbol\",\n    \"Sc\",\n    \"Dash_Punctuation\",\n    \"Pd\",\n    \"Decimal_Number\",\n    \"Nd\",\n    \"digit\",\n    \"Enclosing_Mark\",\n    \"Me\",\n    \"Final_Punctuation\",\n    \"Pf\",\n    \"Format\",\n    \"Cf\",\n    \"Initial_Punctuation\",\n    \"Pi\",\n    \"Letter\",\n    \"L\",\n    \"Letter_Number\",\n    \"Nl\",\n    \"Line_Separator\",\n    \"Zl\",\n    \"Lowercase_Letter\",\n    \"Ll\",\n    \"Mark\",\n    \"M\",\n    \"Combining_Mark\",\n    \"Math_Symbol\",\n    \"Sm\",\n    \"Modifier_Letter\",\n    \"Lm\",\n    \"Modifier_Symbol\",\n    \"Sk\",\n    \"Nonspacing_Mark\",\n    \"Mn\",\n    \"Number\",\n    \"N\",\n    \"Open_Punctuation\",\n    \"Ps\",\n    \"Other\",\n    \"C\",\n    \"Other_Letter\",\n    \"Lo\",\n    \"Other_Number\",\n    \"No\",\n    \"Other_Punctuation\",\n    \"Po\",\n    \"Other_Symbol\",\n    \"So\",\n    \"Paragraph_Separator\",\n    \"Zp\",\n    \"Private_Use\",\n    \"Co\",\n    \"Punctuation\",\n    \"P\",\n    \"punct\",\n    \"Separator\",\n    \"Z\",\n    \"Space_Separator\",\n    \"Zs\",\n    \"Spacing_Mark\",\n    \"Mc\",\n    \"Surrogate\",\n    \"Cs\",\n    \"Symbol\",\n    \"S\",\n    \"Titlecase_Letter\",\n    \"Lt\",\n    \"Unassigned\",\n    \"Cn\",\n    \"Uppercase_Letter\",\n    \"Lu\"\n  ],\n  \"Script\": [\n    \"Adlam\",\n    \"Adlm\",\n    \"Ahom\",\n    \"Anatolian_Hieroglyphs\",\n    \"Hluw\",\n    \"Arabic\",\n    \"Arab\",\n    \"Armenian\",\n    \"Armn\",\n    \"Avestan\",\n    \"Avst\",\n    \"Balinese\",\n    \"Bali\",\n    \"Bamum\",\n    \"Bamu\",\n    \"Bassa_Vah\",\n    \"Bass\",\n    \"Batak\",\n    \"Batk\",\n    \"Bengali\",\n    \"Beng\",\n    \"Bhaiksuki\",\n    \"Bhks\",\n    \"Bopomofo\",\n    \"Bopo\",\n    \"Brahmi\",\n    \"Brah\",\n    \"Braille\",\n    \"Brai\",\n    \"Buginese\",\n    \"Bugi\",\n    \"Buhid\",\n    \"Buhd\",\n    \"Canadian_Aboriginal\",\n    \"Cans\",\n    \"Carian\",\n    \"Cari\",\n    \"Caucasian_Albanian\",\n    \"Aghb\",\n    \"Chakma\",\n    \"Cakm\",\n    \"Cham\",\n    \"Cherokee\",\n    \"Cher\",\n    \"Common\",\n    \"Zyyy\",\n    \"Coptic\",\n    \"Copt\",\n    \"Qaac\",\n    \"Cuneiform\",\n    \"Xsux\",\n    \"Cypriot\",\n    \"Cprt\",\n    \"Cyrillic\",\n    \"Cyrl\",\n    \"Deseret\",\n    \"Dsrt\",\n    \"Devanagari\",\n    \"Deva\",\n    \"Duployan\",\n    \"Dupl\",\n    \"Egyptian_Hieroglyphs\",\n    \"Egyp\",\n    \"Elbasan\",\n    \"Elba\",\n    \"Ethiopic\",\n    \"Ethi\",\n    \"Georgian\",\n    \"Geor\",\n    \"Glagolitic\",\n    \"Glag\",\n    \"Gothic\",\n    \"Goth\",\n    \"Grantha\",\n    \"Gran\",\n    \"Greek\",\n    \"Grek\",\n    \"Gujarati\",\n    \"Gujr\",\n    \"Gurmukhi\",\n    \"Guru\",\n    \"Han\",\n    \"Hani\",\n    \"Hangul\",\n    \"Hang\",\n    \"Hanunoo\",\n    \"Hano\",\n    \"Hatran\",\n    \"Hatr\",\n    \"Hebrew\",\n    \"Hebr\",\n    \"Hiragana\",\n    \"Hira\",\n    \"Imperial_Aramaic\",\n    \"Armi\",\n    \"Inherited\",\n    \"Zinh\",\n    \"Qaai\",\n    \"Inscriptional_Pahlavi\",\n    \"Phli\",\n    \"Inscriptional_Parthian\",\n    \"Prti\",\n    \"Javanese\",\n    \"Java\",\n    \"Kaithi\",\n    \"Kthi\",\n    \"Kannada\",\n    \"Knda\",\n    \"Katakana\",\n    \"Kana\",\n    \"Kayah_Li\",\n    \"Kali\",\n    \"Kharoshthi\",\n    \"Khar\",\n    \"Khmer\",\n    \"Khmr\",\n    \"Khojki\",\n    \"Khoj\",\n    \"Khudawadi\",\n    \"Sind\",\n    \"Lao\",\n    \"Laoo\",\n    \"Latin\",\n    \"Latn\",\n    \"Lepcha\",\n    \"Lepc\",\n    \"Limbu\",\n    \"Limb\",\n    \"Linear_A\",\n    \"Lina\",\n    \"Linear_B\",\n    \"Linb\",\n    \"Lisu\",\n    \"Lycian\",\n    \"Lyci\",\n    \"Lydian\",\n    \"Lydi\",\n    \"Mahajani\",\n    \"Mahj\",\n    \"Malayalam\",\n    \"Mlym\",\n    \"Mandaic\",\n    \"Mand\",\n    \"Manichaean\",\n    \"Mani\",\n    \"Marchen\",\n    \"Marc\",\n    \"Masaram_Gondi\",\n    \"Gonm\",\n    \"Meetei_Mayek\",\n    \"Mtei\",\n    \"Mende_Kikakui\",\n    \"Mend\",\n    \"Meroitic_Cursive\",\n    \"Merc\",\n    \"Meroitic_Hieroglyphs\",\n    \"Mero\",\n    \"Miao\",\n    \"Plrd\",\n    \"Modi\",\n    \"Mongolian\",\n    \"Mong\",\n    \"Mro\",\n    \"Mroo\",\n    \"Multani\",\n    \"Mult\",\n    \"Myanmar\",\n    \"Mymr\",\n    \"Nabataean\",\n    \"Nbat\",\n    \"New_Tai_Lue\",\n    \"Talu\",\n    \"Newa\",\n    \"Nko\",\n    \"Nkoo\",\n    \"Nushu\",\n    \"Nshu\",\n    \"Ogham\",\n    \"Ogam\",\n    \"Ol_Chiki\",\n    \"Olck\",\n    \"Old_Hungarian\",\n    \"Hung\",\n    \"Old_Italic\",\n    \"Ital\",\n    \"Old_North_Arabian\",\n    \"Narb\",\n    \"Old_Permic\",\n    \"Perm\",\n    \"Old_Persian\",\n    \"Xpeo\",\n    \"Old_South_Arabian\",\n    \"Sarb\",\n    \"Old_Turkic\",\n    \"Orkh\",\n    \"Oriya\",\n    \"Orya\",\n    \"Osage\",\n    \"Osge\",\n    \"Osmanya\",\n    \"Osma\",\n    \"Pahawh_Hmong\",\n    \"Hmng\",\n    \"Palmyrene\",\n    \"Palm\",\n    \"Pau_Cin_Hau\",\n    \"Pauc\",\n    \"Phags_Pa\",\n    \"Phag\",\n    \"Phoenician\",\n    \"Phnx\",\n    \"Psalter_Pahlavi\",\n    \"Phlp\",\n    \"Rejang\",\n    \"Rjng\",\n    \"Runic\",\n    \"Runr\",\n    \"Samaritan\",\n    \"Samr\",\n    \"Saurashtra\",\n    \"Saur\",\n    \"Sharada\",\n    \"Shrd\",\n    \"Shavian\",\n    \"Shaw\",\n    \"Siddham\",\n    \"Sidd\",\n    \"SignWriting\",\n    \"Sgnw\",\n    \"Sinhala\",\n    \"Sinh\",\n    \"Sora_Sompeng\",\n    \"Sora\",\n    \"Soyombo\",\n    \"Soyo\",\n    \"Sundanese\",\n    \"Sund\",\n    \"Syloti_Nagri\",\n    \"Sylo\",\n    \"Syriac\",\n    \"Syrc\",\n    \"Tagalog\",\n    \"Tglg\",\n    \"Tagbanwa\",\n    \"Tagb\",\n    \"Tai_Le\",\n    \"Tale\",\n    \"Tai_Tham\",\n    \"Lana\",\n    \"Tai_Viet\",\n    \"Tavt\",\n    \"Takri\",\n    \"Takr\",\n    \"Tamil\",\n    \"Taml\",\n    \"Tangut\",\n    \"Tang\",\n    \"Telugu\",\n    \"Telu\",\n    \"Thaana\",\n    \"Thaa\",\n    \"Thai\",\n    \"Tibetan\",\n    \"Tibt\",\n    \"Tifinagh\",\n    \"Tfng\",\n    \"Tirhuta\",\n    \"Tirh\",\n    \"Ugaritic\",\n    \"Ugar\",\n    \"Vai\",\n    \"Vaii\",\n    \"Warang_Citi\",\n    \"Wara\",\n    \"Yi\",\n    \"Yiii\",\n    \"Zanabazar_Square\",\n    \"Zanb\"\n  ]\n};\nArray.prototype.push.apply(data.$LONE, data.General_Category);\ndata.gc = data.General_Category;\ndata.sc = data.Script_Extensions = data.scx = data.Script;\n\nvar pp$9 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current () {\n  return this.at(this.pos)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead () {\n  return this.at(this.nextIndex(this.pos))\n};\n\nRegExpValidationState.prototype.advance = function advance () {\n  this.pos = this.nextIndex(this.pos);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch) {\n  if (this.current() === ch) {\n    this.advance();\n    return true\n  }\n  return false\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpFlags = function(state) {\n  var this$1 = this;\n\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) == -1) {\n      this$1.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this$1.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$9.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$9.regexp_disjunction = function(state) {\n  var this$1 = this;\n\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this$1.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$9.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    {  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$9.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$9.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$9.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$9.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$9.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$9.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$9.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$9.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$9.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$9.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$9.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$9.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier[U] ::\n//   [empty]\n//   `?` GroupName[?U]\npp$9.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName[U] ::\n//   `<` RegExpIdentifierName[?U] `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName[U] ::\n//   RegExpIdentifierStart[?U]\n//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart[U] ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\npp$9.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart[U] ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n//   <ZWNJ>\n//   <ZWJ>\npp$9.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$9.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$9.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$9.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$9.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$9.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$9.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$9.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      state.switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$9.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$9.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$9.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$9.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$9.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!data.hasOwnProperty(name) || data[name].indexOf(value) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\npp$9.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (data.$LONE.indexOf(nameOrValue) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$9.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$9.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* [ */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$9.regexp_classRanges = function(state) {\n  var this$1 = this;\n\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this$1.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$9.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* [ */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$9.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$9.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$9.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$9.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$9.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$9.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$8 = Parser.prototype;\n\n// Move to the next token\n\npp$8.next = function() {\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$8.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$8[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$8.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$8.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$8.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$8.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$8.skipBlockComment = function() {\n  var this$1 = this;\n\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this$1.curLine;\n      this$1.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$8.skipLineComment = function(startSkip) {\n  var this$1 = this;\n\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this$1.input.charCodeAt(++this$1.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$8.skipSpace = function() {\n  var this$1 = this;\n\n  loop: while (this.pos < this.input.length) {\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this$1.pos;\n      break\n    case 13:\n      if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n        ++this$1.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this$1.pos;\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n      case 42: // '*'\n        this$1.skipBlockComment();\n        break\n      case 47:\n        this$1.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this$1.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$8.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$8.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$8.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$8.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code == 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$8.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$8.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$8.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$8.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next == 33 && code == 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 45 &&\n      this.input.charCodeAt(this.pos + 3) == 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$8.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$8.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n  case 63: ++this.pos; return this.finishToken(types.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp$8.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$8.readRegexp = function() {\n  var this$1 = this;\n\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(start, \"Unterminated regular expression\"); }\n    var ch = this$1.input.charAt(this$1.pos);\n    if (lineBreak.test(ch)) { this$1.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this$1.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$8.readInt = function(radix, len) {\n  var this$1 = this;\n\n  var start = this.pos, total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this$1.input.charCodeAt(this$1.pos), val = (void 0);\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    ++this$1.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\npp$8.readRadixNumber = function(radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$8.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var str = this.input.slice(start, this.pos);\n  var val = octal ? parseInt(str, 8) : parseFloat(str);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$8.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$8.readString = function(quote) {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(false);\n      chunkStart = this$1.pos;\n    } else {\n      if (isNewLine(ch)) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n      ++this$1.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$8.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$8.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$8.readTmplToken = function() {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated template\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this$1.pos += 2;\n          return this$1.finishToken(types.dollarBraceL)\n        } else {\n          ++this$1.pos;\n          return this$1.finishToken(types.backQuote)\n        }\n      }\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      return this$1.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(true);\n      chunkStart = this$1.pos;\n    } else if (isNewLine(ch)) {\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      ++this$1.pos;\n      switch (ch) {\n      case 13:\n        if (this$1.input.charCodeAt(this$1.pos) === 10) { ++this$1.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      chunkStart = this$1.pos;\n    } else {\n      ++this$1.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$8.readInvalidTemplateToken = function() {\n  var this$1 = this;\n\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this$1.input[this$1.pos]) {\n    case \"\\\\\":\n      ++this$1.pos;\n      break\n\n    case \"$\":\n      if (this$1.input[this$1.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$8.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch == 56 || ch == 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$8.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$8.readWord1 = function() {\n  var this$1 = this;\n\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this$1.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this$1.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this$1.containsEsc = true;\n      word += this$1.input.slice(chunkStart, this$1.pos);\n      var escStart = this$1.pos;\n      if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n        { this$1.invalidStringToken(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this$1.pos;\n      var esc = this$1.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this$1.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this$1.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$8.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word); }\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nvar version = \"5.5.3\";\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new Parser(options, input)\n}\n\n// This is a terrible kludge to support the existing, pre-ES6\n// interface where the loose parser module retroactively adds exports\n// to this module.\nvar parse_dammit;\nvar LooseParser;\nvar pluginsLoose; // eslint-disable-line camelcase\nfunction addLooseExports(parse, Parser$$1, plugins$$1) {\n  parse_dammit = parse; // eslint-disable-line camelcase\n  LooseParser = Parser$$1;\n  pluginsLoose = plugins$$1;\n}\n\nexport { version, parse, parseExpressionAt, tokenizer, parse_dammit, LooseParser, pluginsLoose, addLooseExports, Parser, plugins, defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, types as tokTypes, keywords$1 as keywordTypes, TokContext, types$1 as tokContexts, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };\n","import { parseExpressionAt } from 'acorn';\nimport { Parser } from '../index';\n\nconst literals = new Map([['true', true], ['false', false], ['null', null]]);\n\nexport default function readExpression(parser: Parser) {\n\tconst start = parser.index;\n\n\tconst name = parser.readUntil(/\\s*}}/);\n\tif (name && /^[a-z]+$/.test(name)) {\n\t\tconst end = start + name.length;\n\n\t\tif (literals.has(name)) {\n\t\t\treturn {\n\t\t\t\ttype: 'Literal',\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tvalue: literals.get(name),\n\t\t\t\traw: name,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\ttype: 'Identifier',\n\t\t\tstart,\n\t\t\tend: start + name.length,\n\t\t\tname,\n\t\t};\n\t}\n\n\tparser.index = start;\n\n\ttry {\n\t\tconst node = parseExpressionAt(parser.template, parser.index, {\n\t\t\tecmaVersion: 9,\n\t\t\tpreserveParens: true,\n\t\t});\n\t\tparser.index = node.end;\n\n\t\treturn node;\n\t} catch (err) {\n\t\tparser.acornError(err);\n\t}\n}\n","/* eslint-disable no-underscore-dangle */\n\nexport default function injectDynamicImport(acorn) {\n  const tt = acorn.tokTypes;\n\n  // NOTE: This allows `yield import()` to parse correctly.\n  tt._import.startsExpr = true;\n\n  function parseDynamicImport() {\n    const node = this.startNode();\n    this.next();\n    if (this.type !== tt.parenL) {\n      this.unexpected();\n    }\n    return this.finishNode(node, 'Import');\n  }\n\n  function peekNext() {\n    return this.input[this.pos];\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  acorn.plugins.dynamicImport = function dynamicImportPlugin(instance) {\n    instance.extend('parseStatement', nextMethod => (\n      function parseStatement(...args) {\n        const node = this.startNode();\n        if (this.type === tt._import) {\n          const nextToken = peekNext.call(this);\n          if (nextToken === tt.parenL.label) {\n            const expr = this.parseExpression();\n            return this.parseExpressionStatement(node, expr);\n          }\n        }\n\n        return nextMethod.apply(this, args);\n      }\n    ));\n\n    instance.extend('parseExprAtom', nextMethod => (\n      function parseExprAtom(refDestructuringErrors) {\n        if (this.type === tt._import) {\n          return parseDynamicImport.call(this);\n        }\n        return nextMethod.call(this, refDestructuringErrors);\n      }\n    ));\n  };\n\n  return acorn;\n}\n","export default function repeat(str: string, i: number) {\n\tlet result = '';\n\twhile (i--) result += str;\n\treturn result;\n}\n","import * as acorn from 'acorn';\nimport injectDynamicImport from 'acorn-dynamic-import/src/inject';\nimport repeat from '../../utils/repeat';\nimport { Parser } from '../index';\nimport { Node } from '../../interfaces';\n\nconst scriptClosingTag = '</script>';\n\ninjectDynamicImport(acorn);\n\nexport default function readScript(parser: Parser, start: number, attributes: Node[]) {\n\tconst scriptStart = parser.index;\n\tconst scriptEnd = parser.template.indexOf(scriptClosingTag, scriptStart);\n\n\tif (scriptEnd === -1) parser.error(`<script> must have a closing tag`);\n\n\tconst source =\n\t\trepeat(' ', scriptStart) + parser.template.slice(scriptStart, scriptEnd);\n\tparser.index = scriptEnd + scriptClosingTag.length;\n\n\tlet ast;\n\n\ttry {\n\t\tast = acorn.parse(source, {\n\t\t\tecmaVersion: 9,\n\t\t\tsourceType: 'module',\n\t\t\tplugins: {\n\t\t\t\tdynamicImport: true\n\t\t\t}\n\t\t});\n\t} catch (err) {\n\t\tparser.acornError(err);\n\t}\n\n\tif (!ast.body.length) return null;\n\n\tast.start = scriptStart;\n\treturn {\n\t\tstart,\n\t\tend: parser.index,\n\t\tattributes,\n\t\tcontent: ast,\n\t};\n}\n","'use strict';\n\nvar MAX_LINE_LENGTH = 100;\nvar OFFSET_CORRECTION = 60;\nvar TAB_REPLACEMENT = '    ';\n\nfunction sourceFragment(error, extraLines) {\n    function processLines(start, end) {\n        return lines.slice(start, end).map(function(line, idx) {\n            var num = String(start + idx + 1);\n\n            while (num.length < maxNumLength) {\n                num = ' ' + num;\n            }\n\n            return num + ' |' + line;\n        }).join('\\n');\n    }\n\n    var lines = error.source.split(/\\n|\\r\\n?|\\f/);\n    var line = error.line;\n    var column = error.column;\n    var startLine = Math.max(1, line - extraLines) - 1;\n    var endLine = Math.min(line + extraLines, lines.length + 1);\n    var maxNumLength = Math.max(4, String(endLine).length) + 1;\n    var cutLeft = 0;\n\n    // correct column according to replaced tab before column\n    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\\t/g) || []).length;\n\n    if (column > MAX_LINE_LENGTH) {\n        cutLeft = column - OFFSET_CORRECTION + 3;\n        column = OFFSET_CORRECTION - 2;\n    }\n\n    for (var i = startLine; i <= endLine; i++) {\n        if (i >= 0 && i < lines.length) {\n            lines[i] = lines[i].replace(/\\t/g, TAB_REPLACEMENT);\n            lines[i] =\n                (cutLeft > 0 && lines[i].length > cutLeft ? '\\u2026' : '') +\n                lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +\n                (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\\u2026' : '');\n        }\n    }\n\n    return [\n        processLines(startLine, line),\n        new Array(column + maxNumLength + 2).join('-') + '^',\n        processLines(line, endLine)\n    ].join('\\n');\n}\n\nvar CssSyntaxError = function(message, source, offset, line, column) {\n    // some VMs prevent setting line/column otherwise (iOS Safari 10 even throw an exception)\n    var error = Object.create(SyntaxError.prototype);\n\n    error.name = 'CssSyntaxError';\n    error.message = message;\n    error.stack = (new Error().stack || '').replace(/^.+\\n/, error.name + ': ' + error.message + '\\n');\n    error.source = source;\n    error.offset = offset;\n    error.line = line;\n    error.column = column;\n\n    error.sourceFragment = function(extraLines) {\n        return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);\n    };\n    Object.defineProperty(error, 'formattedMessage', {\n        get: function() {\n            return (\n                'Parse error: ' + error.message + '\\n' +\n                sourceFragment(error, 2)\n            );\n        }\n    });\n\n    // for backward capability\n    error.parseError = {\n        offset: offset,\n        line: line,\n        column: column\n    };\n\n    return error;\n};\n\nmodule.exports = CssSyntaxError;\n","'use strict';\n\n// token types (note: value shouldn't intersect with used char codes)\nvar WHITESPACE = 1;\nvar IDENTIFIER = 2;\nvar NUMBER = 3;\nvar STRING = 4;\nvar COMMENT = 5;\nvar PUNCTUATOR = 6;\nvar CDO = 7;\nvar CDC = 8;\nvar ATRULE = 14;\nvar FUNCTION = 15;\nvar URL = 16;\nvar RAW = 17;\n\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\n\nvar TYPE = {\n    WhiteSpace:   WHITESPACE,\n    Identifier:   IDENTIFIER,\n    Number:           NUMBER,\n    String:           STRING,\n    Comment:         COMMENT,\n    Punctuator:   PUNCTUATOR,\n    CDO:                 CDO,\n    CDC:                 CDC,\n    Atrule:           ATRULE,\n    Function:       FUNCTION,\n    Url:                 URL,\n    Raw:                 RAW,\n\n    ExclamationMark:      33,  // !\n    QuotationMark:        34,  // \"\n    NumberSign:           35,  // #\n    DollarSign:           36,  // $\n    PercentSign:          37,  // %\n    Ampersand:            38,  // &\n    Apostrophe:           39,  // '\n    LeftParenthesis:      40,  // (\n    RightParenthesis:     41,  // )\n    Asterisk:             42,  // *\n    PlusSign:             43,  // +\n    Comma:                44,  // ,\n    HyphenMinus:          45,  // -\n    FullStop:             46,  // .\n    Solidus:              47,  // /\n    Colon:                58,  // :\n    Semicolon:            59,  // ;\n    LessThanSign:         60,  // <\n    EqualsSign:           61,  // =\n    GreaterThanSign:      62,  // >\n    QuestionMark:         63,  // ?\n    CommercialAt:         64,  // @\n    LeftSquareBracket:    91,  // [\n    Backslash:            92,  // \\\n    RightSquareBracket:   93,  // ]\n    CircumflexAccent:     94,  // ^\n    LowLine:              95,  // _\n    GraveAccent:          96,  // `\n    LeftCurlyBracket:    123,  // {\n    VerticalLine:        124,  // |\n    RightCurlyBracket:   125,  // }\n    Tilde:               126   // ~\n};\n\nvar NAME = Object.keys(TYPE).reduce(function(result, key) {\n    result[TYPE[key]] = key;\n    return result;\n}, {});\n\n// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we a maps for 0..127 codes only\nvar SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported\nvar SYMBOL_TYPE = new SafeUint32Array(0x80);\nvar PUNCTUATION = new SafeUint32Array(0x80);\nvar STOP_URL_RAW = new SafeUint32Array(0x80);\n\nfor (var i = 0; i < SYMBOL_TYPE.length; i++) {\n    SYMBOL_TYPE[i] = IDENTIFIER;\n}\n\n// fill categories\n[\n    TYPE.ExclamationMark,    // !\n    TYPE.QuotationMark,      // \"\n    TYPE.NumberSign,         // #\n    TYPE.DollarSign,         // $\n    TYPE.PercentSign,        // %\n    TYPE.Ampersand,          // &\n    TYPE.Apostrophe,         // '\n    TYPE.LeftParenthesis,    // (\n    TYPE.RightParenthesis,   // )\n    TYPE.Asterisk,           // *\n    TYPE.PlusSign,           // +\n    TYPE.Comma,              // ,\n    TYPE.HyphenMinus,        // -\n    TYPE.FullStop,           // .\n    TYPE.Solidus,            // /\n    TYPE.Colon,              // :\n    TYPE.Semicolon,          // ;\n    TYPE.LessThanSign,       // <\n    TYPE.EqualsSign,         // =\n    TYPE.GreaterThanSign,    // >\n    TYPE.QuestionMark,       // ?\n    TYPE.CommercialAt,       // @\n    TYPE.LeftSquareBracket,  // [\n    // TYPE.Backslash,          // \\\n    TYPE.RightSquareBracket, // ]\n    TYPE.CircumflexAccent,   // ^\n    // TYPE.LowLine,            // _\n    TYPE.GraveAccent,        // `\n    TYPE.LeftCurlyBracket,   // {\n    TYPE.VerticalLine,       // |\n    TYPE.RightCurlyBracket,  // }\n    TYPE.Tilde               // ~\n].forEach(function(key) {\n    SYMBOL_TYPE[Number(key)] = PUNCTUATOR;\n    PUNCTUATION[Number(key)] = PUNCTUATOR;\n});\n\nfor (var i = 48; i <= 57; i++) {\n    SYMBOL_TYPE[i] = NUMBER;\n}\n\nSYMBOL_TYPE[SPACE] = WHITESPACE;\nSYMBOL_TYPE[TAB] = WHITESPACE;\nSYMBOL_TYPE[N] = WHITESPACE;\nSYMBOL_TYPE[R] = WHITESPACE;\nSYMBOL_TYPE[F] = WHITESPACE;\n\nSYMBOL_TYPE[TYPE.Apostrophe] = STRING;\nSYMBOL_TYPE[TYPE.QuotationMark] = STRING;\n\nSTOP_URL_RAW[SPACE] = 1;\nSTOP_URL_RAW[TAB] = 1;\nSTOP_URL_RAW[N] = 1;\nSTOP_URL_RAW[R] = 1;\nSTOP_URL_RAW[F] = 1;\nSTOP_URL_RAW[TYPE.Apostrophe] = 1;\nSTOP_URL_RAW[TYPE.QuotationMark] = 1;\nSTOP_URL_RAW[TYPE.LeftParenthesis] = 1;\nSTOP_URL_RAW[TYPE.RightParenthesis] = 1;\n\n// whitespace is punctuation ...\nPUNCTUATION[SPACE] = PUNCTUATOR;\nPUNCTUATION[TAB] = PUNCTUATOR;\nPUNCTUATION[N] = PUNCTUATOR;\nPUNCTUATION[R] = PUNCTUATOR;\nPUNCTUATION[F] = PUNCTUATOR;\n// ... hyper minus is not\nPUNCTUATION[TYPE.HyphenMinus] = 0;\n\nmodule.exports = {\n    TYPE: TYPE,\n    NAME: NAME,\n\n    SYMBOL_TYPE: SYMBOL_TYPE,\n    PUNCTUATION: PUNCTUATION,\n    STOP_URL_RAW: STOP_URL_RAW\n};\n","'use strict';\n\nvar constants = require('./const');\nvar PUNCTUATION = constants.PUNCTUATION;\nvar STOP_URL_RAW = constants.STOP_URL_RAW;\nvar TYPE = constants.TYPE;\nvar FULLSTOP = TYPE.FullStop;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar PUNCTUATOR = TYPE.Punctuator;\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\nvar BACK_SLASH = 92;\nvar E = 101; // 'e'.charCodeAt(0)\n\nfunction firstCharOffset(source) {\n    // detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\n    if (source.charCodeAt(0) === 0xFEFF ||  // UTF-16BE\n        source.charCodeAt(0) === 0xFFFE) {  // UTF-16LE\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction isHex(code) {\n    return (code >= 48 && code <= 57) || // 0 .. 9\n           (code >= 65 && code <= 70) || // A .. F\n           (code >= 97 && code <= 102);  // a .. f\n}\n\nfunction isNumber(code) {\n    return code >= 48 && code <= 57;\n}\n\nfunction isNewline(source, offset, code) {\n    if (code === N || code === F || code === R) {\n        if (code === R && offset + 1 < source.length && source.charCodeAt(offset + 1) === N) {\n            return 2;\n        }\n\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction cmpChar(testStr, offset, referenceCode) {\n    var code = testStr.charCodeAt(offset);\n\n    // code.toLowerCase()\n    if (code >= 65 && code <= 90) {\n        code = code | 32;\n    }\n\n    return code === referenceCode;\n}\n\nfunction cmpStr(testStr, start, end, referenceStr) {\n    if (end - start !== referenceStr.length) {\n        return false;\n    }\n\n    if (start < 0 || end > testStr.length) {\n        return false;\n    }\n\n    for (var i = start; i < end; i++) {\n        var testCode = testStr.charCodeAt(i);\n        var refCode = referenceStr.charCodeAt(i - start);\n\n        // testStr[i].toLowerCase()\n        if (testCode >= 65 && testCode <= 90) {\n            testCode = testCode | 32;\n        }\n\n        if (testCode !== refCode) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction endsWith(testStr, referenceStr) {\n    return cmpStr(testStr, testStr.length - referenceStr.length, testStr.length, referenceStr);\n}\n\nfunction findLastNonSpaceLocation(scanner) {\n    for (var i = scanner.source.length - 1; i >= 0; i--) {\n        var code = scanner.source.charCodeAt(i);\n\n        if (code !== SPACE && code !== TAB && code !== R && code !== N && code !== F) {\n            break;\n        }\n    }\n\n    return scanner.getLocation(i + 1);\n}\n\nfunction findWhiteSpaceEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code !== SPACE && code !== TAB && code !== R && code !== N && code !== F) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findCommentEnd(source, offset) {\n    var commentEnd = source.indexOf('*/', offset);\n\n    if (commentEnd === -1) {\n        return source.length;\n    }\n\n    return commentEnd + 2;\n}\n\nfunction findStringEnd(source, offset, quote) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        // TODO: bad string\n        if (code === BACK_SLASH) {\n            offset++;\n        } else if (code === quote) {\n            offset++;\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findDecimalNumberEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code < 48 || code > 57) {  // not a 0 .. 9\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findNumberEnd(source, offset, allowFraction) {\n    var code;\n\n    offset = findDecimalNumberEnd(source, offset);\n\n    // fraction: .\\d+\n    if (allowFraction && offset + 1 < source.length && source.charCodeAt(offset) === FULLSTOP) {\n        code = source.charCodeAt(offset + 1);\n\n        if (isNumber(code)) {\n            offset = findDecimalNumberEnd(source, offset + 1);\n        }\n    }\n\n    // exponent: e[+-]\\d+\n    if (offset + 1 < source.length) {\n        if ((source.charCodeAt(offset) | 32) === E) { // case insensitive check for `e`\n            code = source.charCodeAt(offset + 1);\n\n            if (code === PLUSSIGN || code === HYPHENMINUS) {\n                if (offset + 2 < source.length) {\n                    code = source.charCodeAt(offset + 2);\n                }\n            }\n\n            if (isNumber(code)) {\n                offset = findDecimalNumberEnd(source, offset + 2);\n            }\n        }\n    }\n\n    return offset;\n}\n\n// skip escaped unicode sequence that can ends with space\n// [0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?\nfunction findEscaseEnd(source, offset) {\n    for (var i = 0; i < 7 && offset + i < source.length; i++) {\n        var code = source.charCodeAt(offset + i);\n\n        if (i !== 6 && isHex(code)) {\n            continue;\n        }\n\n        if (i > 0) {\n            offset += i - 1 + isNewline(source, offset + i, code);\n            if (code === SPACE || code === TAB) {\n                offset++;\n            }\n        }\n\n        break;\n    }\n\n    return offset;\n}\n\nfunction findIdentifierEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code === BACK_SLASH) {\n            offset = findEscaseEnd(source, offset + 1);\n        } else if (code < 0x80 && PUNCTUATION[code] === PUNCTUATOR) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findUrlRawEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code === BACK_SLASH) {\n            offset = findEscaseEnd(source, offset + 1);\n        } else if (code < 0x80 && STOP_URL_RAW[code] === 1) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nmodule.exports = {\n    firstCharOffset: firstCharOffset,\n\n    isHex: isHex,\n    isNumber: isNumber,\n    isNewline: isNewline,\n\n    cmpChar: cmpChar,\n    cmpStr: cmpStr,\n    endsWith: endsWith,\n\n    findLastNonSpaceLocation: findLastNonSpaceLocation,\n    findWhiteSpaceEnd: findWhiteSpaceEnd,\n    findCommentEnd: findCommentEnd,\n    findStringEnd: findStringEnd,\n    findDecimalNumberEnd: findDecimalNumberEnd,\n    findNumberEnd: findNumberEnd,\n    findEscaseEnd: findEscaseEnd,\n    findIdentifierEnd: findIdentifierEnd,\n    findUrlRawEnd: findUrlRawEnd\n};\n","'use strict';\n\nvar CssSyntaxError = require('./error');\n\nvar constants = require('./const');\nvar TYPE = constants.TYPE;\nvar NAME = constants.NAME;\nvar SYMBOL_TYPE = constants.SYMBOL_TYPE;\n\nvar utils = require('./utils');\nvar firstCharOffset = utils.firstCharOffset;\nvar cmpStr = utils.cmpStr;\nvar isNumber = utils.isNumber;\nvar findLastNonSpaceLocation = utils.findLastNonSpaceLocation;\nvar findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\nvar findCommentEnd = utils.findCommentEnd;\nvar findStringEnd = utils.findStringEnd;\nvar findNumberEnd = utils.findNumberEnd;\nvar findIdentifierEnd = utils.findIdentifierEnd;\nvar findUrlRawEnd = utils.findUrlRawEnd;\n\nvar NULL = 0;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar STRING = TYPE.String;\nvar COMMENT = TYPE.Comment;\nvar PUNCTUATOR = TYPE.Punctuator;\nvar CDO = TYPE.CDO;\nvar CDC = TYPE.CDC;\nvar ATRULE = TYPE.Atrule;\nvar FUNCTION = TYPE.Function;\nvar URL = TYPE.Url;\nvar RAW = TYPE.Raw;\n\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar STAR = TYPE.Asterisk;\nvar SLASH = TYPE.Solidus;\nvar FULLSTOP = TYPE.FullStop;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar GREATERTHANSIGN = TYPE.GreaterThanSign;\nvar LESSTHANSIGN = TYPE.LessThanSign;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\nvar COMMERCIALAT = TYPE.CommercialAt;\nvar QUOTATIONMARK = TYPE.QuotationMark;\nvar APOSTROPHE = TYPE.Apostrophe;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\n\nvar MIN_BUFFER_SIZE = 16 * 1024;\nvar OFFSET_MASK = 0x00FFFFFF;\nvar TYPE_SHIFT = 24;\nvar SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported\n\nfunction computeLinesAndColumns(tokenizer, source) {\n    var sourceLength = source.length;\n    var start = firstCharOffset(source);\n    var lines = tokenizer.lines;\n    var line = tokenizer.startLine;\n    var columns = tokenizer.columns;\n    var column = tokenizer.startColumn;\n\n    if (lines === null || lines.length < sourceLength + 1) {\n        lines = new SafeUint32Array(Math.max(sourceLength + 1024, MIN_BUFFER_SIZE));\n        columns = new SafeUint32Array(lines.length);\n    }\n\n    for (var i = start; i < sourceLength; i++) {\n        var code = source.charCodeAt(i);\n\n        lines[i] = line;\n        columns[i] = column++;\n\n        if (code === N || code === R || code === F) {\n            if (code === R && i + 1 < sourceLength && source.charCodeAt(i + 1) === N) {\n                i++;\n                lines[i] = line;\n                columns[i] = column;\n            }\n\n            line++;\n            column = 1;\n        }\n    }\n\n    lines[i] = line;\n    columns[i] = column;\n\n    tokenizer.linesAnsColumnsComputed = true;\n    tokenizer.lines = lines;\n    tokenizer.columns = columns;\n}\n\nfunction tokenLayout(tokenizer, source, startPos) {\n    var sourceLength = source.length;\n    var offsetAndType = tokenizer.offsetAndType;\n    var balance = tokenizer.balance;\n    var tokenCount = 0;\n    var prevType = 0;\n    var offset = startPos;\n    var anchor = 0;\n    var balanceCloseCode = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    if (offsetAndType === null || offsetAndType.length < sourceLength + 1) {\n        offsetAndType = new SafeUint32Array(sourceLength + 1024);\n        balance = new SafeUint32Array(sourceLength + 1024);\n    }\n\n    while (offset < sourceLength) {\n        var code = source.charCodeAt(offset);\n        var type = code < 0x80 ? SYMBOL_TYPE[code] : IDENTIFIER;\n\n        balance[tokenCount] = sourceLength;\n\n        switch (type) {\n            case WHITESPACE:\n                offset = findWhiteSpaceEnd(source, offset + 1);\n                break;\n\n            case PUNCTUATOR:\n                switch (code) {\n                    case balanceCloseCode:\n                        balancePrev = balanceStart & OFFSET_MASK;\n                        balanceStart = balance[balancePrev];\n                        balanceCloseCode = balanceStart >> TYPE_SHIFT;\n                        balance[tokenCount] = balancePrev;\n                        balance[balancePrev++] = tokenCount;\n                        for (; balancePrev < tokenCount; balancePrev++) {\n                            if (balance[balancePrev] === sourceLength) {\n                                balance[balancePrev] = tokenCount;\n                            }\n                        }\n                        break;\n\n                    case LEFTSQUAREBRACKET:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTSQUAREBRACKET;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n\n                    case LEFTCURLYBRACKET:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTCURLYBRACKET;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n\n                    case LEFTPARENTHESIS:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTPARENTHESIS;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n                }\n\n                // /*\n                if (code === STAR && prevType === SLASH) {\n                    type = COMMENT;\n                    offset = findCommentEnd(source, offset + 1);\n                    tokenCount--; // rewrite prev token\n                    break;\n                }\n\n                // edge case for -.123 and +.123\n                if (code === FULLSTOP && (prevType === PLUSSIGN || prevType === HYPHENMINUS)) {\n                    if (offset + 1 < sourceLength && isNumber(source.charCodeAt(offset + 1))) {\n                        type = NUMBER;\n                        offset = findNumberEnd(source, offset + 2, false);\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // <!--\n                if (code === EXCLAMATIONMARK && prevType === LESSTHANSIGN) {\n                    if (offset + 2 < sourceLength &&\n                        source.charCodeAt(offset + 1) === HYPHENMINUS &&\n                        source.charCodeAt(offset + 2) === HYPHENMINUS) {\n                        type = CDO;\n                        offset = offset + 3;\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // -->\n                if (code === HYPHENMINUS && prevType === HYPHENMINUS) {\n                    if (offset + 1 < sourceLength && source.charCodeAt(offset + 1) === GREATERTHANSIGN) {\n                        type = CDC;\n                        offset = offset + 2;\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // ident(\n                if (code === LEFTPARENTHESIS && prevType === IDENTIFIER) {\n                    offset = offset + 1;\n                    tokenCount--; // rewrite prev token\n                    balance[tokenCount] = balance[tokenCount + 1];\n                    balanceStart--;\n\n                    // 4 char length identifier and equal to `url(` (case insensitive)\n                    if (offset - anchor === 4 && cmpStr(source, anchor, offset, 'url(')) {\n                        // special case for url() because it can contain any symbols sequence with few exceptions\n                        anchor = findWhiteSpaceEnd(source, offset);\n                        code = source.charCodeAt(anchor);\n                        if (code !== LEFTPARENTHESIS &&\n                            code !== RIGHTPARENTHESIS &&\n                            code !== QUOTATIONMARK &&\n                            code !== APOSTROPHE) {\n                            // url(\n                            offsetAndType[tokenCount++] = (URL << TYPE_SHIFT) | offset;\n                            balance[tokenCount] = sourceLength;\n\n                            // ws*\n                            if (anchor !== offset) {\n                                offsetAndType[tokenCount++] = (WHITESPACE << TYPE_SHIFT) | anchor;\n                                balance[tokenCount] = sourceLength;\n                            }\n\n                            // raw\n                            type = RAW;\n                            offset = findUrlRawEnd(source, anchor);\n                        } else {\n                            type = URL;\n                        }\n                    } else {\n                        type = FUNCTION;\n                    }\n                    break;\n                }\n\n                type = code;\n                offset = offset + 1;\n                break;\n\n            case NUMBER:\n                offset = findNumberEnd(source, offset + 1, prevType !== FULLSTOP);\n\n                // merge number with a preceding dot, dash or plus\n                if (prevType === FULLSTOP ||\n                    prevType === HYPHENMINUS ||\n                    prevType === PLUSSIGN) {\n                    tokenCount--; // rewrite prev token\n                }\n\n                break;\n\n            case STRING:\n                offset = findStringEnd(source, offset + 1, code);\n                break;\n\n            default:\n                anchor = offset;\n                offset = findIdentifierEnd(source, offset);\n\n                // merge identifier with a preceding dash\n                if (prevType === HYPHENMINUS) {\n                    // rewrite prev token\n                    tokenCount--;\n                    // restore prev prev token type\n                    // for case @-prefix-ident\n                    prevType = tokenCount === 0 ? 0 : offsetAndType[tokenCount - 1] >> TYPE_SHIFT;\n                }\n\n                if (prevType === COMMERCIALAT) {\n                    // rewrite prev token and change type to <at-keyword-token>\n                    tokenCount--;\n                    type = ATRULE;\n                }\n        }\n\n        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | offset;\n        prevType = type;\n    }\n\n    // finalize arrays\n    offsetAndType[tokenCount] = offset;\n    balance[tokenCount] = sourceLength;\n    while (balanceStart !== 0) {\n        balancePrev = balanceStart & OFFSET_MASK;\n        balanceStart = balance[balancePrev];\n        balance[balancePrev] = sourceLength;\n    }\n\n    tokenizer.offsetAndType = offsetAndType;\n    tokenizer.tokenCount = tokenCount;\n    tokenizer.balance = balance;\n}\n\n//\n// tokenizer\n//\n\nvar Tokenizer = function(source, startOffset, startLine, startColumn) {\n    this.offsetAndType = null;\n    this.balance = null;\n    this.lines = null;\n    this.columns = null;\n\n    this.setSource(source, startOffset, startLine, startColumn);\n};\n\nTokenizer.prototype = {\n    setSource: function(source, startOffset, startLine, startColumn) {\n        var safeSource = String(source || '');\n        var start = firstCharOffset(safeSource);\n\n        this.source = safeSource;\n        this.firstCharOffset = start;\n        this.startOffset = typeof startOffset === 'undefined' ? 0 : startOffset;\n        this.startLine = typeof startLine === 'undefined' ? 1 : startLine;\n        this.startColumn = typeof startColumn === 'undefined' ? 1 : startColumn;\n        this.linesAnsColumnsComputed = false;\n\n        this.eof = false;\n        this.currentToken = -1;\n        this.tokenType = 0;\n        this.tokenStart = start;\n        this.tokenEnd = start;\n\n        tokenLayout(this, safeSource, start);\n        this.next();\n    },\n\n    lookupType: function(offset) {\n        offset += this.currentToken;\n\n        if (offset < this.tokenCount) {\n            return this.offsetAndType[offset] >> TYPE_SHIFT;\n        }\n\n        return NULL;\n    },\n    lookupNonWSType: function(offset) {\n        offset += this.currentToken;\n\n        for (var type; offset < this.tokenCount; offset++) {\n            type = this.offsetAndType[offset] >> TYPE_SHIFT;\n\n            if (type !== WHITESPACE) {\n                return type;\n            }\n        }\n\n        return NULL;\n    },\n    lookupValue: function(offset, referenceStr) {\n        offset += this.currentToken;\n\n        if (offset < this.tokenCount) {\n            return cmpStr(\n                this.source,\n                this.offsetAndType[offset - 1] & OFFSET_MASK,\n                this.offsetAndType[offset] & OFFSET_MASK,\n                referenceStr\n            );\n        }\n\n        return false;\n    },\n    getTokenStart: function(tokenNum) {\n        if (tokenNum === this.currentToken) {\n            return this.tokenStart;\n        }\n\n        if (tokenNum > 0) {\n            return tokenNum < this.tokenCount\n                ? this.offsetAndType[tokenNum - 1] & OFFSET_MASK\n                : this.offsetAndType[this.tokenCount] & OFFSET_MASK;\n        }\n\n        return this.firstCharOffset;\n    },\n    getOffsetExcludeWS: function() {\n        if (this.currentToken > 0) {\n            if ((this.offsetAndType[this.currentToken - 1] >> TYPE_SHIFT) === WHITESPACE) {\n                return this.currentToken > 1\n                    ? this.offsetAndType[this.currentToken - 2] & OFFSET_MASK\n                    : this.firstCharOffset;\n            }\n        }\n        return this.tokenStart;\n    },\n    getRawLength: function(startToken, endTokenType1, endTokenType2, includeTokenType2) {\n        var cursor = startToken;\n        var balanceEnd;\n\n        loop:\n        for (; cursor < this.tokenCount; cursor++) {\n            balanceEnd = this.balance[cursor];\n\n            // belance end points to offset before start\n            if (balanceEnd < startToken) {\n                break loop;\n            }\n\n            // check token is stop type\n            switch (this.offsetAndType[cursor] >> TYPE_SHIFT) {\n                case endTokenType1:\n                    break loop;\n\n                case endTokenType2:\n                    if (includeTokenType2) {\n                        cursor++;\n                    }\n                    break loop;\n\n                default:\n                    // fast forward to the end of balanced block\n                    if (this.balance[balanceEnd] === cursor) {\n                        cursor = balanceEnd;\n                    }\n            }\n\n        }\n\n        return cursor - this.currentToken;\n    },\n\n    getTokenValue: function() {\n        return this.source.substring(this.tokenStart, this.tokenEnd);\n    },\n    substrToCursor: function(start) {\n        return this.source.substring(start, this.tokenStart);\n    },\n\n    skipWS: function() {\n        for (var i = this.currentToken, skipTokenCount = 0; i < this.tokenCount; i++, skipTokenCount++) {\n            if ((this.offsetAndType[i] >> TYPE_SHIFT) !== WHITESPACE) {\n                break;\n            }\n        }\n\n        if (skipTokenCount > 0) {\n            this.skip(skipTokenCount);\n        }\n    },\n    skipSC: function() {\n        while (this.tokenType === WHITESPACE || this.tokenType === COMMENT) {\n            this.next();\n        }\n    },\n    skip: function(tokenCount) {\n        var next = this.currentToken + tokenCount;\n\n        if (next < this.tokenCount) {\n            this.currentToken = next;\n            this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.currentToken = this.tokenCount;\n            this.next();\n        }\n    },\n    next: function() {\n        var next = this.currentToken + 1;\n\n        if (next < this.tokenCount) {\n            this.currentToken = next;\n            this.tokenStart = this.tokenEnd;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.currentToken = this.tokenCount;\n            this.eof = true;\n            this.tokenType = NULL;\n            this.tokenStart = this.tokenEnd = this.source.length;\n        }\n    },\n\n    eat: function(tokenType) {\n        if (this.tokenType !== tokenType) {\n            var offset = this.tokenStart;\n            var message = NAME[tokenType] + ' is expected';\n\n            // tweak message and offset\n            if (tokenType === IDENTIFIER) {\n                // when identifier is expected but there is a function or url\n                if (this.tokenType === FUNCTION || this.tokenType === URL) {\n                    offset = this.tokenEnd - 1;\n                    message += ' but function found';\n                }\n            } else {\n                // when test type is part of another token show error for current position + 1\n                // e.g. eat(HYPHENMINUS) will fail on \"-foo\", but pointing on \"-\" is odd\n                if (this.source.charCodeAt(this.tokenStart) === tokenType) {\n                    offset = offset + 1;\n                }\n            }\n\n            this.error(message, offset);\n        }\n\n        this.next();\n    },\n    eatNonWS: function(tokenType) {\n        this.skipWS();\n        this.eat(tokenType);\n    },\n\n    consume: function(tokenType) {\n        var value = this.getTokenValue();\n\n        this.eat(tokenType);\n\n        return value;\n    },\n    consumeFunctionName: function() {\n        var name = this.source.substring(this.tokenStart, this.tokenEnd - 1);\n\n        this.eat(FUNCTION);\n\n        return name;\n    },\n    consumeNonWS: function(tokenType) {\n        this.skipWS();\n\n        return this.consume(tokenType);\n    },\n\n    expectIdentifier: function(name) {\n        if (this.tokenType !== IDENTIFIER || cmpStr(this.source, this.tokenStart, this.tokenEnd, name) === false) {\n            this.error('Identifier `' + name + '` is expected');\n        }\n\n        this.next();\n    },\n\n    getLocation: function(offset, filename) {\n        if (!this.linesAnsColumnsComputed) {\n            computeLinesAndColumns(this, this.source);\n        }\n\n        return {\n            source: filename,\n            offset: this.startOffset + offset,\n            line: this.lines[offset],\n            column: this.columns[offset]\n        };\n    },\n\n    getLocationRange: function(start, end, filename) {\n        if (!this.linesAnsColumnsComputed) {\n            computeLinesAndColumns(this, this.source);\n        }\n\n        return {\n            source: filename,\n            start: {\n                offset: this.startOffset + start,\n                line: this.lines[start],\n                column: this.columns[start]\n            },\n            end: {\n                offset: this.startOffset + end,\n                line: this.lines[end],\n                column: this.columns[end]\n            }\n        };\n    },\n\n    error: function(message, offset) {\n        var location = typeof offset !== 'undefined' && offset < this.source.length\n            ? this.getLocation(offset)\n            : this.eof\n                ? findLastNonSpaceLocation(this)\n                : this.getLocation(this.tokenStart);\n\n        throw new CssSyntaxError(\n            message || 'Unexpected input',\n            this.source,\n            location.offset,\n            location.line,\n            location.column\n        );\n    },\n\n    dump: function() {\n        var offset = 0;\n\n        return Array.prototype.slice.call(this.offsetAndType, 0, this.tokenCount).map(function(item, idx) {\n            var start = offset;\n            var end = item & OFFSET_MASK;\n\n            offset = end;\n\n            return {\n                idx: idx,\n                type: NAME[item >> TYPE_SHIFT],\n                chunk: this.source.substring(start, end),\n                balance: this.balance[idx]\n            };\n        }, this);\n    }\n};\n\n// extend with error class\nTokenizer.CssSyntaxError = CssSyntaxError;\n\n// extend tokenizer with constants\nObject.keys(constants).forEach(function(key) {\n    Tokenizer[key] = constants[key];\n});\n\n// extend tokenizer with static methods from utils\nObject.keys(utils).forEach(function(key) {\n    Tokenizer[key] = utils[key];\n});\n\n// warm up tokenizer to elimitate code branches that never execute\n// fix soft deoptimizations (insufficient type feedback)\nnew Tokenizer('\\n\\r\\r\\n\\f<!---->//\"\"\\'\\'/*\\r\\n\\f*/1a;.\\\\31\\t\\+2{url(a);func();+1.2e3 -.4e-5 .6e+7}').getLocation();\n\nmodule.exports = Tokenizer;\n","module.exports = require('./Tokenizer');\n","'use strict';\n\n//\n//            item        item        item        item\n//          /------\\    /------\\    /------\\    /------\\\n//          | data |    | data |    | data |    | data |\n//  null <--+-prev |<---+-prev |<---+-prev |<---+-prev |\n//          | next-+--->| next-+--->| next-+--->| next-+--> null\n//          \\------/    \\------/    \\------/    \\------/\n//             ^                                    ^\n//             |                list                |\n//             |              /------\\              |\n//             \\--------------+-head |              |\n//                            | tail-+--------------/\n//                            \\------/\n//\n\nfunction createItem(data) {\n    return {\n        prev: null,\n        next: null,\n        data: data\n    };\n}\n\nvar cursors = null;\nvar List = function() {\n    this.cursor = null;\n    this.head = null;\n    this.tail = null;\n};\n\nList.createItem = createItem;\nList.prototype.createItem = createItem;\n\nList.prototype.getSize = function() {\n    var size = 0;\n    var cursor = this.head;\n\n    while (cursor) {\n        size++;\n        cursor = cursor.next;\n    }\n\n    return size;\n};\n\nList.prototype.fromArray = function(array) {\n    var cursor = null;\n\n    this.head = null;\n\n    for (var i = 0; i < array.length; i++) {\n        var item = createItem(array[i]);\n\n        if (cursor !== null) {\n            cursor.next = item;\n        } else {\n            this.head = item;\n        }\n\n        item.prev = cursor;\n        cursor = item;\n    }\n\n    this.tail = cursor;\n\n    return this;\n};\n\nList.prototype.toArray = function() {\n    var cursor = this.head;\n    var result = [];\n\n    while (cursor) {\n        result.push(cursor.data);\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.toJSON = List.prototype.toArray;\n\nList.prototype.isEmpty = function() {\n    return this.head === null;\n};\n\nList.prototype.first = function() {\n    return this.head && this.head.data;\n};\n\nList.prototype.last = function() {\n    return this.tail && this.tail.data;\n};\n\nfunction allocateCursor(node, prev, next) {\n    var cursor;\n\n    if (cursors !== null) {\n        cursor = cursors;\n        cursors = cursors.cursor;\n        cursor.prev = prev;\n        cursor.next = next;\n        cursor.cursor = node.cursor;\n    } else {\n        cursor = {\n            prev: prev,\n            next: next,\n            cursor: node.cursor\n        };\n    }\n\n    node.cursor = cursor;\n\n    return cursor;\n}\n\nfunction releaseCursor(node) {\n    var cursor = node.cursor;\n\n    node.cursor = cursor.cursor;\n    cursor.prev = null;\n    cursor.next = null;\n    cursor.cursor = cursors;\n    cursors = cursor;\n}\n\nList.prototype.each = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, this.head);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.eachRight = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, this.tail, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.nextUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, start);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.prevUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, start, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.some = function(fn, context) {\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            return true;\n        }\n\n        cursor = cursor.next;\n    }\n\n    return false;\n};\n\nList.prototype.map = function(fn, context) {\n    var result = [];\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        result.push(fn.call(context, cursor.data, cursor, this));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.clear = function() {\n    this.head = null;\n    this.tail = null;\n};\n\nList.prototype.copy = function() {\n    var result = new List();\n    var cursor = this.head;\n\n    while (cursor !== null) {\n        result.insert(createItem(cursor.data));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {\n    var cursor = this.cursor;\n\n    while (cursor !== null) {\n        if (cursor.prev === prevOld) {\n            cursor.prev = prevNew;\n        }\n\n        if (cursor.next === nextOld) {\n            cursor.next = nextNew;\n        }\n\n        cursor = cursor.cursor;\n    }\n};\n\nList.prototype.prepend = function(item) {\n    //      head\n    //    ^\n    // item\n    this.updateCursors(null, item, this.head, item);\n\n    // insert to the beginning of the list\n    if (this.head !== null) {\n        // new item <- first item\n        this.head.prev = item;\n\n        // new item -> first item\n        item.next = this.head;\n    } else {\n        // if list has no head, then it also has no tail\n        // in this case tail points to the new item\n        this.tail = item;\n    }\n\n    // head always points to new item\n    this.head = item;\n\n    return this;\n};\n\nList.prototype.prependData = function(data) {\n    return this.prepend(createItem(data));\n};\n\nList.prototype.append = function(item) {\n    // tail\n    //      ^\n    //      item\n    this.updateCursors(this.tail, item, null, item);\n\n    // insert to the ending of the list\n    if (this.tail !== null) {\n        // last item -> new item\n        this.tail.next = item;\n\n        // last item <- new item\n        item.prev = this.tail;\n    } else {\n        // if list has no tail, then it also has no head\n        // in this case head points to new item\n        this.head = item;\n    }\n\n    // tail always points to new item\n    this.tail = item;\n\n    return this;\n};\n\nList.prototype.appendData = function(data) {\n    return this.append(createItem(data));\n};\n\nList.prototype.insert = function(item, before) {\n    if (before !== undefined && before !== null) {\n        // prev   before\n        //      ^\n        //     item\n        this.updateCursors(before.prev, item, before, item);\n\n        if (before.prev === null) {\n            // insert to the beginning of list\n            if (this.head !== before) {\n                throw new Error('before doesn\\'t belong to list');\n            }\n\n            // since head points to before therefore list doesn't empty\n            // no need to check tail\n            this.head = item;\n            before.prev = item;\n            item.next = before;\n\n            this.updateCursors(null, item);\n        } else {\n\n            // insert between two items\n            before.prev.next = item;\n            item.prev = before.prev;\n\n            before.prev = item;\n            item.next = before;\n        }\n    } else {\n        this.append(item);\n    }\n};\n\nList.prototype.insertData = function(data, before) {\n    this.insert(createItem(data), before);\n};\n\nList.prototype.remove = function(item) {\n    //      item\n    //       ^\n    // prev     next\n    this.updateCursors(item, item.prev, item, item.next);\n\n    if (item.prev !== null) {\n        item.prev.next = item.next;\n    } else {\n        if (this.head !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.head = item.next;\n    }\n\n    if (item.next !== null) {\n        item.next.prev = item.prev;\n    } else {\n        if (this.tail !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.tail = item.prev;\n    }\n\n    item.prev = null;\n    item.next = null;\n\n    return item;\n};\n\nList.prototype.appendList = function(list) {\n    // ignore empty lists\n    if (list.head === null) {\n        return;\n    }\n\n    this.updateCursors(this.tail, list.tail, null, list.head);\n\n    // insert to end of the list\n    if (this.tail !== null) {\n        // if destination list has a tail, then it also has a head,\n        // but head doesn't change\n\n        // dest tail -> source head\n        this.tail.next = list.head;\n\n        // dest tail <- source head\n        list.head.prev = this.tail;\n    } else {\n        // if list has no a tail, then it also has no a head\n        // in this case points head to new item\n        this.head = list.head;\n    }\n\n    // tail always start point to new item\n    this.tail = list.tail;\n\n    list.head = null;\n    list.tail = null;\n};\n\nList.prototype.insertList = function(list, before) {\n    if (before !== undefined && before !== null) {\n        // ignore empty lists\n        if (list.head === null) {\n            return;\n        }\n\n        this.updateCursors(before.prev, list.tail, before, list.head);\n\n        // insert in the middle of dist list\n        if (before.prev !== null) {\n            // before.prev <-> list.head\n            before.prev.next = list.head;\n            list.head.prev = before.prev;\n        } else {\n            this.head = list.head;\n        }\n\n        before.prev = list.tail;\n        list.tail.next = before;\n\n        list.head = null;\n        list.tail = null;\n    } else {\n        this.appendList(list);\n    }\n};\n\nList.prototype.replace = function(oldItem, newItemOrList) {\n    if ('head' in newItemOrList) {\n        this.insertList(newItemOrList, oldItem);\n    } else {\n        this.insert(newItemOrList, oldItem);\n    }\n    this.remove(oldItem);\n};\n\nmodule.exports = List;\n","var List = require('../utils/list');\nvar TYPE = require('../tokenizer').TYPE;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\n\nmodule.exports = function readSequence(recognizer) {\n    var children = new List();\n    var child = null;\n    var context = {\n        recognizer: recognizer,\n        space: null,\n        ignoreWS: false,\n        ignoreWSAfter: false\n    };\n\n    this.scanner.skipSC();\n\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case COMMENT:\n                this.scanner.next();\n                continue;\n\n            case WHITESPACE:\n                if (context.ignoreWS) {\n                    this.scanner.next();\n                } else {\n                    context.space = this.WhiteSpace();\n                }\n                continue;\n        }\n\n        child = recognizer.getNode.call(this, context);\n\n        if (child === undefined) {\n            break;\n        }\n\n        if (context.space !== null) {\n            children.appendData(context.space);\n            context.space = null;\n        }\n\n        children.appendData(child);\n\n        if (context.ignoreWSAfter) {\n            context.ignoreWSAfter = false;\n            context.ignoreWS = true;\n        } else {\n            context.ignoreWS = false;\n        }\n    }\n\n    return children;\n};\n","'use strict';\n\nvar Tokenizer = require('../tokenizer');\nvar sequence = require('./sequence');\nvar noop = function() {};\n\nfunction createParseContext(name) {\n    return function() {\n        return this[name]();\n    };\n}\n\nfunction processConfig(config) {\n    var parserConfig = {\n        context: {},\n        scope: {},\n        atrule: {},\n        pseudo: {}\n    };\n\n    if (config.parseContext) {\n        for (var name in config.parseContext) {\n            switch (typeof config.parseContext[name]) {\n                case 'function':\n                    parserConfig.context[name] = config.parseContext[name];\n                    break;\n\n                case 'string':\n                    parserConfig.context[name] = createParseContext(config.parseContext[name]);\n                    break;\n            }\n        }\n    }\n\n    if (config.scope) {\n        for (var name in config.scope) {\n            parserConfig.scope[name] = config.scope[name];\n        }\n    }\n\n    if (config.atrule) {\n        for (var name in config.atrule) {\n            var atrule = config.atrule[name];\n\n            if (atrule.parse) {\n                parserConfig.atrule[name] = atrule.parse;\n            }\n        }\n    }\n\n    if (config.pseudo) {\n        for (var name in config.pseudo) {\n            var pseudo = config.pseudo[name];\n\n            if (pseudo.parse) {\n                parserConfig.pseudo[name] = pseudo.parse;\n            }\n        }\n    }\n\n    if (config.node) {\n        for (var name in config.node) {\n            parserConfig[name] = config.node[name].parse;\n        }\n    }\n\n    return parserConfig;\n}\n\nmodule.exports = function createParser(config) {\n    var parser = {\n        scanner: new Tokenizer(),\n        filename: '<unknown>',\n        needPositions: false,\n        tolerant: false,\n        onParseError: noop,\n        parseAtruleExpression: true,\n        parseSelector: true,\n        parseValue: true,\n        parseCustomProperty: false,\n\n        readSequence: sequence,\n\n        tolerantParse: function(consumer, fallback) {\n            if (this.tolerant) {\n                var start = this.scanner.currentToken;\n\n                try {\n                    return consumer.call(this);\n                } catch (e) {\n                    this.onParseError(e);\n                    return fallback.call(this, start);\n                }\n            } else {\n                return consumer.call(this);\n            }\n        },\n\n        getLocation: function(start, end) {\n            if (this.needPositions) {\n                return this.scanner.getLocationRange(\n                    start,\n                    end,\n                    this.filename\n                );\n            }\n\n            return null;\n        },\n        getLocationFromList: function(list) {\n            if (this.needPositions) {\n                return this.scanner.getLocationRange(\n                    list.head !== null ? list.first().loc.start.offset - this.scanner.startOffset : this.scanner.tokenStart,\n                    list.head !== null ? list.last().loc.end.offset - this.scanner.startOffset : this.scanner.tokenStart,\n                    this.filename\n                );\n            }\n\n            return null;\n        }\n    };\n\n    config = processConfig(config || {});\n    for (var key in config) {\n        parser[key] = config[key];\n    }\n\n    return function(source, options) {\n        options = options || {};\n\n        var context = options.context || 'default';\n        var ast;\n\n        parser.scanner.setSource(source, options.offset, options.line, options.column);\n        parser.filename = options.filename || '<unknown>';\n        parser.needPositions = Boolean(options.positions);\n        parser.tolerant = Boolean(options.tolerant);\n        parser.onParseError = typeof options.onParseError === 'function' ? options.onParseError : noop;\n        parser.parseAtruleExpression = 'parseAtruleExpression' in options ? Boolean(options.parseAtruleExpression) : true;\n        parser.parseSelector = 'parseSelector' in options ? Boolean(options.parseSelector) : true;\n        parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;\n        parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;\n\n        if (!parser.context.hasOwnProperty(context)) {\n            throw new Error('Unknown context `' + context + '`');\n        }\n\n        ast = parser.context[context].call(parser, options);\n\n        if (!parser.scanner.eof) {\n            parser.scanner.error();\n        }\n\n        // console.log(JSON.stringify(ast, null, 4));\n        return ast;\n    };\n};\n","var cmpChar = require('../../tokenizer').cmpChar;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar STRING = TYPE.String;\nvar NUMBER = TYPE.Number;\nvar FUNCTION = TYPE.Function;\nvar URL = TYPE.Url;\nvar NUMBERSIGN = TYPE.NumberSign;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar COMMA = TYPE.Comma;\nvar SOLIDUS = TYPE.Solidus;\nvar ASTERISK = TYPE.Asterisk;\nvar PERCENTSIGN = TYPE.PercentSign;\nvar BACKSLASH = TYPE.Backslash;\nvar U = 117; // 'u'.charCodeAt(0)\n\nmodule.exports = function defaultRecognizer(context) {\n    switch (this.scanner.tokenType) {\n        case NUMBERSIGN:\n            return this.HexColor();\n\n        case COMMA:\n            context.space = null;\n            context.ignoreWSAfter = true;\n            return this.Operator();\n\n        case SOLIDUS:\n        case ASTERISK:\n        case PLUSSIGN:\n        case HYPHENMINUS:\n            return this.Operator();\n\n        case LEFTPARENTHESIS:\n            return this.Parentheses(this.readSequence, context.recognizer);\n\n        case LEFTSQUAREBRACKET:\n            return this.Brackets(this.readSequence, context.recognizer);\n\n        case STRING:\n            return this.String();\n\n        case NUMBER:\n            switch (this.scanner.lookupType(1)) {\n                case PERCENTSIGN:\n                    return this.Percentage();\n\n                case IDENTIFIER:\n                    // edge case: number with folowing \\0 and \\9 hack shouldn't to be a Dimension\n                    if (cmpChar(this.scanner.source, this.scanner.tokenEnd, BACKSLASH)) {\n                        return this.Number();\n                    } else {\n                        return this.Dimension();\n                    }\n\n                default:\n                    return this.Number();\n            }\n\n        case FUNCTION:\n            return this.Function(this.readSequence, context.recognizer);\n\n        case URL:\n            return this.Url();\n\n        case IDENTIFIER:\n            // check for unicode range, it should start with u+ or U+\n            if (cmpChar(this.scanner.source, this.scanner.tokenStart, U) &&\n                cmpChar(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN)) {\n                return this.UnicodeRange();\n            } else {\n                return this.Identifier();\n            }\n    }\n};\n","module.exports = {\n    getNode: require('./default')\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar NUMBERSIGN = TYPE.NumberSign;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar PLUSSIGN = TYPE.PlusSign;\nvar SOLIDUS = TYPE.Solidus;\nvar ASTERISK = TYPE.Asterisk;\nvar FULLSTOP = TYPE.FullStop;\nvar COLON = TYPE.Colon;\nvar GREATERTHANSIGN = TYPE.GreaterThanSign;\nvar VERTICALLINE = TYPE.VerticalLine;\nvar TILDE = TYPE.Tilde;\n\nfunction getNode(context) {\n    switch (this.scanner.tokenType) {\n        case PLUSSIGN:\n        case GREATERTHANSIGN:\n        case TILDE:\n            context.space = null;\n            context.ignoreWSAfter = true;\n            return this.Combinator();\n\n        case SOLIDUS:  // /deep/\n            return this.Combinator();\n\n        case FULLSTOP:\n            return this.ClassSelector();\n\n        case LEFTSQUAREBRACKET:\n            return this.AttributeSelector();\n\n        case NUMBERSIGN:\n            return this.IdSelector();\n\n        case COLON:\n            if (this.scanner.lookupType(1) === COLON) {\n                return this.PseudoElementSelector();\n            } else {\n                return this.PseudoClassSelector();\n            }\n\n        case IDENTIFIER:\n        case ASTERISK:\n        case VERTICALLINE:\n            return this.TypeSelector();\n\n        case NUMBER:\n            return this.Percentage();\n    }\n};\n\nmodule.exports = {\n    getNode: getNode\n};\n","var List = require('../../utils/list');\n\n// https://drafts.csswg.org/css-images-4/#element-notation\n// https://developer.mozilla.org/en-US/docs/Web/CSS/element\nmodule.exports = function() {\n    this.scanner.skipSC();\n\n    var id = this.IdSelector();\n\n    this.scanner.skipSC();\n\n    return new List().appendData(\n        id\n    );\n};\n","var List = require('../../utils/list');\n\n// legacy IE function\n// expression '(' raw ')'\nmodule.exports = function() {\n    return new List().appendData(\n        this.Raw(this.scanner.currentToken, 0, 0, false, false)\n    );\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar COMMA = TYPE.Comma;\nvar SEMICOLON = TYPE.Semicolon;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\n\n// var '(' ident (',' <value>? )? ')'\nmodule.exports = function() {\n    var children = new List();\n\n    this.scanner.skipSC();\n\n    var identStart = this.scanner.tokenStart;\n\n    this.scanner.eat(HYPHENMINUS);\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== HYPHENMINUS) {\n        this.scanner.error('HyphenMinus is expected');\n    }\n    this.scanner.eat(IDENTIFIER);\n\n    children.appendData({\n        type: 'Identifier',\n        loc: this.getLocation(identStart, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(identStart)\n    });\n\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === COMMA) {\n        children.appendData(this.Operator());\n        children.appendData(this.parseCustomProperty\n            ? this.Value(null)\n            : this.Raw(this.scanner.currentToken, EXCLAMATIONMARK, SEMICOLON, false, false)\n        );\n    }\n\n    return children;\n};\n","module.exports = {\n    getNode: require('./default'),\n    '-moz-element': require('../function/element'),\n    'element': require('../function/element'),\n    'expression': require('../function/expression'),\n    'var': require('../function/var')\n};\n","module.exports = {\n    AtruleExpression: require('./atruleExpression'),\n    Selector: require('./selector'),\n    Value: require('./value')\n};\n","module.exports = {\n    parse: {\n        expression: null,\n        block: function() {\n            return this.Block(this.Declaration);\n        }\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar STRING = TYPE.String;\nvar IDENTIFIER = TYPE.Identifier;\nvar URL = TYPE.Url;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\n\nmodule.exports = {\n    parse: {\n        expression: function() {\n            var children = new List();\n\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case STRING:\n                    children.appendData(this.String());\n                    break;\n\n                case URL:\n                    children.appendData(this.Url());\n                    break;\n\n                default:\n                    this.scanner.error('String or url() is expected');\n            }\n\n            if (this.scanner.lookupNonWSType(0) === IDENTIFIER ||\n                this.scanner.lookupNonWSType(0) === LEFTPARENTHESIS) {\n                children.appendData(this.WhiteSpace());\n                children.appendData(this.MediaQueryList());\n            }\n\n            return children;\n        },\n        block: null\n    }\n};\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: {\n        expression: function() {\n            return new List().appendData(\n                this.MediaQueryList()\n            );\n        },\n        block: function() {\n            return this.Block(this.Rule);\n        }\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nmodule.exports = {\n    parse: {\n        expression: function() {\n            if (this.scanner.lookupNonWSType(0) === LEFTCURLYBRACKET) {\n                return null;\n            }\n\n            return new List().appendData(\n                this.SelectorList()\n            );\n        },\n        block: function() {\n            return this.Block(this.Declaration);\n        }\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENTIFIER = TYPE.Identifier;\nvar FUNCTION = TYPE.Function;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar COLON = TYPE.Colon;\n\nfunction consumeRaw() {\n    return new List().appendData(\n        this.Raw(this.scanner.currentToken, 0, 0, false, false)\n    );\n}\n\nfunction parentheses() {\n    var index = 0;\n\n    this.scanner.skipSC();\n\n    // TODO: make it simplier\n    if (this.scanner.tokenType === IDENTIFIER) {\n        index = 1;\n    } else if (this.scanner.tokenType === HYPHENMINUS &&\n               this.scanner.lookupType(1) === IDENTIFIER) {\n        index = 2;\n    }\n\n    if (index !== 0 && this.scanner.lookupNonWSType(index) === COLON) {\n        return new List().appendData(\n            this.Declaration()\n        );\n    }\n\n    return readSequence.call(this);\n}\n\nfunction readSequence() {\n    var children = new List();\n    var space = null;\n    var child;\n\n    this.scanner.skipSC();\n\n    scan:\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case WHITESPACE:\n                space = this.WhiteSpace();\n                continue;\n\n            case COMMENT:\n                this.scanner.next();\n                continue;\n\n            case FUNCTION:\n                child = this.Function(consumeRaw, this.scope.AtruleExpression);\n                break;\n\n            case IDENTIFIER:\n                child = this.Identifier();\n                break;\n\n            case LEFTPARENTHESIS:\n                child = this.Parentheses(parentheses, this.scope.AtruleExpression);\n                break;\n\n            default:\n                break scan;\n        }\n\n        if (space !== null) {\n            children.appendData(space);\n            space = null;\n        }\n\n        children.appendData(child);\n    }\n\n    return children;\n}\n\nmodule.exports = {\n    parse: {\n        expression: function() {\n            var children = readSequence.call(this);\n\n            if (children.isEmpty()) {\n                this.scanner.error('Condition is expected');\n            }\n\n            return children;\n        },\n        block: function() {\n            return this.Block(this.Rule);\n        }\n    }\n};\n","module.exports = {\n    'font-face': require('./font-face'),\n    'import': require('./import'),\n    'media': require('./media'),\n    'page': require('./page'),\n    'supports': require('./supports')\n};\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: function() {\n        return new List().appendData(\n            this.Identifier()\n        );\n    }\n};\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: function() {\n        return new List().appendData(\n            this.SelectorList()\n        );\n    }\n};\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: function() {\n        return new List().appendData(\n            this.Identifier()\n        );\n    }\n};\n","var List = require('../../../utils/list');\n\nmodule.exports = {\n    parse: function selectorList() {\n        return new List().appendData(\n            this.SelectorList()\n        );\n    }\n};\n","module.exports = require('./common/selectorList');\n","module.exports = require('./common/selectorList');\n","var List = require('../../../utils/list');\nvar ALLOW_OF_CLAUSE = true;\n\nmodule.exports = {\n    parse: function() {\n        return new List().appendData(\n            this.Nth(ALLOW_OF_CLAUSE)\n        );\n    }\n};\n","module.exports = require('./common/nthWithOfClause');\n","module.exports = require('./common/nthWithOfClause');\n","var List = require('../../../utils/list');\nvar DISALLOW_OF_CLAUSE = false;\n\nmodule.exports = {\n    parse: function nth() {\n        return new List().appendData(\n            this.Nth(DISALLOW_OF_CLAUSE)\n        );\n    }\n};\n","module.exports = require('./common/nth');\n","module.exports = require('./common/nth');\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: function compoundSelector() {\n        return new List().appendData(\n            this.Selector()\n        );\n    }\n};\n","module.exports = {\n    'dir': require('./dir'),\n    'has': require('./has'),\n    'lang': require('./lang'),\n    'matches': require('./matches'),\n    'not': require('./not'),\n    'nth-child': require('./nth-child'),\n    'nth-last-child': require('./nth-last-child'),\n    'nth-last-of-type': require('./nth-last-of-type'),\n    'nth-of-type': require('./nth-of-type'),\n    'slotted': require('./slotted')\n};\n","var cmpChar = require('../../tokenizer').cmpChar;\nvar isNumber = require('../../tokenizer').isNumber;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar N = 110; // 'n'.charCodeAt(0)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction checkTokenIsInteger(scanner, disallowSign) {\n    var pos = scanner.tokenStart;\n\n    if (scanner.source.charCodeAt(pos) === PLUSSIGN ||\n        scanner.source.charCodeAt(pos) === HYPHENMINUS) {\n        if (disallowSign) {\n            scanner.error();\n        }\n        pos++;\n    }\n\n    for (; pos < scanner.tokenEnd; pos++) {\n        if (!isNumber(scanner.source.charCodeAt(pos))) {\n            scanner.error('Unexpected input', pos);\n        }\n    }\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = {\n    name: 'AnPlusB',\n    structure: {\n        a: [String, null],\n        b: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var end = start;\n        var prefix = '';\n        var a = null;\n        var b = null;\n\n        if (this.scanner.tokenType === NUMBER ||\n            this.scanner.tokenType === PLUSSIGN) {\n            checkTokenIsInteger(this.scanner, ALLOW_SIGN);\n            prefix = this.scanner.getTokenValue();\n            this.scanner.next();\n            end = this.scanner.tokenStart;\n        }\n\n        if (this.scanner.tokenType === IDENTIFIER) {\n            var bStart = this.scanner.tokenStart;\n\n            if (cmpChar(this.scanner.source, bStart, HYPHENMINUS)) {\n                if (prefix === '') {\n                    prefix = '-';\n                    bStart++;\n                } else {\n                    this.scanner.error('Unexpected hyphen minus');\n                }\n            }\n\n            if (!cmpChar(this.scanner.source, bStart, N)) {\n                this.scanner.error();\n            }\n\n            a = prefix === ''  ? '1'  :\n                prefix === '+' ? '+1' :\n                prefix === '-' ? '-1' :\n                prefix;\n\n            var len = this.scanner.tokenEnd - bStart;\n            if (len > 1) {\n                // ..n-..\n                if (this.scanner.source.charCodeAt(bStart + 1) !== HYPHENMINUS) {\n                    this.scanner.error('Unexpected input', bStart + 1);\n                }\n\n                if (len > 2) {\n                    // ..n-{number}..\n                    this.scanner.tokenStart = bStart + 2;\n                } else {\n                    // ..n- {number}\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                }\n\n                checkTokenIsInteger(this.scanner, DISALLOW_SIGN);\n                b = '-' + this.scanner.getTokenValue();\n                this.scanner.next();\n                end = this.scanner.tokenStart;\n            } else {\n                prefix = '';\n                this.scanner.next();\n                end = this.scanner.tokenStart;\n                this.scanner.skipSC();\n\n                if (this.scanner.tokenType === HYPHENMINUS ||\n                    this.scanner.tokenType === PLUSSIGN) {\n                    prefix = this.scanner.getTokenValue();\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                }\n\n                if (this.scanner.tokenType === NUMBER) {\n                    checkTokenIsInteger(this.scanner, prefix !== '');\n\n                    if (!isNumber(this.scanner.source.charCodeAt(this.scanner.tokenStart))) {\n                        prefix = this.scanner.source.charAt(this.scanner.tokenStart);\n                        this.scanner.tokenStart++;\n                    }\n\n                    if (prefix === '') {\n                        // should be an operator before number\n                        this.scanner.error();\n                    } else if (prefix === '+') {\n                        // plus is using by default\n                        prefix = '';\n                    }\n\n                    b = prefix + this.scanner.getTokenValue();\n\n                    this.scanner.next();\n                    end = this.scanner.tokenStart;\n                } else {\n                    if (prefix) {\n                        this.scanner.eat(NUMBER);\n                    }\n                }\n            }\n        } else {\n            if (prefix === '' || prefix === '+') { // no number\n                this.scanner.error(\n                    'Number or identifier is expected',\n                    this.scanner.tokenStart + (\n                        this.scanner.tokenType === PLUSSIGN ||\n                        this.scanner.tokenType === HYPHENMINUS\n                    )\n                );\n            }\n\n            b = prefix;\n        }\n\n        return {\n            type: 'AnPlusB',\n            loc: this.getLocation(start, end),\n            a: a,\n            b: b\n        };\n    },\n    generate: function(processChunk, node) {\n        var a = node.a !== null && node.a !== undefined;\n        var b = node.b !== null && node.b !== undefined;\n\n        if (a) {\n            processChunk(\n                node.a === '+1' ? '+n' :\n                node.a ===  '1' ?  'n' :\n                node.a === '-1' ? '-n' :\n                node.a + 'n'\n            );\n\n            if (b) {\n                b = String(node.b);\n                if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n                    processChunk(b.charAt(0));\n                    processChunk(b.substr(1));\n                } else {\n                    processChunk('+');\n                    processChunk(b);\n                }\n            }\n        } else {\n            processChunk(String(node.b));\n        }\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar ATRULE = TYPE.Atrule;\nvar SEMICOLON = TYPE.Semicolon;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\n\nfunction isBlockAtrule() {\n    for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {\n        if (type === RIGHTCURLYBRACKET) {\n            return true;\n        }\n\n        if (type === LEFTCURLYBRACKET ||\n            type === ATRULE) {\n            return false;\n        }\n    }\n\n    this.scanner.skip(offset);\n    this.scanner.eat(RIGHTCURLYBRACKET);\n}\n\nmodule.exports = {\n    name: 'Atrule',\n    structure: {\n        name: String,\n        expression: ['AtruleExpression', null],\n        block: ['Block', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var nameLowerCase;\n        var expression = null;\n        var block = null;\n\n        this.scanner.eat(ATRULE);\n\n        name = this.scanner.substrToCursor(start + 1);\n        nameLowerCase = name.toLowerCase();\n        this.scanner.skipSC();\n\n        expression = this.AtruleExpression(name);\n\n        // turn empty AtruleExpression into null\n        if (expression.children.head === null) {\n            expression = null;\n        }\n\n        this.scanner.skipSC();\n\n        if (this.atrule.hasOwnProperty(nameLowerCase)) {\n            if (typeof this.atrule[nameLowerCase].block === 'function') {\n                if (this.scanner.tokenType !== LEFTCURLYBRACKET) {\n                    // FIXME: make tolerant\n                    this.scanner.error('Curly bracket is expected');\n                }\n\n                block = this.atrule[nameLowerCase].block.call(this);\n            } else {\n                if (!this.tolerant || !this.scanner.eof) {\n                    this.scanner.eat(SEMICOLON);\n                }\n            }\n        } else {\n            switch (this.scanner.tokenType) {\n                case SEMICOLON:\n                    this.scanner.next();\n                    break;\n\n                case LEFTCURLYBRACKET:\n                    // TODO: should consume block content as Raw?\n                    block = this.Block(isBlockAtrule.call(this) ? this.Declaration : this.Rule);\n                    break;\n\n                default:\n                    if (!this.tolerant) {\n                        this.scanner.error('Semicolon or block is expected');\n                    }\n            }\n        }\n\n        return {\n            type: 'Atrule',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            expression: expression,\n            block: block\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('@');\n        processChunk(node.name);\n\n        if (node.expression !== null) {\n            processChunk(' ');\n            this.generate(processChunk, node.expression);\n        }\n\n        if (node.block) {\n            this.generate(processChunk, node.block);\n        } else {\n            processChunk(';');\n        }\n    },\n    walkContext: 'atrule'\n};\n","var List = require('../../utils/list');\n\nvar TYPE = require('../../tokenizer').TYPE;\nvar SEMICOLON = TYPE.Semicolon;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nfunction consumeRaw(startToken) {\n    return new List().appendData(\n        this.Raw(startToken, SEMICOLON, LEFTCURLYBRACKET, false, true)\n    );\n}\n\nfunction consumeDefaultSequence() {\n    return this.readSequence(this.scope.AtruleExpression);\n}\n\nmodule.exports = {\n    name: 'AtruleExpression',\n    structure: {\n        children: [[]]\n    },\n    parse: function(name) {\n        var children = null;\n        var startToken = this.scanner.currentToken;\n\n        if (name !== null) {\n            name = name.toLowerCase();\n        }\n\n        if (this.parseAtruleExpression) {\n            // custom consumer\n            if (this.atrule.hasOwnProperty(name)) {\n                if (typeof this.atrule[name].expression === 'function') {\n                    children = this.tolerantParse(this.atrule[name].expression, consumeRaw);\n                }\n            } else {\n                // default consumer\n                this.scanner.skipSC();\n                children = this.tolerantParse(consumeDefaultSequence, consumeRaw);\n            }\n\n            if (this.tolerant) {\n                if (this.scanner.eof || (this.scanner.tokenType !== SEMICOLON && this.scanner.tokenType !== LEFTCURLYBRACKET)) {\n                    children = consumeRaw.call(this, startToken);\n                }\n            }\n        } else {\n            children = consumeRaw.call(this, startToken);\n        }\n\n        if (children === null) {\n            children = new List();\n        }\n\n        return {\n            type: 'AtruleExpression',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    },\n    walkContext: 'atruleExpression'\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar STRING = TYPE.String;\nvar DOLLARSIGN = TYPE.DollarSign;\nvar ASTERISK = TYPE.Asterisk;\nvar COLON = TYPE.Colon;\nvar EQUALSSIGN = TYPE.EqualsSign;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\nvar CIRCUMFLEXACCENT = TYPE.CircumflexAccent;\nvar VERTICALLINE = TYPE.VerticalLine;\nvar TILDE = TYPE.Tilde;\n\nfunction getAttributeName() {\n    if (this.scanner.eof) {\n        this.scanner.error('Unexpected end of input');\n    }\n\n    var start = this.scanner.tokenStart;\n    var expectIdentifier = false;\n    var checkColon = true;\n\n    if (this.scanner.tokenType === ASTERISK) {\n        expectIdentifier = true;\n        checkColon = false;\n        this.scanner.next();\n    } else if (this.scanner.tokenType !== VERTICALLINE) {\n        this.scanner.eat(IDENTIFIER);\n    }\n\n    if (this.scanner.tokenType === VERTICALLINE) {\n        if (this.scanner.lookupType(1) !== EQUALSSIGN) {\n            this.scanner.next();\n            this.scanner.eat(IDENTIFIER);\n        } else if (expectIdentifier) {\n            this.scanner.error('Identifier is expected', this.scanner.tokenEnd);\n        }\n    } else if (expectIdentifier) {\n        this.scanner.error('Vertical line is expected');\n    }\n\n    if (checkColon && this.scanner.tokenType === COLON) {\n        this.scanner.next();\n        this.scanner.eat(IDENTIFIER);\n    }\n\n    return {\n        type: 'Identifier',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(start)\n    };\n}\n\nfunction getOperator() {\n    var start = this.scanner.tokenStart;\n    var tokenType = this.scanner.tokenType;\n\n    if (tokenType !== EQUALSSIGN &&        // =\n        tokenType !== TILDE &&             // ~=\n        tokenType !== CIRCUMFLEXACCENT &&  // ^=\n        tokenType !== DOLLARSIGN &&        // $=\n        tokenType !== ASTERISK &&          // *=\n        tokenType !== VERTICALLINE         // |=\n    ) {\n        this.scanner.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n    }\n\n    if (tokenType === EQUALSSIGN) {\n        this.scanner.next();\n    } else {\n        this.scanner.next();\n        this.scanner.eat(EQUALSSIGN);\n    }\n\n    return this.scanner.substrToCursor(start);\n}\n\n// '[' S* attrib_name ']'\n// '[' S* attrib_name S* attrib_matcher S* [ IDENT | STRING ] S* attrib_flags? S* ']'\nmodule.exports = {\n    name: 'AttributeSelector',\n    structure: {\n        name: 'Identifier',\n        matcher: [String, null],\n        value: ['String', 'Identifier', null],\n        flags: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var matcher = null;\n        var value = null;\n        var flags = null;\n\n        this.scanner.eat(LEFTSQUAREBRACKET);\n        this.scanner.skipSC();\n\n        name = getAttributeName.call(this);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {\n            // avoid case `[name i]`\n            if (this.scanner.tokenType !== IDENTIFIER) {\n                matcher = getOperator.call(this);\n\n                this.scanner.skipSC();\n\n                value = this.scanner.tokenType === STRING\n                    ? this.String()\n                    : this.Identifier();\n\n                this.scanner.skipSC();\n            }\n\n            // attribute flags\n            if (this.scanner.tokenType === IDENTIFIER) {\n                flags = this.scanner.getTokenValue();\n                this.scanner.next();\n\n                this.scanner.skipSC();\n            }\n        }\n\n        this.scanner.eat(RIGHTSQUAREBRACKET);\n\n        return {\n            type: 'AttributeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            matcher: matcher,\n            value: value,\n            flags: flags\n        };\n    },\n    generate: function(processChunk, node) {\n        var flagsPrefix = ' ';\n\n        processChunk('[');\n        this.generate(processChunk, node.name);\n\n        if (node.matcher !== null) {\n            processChunk(node.matcher);\n\n            if (node.value !== null) {\n                this.generate(processChunk, node.value);\n\n                // space between string and flags is not required\n                if (node.value.type === 'String') {\n                    flagsPrefix = '';\n                }\n            }\n        }\n\n        if (node.flags !== null) {\n            processChunk(flagsPrefix);\n            processChunk(node.flags);\n        }\n\n        processChunk(']');\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar SEMICOLON = TYPE.Semicolon;\nvar ATRULE = TYPE.Atrule;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, 0, SEMICOLON, true, true);\n}\n\nmodule.exports = {\n    name: 'Block',\n    structure: {\n        children: [['Atrule', 'Rule', 'Declaration']]\n    },\n    parse: function(defaultConsumer) {\n        if (!defaultConsumer) {\n            defaultConsumer = this.Declaration;\n        }\n\n        var start = this.scanner.tokenStart;\n        var children = new List();\n\n        this.scanner.eat(LEFTCURLYBRACKET);\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case RIGHTCURLYBRACKET:\n                    break scan;\n\n                case WHITESPACE:\n                case COMMENT:\n                case SEMICOLON:\n                    this.scanner.next();\n                    break;\n\n                case ATRULE:\n                    children.appendData(this.tolerantParse(this.Atrule, consumeRaw));\n                    break;\n\n                default:\n                    children.appendData(this.tolerantParse(defaultConsumer, consumeRaw));\n            }\n        }\n\n        if (!this.tolerant || !this.scanner.eof) {\n            this.scanner.eat(RIGHTCURLYBRACKET);\n        }\n\n        return {\n            type: 'Block',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('{');\n        this.each(processChunk, node);\n        processChunk('}');\n    },\n    walkContext: 'block'\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\n\n// currently only Grid Layout uses square brackets, but left it universal\n// https://drafts.csswg.org/css-grid/#track-sizing\n// [ ident* ]\nmodule.exports = {\n    name: 'Brackets',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.scanner.eat(LEFTSQUAREBRACKET);\n        children = readSequence.call(this, recognizer);\n        this.scanner.eat(RIGHTSQUAREBRACKET);\n\n        return {\n            type: 'Brackets',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('[');\n        this.each(processChunk, node);\n        processChunk(']');\n    }\n};\n","var CDC = require('../../tokenizer').TYPE.CDC;\n\nmodule.exports = {\n    name: 'CDC',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(CDC); // -->\n\n        return {\n            type: 'CDC',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function(processChunk) {\n        processChunk('-->');\n    }\n};\n","var CDO = require('../../tokenizer').TYPE.CDO;\n\nmodule.exports = {\n    name: 'CDO',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(CDO); // <!--\n\n        return {\n            type: 'CDO',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function(processChunk) {\n        processChunk('<!--');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar IDENTIFIER = TYPE.Identifier;\nvar FULLSTOP = TYPE.FullStop;\n\n// '.' ident\nmodule.exports = {\n    name: 'ClassSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        this.scanner.eat(FULLSTOP);\n\n        return {\n            type: 'ClassSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('.');\n        processChunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar PLUSSIGN = TYPE.PlusSign;\nvar SOLIDUS = TYPE.Solidus;\nvar GREATERTHANSIGN = TYPE.GreaterThanSign;\nvar TILDE = TYPE.Tilde;\n\n// + | > | ~ | /deep/\nmodule.exports = {\n    name: 'Combinator',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        switch (this.scanner.tokenType) {\n            case GREATERTHANSIGN:\n            case PLUSSIGN:\n            case TILDE:\n                this.scanner.next();\n                break;\n\n            case SOLIDUS:\n                this.scanner.next();\n                this.scanner.expectIdentifier('deep');\n                this.scanner.eat(SOLIDUS);\n                break;\n\n            default:\n                this.scanner.error('Combinator is expected');\n        }\n\n        return {\n            type: 'Combinator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar ASTERISK = TYPE.Asterisk;\nvar SOLIDUS = TYPE.Solidus;\n\n// '/*' .* '*/'\nmodule.exports = {\n    name: 'Comment',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var end = this.scanner.tokenEnd;\n\n        if ((end - start + 2) >= 2 &&\n            this.scanner.source.charCodeAt(end - 2) === ASTERISK &&\n            this.scanner.source.charCodeAt(end - 1) === SOLIDUS) {\n            end -= 2;\n        }\n\n        this.scanner.next();\n\n        return {\n            type: 'Comment',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.source.substring(start + 2, end)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('/*');\n        processChunk(node.value);\n        processChunk('*/');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar COLON = TYPE.Colon;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\nvar SOLIDUS = TYPE.Solidus;\nvar ASTERISK = TYPE.Asterisk;\nvar DOLLARSIGN = TYPE.DollarSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar SEMICOLON = TYPE.Semicolon;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar PLUSSIGN = TYPE.PlusSign;\nvar NUMBERSIGN = TYPE.NumberSign;\n\nmodule.exports = {\n    name: 'Declaration',\n    structure: {\n        important: [Boolean, String],\n        property: String,\n        value: ['Value', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var property = readProperty.call(this);\n        var important = false;\n        var value;\n\n        this.scanner.skipSC();\n        this.scanner.eat(COLON);\n\n        if (isCustomProperty(property) ? this.parseCustomProperty : this.parseValue) {\n            value = this.Value(property);\n        } else {\n            value = this.Raw(this.scanner.currentToken, EXCLAMATIONMARK, SEMICOLON, false, false);\n        }\n\n        if (this.scanner.tokenType === EXCLAMATIONMARK) {\n            important = getImportant(this.scanner);\n            this.scanner.skipSC();\n        }\n\n        // TODO: include or not to include semicolon to range?\n        // if (this.scanner.tokenType === SEMICOLON) {\n        //     this.scanner.next();\n        // }\n\n        if (!this.scanner.eof &&\n            this.scanner.tokenType !== SEMICOLON &&\n            this.scanner.tokenType !== RIGHTPARENTHESIS &&\n            this.scanner.tokenType !== RIGHTCURLYBRACKET) {\n            this.scanner.error();\n        }\n\n        return {\n            type: 'Declaration',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            important: important,\n            property: property,\n            value: value\n        };\n    },\n    generate: function(processChunk, node, item) {\n        processChunk(node.property);\n        processChunk(':');\n        this.generate(processChunk, node.value);\n\n        if (node.important) {\n            processChunk(node.important === true ? '!important' : '!' + node.important);\n        }\n\n        if (item && item.next) {\n            processChunk(';');\n        }\n    },\n    walkContext: 'declaration'\n};\n\nfunction isCustomProperty(name) {\n    return name.length >= 2 &&\n           name.charCodeAt(0) === HYPHENMINUS &&\n           name.charCodeAt(1) === HYPHENMINUS;\n}\n\nfunction readProperty() {\n    var start = this.scanner.tokenStart;\n    var prefix = 0;\n\n    // hacks\n    switch (this.scanner.tokenType) {\n        case ASTERISK:\n        case DOLLARSIGN:\n        case PLUSSIGN:\n        case NUMBERSIGN:\n            prefix = 1;\n            break;\n\n        // TODO: not sure we should support this hack\n        case SOLIDUS:\n            prefix = this.scanner.lookupType(1) === SOLIDUS ? 2 : 1;\n            break;\n    }\n\n    if (this.scanner.lookupType(prefix) === HYPHENMINUS) {\n        prefix++;\n    }\n\n    if (prefix) {\n        this.scanner.skip(prefix);\n    }\n\n    this.scanner.eat(IDENTIFIER);\n\n    return this.scanner.substrToCursor(start);\n}\n\n// ! ws* important\nfunction getImportant(scanner) {\n    scanner.eat(EXCLAMATIONMARK);\n    scanner.skipSC();\n\n    var important = scanner.consume(IDENTIFIER);\n\n    // store original value in case it differ from `important`\n    // for better original source restoring and hacks like `!ie` support\n    return important === 'important' ? true : important;\n}\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar SEMICOLON = TYPE.Semicolon;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, 0, SEMICOLON, true, true);\n}\n\nmodule.exports = {\n    name: 'DeclarationList',\n    structure: {\n        children: [['Declaration']]\n    },\n    parse: function() {\n        var children = new List();\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE:\n                case COMMENT:\n                case SEMICOLON:\n                    this.scanner.next();\n                    break;\n\n                default:\n                    children.appendData(this.tolerantParse(this.Declaration, consumeRaw));\n            }\n        }\n\n        return {\n            type: 'DeclarationList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n","var NUMBER = require('../../tokenizer').TYPE.Number;\n\n// special reader for units to avoid adjoined IE hacks (i.e. '1px\\9')\nfunction readUnit(scanner) {\n    var unit = scanner.getTokenValue();\n    var backSlashPos = unit.indexOf('\\\\');\n\n    if (backSlashPos > 0) {\n        // patch token offset\n        scanner.tokenStart += backSlashPos;\n\n        // return part before backslash\n        return unit.substring(0, backSlashPos);\n    }\n\n    // no backslash in unit name\n    scanner.next();\n\n    return unit;\n}\n\n// number ident\nmodule.exports = {\n    name: 'Dimension',\n    structure: {\n        value: String,\n        unit: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var value = this.scanner.consume(NUMBER);\n        var unit = readUnit(this.scanner);\n\n        return {\n            type: 'Dimension',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: value,\n            unit: unit\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n        processChunk(node.unit);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// <function-token> <sequence> ')'\nmodule.exports = {\n    name: 'Function',\n    structure: {\n        name: String,\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var name = this.scanner.consumeFunctionName();\n        var nameLowerCase = name.toLowerCase();\n        var children;\n\n        children = recognizer.hasOwnProperty(nameLowerCase)\n            ? recognizer[nameLowerCase].call(this, recognizer)\n            : readSequence.call(this, recognizer);\n\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'Function',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n        processChunk('(');\n        this.each(processChunk, node);\n        processChunk(')');\n    },\n    walkContext: 'function'\n};\n","var isHex = require('../../tokenizer').isHex;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar NUMBERSIGN = TYPE.NumberSign;\n\nfunction consumeHexSequence(scanner, required) {\n    if (!isHex(scanner.source.charCodeAt(scanner.tokenStart))) {\n        if (required) {\n            scanner.error('Unexpected input', scanner.tokenStart);\n        } else {\n            return;\n        }\n    }\n\n    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {\n        var code = scanner.source.charCodeAt(pos);\n\n        // break on non-hex char\n        if (!isHex(code)) {\n            // break token, exclude symbol\n            scanner.tokenStart = pos;\n            return;\n        }\n    }\n\n    // token is full hex sequence, go to next token\n    scanner.next();\n}\n\n// # ident\nmodule.exports = {\n    name: 'HexColor',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(NUMBERSIGN);\n\n        scan:\n        switch (this.scanner.tokenType) {\n            case NUMBER:\n                consumeHexSequence(this.scanner, true);\n\n                // if token is identifier then number consists of hex only,\n                // try to add identifier to result\n                if (this.scanner.tokenType === IDENTIFIER) {\n                    consumeHexSequence(this.scanner, false);\n                }\n\n                break;\n\n            case IDENTIFIER:\n                consumeHexSequence(this.scanner, true);\n                break;\n\n            default:\n                this.scanner.error('Number or identifier is expected');\n        }\n\n        return {\n            type: 'HexColor',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start + 1) // skip #\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('#');\n        processChunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar IDENTIFIER = TYPE.Identifier;\n\nmodule.exports = {\n    name: 'Identifier',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        return {\n            type: 'Identifier',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBERSIGN = TYPE.NumberSign;\n\n// '#' ident\nmodule.exports = {\n    name: 'IdSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        this.scanner.eat(NUMBERSIGN);\n\n        return {\n            type: 'IdSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('#');\n        processChunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar COLON = TYPE.Colon;\nvar SOLIDUS = TYPE.Solidus;\n\nmodule.exports = {\n    name: 'MediaFeature',\n    structure: {\n        name: String,\n        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var value = null;\n\n        this.scanner.eat(LEFTPARENTHESIS);\n        this.scanner.skipSC();\n\n        name = this.scanner.consume(IDENTIFIER);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTPARENTHESIS) {\n            this.scanner.eat(COLON);\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case NUMBER:\n                    if (this.scanner.lookupType(1) === IDENTIFIER) {\n                        value = this.Dimension();\n                    } else if (this.scanner.lookupNonWSType(1) === SOLIDUS) {\n                        value = this.Ratio();\n                    } else {\n                        value = this.Number();\n                    }\n\n                    break;\n\n                case IDENTIFIER:\n                    value = this.Identifier();\n\n                    break;\n\n                default:\n                    this.scanner.error('Number, dimension, ratio or identifier is expected');\n            }\n\n            this.scanner.skipSC();\n        }\n\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'MediaFeature',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            value: value\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('(');\n        processChunk(node.name);\n        if (node.value !== null) {\n            processChunk(':');\n            this.generate(processChunk, node.value);\n        }\n        processChunk(')');\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENTIFIER = TYPE.Identifier;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\n\nmodule.exports = {\n    name: 'MediaQuery',\n    structure: {\n        children: [['Identifier', 'MediaFeature', 'WhiteSpace']]\n    },\n    parse: function() {\n        this.scanner.skipSC();\n\n        var children = new List();\n        var child = null;\n        var space = null;\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case COMMENT:\n                    this.scanner.next();\n                    continue;\n\n                case WHITESPACE:\n                    space = this.WhiteSpace();\n                    continue;\n\n                case IDENTIFIER:\n                    child = this.Identifier();\n                    break;\n\n                case LEFTPARENTHESIS:\n                    child = this.MediaFeature();\n                    break;\n\n                default:\n                    break scan;\n            }\n\n            if (space !== null) {\n                children.appendData(space);\n                space = null;\n            }\n\n            children.appendData(child);\n        }\n\n        if (child === null) {\n            this.scanner.error('Identifier or parenthesis is expected');\n        }\n\n        return {\n            type: 'MediaQuery',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n","var List = require('../../utils/list');\nvar COMMA = require('../../tokenizer').TYPE.Comma;\n\nmodule.exports = {\n    name: 'MediaQueryList',\n    structure: {\n        children: [['MediaQuery']]\n    },\n    parse: function(relative) {\n        var children = new List();\n\n        this.scanner.skipSC();\n\n        while (!this.scanner.eof) {\n            children.appendData(this.MediaQuery(relative));\n\n            if (this.scanner.tokenType !== COMMA) {\n                break;\n            }\n\n            this.scanner.next();\n        }\n\n        return {\n            type: 'MediaQueryList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.eachComma(processChunk, node);\n    }\n};\n","// https://drafts.csswg.org/css-syntax-3/#the-anb-type\nmodule.exports = {\n    name: 'Nth',\n    structure: {\n        nth: ['AnPlusB', 'Identifier'],\n        selector: ['SelectorList', null]\n    },\n    parse: function(allowOfClause) {\n        this.scanner.skipSC();\n\n        var start = this.scanner.tokenStart;\n        var end = start;\n        var selector = null;\n        var query;\n\n        if (this.scanner.lookupValue(0, 'odd') || this.scanner.lookupValue(0, 'even')) {\n            query = this.Identifier();\n        } else {\n            query = this.AnPlusB();\n        }\n\n        this.scanner.skipSC();\n\n        if (allowOfClause && this.scanner.lookupValue(0, 'of')) {\n            this.scanner.next();\n\n            selector = this.SelectorList();\n\n            if (this.needPositions) {\n                end = selector.children.last().loc.end.offset;\n            }\n        } else {\n            if (this.needPositions) {\n                end = query.loc.end.offset;\n            }\n        }\n\n        return {\n            type: 'Nth',\n            loc: this.getLocation(start, end),\n            nth: query,\n            selector: selector\n        };\n    },\n    generate: function(processChunk, node) {\n        this.generate(processChunk, node.nth);\n        if (node.selector !== null) {\n            processChunk(' of ');\n            this.generate(processChunk, node.selector);\n        }\n    }\n};\n","var NUMBER = require('../../tokenizer').TYPE.Number;\n\nmodule.exports = {\n    name: 'Number',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'Number',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.scanner.consume(NUMBER)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","// '/' | '*' | ',' | ':' | '+' | '-'\nmodule.exports = {\n    name: 'Operator',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.next();\n\n        return {\n            type: 'Operator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\nmodule.exports = {\n    name: 'Parentheses',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.scanner.eat(LEFTPARENTHESIS);\n        children = readSequence.call(this, recognizer);\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'Parentheses',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('(');\n        this.each(processChunk, node);\n        processChunk(')');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar NUMBER = TYPE.Number;\nvar PERCENTSIGN = TYPE.PercentSign;\n\nmodule.exports = {\n    name: 'Percentage',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var number = this.scanner.consume(NUMBER);\n\n        this.scanner.eat(PERCENTSIGN);\n\n        return {\n            type: 'Percentage',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: number\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n        processChunk('%');\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// : ident [ '(' .. ')' ]?\nmodule.exports = {\n    name: 'PseudoClassSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.scanner.eat(COLON);\n\n        if (this.scanner.tokenType === FUNCTION) {\n            name = this.scanner.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = new List().appendData(\n                    this.Raw(this.scanner.currentToken, 0, 0, false, false)\n                );\n            }\n\n            this.scanner.eat(RIGHTPARENTHESIS);\n        } else {\n            name = this.scanner.consume(IDENTIFIER);\n        }\n\n        return {\n            type: 'PseudoClassSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(':');\n        processChunk(node.name);\n\n        if (node.children !== null) {\n            processChunk('(');\n            this.each(processChunk, node);\n            processChunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// :: ident [ '(' .. ')' ]?\nmodule.exports = {\n    name: 'PseudoElementSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.scanner.eat(COLON);\n        this.scanner.eat(COLON);\n\n        if (this.scanner.tokenType === FUNCTION) {\n            name = this.scanner.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = new List().appendData(\n                    this.Raw(this.scanner.currentToken, 0, 0, false, false)\n                );\n            }\n\n            this.scanner.eat(RIGHTPARENTHESIS);\n        } else {\n            name = this.scanner.consume(IDENTIFIER);\n        }\n\n        return {\n            type: 'PseudoElementSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('::');\n        processChunk(node.name);\n\n        if (node.children !== null) {\n            processChunk('(');\n            this.each(processChunk, node);\n            processChunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n","var isNumber = require('../../tokenizer').isNumber;\nvar TYPE = require('../../tokenizer').TYPE;\nvar NUMBER = TYPE.Number;\nvar SOLIDUS = TYPE.Solidus;\nvar FULLSTOP = TYPE.FullStop;\n\n// Terms of <ratio> should to be a positive number (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without exponent part.\n// Additional checks may to be applied on lexer validation.\nfunction consumeNumber(scanner) {\n    var value = scanner.consumeNonWS(NUMBER);\n\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i);\n        if (!isNumber(code) && code !== FULLSTOP) {\n            scanner.error('Unsigned number is expected', scanner.tokenStart - value.length + i);\n        }\n    }\n\n    if (Number(value) === 0) {\n        scanner.error('Zero number is not allowed', scanner.tokenStart - value.length);\n    }\n\n    return value;\n}\n\n// <positive-integer> S* '/' S* <positive-integer>\nmodule.exports = {\n    name: 'Ratio',\n    structure: {\n        left: String,\n        right: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var left = consumeNumber(this.scanner);\n        var right;\n\n        this.scanner.eatNonWS(SOLIDUS);\n        right = consumeNumber(this.scanner);\n\n        return {\n            type: 'Ratio',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            left: left,\n            right: right\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.left);\n        processChunk('/');\n        processChunk(node.right);\n    }\n};\n","module.exports = {\n    name: 'Raw',\n    structure: {\n        value: String\n    },\n    parse: function(startToken, endTokenType1, endTokenType2, includeTokenType2, excludeWhiteSpace) {\n        var startOffset = this.scanner.getTokenStart(startToken);\n        var endOffset;\n\n        this.scanner.skip(\n            this.scanner.getRawLength(\n                startToken,\n                endTokenType1,\n                endTokenType2,\n                includeTokenType2\n            )\n        );\n\n        if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {\n            endOffset = this.scanner.getOffsetExcludeWS();\n        } else {\n            endOffset = this.scanner.tokenStart;\n        }\n\n        return {\n            type: 'Raw',\n            loc: this.getLocation(startOffset, endOffset),\n            value: this.scanner.source.substring(startOffset, endOffset)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, LEFTCURLYBRACKET, 0, false, true);\n}\n\nmodule.exports = {\n    name: 'Rule',\n    structure: {\n        selector: ['SelectorList', 'Raw'],\n        block: ['Block']\n    },\n    parse: function() {\n        var startToken = this.scanner.currentToken;\n        var startOffset = this.scanner.tokenStart;\n        var selector = this.parseSelector\n            ? this.tolerantParse(this.SelectorList, consumeRaw)\n            : consumeRaw.call(this, startToken);\n        var block = this.Block(this.Declaration);\n\n        return {\n            type: 'Rule',\n            loc: this.getLocation(startOffset, this.scanner.tokenStart),\n            selector: selector,\n            block: block\n        };\n    },\n    generate: function(processChunk, node) {\n        this.generate(processChunk, node.selector);\n        this.generate(processChunk, node.block);\n    },\n    walkContext: 'rule'\n};\n","module.exports = {\n    name: 'Selector',\n    structure: {\n        children: [[\n            'TypeSelector',\n            'IdSelector',\n            'ClassSelector',\n            'AttributeSelector',\n            'PseudoClassSelector',\n            'PseudoElementSelector',\n            'Combinator',\n            'WhiteSpace'\n        ]]\n    },\n    parse: function() {\n        var children = this.readSequence(this.scope.Selector);\n\n        // nothing were consumed\n        if (children.isEmpty()) {\n            this.scanner.error('Selector is expected');\n        }\n\n        return {\n            type: 'Selector',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar COMMA = TYPE.Comma;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nmodule.exports = {\n    name: 'SelectorList',\n    structure: {\n        children: [['Selector', 'Raw']]\n    },\n    parse: function() {\n        var children = new List();\n\n        while (!this.scanner.eof) {\n            children.appendData(this.parseSelector\n                ? this.Selector()\n                : this.Raw(this.scanner.currentToken, COMMA, LEFTCURLYBRACKET, false, false)\n            );\n\n            if (this.scanner.tokenType === COMMA) {\n                this.scanner.next();\n                continue;\n            }\n\n            break;\n        }\n\n        return {\n            type: 'SelectorList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.eachComma(processChunk, node);\n    },\n    walkContext: 'selector'\n};\n","var STRING = require('../../tokenizer').TYPE.String;\n\nmodule.exports = {\n    name: 'String',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'String',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.scanner.consume(STRING)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\nvar ATRULE = TYPE.Atrule;\nvar CDO = TYPE.CDO;\nvar CDC = TYPE.CDC;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, 0, 0, false, false);\n}\n\nmodule.exports = {\n    name: 'StyleSheet',\n    structure: {\n        children: [['Comment', 'Atrule', 'Rule', 'Raw']]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = new List();\n        var child;\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE:\n                    this.scanner.next();\n                    continue;\n\n                case COMMENT:\n                    // ignore comments except exclamation comments (i.e. /*! .. */) on top level\n                    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK) {\n                        this.scanner.next();\n                        continue;\n                    }\n\n                    child = this.Comment();\n                    break;\n\n                case CDO: // <!--\n                    child = this.CDO();\n                    break;\n\n                case CDC: // -->\n                    child = this.CDC();\n                    break;\n\n                // CSS Syntax Module Level 3\n                // §2.2 Error handling\n                // At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\n                case ATRULE:\n                    child = this.Atrule();\n                    break;\n\n                // Anything else starts a qualified rule ...\n                default:\n                    child = this.tolerantParse(this.Rule, consumeRaw);\n            }\n\n            children.appendData(child);\n        }\n\n        return {\n            type: 'StyleSheet',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    },\n    walkContext: 'stylesheet'\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar ASTERISK = TYPE.Asterisk;\nvar VERTICALLINE = TYPE.VerticalLine;\n\nfunction eatIdentifierOrAsterisk() {\n    if (this.scanner.tokenType !== IDENTIFIER &&\n        this.scanner.tokenType !== ASTERISK) {\n        this.scanner.error('Identifier or asterisk is expected');\n    }\n\n    this.scanner.next();\n}\n\n// ident\n// ident|ident\n// ident|*\n// *\n// *|ident\n// *|*\n// |ident\n// |*\nmodule.exports = {\n    name: 'TypeSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        if (this.scanner.tokenType === VERTICALLINE) {\n            this.scanner.next();\n            eatIdentifierOrAsterisk.call(this);\n        } else {\n            eatIdentifierOrAsterisk.call(this);\n\n            if (this.scanner.tokenType === VERTICALLINE) {\n                this.scanner.next();\n                eatIdentifierOrAsterisk.call(this);\n            }\n        }\n\n        return {\n            type: 'TypeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n    }\n};\n","var isHex = require('../../tokenizer').isHex;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar FULLSTOP = TYPE.FullStop;\nvar QUESTIONMARK = TYPE.QuestionMark;\n\nfunction scanUnicodeNumber(scanner) {\n    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {\n        var code = scanner.source.charCodeAt(pos);\n\n        // break on fullstop or hyperminus/plussign after exponent\n        if (code === FULLSTOP || code === PLUSSIGN) {\n            // break token, exclude symbol\n            scanner.tokenStart = pos;\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://drafts.csswg.org/css-syntax-3/#urange\nfunction scanUnicodeRange(scanner) {\n    var hexStart = scanner.tokenStart + 1; // skip +\n    var hexLength = 0;\n\n    scan: {\n        if (scanner.tokenType === NUMBER) {\n            if (scanner.source.charCodeAt(scanner.tokenStart) !== FULLSTOP && scanUnicodeNumber(scanner)) {\n                scanner.next();\n            } else if (scanner.source.charCodeAt(scanner.tokenStart) !== HYPHENMINUS) {\n                break scan;\n            }\n        } else {\n            scanner.next(); // PLUSSIGN\n        }\n\n        if (scanner.tokenType === HYPHENMINUS) {\n            scanner.next();\n        }\n\n        if (scanner.tokenType === NUMBER) {\n            scanner.next();\n        }\n\n        if (scanner.tokenType === IDENTIFIER) {\n            scanner.next();\n        }\n\n        if (scanner.tokenStart === hexStart) {\n            scanner.error('Unexpected input', hexStart);\n        }\n    }\n\n    // validate for U+x{1,6} or U+x{1,6}-x{1,6}\n    // where x is [0-9a-fA-F]\n    for (var i = hexStart, wasHyphenMinus = false; i < scanner.tokenStart; i++) {\n        var code = scanner.source.charCodeAt(i);\n\n        if (isHex(code) === false && (code !== HYPHENMINUS || wasHyphenMinus)) {\n            scanner.error('Unexpected input', i);\n        }\n\n        if (code === HYPHENMINUS) {\n            // hex sequence shouldn't be an empty\n            if (hexLength === 0) {\n                scanner.error('Unexpected input', i);\n            }\n\n            wasHyphenMinus = true;\n            hexLength = 0;\n        } else {\n            hexLength++;\n\n            // too long hex sequence\n            if (hexLength > 6) {\n                scanner.error('Too long hex sequence', i);\n            }\n        }\n\n    }\n\n    // check we have a non-zero sequence\n    if (hexLength === 0) {\n        scanner.error('Unexpected input', i - 1);\n    }\n\n    // U+abc???\n    if (!wasHyphenMinus) {\n        // consume as many U+003F QUESTION MARK (?) code points as possible\n        for (; hexLength < 6 && !scanner.eof; scanner.next()) {\n            if (scanner.tokenType !== QUESTIONMARK) {\n                break;\n            }\n\n            hexLength++;\n        }\n    }\n}\n\nmodule.exports = {\n    name: 'UnicodeRange',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.next(); // U or u\n        scanUnicodeRange(this.scanner);\n\n        return {\n            type: 'UnicodeRange',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar STRING = TYPE.String;\nvar URL = TYPE.Url;\nvar RAW = TYPE.Raw;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// url '(' S* (string | raw) S* ')'\nmodule.exports = {\n    name: 'Url',\n    structure: {\n        value: ['String', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var value;\n\n        this.scanner.eat(URL);\n        this.scanner.skipSC();\n\n        switch (this.scanner.tokenType) {\n            case STRING:\n                value = this.String();\n                break;\n\n            case RAW:\n                value = this.Raw(this.scanner.currentToken, 0, RAW, true, false);\n                break;\n\n            default:\n                this.scanner.error('String or Raw is expected');\n        }\n\n        this.scanner.skipSC();\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'Url',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: value\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('url');\n        processChunk('(');\n        this.generate(processChunk, node.value);\n        processChunk(')');\n    }\n};\n","var endsWith = require('../../tokenizer').endsWith;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar SEMICOLON = TYPE.Semicolon;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\n\n// 'progid:' ws* 'DXImageTransform.Microsoft.' ident ws* '(' .* ')'\nfunction checkProgid(scanner) {\n    var offset = 0;\n\n    for (var type; type = scanner.lookupType(offset); offset++) {\n        if (type !== WHITESPACE && type !== COMMENT) {\n            break;\n        }\n    }\n\n    if (scanner.lookupValue(offset, 'alpha(') ||\n        scanner.lookupValue(offset, 'chroma(') ||\n        scanner.lookupValue(offset, 'dropshadow(')) {\n        if (scanner.lookupType(offset) !== FUNCTION) {\n            return false;\n        }\n    } else {\n        if (scanner.lookupValue(offset, 'progid') === false ||\n            scanner.lookupType(offset + 1) !== COLON) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nmodule.exports = {\n    name: 'Value',\n    structure: {\n        children: [[]]\n    },\n    parse: function(property) {\n        // special parser for filter property since it can contains non-standart syntax for old IE\n        if (property !== null && endsWith(property, 'filter') && checkProgid(this.scanner)) {\n            this.scanner.skipSC();\n            return this.Raw(this.scanner.currentToken, EXCLAMATIONMARK, SEMICOLON, false, false);\n        }\n\n        var start = this.scanner.tokenStart;\n        var children = this.readSequence(this.scope.Value);\n\n        return {\n            type: 'Value',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n","var WHITESPACE = require('../../tokenizer').TYPE.WhiteSpace;\nvar SPACE = Object.freeze({\n    type: 'WhiteSpace',\n    loc: null,\n    value: ' '\n});\n\nmodule.exports = {\n    name: 'WhiteSpace',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        this.scanner.eat(WHITESPACE);\n        return SPACE;\n\n        // return {\n        //     type: 'WhiteSpace',\n        //     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n        //     value: this.scanner.consume(WHITESPACE)\n        // };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","module.exports = {\n    AnPlusB: require('./AnPlusB'),\n    Atrule: require('./Atrule'),\n    AtruleExpression: require('./AtruleExpression'),\n    AttributeSelector: require('./AttributeSelector'),\n    Block: require('./Block'),\n    Brackets: require('./Brackets'),\n    CDC: require('./CDC'),\n    CDO: require('./CDO'),\n    ClassSelector: require('./ClassSelector'),\n    Combinator: require('./Combinator'),\n    Comment: require('./Comment'),\n    Declaration: require('./Declaration'),\n    DeclarationList: require('./DeclarationList'),\n    Dimension: require('./Dimension'),\n    Function: require('./Function'),\n    HexColor: require('./HexColor'),\n    Identifier: require('./Identifier'),\n    IdSelector: require('./IdSelector'),\n    MediaFeature: require('./MediaFeature'),\n    MediaQuery: require('./MediaQuery'),\n    MediaQueryList: require('./MediaQueryList'),\n    Nth: require('./Nth'),\n    Number: require('./Number'),\n    Operator: require('./Operator'),\n    Parentheses: require('./Parentheses'),\n    Percentage: require('./Percentage'),\n    PseudoClassSelector: require('./PseudoClassSelector'),\n    PseudoElementSelector: require('./PseudoElementSelector'),\n    Ratio: require('./Ratio'),\n    Raw: require('./Raw'),\n    Rule: require('./Rule'),\n    Selector: require('./Selector'),\n    SelectorList: require('./SelectorList'),\n    String: require('./String'),\n    StyleSheet: require('./StyleSheet'),\n    TypeSelector: require('./TypeSelector'),\n    UnicodeRange: require('./UnicodeRange'),\n    Url: require('./Url'),\n    Value: require('./Value'),\n    WhiteSpace: require('./WhiteSpace')\n};\n","module.exports = {\n    parseContext: {\n        default: 'StyleSheet',\n        stylesheet: 'StyleSheet',\n        atrule: 'Atrule',\n        atruleExpression: function(options) {\n            return this.AtruleExpression(options.atrule ? String(options.atrule) : null);\n        },\n        mediaQueryList: 'MediaQueryList',\n        mediaQuery: 'MediaQuery',\n        rule: 'Rule',\n        selectorList: 'SelectorList',\n        selector: 'Selector',\n        block: function() {\n            return this.Block(this.Declaration);\n        },\n        declarationList: 'DeclarationList',\n        declaration: 'Declaration',\n        value: function(options) {\n            return this.Value(options.property ? String(options.property) : null);\n        }\n    },\n    scope: require('../scope'),\n    atrule: require('../atrule'),\n    pseudo: require('../pseudo'),\n    node: require('../node')\n};\n","var createParser = require('./create');\nvar config = require('../syntax/config/parser');\n\nmodule.exports = createParser(config);\n","function walk ( ast, ref) {\n\tvar enter = ref.enter;\n\tvar leave = ref.leave;\n\n\tvisit( ast, null, enter, leave );\n}\n\nvar shouldSkip = false;\nvar context = { skip: function () { return shouldSkip = true; } };\n\nvar childKeys = {};\n\nvar toString = Object.prototype.toString;\n\nfunction isArray ( thing ) {\n\treturn toString.call( thing ) === '[object Array]';\n}\n\nfunction visit ( node, parent, enter, leave, prop, index ) {\n\tif ( !node ) { return; }\n\n\tif ( enter ) {\n\t\tvar _shouldSkip = shouldSkip;\n\t\tshouldSkip = false;\n\t\tenter.call( context, node, parent, prop, index );\n\t\tvar skipped = shouldSkip;\n\t\tshouldSkip = _shouldSkip;\n\n\t\tif ( skipped ) { return; }\n\t}\n\n\tvar keys = childKeys[ node.type ] || (\n\t\tchildKeys[ node.type ] = Object.keys( node ).filter( function (key) { return typeof node[ key ] === 'object'; } )\n\t);\n\n\tfor ( var i = 0; i < keys.length; i += 1 ) {\n\t\tvar key = keys[i];\n\t\tvar value = node[ key ];\n\n\t\tif ( isArray( value ) ) {\n\t\t\tfor ( var j = 0; j < value.length; j += 1 ) {\n\t\t\t\tvisit( value[j], node, enter, leave, key, j );\n\t\t\t}\n\t\t}\n\n\t\telse if ( value && value.type ) {\n\t\t\tvisit( value, node, enter, leave, key, null );\n\t\t}\n\t}\n\n\tif ( leave ) {\n\t\tleave( node, parent, prop, index );\n\t}\n}\n\nexport { walk, childKeys };\n//# sourceMappingURL=estree-walker.es.js.map\n","import parse from 'css-tree/lib/parser/index.js';\nimport { walk } from 'estree-walker';\nimport { Parser } from '../index';\nimport { Node } from '../../interfaces';\n\nexport default function readStyle(parser: Parser, start: number, attributes: Node[]) {\n\tconst contentStart = parser.index;\n\tconst styles = parser.readUntil(/<\\/style>/);\n\tconst contentEnd = parser.index;\n\n\tlet ast;\n\n\ttry {\n\t\tast = parse(styles, {\n\t\t\tpositions: true,\n\t\t\toffset: contentStart,\n\t\t});\n\t} catch (err) {\n\t\tif (err.name === 'CssSyntaxError') {\n\t\t\tparser.error(err.message, err.offset);\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tast = JSON.parse(JSON.stringify(ast));\n\n\t// tidy up AST\n\twalk(ast, {\n\t\tenter: (node: Node) => {\n\t\t\t// replace `ref:a` nodes\n\t\t\tif (node.type === 'Selector') {\n\t\t\t\tfor (let i = 0; i < node.children.length; i += 1) {\n\t\t\t\t\tconst a = node.children[i];\n\t\t\t\t\tconst b = node.children[i + 1];\n\n\t\t\t\t\tif (isRefSelector(a, b)) {\n\t\t\t\t\t\tnode.children.splice(i, 2, {\n\t\t\t\t\t\t\ttype: 'RefSelector',\n\t\t\t\t\t\t\tstart: a.loc.start.offset,\n\t\t\t\t\t\t\tend: b.loc.end.offset,\n\t\t\t\t\t\t\tname: b.name\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node.loc) {\n\t\t\t\tnode.start = node.loc.start.offset;\n\t\t\t\tnode.end = node.loc.end.offset;\n\t\t\t\tdelete node.loc;\n\t\t\t}\n\t\t}\n\t});\n\n\tparser.eat('</style>', true);\n\tconst end = parser.index;\n\n\treturn {\n\t\tstart,\n\t\tend,\n\t\tattributes,\n\t\tchildren: ast.children,\n\t\tcontent: {\n\t\t\tstart: contentStart,\n\t\t\tend: contentEnd,\n\t\t\tstyles,\n\t\t},\n\t};\n}\n\nfunction isRefSelector(a: Node, b: Node) {\n\tif (!b) return false;\n\n\treturn (\n\t\ta.type === 'TypeSelector' &&\n\t\ta.name === 'ref' &&\n\t\tb.type === 'PseudoClassSelector'\n\t);\n}","import { parseExpressionAt } from 'acorn';\nimport repeat from '../../utils/repeat';\nimport { Parser } from '../index';\n\nconst DIRECTIVES = {\n\tRef: {\n\t\tnames: ['ref'],\n\t\tattribute(start, end, type, name) {\n\t\t\treturn { start, end, type, name };\n\t\t},\n\t\tallowedExpressionTypes: [],\n\t\terror: 'ref directives cannot have a value'\n\t},\n\n\tEventHandler: {\n\t\tnames: ['on'],\n\t\tattribute(start, end, type, name, expression) {\n\t\t\treturn { start, end, type, name, expression };\n\t\t},\n\t\tallowedExpressionTypes: ['CallExpression'],\n\t\terror: 'Expected a method call'\n\t},\n\n\tBinding: {\n\t\tnames: ['bind'],\n\t\tattribute(start, end, type, name, expression) {\n\t\t\treturn {\n\t\t\t\tstart, end, type, name,\n\t\t\t\tvalue: expression || {\n\t\t\t\t\ttype: 'Identifier',\n\t\t\t\t\tstart: start + 5,\n\t\t\t\t\tend,\n\t\t\t\t\tname,\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tallowedExpressionTypes: ['Identifier', 'MemberExpression'],\n\t\terror: 'Can only bind to an identifier (e.g. `foo`) or a member expression (e.g. `foo.bar` or `foo[baz]`)'\n\t},\n\n\tTransition: {\n\t\tnames: ['in', 'out', 'transition'],\n\t\tattribute(start, end, type, name, expression, directiveName) {\n\t\t\treturn {\n\t\t\t\tstart, end, type, name, expression,\n\t\t\t\tintro: directiveName === 'in' || directiveName === 'transition',\n\t\t\t\toutro: directiveName === 'out' || directiveName === 'transition',\n\t\t\t};\n\t\t},\n\t\tallowedExpressionTypes: ['ObjectExpression'],\n\t\terror: 'Transition argument must be an object literal, e.g. `{ duration: 400 }`'\n\t},\n\n\tAction: {\n\t\tnames: [ 'use' ],\n\t\tattribute(start, end, type, name, expression) {\n\t\t\treturn { start, end, type, name, expression };\n\t\t},\n\t\tallowedExpressionTypes: [ 'Identifier', 'MemberExpression', 'ObjectExpression', 'Literal', 'CallExpression' ],\n\t\terror: 'Data passed to actions must be an identifier (e.g. `foo`), a member expression ' +\n\t\t\t'(e.g. `foo.bar` or `foo[baz]`), a method call (e.g. `foo()`), or a literal (e.g. `true` or `\\'a string\\'`'\n\t},\n};\n\n\nconst lookupByName = {};\n\nObject.keys(DIRECTIVES).forEach(name => {\n\tconst directive = DIRECTIVES[name];\n\tdirective.names.forEach(type => lookupByName[type] = name);\n});\n\nfunction readExpression(parser: Parser, start: number, quoteMark: string|null) {\n\tlet str = '';\n\tlet escaped = false;\n\n\tfor (let i = start; i < parser.template.length; i += 1) {\n\t\tconst char = parser.template[i];\n\n\t\tif (quoteMark) {\n\t\t\tif (char === quoteMark) {\n\t\t\t\tif (escaped) {\n\t\t\t\t\tstr += quoteMark;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (escaped) {\n\t\t\t\tstr += '\\\\' + char;\n\t\t\t\tescaped = false;\n\t\t\t} else if (char === '\\\\') {\n\t\t\t\tescaped = true;\n\t\t\t} else {\n\t\t\t\tstr += char;\n\t\t\t}\n\t\t} else if (/[\\s\\/>]/.test(char)) {\n\t\t\tbreak;\n\t\t} else {\n\t\t\tstr += char;\n\t\t}\n\t}\n\n\tconst expression = parseExpressionAt(repeat(' ', start) + str, start, {\n\t\tecmaVersion: 9,\n\t});\n\tparser.index = expression.end;\n\n\tparser.allowWhitespace();\n\tif (quoteMark) parser.eat(quoteMark, true);\n\n\treturn expression;\n}\n\nexport function readDirective(\n\tparser: Parser,\n\tstart: number,\n\tattrName: string\n) {\n\tconst [directiveName, name] = attrName.split(':');\n\tif (name === undefined) return; // No colon in the name\n\n\tif (directiveName === '') {\n\t\t// not a directive — :foo is short for foo={{foo}}\n\t\treturn {\n\t\t\tstart: start,\n\t\t\tend: start + name.length + 1,\n\t\t\ttype: 'Attribute',\n\t\t\tname,\n\t\t\tvalue: getShorthandValue(start + 1, name)\n\t\t};\n\t}\n\n\tconst type = lookupByName[directiveName];\n\tif (!type) return; // not a registered directive\n\n\tconst directive = DIRECTIVES[type];\n\tlet expression = null;\n\n\tif (parser.eat('=')) {\n\t\tconst quoteMark = parser.eat(`'`) ? `'` : parser.eat(`\"`) ? `\"` : null;\n\n\t\tconst expressionStart = parser.index;\n\n\t\tif (parser.eat('{{')) {\n\t\t\tlet message = 'directive values should not be wrapped';\n\t\t\tconst expressionEnd = parser.template.indexOf('}}', expressionStart);\n\t\t\tif (expressionEnd !== -1) {\n\t\t\t\tconst value = parser.template.slice(parser.index, expressionEnd);\n\t\t\t\tmessage += ` — use '${value}', not '{{${value}}}'`;\n\t\t\t}\n\n\t\t\tparser.error(message, expressionStart);\n\t\t}\n\n\t\texpression = readExpression(parser, expressionStart, quoteMark);\n\t\tif (directive.allowedExpressionTypes.indexOf(expression.type) === -1) {\n\t\t\tparser.error(directive.error, expressionStart);\n\t\t}\n\t}\n\n\treturn directive.attribute(start, parser.index, type, name, expression, directiveName);\n}\n\n\nfunction getShorthandValue(start: number, name: string) {\n\tconst end = start + name.length;\n\n\treturn [\n\t\t{\n\t\t\ttype: 'AttributeShorthand',\n\t\t\tstart,\n\t\t\tend,\n\t\t\texpression: {\n\t\t\t\ttype: 'Identifier',\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tname,\n\t\t\t},\n\t\t},\n\t];\n}\n","// https://dev.w3.org/html5/html-author/charref\nexport default {\n\tCounterClockwiseContourIntegral: 8755,\n\tClockwiseContourIntegral: 8754,\n\tDoubleLongLeftRightArrow: 10234,\n\tDiacriticalDoubleAcute: 733,\n\tNotSquareSupersetEqual: 8931,\n\tCloseCurlyDoubleQuote: 8221,\n\tDoubleContourIntegral: 8751,\n\tFilledVerySmallSquare: 9642,\n\tNegativeVeryThinSpace: 8203,\n\tNotPrecedesSlantEqual: 8928,\n\tNotRightTriangleEqual: 8941,\n\tNotSucceedsSlantEqual: 8929,\n\tCapitalDifferentialD: 8517,\n\tDoubleLeftRightArrow: 8660,\n\tDoubleLongRightArrow: 10233,\n\tEmptyVerySmallSquare: 9643,\n\tNestedGreaterGreater: 8811,\n\tNotDoubleVerticalBar: 8742,\n\tNotLeftTriangleEqual: 8940,\n\tNotSquareSubsetEqual: 8930,\n\tOpenCurlyDoubleQuote: 8220,\n\tReverseUpEquilibrium: 10607,\n\tDoubleLongLeftArrow: 10232,\n\tDownLeftRightVector: 10576,\n\tLeftArrowRightArrow: 8646,\n\tNegativeMediumSpace: 8203,\n\tRightArrowLeftArrow: 8644,\n\tSquareSupersetEqual: 8850,\n\tleftrightsquigarrow: 8621,\n\tDownRightTeeVector: 10591,\n\tDownRightVectorBar: 10583,\n\tLongLeftRightArrow: 10231,\n\tLongleftrightarrow: 10234,\n\tNegativeThickSpace: 8203,\n\tPrecedesSlantEqual: 8828,\n\tReverseEquilibrium: 8651,\n\tRightDoubleBracket: 10215,\n\tRightDownTeeVector: 10589,\n\tRightDownVectorBar: 10581,\n\tRightTriangleEqual: 8885,\n\tSquareIntersection: 8851,\n\tSucceedsSlantEqual: 8829,\n\tblacktriangleright: 9656,\n\tlongleftrightarrow: 10231,\n\tDoubleUpDownArrow: 8661,\n\tDoubleVerticalBar: 8741,\n\tDownLeftTeeVector: 10590,\n\tDownLeftVectorBar: 10582,\n\tFilledSmallSquare: 9724,\n\tGreaterSlantEqual: 10878,\n\tLeftDoubleBracket: 10214,\n\tLeftDownTeeVector: 10593,\n\tLeftDownVectorBar: 10585,\n\tLeftTriangleEqual: 8884,\n\tNegativeThinSpace: 8203,\n\tNotReverseElement: 8716,\n\tNotTildeFullEqual: 8775,\n\tRightAngleBracket: 10217,\n\tRightUpDownVector: 10575,\n\tSquareSubsetEqual: 8849,\n\tVerticalSeparator: 10072,\n\tblacktriangledown: 9662,\n\tblacktriangleleft: 9666,\n\tleftrightharpoons: 8651,\n\trightleftharpoons: 8652,\n\ttwoheadrightarrow: 8608,\n\tDiacriticalAcute: 180,\n\tDiacriticalGrave: 96,\n\tDiacriticalTilde: 732,\n\tDoubleRightArrow: 8658,\n\tDownArrowUpArrow: 8693,\n\tEmptySmallSquare: 9723,\n\tGreaterEqualLess: 8923,\n\tGreaterFullEqual: 8807,\n\tLeftAngleBracket: 10216,\n\tLeftUpDownVector: 10577,\n\tLessEqualGreater: 8922,\n\tNonBreakingSpace: 160,\n\tNotRightTriangle: 8939,\n\tNotSupersetEqual: 8841,\n\tRightTriangleBar: 10704,\n\tRightUpTeeVector: 10588,\n\tRightUpVectorBar: 10580,\n\tUnderParenthesis: 9181,\n\tUpArrowDownArrow: 8645,\n\tcirclearrowright: 8635,\n\tdownharpoonright: 8642,\n\tntrianglerighteq: 8941,\n\trightharpoondown: 8641,\n\trightrightarrows: 8649,\n\ttwoheadleftarrow: 8606,\n\tvartriangleright: 8883,\n\tCloseCurlyQuote: 8217,\n\tContourIntegral: 8750,\n\tDoubleDownArrow: 8659,\n\tDoubleLeftArrow: 8656,\n\tDownRightVector: 8641,\n\tLeftRightVector: 10574,\n\tLeftTriangleBar: 10703,\n\tLeftUpTeeVector: 10592,\n\tLeftUpVectorBar: 10584,\n\tLowerRightArrow: 8600,\n\tNotGreaterEqual: 8817,\n\tNotGreaterTilde: 8821,\n\tNotLeftTriangle: 8938,\n\tOverParenthesis: 9180,\n\tRightDownVector: 8642,\n\tShortRightArrow: 8594,\n\tUpperRightArrow: 8599,\n\tbigtriangledown: 9661,\n\tcirclearrowleft: 8634,\n\tcurvearrowright: 8631,\n\tdownharpoonleft: 8643,\n\tleftharpoondown: 8637,\n\tleftrightarrows: 8646,\n\tnLeftrightarrow: 8654,\n\tnleftrightarrow: 8622,\n\tntrianglelefteq: 8940,\n\trightleftarrows: 8644,\n\trightsquigarrow: 8605,\n\trightthreetimes: 8908,\n\tstraightepsilon: 1013,\n\ttrianglerighteq: 8885,\n\tvartriangleleft: 8882,\n\tDiacriticalDot: 729,\n\tDoubleRightTee: 8872,\n\tDownLeftVector: 8637,\n\tGreaterGreater: 10914,\n\tHorizontalLine: 9472,\n\tInvisibleComma: 8291,\n\tInvisibleTimes: 8290,\n\tLeftDownVector: 8643,\n\tLeftRightArrow: 8596,\n\tLeftrightarrow: 8660,\n\tLessSlantEqual: 10877,\n\tLongRightArrow: 10230,\n\tLongrightarrow: 10233,\n\tLowerLeftArrow: 8601,\n\tNestedLessLess: 8810,\n\tNotGreaterLess: 8825,\n\tNotLessGreater: 8824,\n\tNotSubsetEqual: 8840,\n\tNotVerticalBar: 8740,\n\tOpenCurlyQuote: 8216,\n\tReverseElement: 8715,\n\tRightTeeVector: 10587,\n\tRightVectorBar: 10579,\n\tShortDownArrow: 8595,\n\tShortLeftArrow: 8592,\n\tSquareSuperset: 8848,\n\tTildeFullEqual: 8773,\n\tUpperLeftArrow: 8598,\n\tZeroWidthSpace: 8203,\n\tcurvearrowleft: 8630,\n\tdoublebarwedge: 8966,\n\tdowndownarrows: 8650,\n\thookrightarrow: 8618,\n\tleftleftarrows: 8647,\n\tleftrightarrow: 8596,\n\tleftthreetimes: 8907,\n\tlongrightarrow: 10230,\n\tlooparrowright: 8620,\n\tnshortparallel: 8742,\n\tntriangleright: 8939,\n\trightarrowtail: 8611,\n\trightharpoonup: 8640,\n\ttrianglelefteq: 8884,\n\tupharpoonright: 8638,\n\tApplyFunction: 8289,\n\tDifferentialD: 8518,\n\tDoubleLeftTee: 10980,\n\tDoubleUpArrow: 8657,\n\tLeftTeeVector: 10586,\n\tLeftVectorBar: 10578,\n\tLessFullEqual: 8806,\n\tLongLeftArrow: 10229,\n\tLongleftarrow: 10232,\n\tNotTildeEqual: 8772,\n\tNotTildeTilde: 8777,\n\tPoincareplane: 8460,\n\tPrecedesEqual: 10927,\n\tPrecedesTilde: 8830,\n\tRightArrowBar: 8677,\n\tRightTeeArrow: 8614,\n\tRightTriangle: 8883,\n\tRightUpVector: 8638,\n\tSucceedsEqual: 10928,\n\tSucceedsTilde: 8831,\n\tSupersetEqual: 8839,\n\tUpEquilibrium: 10606,\n\tVerticalTilde: 8768,\n\tVeryThinSpace: 8202,\n\tbigtriangleup: 9651,\n\tblacktriangle: 9652,\n\tdivideontimes: 8903,\n\tfallingdotseq: 8786,\n\thookleftarrow: 8617,\n\tleftarrowtail: 8610,\n\tleftharpoonup: 8636,\n\tlongleftarrow: 10229,\n\tlooparrowleft: 8619,\n\tmeasuredangle: 8737,\n\tntriangleleft: 8938,\n\tshortparallel: 8741,\n\tsmallsetminus: 8726,\n\ttriangleright: 9657,\n\tupharpoonleft: 8639,\n\tDownArrowBar: 10515,\n\tDownTeeArrow: 8615,\n\tExponentialE: 8519,\n\tGreaterEqual: 8805,\n\tGreaterTilde: 8819,\n\tHilbertSpace: 8459,\n\tHumpDownHump: 8782,\n\tIntersection: 8898,\n\tLeftArrowBar: 8676,\n\tLeftTeeArrow: 8612,\n\tLeftTriangle: 8882,\n\tLeftUpVector: 8639,\n\tNotCongruent: 8802,\n\tNotLessEqual: 8816,\n\tNotLessTilde: 8820,\n\tProportional: 8733,\n\tRightCeiling: 8969,\n\tRoundImplies: 10608,\n\tShortUpArrow: 8593,\n\tSquareSubset: 8847,\n\tUnderBracket: 9141,\n\tVerticalLine: 124,\n\tblacklozenge: 10731,\n\texponentiale: 8519,\n\trisingdotseq: 8787,\n\ttriangledown: 9663,\n\ttriangleleft: 9667,\n\tCircleMinus: 8854,\n\tCircleTimes: 8855,\n\tEquilibrium: 8652,\n\tGreaterLess: 8823,\n\tLeftCeiling: 8968,\n\tLessGreater: 8822,\n\tMediumSpace: 8287,\n\tNotPrecedes: 8832,\n\tNotSucceeds: 8833,\n\tOverBracket: 9140,\n\tRightVector: 8640,\n\tRrightarrow: 8667,\n\tRuleDelayed: 10740,\n\tSmallCircle: 8728,\n\tSquareUnion: 8852,\n\tSubsetEqual: 8838,\n\tUpDownArrow: 8597,\n\tUpdownarrow: 8661,\n\tVerticalBar: 8739,\n\tbackepsilon: 1014,\n\tblacksquare: 9642,\n\tcircledcirc: 8858,\n\tcircleddash: 8861,\n\tcurlyeqprec: 8926,\n\tcurlyeqsucc: 8927,\n\tdiamondsuit: 9830,\n\teqslantless: 10901,\n\texpectation: 8496,\n\tnRightarrow: 8655,\n\tnrightarrow: 8603,\n\tpreccurlyeq: 8828,\n\tprecnapprox: 10937,\n\tquaternions: 8461,\n\tstraightphi: 981,\n\tsucccurlyeq: 8829,\n\tsuccnapprox: 10938,\n\tthickapprox: 8776,\n\tupdownarrow: 8597,\n\tBernoullis: 8492,\n\tCirclePlus: 8853,\n\tEqualTilde: 8770,\n\tFouriertrf: 8497,\n\tImaginaryI: 8520,\n\tLaplacetrf: 8466,\n\tLeftVector: 8636,\n\tLleftarrow: 8666,\n\tNotElement: 8713,\n\tNotGreater: 8815,\n\tProportion: 8759,\n\tRightArrow: 8594,\n\tRightFloor: 8971,\n\tRightarrow: 8658,\n\tTildeEqual: 8771,\n\tTildeTilde: 8776,\n\tUnderBrace: 9183,\n\tUpArrowBar: 10514,\n\tUpTeeArrow: 8613,\n\tcircledast: 8859,\n\tcomplement: 8705,\n\tcurlywedge: 8911,\n\teqslantgtr: 10902,\n\tgtreqqless: 10892,\n\tlessapprox: 10885,\n\tlesseqqgtr: 10891,\n\tlmoustache: 9136,\n\tlongmapsto: 10236,\n\tmapstodown: 8615,\n\tmapstoleft: 8612,\n\tnLeftarrow: 8653,\n\tnleftarrow: 8602,\n\tprecapprox: 10935,\n\trightarrow: 8594,\n\trmoustache: 9137,\n\tsqsubseteq: 8849,\n\tsqsupseteq: 8850,\n\tsubsetneqq: 10955,\n\tsuccapprox: 10936,\n\tsupsetneqq: 10956,\n\tupuparrows: 8648,\n\tvarepsilon: 949,\n\tvarnothing: 8709,\n\tBackslash: 8726,\n\tCenterDot: 183,\n\tCircleDot: 8857,\n\tCongruent: 8801,\n\tCoproduct: 8720,\n\tDoubleDot: 168,\n\tDownArrow: 8595,\n\tDownBreve: 785,\n\tDownarrow: 8659,\n\tHumpEqual: 8783,\n\tLeftArrow: 8592,\n\tLeftFloor: 8970,\n\tLeftarrow: 8656,\n\tLessTilde: 8818,\n\tMellintrf: 8499,\n\tMinusPlus: 8723,\n\tNotCupCap: 8813,\n\tNotExists: 8708,\n\tOverBrace: 9182,\n\tPlusMinus: 177,\n\tTherefore: 8756,\n\tThinSpace: 8201,\n\tTripleDot: 8411,\n\tUnionPlus: 8846,\n\tbackprime: 8245,\n\tbacksimeq: 8909,\n\tbigotimes: 10754,\n\tcenterdot: 183,\n\tcheckmark: 10003,\n\tcomplexes: 8450,\n\tdotsquare: 8865,\n\tdownarrow: 8595,\n\tgtrapprox: 10886,\n\tgtreqless: 8923,\n\theartsuit: 9829,\n\tleftarrow: 8592,\n\tlesseqgtr: 8922,\n\tnparallel: 8742,\n\tnshortmid: 8740,\n\tnsubseteq: 8840,\n\tnsupseteq: 8841,\n\tpitchfork: 8916,\n\trationals: 8474,\n\tspadesuit: 9824,\n\tsubseteqq: 10949,\n\tsubsetneq: 8842,\n\tsupseteqq: 10950,\n\tsupsetneq: 8843,\n\ttherefore: 8756,\n\ttriangleq: 8796,\n\tvarpropto: 8733,\n\tDDotrahd: 10513,\n\tDotEqual: 8784,\n\tIntegral: 8747,\n\tLessLess: 10913,\n\tNotEqual: 8800,\n\tNotTilde: 8769,\n\tPartialD: 8706,\n\tPrecedes: 8826,\n\tRightTee: 8866,\n\tSucceeds: 8827,\n\tSuchThat: 8715,\n\tSuperset: 8835,\n\tUarrocir: 10569,\n\tUnderBar: 818,\n\tandslope: 10840,\n\tangmsdaa: 10664,\n\tangmsdab: 10665,\n\tangmsdac: 10666,\n\tangmsdad: 10667,\n\tangmsdae: 10668,\n\tangmsdaf: 10669,\n\tangmsdag: 10670,\n\tangmsdah: 10671,\n\tangrtvbd: 10653,\n\tapproxeq: 8778,\n\tawconint: 8755,\n\tbackcong: 8780,\n\tbarwedge: 8965,\n\tbbrktbrk: 9142,\n\tbigoplus: 10753,\n\tbigsqcup: 10758,\n\tbiguplus: 10756,\n\tbigwedge: 8896,\n\tboxminus: 8863,\n\tboxtimes: 8864,\n\tcapbrcup: 10825,\n\tcircledR: 174,\n\tcircledS: 9416,\n\tcirfnint: 10768,\n\tclubsuit: 9827,\n\tcupbrcap: 10824,\n\tcurlyvee: 8910,\n\tcwconint: 8754,\n\tdoteqdot: 8785,\n\tdotminus: 8760,\n\tdrbkarow: 10512,\n\tdzigrarr: 10239,\n\telinters: 9191,\n\temptyset: 8709,\n\teqvparsl: 10725,\n\tfpartint: 10765,\n\tgeqslant: 10878,\n\tgesdotol: 10884,\n\tgnapprox: 10890,\n\thksearow: 10533,\n\thkswarow: 10534,\n\timagline: 8464,\n\timagpart: 8465,\n\tinfintie: 10717,\n\tintegers: 8484,\n\tintercal: 8890,\n\tintlarhk: 10775,\n\tlaemptyv: 10676,\n\tldrushar: 10571,\n\tleqslant: 10877,\n\tlesdotor: 10883,\n\tllcorner: 8990,\n\tlnapprox: 10889,\n\tlrcorner: 8991,\n\tlurdshar: 10570,\n\tmapstoup: 8613,\n\tmultimap: 8888,\n\tnaturals: 8469,\n\totimesas: 10806,\n\tparallel: 8741,\n\tplusacir: 10787,\n\tpointint: 10773,\n\tprecneqq: 10933,\n\tprecnsim: 8936,\n\tprofalar: 9006,\n\tprofline: 8978,\n\tprofsurf: 8979,\n\traemptyv: 10675,\n\trealpart: 8476,\n\trppolint: 10770,\n\trtriltri: 10702,\n\tscpolint: 10771,\n\tsetminus: 8726,\n\tshortmid: 8739,\n\tsmeparsl: 10724,\n\tsqsubset: 8847,\n\tsqsupset: 8848,\n\tsubseteq: 8838,\n\tsuccneqq: 10934,\n\tsuccnsim: 8937,\n\tsupseteq: 8839,\n\tthetasym: 977,\n\tthicksim: 8764,\n\ttimesbar: 10801,\n\ttriangle: 9653,\n\ttriminus: 10810,\n\ttrpezium: 9186,\n\tulcorner: 8988,\n\turcorner: 8989,\n\tvarkappa: 1008,\n\tvarsigma: 962,\n\tvartheta: 977,\n\tBecause: 8757,\n\tCayleys: 8493,\n\tCconint: 8752,\n\tCedilla: 184,\n\tDiamond: 8900,\n\tDownTee: 8868,\n\tElement: 8712,\n\tEpsilon: 917,\n\tImplies: 8658,\n\tLeftTee: 8867,\n\tNewLine: 10,\n\tNoBreak: 8288,\n\tNotLess: 8814,\n\tOmicron: 927,\n\tOverBar: 175,\n\tProduct: 8719,\n\tUpArrow: 8593,\n\tUparrow: 8657,\n\tUpsilon: 933,\n\talefsym: 8501,\n\tangrtvb: 8894,\n\tangzarr: 9084,\n\tasympeq: 8781,\n\tbacksim: 8765,\n\tbecause: 8757,\n\tbemptyv: 10672,\n\tbetween: 8812,\n\tbigcirc: 9711,\n\tbigodot: 10752,\n\tbigstar: 9733,\n\tboxplus: 8862,\n\tccupssm: 10832,\n\tcemptyv: 10674,\n\tcirscir: 10690,\n\tcoloneq: 8788,\n\tcongdot: 10861,\n\tcudarrl: 10552,\n\tcudarrr: 10549,\n\tcularrp: 10557,\n\tcurarrm: 10556,\n\tdbkarow: 10511,\n\tddagger: 8225,\n\tddotseq: 10871,\n\tdemptyv: 10673,\n\tdiamond: 8900,\n\tdigamma: 989,\n\tdotplus: 8724,\n\tdwangle: 10662,\n\tepsilon: 949,\n\teqcolon: 8789,\n\tequivDD: 10872,\n\tgesdoto: 10882,\n\tgtquest: 10876,\n\tgtrless: 8823,\n\tharrcir: 10568,\n\tintprod: 10812,\n\tisindot: 8949,\n\tlarrbfs: 10527,\n\tlarrsim: 10611,\n\tlbrksld: 10639,\n\tlbrkslu: 10637,\n\tldrdhar: 10599,\n\tlesdoto: 10881,\n\tlessdot: 8918,\n\tlessgtr: 8822,\n\tlesssim: 8818,\n\tlotimes: 10804,\n\tlozenge: 9674,\n\tltquest: 10875,\n\tluruhar: 10598,\n\tmaltese: 10016,\n\tminusdu: 10794,\n\tnapprox: 8777,\n\tnatural: 9838,\n\tnearrow: 8599,\n\tnexists: 8708,\n\tnotinva: 8713,\n\tnotinvb: 8951,\n\tnotinvc: 8950,\n\tnotniva: 8716,\n\tnotnivb: 8958,\n\tnotnivc: 8957,\n\tnpolint: 10772,\n\tnsqsube: 8930,\n\tnsqsupe: 8931,\n\tnvinfin: 10718,\n\tnwarrow: 8598,\n\tolcross: 10683,\n\tomicron: 959,\n\torderof: 8500,\n\torslope: 10839,\n\tpertenk: 8241,\n\tplanckh: 8462,\n\tpluscir: 10786,\n\tplussim: 10790,\n\tplustwo: 10791,\n\tprecsim: 8830,\n\tquatint: 10774,\n\tquesteq: 8799,\n\trarrbfs: 10528,\n\trarrsim: 10612,\n\trbrksld: 10638,\n\trbrkslu: 10640,\n\trdldhar: 10601,\n\trealine: 8475,\n\trotimes: 10805,\n\truluhar: 10600,\n\tsearrow: 8600,\n\tsimplus: 10788,\n\tsimrarr: 10610,\n\tsubedot: 10947,\n\tsubmult: 10945,\n\tsubplus: 10943,\n\tsubrarr: 10617,\n\tsuccsim: 8831,\n\tsupdsub: 10968,\n\tsupedot: 10948,\n\tsuphsub: 10967,\n\tsuplarr: 10619,\n\tsupmult: 10946,\n\tsupplus: 10944,\n\tswarrow: 8601,\n\ttopfork: 10970,\n\ttriplus: 10809,\n\ttritime: 10811,\n\tuparrow: 8593,\n\tupsilon: 965,\n\tuwangle: 10663,\n\tvzigzag: 10650,\n\tzigrarr: 8669,\n\tAacute: 193,\n\tAbreve: 258,\n\tAgrave: 192,\n\tAssign: 8788,\n\tAtilde: 195,\n\tBarwed: 8966,\n\tBumpeq: 8782,\n\tCacute: 262,\n\tCcaron: 268,\n\tCcedil: 199,\n\tColone: 10868,\n\tConint: 8751,\n\tCupCap: 8781,\n\tDagger: 8225,\n\tDcaron: 270,\n\tDotDot: 8412,\n\tDstrok: 272,\n\tEacute: 201,\n\tEcaron: 282,\n\tEgrave: 200,\n\tExists: 8707,\n\tForAll: 8704,\n\tGammad: 988,\n\tGbreve: 286,\n\tGcedil: 290,\n\tHARDcy: 1066,\n\tHstrok: 294,\n\tIacute: 205,\n\tIgrave: 204,\n\tItilde: 296,\n\tJsercy: 1032,\n\tKcedil: 310,\n\tLacute: 313,\n\tLambda: 923,\n\tLcaron: 317,\n\tLcedil: 315,\n\tLmidot: 319,\n\tLstrok: 321,\n\tNacute: 323,\n\tNcaron: 327,\n\tNcedil: 325,\n\tNtilde: 209,\n\tOacute: 211,\n\tOdblac: 336,\n\tOgrave: 210,\n\tOslash: 216,\n\tOtilde: 213,\n\tOtimes: 10807,\n\tRacute: 340,\n\tRarrtl: 10518,\n\tRcaron: 344,\n\tRcedil: 342,\n\tSHCHcy: 1065,\n\tSOFTcy: 1068,\n\tSacute: 346,\n\tScaron: 352,\n\tScedil: 350,\n\tSquare: 9633,\n\tSubset: 8912,\n\tSupset: 8913,\n\tTcaron: 356,\n\tTcedil: 354,\n\tTstrok: 358,\n\tUacute: 218,\n\tUbreve: 364,\n\tUdblac: 368,\n\tUgrave: 217,\n\tUtilde: 360,\n\tVdashl: 10982,\n\tVerbar: 8214,\n\tVvdash: 8874,\n\tYacute: 221,\n\tZacute: 377,\n\tZcaron: 381,\n\taacute: 225,\n\tabreve: 259,\n\tagrave: 224,\n\tandand: 10837,\n\tangmsd: 8737,\n\tangsph: 8738,\n\tapacir: 10863,\n\tapprox: 8776,\n\tatilde: 227,\n\tbarvee: 8893,\n\tbarwed: 8965,\n\tbecaus: 8757,\n\tbernou: 8492,\n\tbigcap: 8898,\n\tbigcup: 8899,\n\tbigvee: 8897,\n\tbkarow: 10509,\n\tbottom: 8869,\n\tbowtie: 8904,\n\tboxbox: 10697,\n\tbprime: 8245,\n\tbrvbar: 166,\n\tbullet: 8226,\n\tbumpeq: 8783,\n\tcacute: 263,\n\tcapand: 10820,\n\tcapcap: 10827,\n\tcapcup: 10823,\n\tcapdot: 10816,\n\tccaron: 269,\n\tccedil: 231,\n\tcirceq: 8791,\n\tcirmid: 10991,\n\tcolone: 8788,\n\tcommat: 64,\n\tcompfn: 8728,\n\tconint: 8750,\n\tcoprod: 8720,\n\tcopysr: 8471,\n\tcularr: 8630,\n\tcupcap: 10822,\n\tcupcup: 10826,\n\tcupdot: 8845,\n\tcurarr: 8631,\n\tcurren: 164,\n\tcylcty: 9005,\n\tdagger: 8224,\n\tdaleth: 8504,\n\tdcaron: 271,\n\tdfisht: 10623,\n\tdivide: 247,\n\tdivonx: 8903,\n\tdlcorn: 8990,\n\tdlcrop: 8973,\n\tdollar: 36,\n\tdrcorn: 8991,\n\tdrcrop: 8972,\n\tdstrok: 273,\n\teacute: 233,\n\teaster: 10862,\n\tecaron: 283,\n\tecolon: 8789,\n\tegrave: 232,\n\tegsdot: 10904,\n\telsdot: 10903,\n\temptyv: 8709,\n\temsp13: 8196,\n\temsp14: 8197,\n\teparsl: 10723,\n\teqcirc: 8790,\n\tequals: 61,\n\tequest: 8799,\n\tfemale: 9792,\n\tffilig: 64259,\n\tffllig: 64260,\n\tforall: 8704,\n\tfrac12: 189,\n\tfrac13: 8531,\n\tfrac14: 188,\n\tfrac15: 8533,\n\tfrac16: 8537,\n\tfrac18: 8539,\n\tfrac23: 8532,\n\tfrac25: 8534,\n\tfrac34: 190,\n\tfrac35: 8535,\n\tfrac38: 8540,\n\tfrac45: 8536,\n\tfrac56: 8538,\n\tfrac58: 8541,\n\tfrac78: 8542,\n\tgacute: 501,\n\tgammad: 989,\n\tgbreve: 287,\n\tgesdot: 10880,\n\tgesles: 10900,\n\tgtlPar: 10645,\n\tgtrarr: 10616,\n\tgtrdot: 8919,\n\tgtrsim: 8819,\n\thairsp: 8202,\n\thamilt: 8459,\n\thardcy: 1098,\n\thearts: 9829,\n\thellip: 8230,\n\thercon: 8889,\n\thomtht: 8763,\n\thorbar: 8213,\n\thslash: 8463,\n\thstrok: 295,\n\thybull: 8259,\n\thyphen: 8208,\n\tiacute: 237,\n\tigrave: 236,\n\tiiiint: 10764,\n\tiinfin: 10716,\n\tincare: 8453,\n\tinodot: 305,\n\tintcal: 8890,\n\tiquest: 191,\n\tisinsv: 8947,\n\titilde: 297,\n\tjsercy: 1112,\n\tkappav: 1008,\n\tkcedil: 311,\n\tkgreen: 312,\n\tlAtail: 10523,\n\tlacute: 314,\n\tlagran: 8466,\n\tlambda: 955,\n\tlangle: 10216,\n\tlarrfs: 10525,\n\tlarrhk: 8617,\n\tlarrlp: 8619,\n\tlarrpl: 10553,\n\tlarrtl: 8610,\n\tlatail: 10521,\n\tlbrace: 123,\n\tlbrack: 91,\n\tlcaron: 318,\n\tlcedil: 316,\n\tldquor: 8222,\n\tlesdot: 10879,\n\tlesges: 10899,\n\tlfisht: 10620,\n\tlfloor: 8970,\n\tlharul: 10602,\n\tllhard: 10603,\n\tlmidot: 320,\n\tlmoust: 9136,\n\tloplus: 10797,\n\tlowast: 8727,\n\tlowbar: 95,\n\tlparlt: 10643,\n\tlrhard: 10605,\n\tlsaquo: 8249,\n\tlsquor: 8218,\n\tlstrok: 322,\n\tlthree: 8907,\n\tltimes: 8905,\n\tltlarr: 10614,\n\tltrPar: 10646,\n\tmapsto: 8614,\n\tmarker: 9646,\n\tmcomma: 10793,\n\tmidast: 42,\n\tmidcir: 10992,\n\tmiddot: 183,\n\tminusb: 8863,\n\tminusd: 8760,\n\tmnplus: 8723,\n\tmodels: 8871,\n\tmstpos: 8766,\n\tnVDash: 8879,\n\tnVdash: 8878,\n\tnacute: 324,\n\tncaron: 328,\n\tncedil: 326,\n\tnearhk: 10532,\n\tnequiv: 8802,\n\tnesear: 10536,\n\tnexist: 8708,\n\tnltrie: 8940,\n\tnprcue: 8928,\n\tnrtrie: 8941,\n\tnsccue: 8929,\n\tnsimeq: 8772,\n\tntilde: 241,\n\tnumero: 8470,\n\tnvDash: 8877,\n\tnvHarr: 10500,\n\tnvdash: 8876,\n\tnvlArr: 10498,\n\tnvrArr: 10499,\n\tnwarhk: 10531,\n\tnwnear: 10535,\n\toacute: 243,\n\todblac: 337,\n\todsold: 10684,\n\tograve: 242,\n\tominus: 8854,\n\torigof: 8886,\n\toslash: 248,\n\totilde: 245,\n\totimes: 8855,\n\tparsim: 10995,\n\tpercnt: 37,\n\tperiod: 46,\n\tpermil: 8240,\n\tphmmat: 8499,\n\tplanck: 8463,\n\tplankv: 8463,\n\tplusdo: 8724,\n\tplusdu: 10789,\n\tplusmn: 177,\n\tpreceq: 10927,\n\tprimes: 8473,\n\tprnsim: 8936,\n\tpropto: 8733,\n\tprurel: 8880,\n\tpuncsp: 8200,\n\tqprime: 8279,\n\trAtail: 10524,\n\tracute: 341,\n\trangle: 10217,\n\trarrap: 10613,\n\trarrfs: 10526,\n\trarrhk: 8618,\n\trarrlp: 8620,\n\trarrpl: 10565,\n\trarrtl: 8611,\n\tratail: 10522,\n\trbrace: 125,\n\trbrack: 93,\n\trcaron: 345,\n\trcedil: 343,\n\trdquor: 8221,\n\trfisht: 10621,\n\trfloor: 8971,\n\trharul: 10604,\n\trmoust: 9137,\n\troplus: 10798,\n\trpargt: 10644,\n\trsaquo: 8250,\n\trsquor: 8217,\n\trthree: 8908,\n\trtimes: 8906,\n\tsacute: 347,\n\tscaron: 353,\n\tscedil: 351,\n\tscnsim: 8937,\n\tsearhk: 10533,\n\tseswar: 10537,\n\tsfrown: 8994,\n\tshchcy: 1097,\n\tsigmaf: 962,\n\tsigmav: 962,\n\tsimdot: 10858,\n\tsmashp: 10803,\n\tsoftcy: 1100,\n\tsolbar: 9023,\n\tspades: 9824,\n\tsqsube: 8849,\n\tsqsupe: 8850,\n\tsquare: 9633,\n\tsquarf: 9642,\n\tssetmn: 8726,\n\tssmile: 8995,\n\tsstarf: 8902,\n\tsubdot: 10941,\n\tsubset: 8834,\n\tsubsim: 10951,\n\tsubsub: 10965,\n\tsubsup: 10963,\n\tsucceq: 10928,\n\tsupdot: 10942,\n\tsupset: 8835,\n\tsupsim: 10952,\n\tsupsub: 10964,\n\tsupsup: 10966,\n\tswarhk: 10534,\n\tswnwar: 10538,\n\ttarget: 8982,\n\ttcaron: 357,\n\ttcedil: 355,\n\ttelrec: 8981,\n\tthere4: 8756,\n\tthetav: 977,\n\tthinsp: 8201,\n\tthksim: 8764,\n\ttimesb: 8864,\n\ttimesd: 10800,\n\ttopbot: 9014,\n\ttopcir: 10993,\n\ttprime: 8244,\n\ttridot: 9708,\n\ttstrok: 359,\n\tuacute: 250,\n\tubreve: 365,\n\tudblac: 369,\n\tufisht: 10622,\n\tugrave: 249,\n\tulcorn: 8988,\n\tulcrop: 8975,\n\turcorn: 8989,\n\turcrop: 8974,\n\tutilde: 361,\n\tvangrt: 10652,\n\tvarphi: 966,\n\tvarrho: 1009,\n\tveebar: 8891,\n\tvellip: 8942,\n\tverbar: 124,\n\twedbar: 10847,\n\twedgeq: 8793,\n\tweierp: 8472,\n\twreath: 8768,\n\txoplus: 10753,\n\txotime: 10754,\n\txsqcup: 10758,\n\txuplus: 10756,\n\txwedge: 8896,\n\tyacute: 253,\n\tzacute: 378,\n\tzcaron: 382,\n\tzeetrf: 8488,\n\tAElig: 198,\n\tAcirc: 194,\n\tAlpha: 913,\n\tAmacr: 256,\n\tAogon: 260,\n\tAring: 197,\n\tBreve: 728,\n\tCcirc: 264,\n\tColon: 8759,\n\tCross: 10799,\n\tDashv: 10980,\n\tDelta: 916,\n\tEcirc: 202,\n\tEmacr: 274,\n\tEogon: 280,\n\tEqual: 10869,\n\tGamma: 915,\n\tGcirc: 284,\n\tHacek: 711,\n\tHcirc: 292,\n\tIJlig: 306,\n\tIcirc: 206,\n\tImacr: 298,\n\tIogon: 302,\n\tIukcy: 1030,\n\tJcirc: 308,\n\tJukcy: 1028,\n\tKappa: 922,\n\tOElig: 338,\n\tOcirc: 212,\n\tOmacr: 332,\n\tOmega: 937,\n\tPrime: 8243,\n\tRBarr: 10512,\n\tScirc: 348,\n\tSigma: 931,\n\tTHORN: 222,\n\tTRADE: 8482,\n\tTSHcy: 1035,\n\tTheta: 920,\n\tTilde: 8764,\n\tUbrcy: 1038,\n\tUcirc: 219,\n\tUmacr: 362,\n\tUnion: 8899,\n\tUogon: 370,\n\tUpTee: 8869,\n\tUring: 366,\n\tVDash: 8875,\n\tVdash: 8873,\n\tWcirc: 372,\n\tWedge: 8896,\n\tYcirc: 374,\n\tacirc: 226,\n\tacute: 180,\n\taelig: 230,\n\taleph: 8501,\n\talpha: 945,\n\tamacr: 257,\n\tamalg: 10815,\n\tangle: 8736,\n\tangrt: 8735,\n\tangst: 8491,\n\taogon: 261,\n\taring: 229,\n\tasymp: 8776,\n\tawint: 10769,\n\tbcong: 8780,\n\tbdquo: 8222,\n\tbepsi: 1014,\n\tblank: 9251,\n\tblk12: 9618,\n\tblk14: 9617,\n\tblk34: 9619,\n\tblock: 9608,\n\tboxDL: 9559,\n\tboxDR: 9556,\n\tboxDl: 9558,\n\tboxDr: 9555,\n\tboxHD: 9574,\n\tboxHU: 9577,\n\tboxHd: 9572,\n\tboxHu: 9575,\n\tboxUL: 9565,\n\tboxUR: 9562,\n\tboxUl: 9564,\n\tboxUr: 9561,\n\tboxVH: 9580,\n\tboxVL: 9571,\n\tboxVR: 9568,\n\tboxVh: 9579,\n\tboxVl: 9570,\n\tboxVr: 9567,\n\tboxdL: 9557,\n\tboxdR: 9554,\n\tboxdl: 9488,\n\tboxdr: 9484,\n\tboxhD: 9573,\n\tboxhU: 9576,\n\tboxhd: 9516,\n\tboxhu: 9524,\n\tboxuL: 9563,\n\tboxuR: 9560,\n\tboxul: 9496,\n\tboxur: 9492,\n\tboxvH: 9578,\n\tboxvL: 9569,\n\tboxvR: 9566,\n\tboxvh: 9532,\n\tboxvl: 9508,\n\tboxvr: 9500,\n\tbreve: 728,\n\tbsemi: 8271,\n\tbsime: 8909,\n\tbsolb: 10693,\n\tbumpE: 10926,\n\tbumpe: 8783,\n\tcaret: 8257,\n\tcaron: 711,\n\tccaps: 10829,\n\tccirc: 265,\n\tccups: 10828,\n\tcedil: 184,\n\tcheck: 10003,\n\tclubs: 9827,\n\tcolon: 58,\n\tcomma: 44,\n\tcrarr: 8629,\n\tcross: 10007,\n\tcsube: 10961,\n\tcsupe: 10962,\n\tctdot: 8943,\n\tcuepr: 8926,\n\tcuesc: 8927,\n\tcupor: 10821,\n\tcuvee: 8910,\n\tcuwed: 8911,\n\tcwint: 8753,\n\tdashv: 8867,\n\tdblac: 733,\n\tddarr: 8650,\n\tdelta: 948,\n\tdharl: 8643,\n\tdharr: 8642,\n\tdiams: 9830,\n\tdisin: 8946,\n\tdoteq: 8784,\n\tdtdot: 8945,\n\tdtrif: 9662,\n\tduarr: 8693,\n\tduhar: 10607,\n\teDDot: 10871,\n\tecirc: 234,\n\tefDot: 8786,\n\temacr: 275,\n\tempty: 8709,\n\teogon: 281,\n\teplus: 10865,\n\tepsiv: 949,\n\teqsim: 8770,\n\tequiv: 8801,\n\terDot: 8787,\n\terarr: 10609,\n\tesdot: 8784,\n\texist: 8707,\n\tfflig: 64256,\n\tfilig: 64257,\n\tfllig: 64258,\n\tfltns: 9649,\n\tforkv: 10969,\n\tfrasl: 8260,\n\tfrown: 8994,\n\tgamma: 947,\n\tgcirc: 285,\n\tgescc: 10921,\n\tgimel: 8503,\n\tgneqq: 8809,\n\tgnsim: 8935,\n\tgrave: 96,\n\tgsime: 10894,\n\tgsiml: 10896,\n\tgtcir: 10874,\n\tgtdot: 8919,\n\tharrw: 8621,\n\thcirc: 293,\n\thoarr: 8703,\n\ticirc: 238,\n\tiexcl: 161,\n\tiiint: 8749,\n\tiiota: 8489,\n\tijlig: 307,\n\timacr: 299,\n\timage: 8465,\n\timath: 305,\n\timped: 437,\n\tinfin: 8734,\n\tiogon: 303,\n\tiprod: 10812,\n\tisinE: 8953,\n\tisins: 8948,\n\tisinv: 8712,\n\tiukcy: 1110,\n\tjcirc: 309,\n\tjmath: 567,\n\tjukcy: 1108,\n\tkappa: 954,\n\tlAarr: 8666,\n\tlBarr: 10510,\n\tlangd: 10641,\n\tlaquo: 171,\n\tlarrb: 8676,\n\tlbarr: 10508,\n\tlbbrk: 10098,\n\tlbrke: 10635,\n\tlceil: 8968,\n\tldquo: 8220,\n\tlescc: 10920,\n\tlhard: 8637,\n\tlharu: 8636,\n\tlhblk: 9604,\n\tllarr: 8647,\n\tlltri: 9722,\n\tlneqq: 8808,\n\tlnsim: 8934,\n\tloang: 10220,\n\tloarr: 8701,\n\tlobrk: 10214,\n\tlopar: 10629,\n\tlrarr: 8646,\n\tlrhar: 8651,\n\tlrtri: 8895,\n\tlsime: 10893,\n\tlsimg: 10895,\n\tlsquo: 8216,\n\tltcir: 10873,\n\tltdot: 8918,\n\tltrie: 8884,\n\tltrif: 9666,\n\tmDDot: 8762,\n\tmdash: 8212,\n\tmicro: 181,\n\tminus: 8722,\n\tmumap: 8888,\n\tnabla: 8711,\n\tnapos: 329,\n\tnatur: 9838,\n\tncong: 8775,\n\tndash: 8211,\n\tneArr: 8663,\n\tnearr: 8599,\n\tngsim: 8821,\n\tnhArr: 8654,\n\tnharr: 8622,\n\tnhpar: 10994,\n\tnlArr: 8653,\n\tnlarr: 8602,\n\tnless: 8814,\n\tnlsim: 8820,\n\tnltri: 8938,\n\tnotin: 8713,\n\tnotni: 8716,\n\tnprec: 8832,\n\tnrArr: 8655,\n\tnrarr: 8603,\n\tnrtri: 8939,\n\tnsime: 8772,\n\tnsmid: 8740,\n\tnspar: 8742,\n\tnsube: 8840,\n\tnsucc: 8833,\n\tnsupe: 8841,\n\tnumsp: 8199,\n\tnwArr: 8662,\n\tnwarr: 8598,\n\tocirc: 244,\n\todash: 8861,\n\toelig: 339,\n\tofcir: 10687,\n\tohbar: 10677,\n\tolarr: 8634,\n\tolcir: 10686,\n\toline: 8254,\n\tomacr: 333,\n\tomega: 969,\n\toperp: 10681,\n\toplus: 8853,\n\torarr: 8635,\n\torder: 8500,\n\tovbar: 9021,\n\tparsl: 11005,\n\tphone: 9742,\n\tplusb: 8862,\n\tpluse: 10866,\n\tpound: 163,\n\tprcue: 8828,\n\tprime: 8242,\n\tprnap: 10937,\n\tprsim: 8830,\n\tquest: 63,\n\trAarr: 8667,\n\trBarr: 10511,\n\tradic: 8730,\n\trangd: 10642,\n\trange: 10661,\n\traquo: 187,\n\trarrb: 8677,\n\trarrc: 10547,\n\trarrw: 8605,\n\tratio: 8758,\n\trbarr: 10509,\n\trbbrk: 10099,\n\trbrke: 10636,\n\trceil: 8969,\n\trdquo: 8221,\n\treals: 8477,\n\trhard: 8641,\n\trharu: 8640,\n\trlarr: 8644,\n\trlhar: 8652,\n\trnmid: 10990,\n\troang: 10221,\n\troarr: 8702,\n\trobrk: 10215,\n\tropar: 10630,\n\trrarr: 8649,\n\trsquo: 8217,\n\trtrie: 8885,\n\trtrif: 9656,\n\tsbquo: 8218,\n\tsccue: 8829,\n\tscirc: 349,\n\tscnap: 10938,\n\tscsim: 8831,\n\tsdotb: 8865,\n\tsdote: 10854,\n\tseArr: 8664,\n\tsearr: 8600,\n\tsetmn: 8726,\n\tsharp: 9839,\n\tsigma: 963,\n\tsimeq: 8771,\n\tsimgE: 10912,\n\tsimlE: 10911,\n\tsimne: 8774,\n\tslarr: 8592,\n\tsmile: 8995,\n\tsqcap: 8851,\n\tsqcup: 8852,\n\tsqsub: 8847,\n\tsqsup: 8848,\n\tsrarr: 8594,\n\tstarf: 9733,\n\tstrns: 175,\n\tsubnE: 10955,\n\tsubne: 8842,\n\tsupnE: 10956,\n\tsupne: 8843,\n\tswArr: 8665,\n\tswarr: 8601,\n\tszlig: 223,\n\ttheta: 952,\n\tthkap: 8776,\n\tthorn: 254,\n\ttilde: 732,\n\ttimes: 215,\n\ttrade: 8482,\n\ttrisb: 10701,\n\ttshcy: 1115,\n\ttwixt: 8812,\n\tubrcy: 1118,\n\tucirc: 251,\n\tudarr: 8645,\n\tudhar: 10606,\n\tuharl: 8639,\n\tuharr: 8638,\n\tuhblk: 9600,\n\tultri: 9720,\n\tumacr: 363,\n\tuogon: 371,\n\tuplus: 8846,\n\tupsih: 978,\n\turing: 367,\n\turtri: 9721,\n\tutdot: 8944,\n\tutrif: 9652,\n\tuuarr: 8648,\n\tvBarv: 10985,\n\tvDash: 8872,\n\tvarpi: 982,\n\tvdash: 8866,\n\tveeeq: 8794,\n\tvltri: 8882,\n\tvprop: 8733,\n\tvrtri: 8883,\n\twcirc: 373,\n\twedge: 8743,\n\txcirc: 9711,\n\txdtri: 9661,\n\txhArr: 10234,\n\txharr: 10231,\n\txlArr: 10232,\n\txlarr: 10229,\n\txodot: 10752,\n\txrArr: 10233,\n\txrarr: 10230,\n\txutri: 9651,\n\tycirc: 375,\n\tAopf: 120120,\n\tAscr: 119964,\n\tAuml: 196,\n\tBarv: 10983,\n\tBeta: 914,\n\tBopf: 120121,\n\tBscr: 8492,\n\tCHcy: 1063,\n\tCOPY: 169,\n\tCdot: 266,\n\tCopf: 8450,\n\tCscr: 119966,\n\tDJcy: 1026,\n\tDScy: 1029,\n\tDZcy: 1039,\n\tDarr: 8609,\n\tDopf: 120123,\n\tDscr: 119967,\n\tEdot: 278,\n\tEopf: 120124,\n\tEscr: 8496,\n\tEsim: 10867,\n\tEuml: 203,\n\tFopf: 120125,\n\tFscr: 8497,\n\tGJcy: 1027,\n\tGdot: 288,\n\tGopf: 120126,\n\tGscr: 119970,\n\tHopf: 8461,\n\tHscr: 8459,\n\tIEcy: 1045,\n\tIOcy: 1025,\n\tIdot: 304,\n\tIopf: 120128,\n\tIota: 921,\n\tIscr: 8464,\n\tIuml: 207,\n\tJopf: 120129,\n\tJscr: 119973,\n\tKHcy: 1061,\n\tKJcy: 1036,\n\tKopf: 120130,\n\tKscr: 119974,\n\tLJcy: 1033,\n\tLang: 10218,\n\tLarr: 8606,\n\tLopf: 120131,\n\tLscr: 8466,\n\tMopf: 120132,\n\tMscr: 8499,\n\tNJcy: 1034,\n\tNopf: 8469,\n\tNscr: 119977,\n\tOopf: 120134,\n\tOscr: 119978,\n\tOuml: 214,\n\tPopf: 8473,\n\tPscr: 119979,\n\tQUOT: 34,\n\tQopf: 8474,\n\tQscr: 119980,\n\tRang: 10219,\n\tRarr: 8608,\n\tRopf: 8477,\n\tRscr: 8475,\n\tSHcy: 1064,\n\tSopf: 120138,\n\tSqrt: 8730,\n\tSscr: 119982,\n\tStar: 8902,\n\tTScy: 1062,\n\tTopf: 120139,\n\tTscr: 119983,\n\tUarr: 8607,\n\tUopf: 120140,\n\tUpsi: 978,\n\tUscr: 119984,\n\tUuml: 220,\n\tVbar: 10987,\n\tVert: 8214,\n\tVopf: 120141,\n\tVscr: 119985,\n\tWopf: 120142,\n\tWscr: 119986,\n\tXopf: 120143,\n\tXscr: 119987,\n\tYAcy: 1071,\n\tYIcy: 1031,\n\tYUcy: 1070,\n\tYopf: 120144,\n\tYscr: 119988,\n\tYuml: 376,\n\tZHcy: 1046,\n\tZdot: 379,\n\tZeta: 918,\n\tZopf: 8484,\n\tZscr: 119989,\n\tandd: 10844,\n\tandv: 10842,\n\tange: 10660,\n\taopf: 120146,\n\tapid: 8779,\n\tapos: 39,\n\tascr: 119990,\n\tauml: 228,\n\tbNot: 10989,\n\tbbrk: 9141,\n\tbeta: 946,\n\tbeth: 8502,\n\tbnot: 8976,\n\tbopf: 120147,\n\tboxH: 9552,\n\tboxV: 9553,\n\tboxh: 9472,\n\tboxv: 9474,\n\tbscr: 119991,\n\tbsim: 8765,\n\tbsol: 92,\n\tbull: 8226,\n\tbump: 8782,\n\tcdot: 267,\n\tcent: 162,\n\tchcy: 1095,\n\tcirE: 10691,\n\tcirc: 710,\n\tcire: 8791,\n\tcomp: 8705,\n\tcong: 8773,\n\tcopf: 120148,\n\tcopy: 169,\n\tcscr: 119992,\n\tcsub: 10959,\n\tcsup: 10960,\n\tdArr: 8659,\n\tdHar: 10597,\n\tdarr: 8595,\n\tdash: 8208,\n\tdiam: 8900,\n\tdjcy: 1106,\n\tdopf: 120149,\n\tdscr: 119993,\n\tdscy: 1109,\n\tdsol: 10742,\n\tdtri: 9663,\n\tdzcy: 1119,\n\teDot: 8785,\n\tecir: 8790,\n\tedot: 279,\n\temsp: 8195,\n\tensp: 8194,\n\teopf: 120150,\n\tepar: 8917,\n\tepsi: 1013,\n\tescr: 8495,\n\tesim: 8770,\n\teuml: 235,\n\teuro: 8364,\n\texcl: 33,\n\tflat: 9837,\n\tfnof: 402,\n\tfopf: 120151,\n\tfork: 8916,\n\tfscr: 119995,\n\tgdot: 289,\n\tgeqq: 8807,\n\tgjcy: 1107,\n\tgnap: 10890,\n\tgneq: 10888,\n\tgopf: 120152,\n\tgscr: 8458,\n\tgsim: 8819,\n\tgtcc: 10919,\n\thArr: 8660,\n\thalf: 189,\n\tharr: 8596,\n\thbar: 8463,\n\thopf: 120153,\n\thscr: 119997,\n\tiecy: 1077,\n\timof: 8887,\n\tiocy: 1105,\n\tiopf: 120154,\n\tiota: 953,\n\tiscr: 119998,\n\tisin: 8712,\n\tiuml: 239,\n\tjopf: 120155,\n\tjscr: 119999,\n\tkhcy: 1093,\n\tkjcy: 1116,\n\tkopf: 120156,\n\tkscr: 120000,\n\tlArr: 8656,\n\tlHar: 10594,\n\tlang: 10216,\n\tlarr: 8592,\n\tlate: 10925,\n\tlcub: 123,\n\tldca: 10550,\n\tldsh: 8626,\n\tleqq: 8806,\n\tljcy: 1113,\n\tlnap: 10889,\n\tlneq: 10887,\n\tlopf: 120157,\n\tlozf: 10731,\n\tlpar: 40,\n\tlscr: 120001,\n\tlsim: 8818,\n\tlsqb: 91,\n\tltcc: 10918,\n\tltri: 9667,\n\tmacr: 175,\n\tmale: 9794,\n\tmalt: 10016,\n\tmlcp: 10971,\n\tmldr: 8230,\n\tmopf: 120158,\n\tmscr: 120002,\n\tnbsp: 160,\n\tncap: 10819,\n\tncup: 10818,\n\tngeq: 8817,\n\tngtr: 8815,\n\tnisd: 8954,\n\tnjcy: 1114,\n\tnldr: 8229,\n\tnleq: 8816,\n\tnmid: 8740,\n\tnopf: 120159,\n\tnpar: 8742,\n\tnscr: 120003,\n\tnsim: 8769,\n\tnsub: 8836,\n\tnsup: 8837,\n\tntgl: 8825,\n\tntlg: 8824,\n\toast: 8859,\n\tocir: 8858,\n\todiv: 10808,\n\todot: 8857,\n\togon: 731,\n\toint: 8750,\n\tomid: 10678,\n\toopf: 120160,\n\topar: 10679,\n\tordf: 170,\n\tordm: 186,\n\toror: 10838,\n\toscr: 8500,\n\tosol: 8856,\n\touml: 246,\n\tpara: 182,\n\tpart: 8706,\n\tperp: 8869,\n\tphiv: 966,\n\tplus: 43,\n\tpopf: 120161,\n\tprap: 10935,\n\tprec: 8826,\n\tprnE: 10933,\n\tprod: 8719,\n\tprop: 8733,\n\tpscr: 120005,\n\tqint: 10764,\n\tqopf: 120162,\n\tqscr: 120006,\n\tquot: 34,\n\trArr: 8658,\n\trHar: 10596,\n\trace: 10714,\n\trang: 10217,\n\trarr: 8594,\n\trcub: 125,\n\trdca: 10551,\n\trdsh: 8627,\n\treal: 8476,\n\trect: 9645,\n\trhov: 1009,\n\tring: 730,\n\tropf: 120163,\n\trpar: 41,\n\trscr: 120007,\n\trsqb: 93,\n\trtri: 9657,\n\tscap: 10936,\n\tscnE: 10934,\n\tsdot: 8901,\n\tsect: 167,\n\tsemi: 59,\n\tsext: 10038,\n\tshcy: 1096,\n\tsime: 8771,\n\tsimg: 10910,\n\tsiml: 10909,\n\tsmid: 8739,\n\tsmte: 10924,\n\tsolb: 10692,\n\tsopf: 120164,\n\tspar: 8741,\n\tsquf: 9642,\n\tsscr: 120008,\n\tstar: 9734,\n\tsubE: 10949,\n\tsube: 8838,\n\tsucc: 8827,\n\tsung: 9834,\n\tsup1: 185,\n\tsup2: 178,\n\tsup3: 179,\n\tsupE: 10950,\n\tsupe: 8839,\n\ttbrk: 9140,\n\ttdot: 8411,\n\ttint: 8749,\n\ttoea: 10536,\n\ttopf: 120165,\n\ttosa: 10537,\n\ttrie: 8796,\n\ttscr: 120009,\n\ttscy: 1094,\n\tuArr: 8657,\n\tuHar: 10595,\n\tuarr: 8593,\n\tuopf: 120166,\n\tupsi: 965,\n\tuscr: 120010,\n\tutri: 9653,\n\tuuml: 252,\n\tvArr: 8661,\n\tvBar: 10984,\n\tvarr: 8597,\n\tvert: 124,\n\tvopf: 120167,\n\tvscr: 120011,\n\twopf: 120168,\n\twscr: 120012,\n\txcap: 8898,\n\txcup: 8899,\n\txmap: 10236,\n\txnis: 8955,\n\txopf: 120169,\n\txscr: 120013,\n\txvee: 8897,\n\tyacy: 1103,\n\tyicy: 1111,\n\tyopf: 120170,\n\tyscr: 120014,\n\tyucy: 1102,\n\tyuml: 255,\n\tzdot: 380,\n\tzeta: 950,\n\tzhcy: 1078,\n\tzopf: 120171,\n\tzscr: 120015,\n\tzwnj: 8204,\n\tAMP: 38,\n\tAcy: 1040,\n\tAfr: 120068,\n\tAnd: 10835,\n\tBcy: 1041,\n\tBfr: 120069,\n\tCap: 8914,\n\tCfr: 8493,\n\tChi: 935,\n\tCup: 8915,\n\tDcy: 1044,\n\tDel: 8711,\n\tDfr: 120071,\n\tDot: 168,\n\tENG: 330,\n\tETH: 208,\n\tEcy: 1069,\n\tEfr: 120072,\n\tEta: 919,\n\tFcy: 1060,\n\tFfr: 120073,\n\tGcy: 1043,\n\tGfr: 120074,\n\tHat: 94,\n\tHfr: 8460,\n\tIcy: 1048,\n\tIfr: 8465,\n\tInt: 8748,\n\tJcy: 1049,\n\tJfr: 120077,\n\tKcy: 1050,\n\tKfr: 120078,\n\tLcy: 1051,\n\tLfr: 120079,\n\tLsh: 8624,\n\tMap: 10501,\n\tMcy: 1052,\n\tMfr: 120080,\n\tNcy: 1053,\n\tNfr: 120081,\n\tNot: 10988,\n\tOcy: 1054,\n\tOfr: 120082,\n\tPcy: 1055,\n\tPfr: 120083,\n\tPhi: 934,\n\tPsi: 936,\n\tQfr: 120084,\n\tREG: 174,\n\tRcy: 1056,\n\tRfr: 8476,\n\tRho: 929,\n\tRsh: 8625,\n\tScy: 1057,\n\tSfr: 120086,\n\tSub: 8912,\n\tSum: 8721,\n\tSup: 8913,\n\tTab: 9,\n\tTau: 932,\n\tTcy: 1058,\n\tTfr: 120087,\n\tUcy: 1059,\n\tUfr: 120088,\n\tVcy: 1042,\n\tVee: 8897,\n\tVfr: 120089,\n\tWfr: 120090,\n\tXfr: 120091,\n\tYcy: 1067,\n\tYfr: 120092,\n\tZcy: 1047,\n\tZfr: 8488,\n\tacd: 8767,\n\tacy: 1072,\n\tafr: 120094,\n\tamp: 38,\n\tand: 8743,\n\tang: 8736,\n\tapE: 10864,\n\tape: 8778,\n\tast: 42,\n\tbcy: 1073,\n\tbfr: 120095,\n\tbot: 8869,\n\tcap: 8745,\n\tcfr: 120096,\n\tchi: 967,\n\tcir: 9675,\n\tcup: 8746,\n\tdcy: 1076,\n\tdeg: 176,\n\tdfr: 120097,\n\tdie: 168,\n\tdiv: 247,\n\tdot: 729,\n\tecy: 1101,\n\tefr: 120098,\n\tegs: 10902,\n\tell: 8467,\n\tels: 10901,\n\teng: 331,\n\teta: 951,\n\teth: 240,\n\tfcy: 1092,\n\tffr: 120099,\n\tgEl: 10892,\n\tgap: 10886,\n\tgcy: 1075,\n\tgel: 8923,\n\tgeq: 8805,\n\tges: 10878,\n\tgfr: 120100,\n\tggg: 8921,\n\tglE: 10898,\n\tgla: 10917,\n\tglj: 10916,\n\tgnE: 8809,\n\tgne: 10888,\n\thfr: 120101,\n\ticy: 1080,\n\tiff: 8660,\n\tifr: 120102,\n\tint: 8747,\n\tjcy: 1081,\n\tjfr: 120103,\n\tkcy: 1082,\n\tkfr: 120104,\n\tlEg: 10891,\n\tlap: 10885,\n\tlat: 10923,\n\tlcy: 1083,\n\tleg: 8922,\n\tleq: 8804,\n\tles: 10877,\n\tlfr: 120105,\n\tlgE: 10897,\n\tlnE: 8808,\n\tlne: 10887,\n\tloz: 9674,\n\tlrm: 8206,\n\tlsh: 8624,\n\tmap: 8614,\n\tmcy: 1084,\n\tmfr: 120106,\n\tmho: 8487,\n\tmid: 8739,\n\tnap: 8777,\n\tncy: 1085,\n\tnfr: 120107,\n\tnge: 8817,\n\tngt: 8815,\n\tnis: 8956,\n\tniv: 8715,\n\tnle: 8816,\n\tnlt: 8814,\n\tnot: 172,\n\tnpr: 8832,\n\tnsc: 8833,\n\tnum: 35,\n\tocy: 1086,\n\tofr: 120108,\n\togt: 10689,\n\tohm: 8486,\n\tolt: 10688,\n\tord: 10845,\n\torv: 10843,\n\tpar: 8741,\n\tpcy: 1087,\n\tpfr: 120109,\n\tphi: 966,\n\tpiv: 982,\n\tprE: 10931,\n\tpre: 10927,\n\tpsi: 968,\n\tqfr: 120110,\n\trcy: 1088,\n\treg: 174,\n\trfr: 120111,\n\trho: 961,\n\trlm: 8207,\n\trsh: 8625,\n\tscE: 10932,\n\tsce: 10928,\n\tscy: 1089,\n\tsfr: 120112,\n\tshy: 173,\n\tsim: 8764,\n\tsmt: 10922,\n\tsol: 47,\n\tsqu: 9633,\n\tsub: 8834,\n\tsum: 8721,\n\tsup: 8835,\n\ttau: 964,\n\ttcy: 1090,\n\ttfr: 120113,\n\ttop: 8868,\n\tucy: 1091,\n\tufr: 120114,\n\tuml: 168,\n\tvcy: 1074,\n\tvee: 8744,\n\tvfr: 120115,\n\twfr: 120116,\n\txfr: 120117,\n\tycy: 1099,\n\tyen: 165,\n\tyfr: 120118,\n\tzcy: 1079,\n\tzfr: 120119,\n\tzwj: 8205,\n\tDD: 8517,\n\tGT: 62,\n\tGg: 8921,\n\tGt: 8811,\n\tIm: 8465,\n\tLT: 60,\n\tLl: 8920,\n\tLt: 8810,\n\tMu: 924,\n\tNu: 925,\n\tOr: 10836,\n\tPi: 928,\n\tPr: 10939,\n\tRe: 8476,\n\tSc: 10940,\n\tXi: 926,\n\tac: 8766,\n\taf: 8289,\n\tap: 8776,\n\tdd: 8518,\n\tee: 8519,\n\teg: 10906,\n\tel: 10905,\n\tgE: 8807,\n\tge: 8805,\n\tgg: 8811,\n\tgl: 8823,\n\tgt: 62,\n\tic: 8291,\n\tii: 8520,\n\tin: 8712,\n\tit: 8290,\n\tlE: 8806,\n\tle: 8804,\n\tlg: 8822,\n\tll: 8810,\n\tlt: 60,\n\tmp: 8723,\n\tmu: 956,\n\tne: 8800,\n\tni: 8715,\n\tnu: 957,\n\toS: 9416,\n\tor: 8744,\n\tpi: 960,\n\tpm: 177,\n\tpr: 8826,\n\trx: 8478,\n\tsc: 8827,\n\twp: 8472,\n\twr: 8768,\n\txi: 958,\n};\n","import htmlEntities from './entities';\n\nconst windows1252 = [\n\t8364,\n\t129,\n\t8218,\n\t402,\n\t8222,\n\t8230,\n\t8224,\n\t8225,\n\t710,\n\t8240,\n\t352,\n\t8249,\n\t338,\n\t141,\n\t381,\n\t143,\n\t144,\n\t8216,\n\t8217,\n\t8220,\n\t8221,\n\t8226,\n\t8211,\n\t8212,\n\t732,\n\t8482,\n\t353,\n\t8250,\n\t339,\n\t157,\n\t382,\n\t376,\n];\nconst entityPattern = new RegExp(\n\t`&(#?(?:x[\\\\w\\\\d]+|\\\\d+|${Object.keys(htmlEntities).join('|')}));?`,\n\t'g'\n);\n\nexport function decodeCharacterReferences(html: string) {\n\treturn html.replace(entityPattern, (match, entity) => {\n\t\tlet code;\n\n\t\t// Handle named entities\n\t\tif (entity[0] !== '#') {\n\t\t\tcode = htmlEntities[entity];\n\t\t} else if (entity[1] === 'x') {\n\t\t\tcode = parseInt(entity.substring(2), 16);\n\t\t} else {\n\t\t\tcode = parseInt(entity.substring(1), 10);\n\t\t}\n\n\t\tif (!code) {\n\t\t\treturn match;\n\t\t}\n\n\t\treturn String.fromCodePoint(validateCode(code));\n\t});\n}\n\nconst NUL = 0;\n\n// some code points are verboten. If we were inserting HTML, the browser would replace the illegal\n// code points with alternatives in some cases - since we're bypassing that mechanism, we need\n// to replace them ourselves\n//\n// Source: http://en.wikipedia.org/wiki/Character_encodings_in_HTML#Illegal_characters\nfunction validateCode(code: number) {\n\t// line feed becomes generic whitespace\n\tif (code === 10) {\n\t\treturn 32;\n\t}\n\n\t// ASCII range. (Why someone would use HTML entities for ASCII characters I don't know, but...)\n\tif (code < 128) {\n\t\treturn code;\n\t}\n\n\t// code points 128-159 are dealt with leniently by browsers, but they're incorrect. We need\n\t// to correct the mistake or we'll end up with missing € signs and so on\n\tif (code <= 159) {\n\t\treturn windows1252[code - 128];\n\t}\n\n\t// basic multilingual plane\n\tif (code < 55296) {\n\t\treturn code;\n\t}\n\n\t// UTF-16 surrogate halves\n\tif (code <= 57343) {\n\t\treturn NUL;\n\t}\n\n\t// rest of the basic multilingual plane\n\tif (code <= 65535) {\n\t\treturn code;\n\t}\n\n\t// supplementary multilingual plane 0x10000 - 0x1ffff\n\tif (code >= 65536 && code <= 131071) {\n\t\treturn code;\n\t}\n\n\t// supplementary ideographic plane 0x20000 - 0x2ffff\n\tif (code >= 131072 && code <= 196607) {\n\t\treturn code;\n\t}\n\n\treturn NUL;\n}\n","const voidElementNames = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\n\nexport default function isVoidElementName(name: string) {\n\treturn voidElementNames.test(name) || name.toLowerCase() === '!doctype';\n}\n","import readExpression from '../read/expression';\nimport readScript from '../read/script';\nimport readStyle from '../read/style';\nimport { readDirective } from '../read/directives';\nimport { trimStart, trimEnd } from '../../utils/trim';\nimport { decodeCharacterReferences } from '../utils/html';\nimport isVoidElementName from '../../utils/isVoidElementName';\nimport { Parser } from '../index';\nimport { Node } from '../../interfaces';\n\nconst validTagName = /^\\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\\-]*/;\n\nconst SELF = ':Self';\nconst COMPONENT = ':Component';\n\nconst metaTags = new Set([\n\t':Window',\n\t':Head'\n]);\n\nconst specials = new Map([\n\t[\n\t\t'script',\n\t\t{\n\t\t\tread: readScript,\n\t\t\tproperty: 'js',\n\t\t},\n\t],\n\t[\n\t\t'style',\n\t\t{\n\t\t\tread: readStyle,\n\t\t\tproperty: 'css',\n\t\t},\n\t],\n]);\n\n// based on http://developers.whatwg.org/syntax.html#syntax-tag-omission\nconst disallowedContents = new Map([\n\t['li', new Set(['li'])],\n\t['dt', new Set(['dt', 'dd'])],\n\t['dd', new Set(['dt', 'dd'])],\n\t[\n\t\t'p',\n\t\tnew Set(\n\t\t\t'address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul'.split(\n\t\t\t\t' '\n\t\t\t)\n\t\t),\n\t],\n\t['rt', new Set(['rt', 'rp'])],\n\t['rp', new Set(['rt', 'rp'])],\n\t['optgroup', new Set(['optgroup'])],\n\t['option', new Set(['option', 'optgroup'])],\n\t['thead', new Set(['tbody', 'tfoot'])],\n\t['tbody', new Set(['tbody', 'tfoot'])],\n\t['tfoot', new Set(['tbody'])],\n\t['tr', new Set(['tr', 'tbody'])],\n\t['td', new Set(['td', 'th', 'tr'])],\n\t['th', new Set(['td', 'th', 'tr'])],\n]);\n\nexport default function tag(parser: Parser) {\n\tconst start = parser.index++;\n\n\tlet parent = parser.current();\n\n\tif (parser.eat('!--')) {\n\t\tconst data = parser.readUntil(/-->/);\n\t\tparser.eat('-->', true, 'comment was left open, expected -->');\n\n\t\tparser.current().children.push({\n\t\t\tstart,\n\t\t\tend: parser.index,\n\t\t\ttype: 'Comment',\n\t\t\tdata,\n\t\t});\n\n\t\treturn;\n\t}\n\n\tconst isClosingTag = parser.eat('/');\n\n\tconst name = readTagName(parser);\n\n\tif (metaTags.has(name)) {\n\t\tif (isClosingTag) {\n\t\t\tif (name === ':Window' && parser.current().children.length) {\n\t\t\t\tparser.error(\n\t\t\t\t\t`<:Window> cannot have children`,\n\t\t\t\t\tparser.current().children[0].start\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (name in parser.metaTags) {\n\t\t\t\tparser.error(`A component can only have one <${name}> tag`, start);\n\t\t\t}\n\n\t\t\tif (parser.stack.length > 1) {\n\t\t\t\tconsole.log(parser.stack);\n\t\t\t\tparser.error(`<${name}> tags cannot be inside elements or blocks`, start);\n\t\t\t}\n\n\t\t\tparser.metaTags[name] = true;\n\t\t}\n\t}\n\n\tconst type = metaTags.has(name)\n\t\t? name.slice(1)\n\t\t: 'Element'; // TODO in v2, capitalised name means 'Component'\n\n\tconst element: Node = {\n\t\tstart,\n\t\tend: null, // filled in later\n\t\ttype,\n\t\tname,\n\t\tattributes: [],\n\t\tchildren: [],\n\t};\n\n\tparser.allowWhitespace();\n\n\tif (isClosingTag) {\n\t\tif (isVoidElementName(name)) {\n\t\t\tparser.error(\n\t\t\t\t`<${name}> is a void element and cannot have children, or a closing tag`,\n\t\t\t\tstart\n\t\t\t);\n\t\t}\n\n\t\tif (!parser.eat('>')) parser.error(`Expected '>'`);\n\n\t\t// close any elements that don't have their own closing tags, e.g. <div><p></div>\n\t\twhile (parent.name !== name) {\n\t\t\tif (parent.type !== 'Element')\n\t\t\t\tparser.error(\n\t\t\t\t\t`</${name}> attempted to close an element that was not open`,\n\t\t\t\t\tstart\n\t\t\t\t);\n\n\t\t\tparent.end = start;\n\t\t\tparser.stack.pop();\n\n\t\t\tparent = parser.current();\n\t\t}\n\n\t\tparent.end = parser.index;\n\t\tparser.stack.pop();\n\n\t\treturn;\n\t} else if (disallowedContents.has(parent.name)) {\n\t\t// can this be a child of the parent element, or does it implicitly\n\t\t// close it, like `<li>one<li>two`?\n\t\tif (disallowedContents.get(parent.name).has(name)) {\n\t\t\tparent.end = start;\n\t\t\tparser.stack.pop();\n\t\t}\n\t}\n\n\tif (name === 'slot') {\n\t\tlet i = parser.stack.length;\n\t\twhile (i--) {\n\t\t\tconst item = parser.stack[i];\n\t\t\tif (item.type === 'EachBlock') {\n\t\t\t\tparser.error(\n\t\t\t\t\t`<slot> cannot be a child of an each-block`,\n\t\t\t\t\tstart\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (name === COMPONENT) {\n\t\tparser.eat('{', true);\n\t\telement.expression = readExpression(parser);\n\t\tparser.allowWhitespace();\n\t\tparser.eat('}', true);\n\t\tparser.allowWhitespace();\n\t}\n\n\tconst uniqueNames = new Set();\n\n\tlet attribute;\n\twhile ((attribute = readAttribute(parser, uniqueNames))) {\n\t\tif (attribute.type === 'Binding' && !parser.allowBindings) {\n\t\t\tparser.error(`Two-way binding is disabled`, attribute.start);\n\t\t}\n\n\t\telement.attributes.push(attribute);\n\t\tparser.allowWhitespace();\n\t}\n\n\t// special cases – top-level <script> and <style>\n\tif (specials.has(name) && parser.stack.length === 1) {\n\t\tconst special = specials.get(name);\n\n\t\tif (parser[special.property]) {\n\t\t\tparser.index = start;\n\t\t\tparser.error(\n\t\t\t\t`You can only have one top-level <${name}> tag per component`\n\t\t\t);\n\t\t}\n\n\t\tparser.eat('>', true);\n\t\tparser[special.property] = special.read(parser, start, element.attributes);\n\t\treturn;\n\t}\n\n\tparser.current().children.push(element);\n\n\tconst selfClosing = parser.eat('/') || isVoidElementName(name);\n\n\tparser.eat('>', true);\n\n\tif (selfClosing) {\n\t\t// don't push self-closing elements onto the stack\n\t\telement.end = parser.index;\n\t} else if (name === 'textarea') {\n\t\t// special case\n\t\telement.children = readSequence(\n\t\t\tparser,\n\t\t\t() =>\n\t\t\t\tparser.template.slice(parser.index, parser.index + 11) === '</textarea>'\n\t\t);\n\t\tparser.read(/<\\/textarea>/);\n\t\telement.end = parser.index;\n\t} else if (name === 'script') {\n\t\t// special case\n\t\tconst start = parser.index;\n\t\tconst data = parser.readUntil(/<\\/script>/);\n\t\tconst end = parser.index;\n\t\telement.children.push({ start, end, type: 'Text', data });\n\t\tparser.eat('</script>', true);\n\t\telement.end = parser.index;\n\t} else if (name === 'style') {\n\t\t// special case\n\t\telement.children = readSequence(\n\t\t\tparser,\n\t\t\t() =>\n\t\t\t\tparser.template.slice(parser.index, parser.index + 8) === '</style>'\n\t\t);\n\t\tparser.read(/<\\/style>/);\n\t\telement.end = parser.index;\n\t} else {\n\t\tparser.stack.push(element);\n\t}\n}\n\nfunction readTagName(parser: Parser) {\n\tconst start = parser.index;\n\n\tif (parser.eat(SELF)) {\n\t\t// check we're inside a block, otherwise this\n\t\t// will cause infinite recursion\n\t\tlet i = parser.stack.length;\n\t\tlet legal = false;\n\n\t\twhile (i--) {\n\t\t\tconst fragment = parser.stack[i];\n\t\t\tif (fragment.type === 'IfBlock' || fragment.type === 'EachBlock') {\n\t\t\t\tlegal = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!legal) {\n\t\t\tparser.error(\n\t\t\t\t`<${SELF}> components can only exist inside if-blocks or each-blocks`,\n\t\t\t\tstart\n\t\t\t);\n\t\t}\n\n\t\treturn SELF;\n\t}\n\n\tif (parser.eat(COMPONENT)) return COMPONENT;\n\n\tconst name = parser.readUntil(/(\\s|\\/|>)/);\n\n\tif (metaTags.has(name)) return name;\n\n\tif (!validTagName.test(name)) {\n\t\tparser.error(`Expected valid tag name`, start);\n\t}\n\n\treturn name;\n}\n\nfunction readAttribute(parser: Parser, uniqueNames: Set<string>) {\n\tconst start = parser.index;\n\n\tif (parser.eat('{{')) {\n\t\tparser.allowWhitespace();\n\t\tparser.eat('...', true, 'Expected spread operator (...)');\n\n\t\tconst expression = readExpression(parser);\n\n\t\tparser.allowWhitespace();\n\t\tparser.eat('}}', true);\n\n\t\treturn {\n\t\t\tstart,\n\t\t\tend: parser.index,\n\t\t\ttype: 'Spread',\n\t\t\texpression\n\t\t};\n\t}\n\n\tlet name = parser.readUntil(/(\\s|=|\\/|>)/);\n\tif (!name) return null;\n\tif (uniqueNames.has(name)) {\n\t\tparser.error('Attributes need to be unique', start);\n\t}\n\n\tuniqueNames.add(name);\n\n\tparser.allowWhitespace();\n\n\tconst attribute = readDirective(parser, start, name);\n\tif (attribute) return attribute;\n\n\tlet value = parser.eat('=') ? readAttributeValue(parser) : true;\n\n\treturn {\n\t\tstart,\n\t\tend: parser.index,\n\t\ttype: 'Attribute',\n\t\tname,\n\t\tvalue,\n\t};\n}\n\nfunction readAttributeValue(parser: Parser) {\n\tconst quoteMark = parser.eat(`'`) ? `'` : parser.eat(`\"`) ? `\"` : null;\n\n\tconst regex = quoteMark === `'`\n\t\t? /'/\n\t\t: quoteMark === `\"` ? /\"/ : /[\\s\"'=<>\\/`]/;\n\n\tconst value = readSequence(parser, () =>\n\t\tregex.test(parser.template[parser.index])\n\t);\n\n\tif (quoteMark) parser.index += 1;\n\treturn value;\n}\n\nfunction readSequence(parser: Parser, done: () => boolean) {\n\tlet currentChunk: Node = {\n\t\tstart: parser.index,\n\t\tend: null,\n\t\ttype: 'Text',\n\t\tdata: '',\n\t};\n\n\tconst chunks = [];\n\n\twhile (parser.index < parser.template.length) {\n\t\tconst index = parser.index;\n\n\t\tif (done()) {\n\t\t\tcurrentChunk.end = parser.index;\n\n\t\t\tif (currentChunk.data) chunks.push(currentChunk);\n\n\t\t\tchunks.forEach(chunk => {\n\t\t\t\tif (chunk.type === 'Text')\n\t\t\t\t\tchunk.data = decodeCharacterReferences(chunk.data);\n\t\t\t});\n\n\t\t\treturn chunks;\n\t\t} else if (parser.eat('{{')) {\n\t\t\tif (currentChunk.data) {\n\t\t\t\tcurrentChunk.end = index;\n\t\t\t\tchunks.push(currentChunk);\n\t\t\t}\n\n\t\t\tconst expression = readExpression(parser);\n\t\t\tparser.allowWhitespace();\n\t\t\tif (!parser.eat('}}')) {\n\t\t\t\tparser.error(`Expected }}`);\n\t\t\t}\n\n\t\t\tchunks.push({\n\t\t\t\tstart: index,\n\t\t\t\tend: parser.index,\n\t\t\t\ttype: 'MustacheTag',\n\t\t\t\texpression,\n\t\t\t});\n\n\t\t\tcurrentChunk = {\n\t\t\t\tstart: parser.index,\n\t\t\t\tend: null,\n\t\t\t\ttype: 'Text',\n\t\t\t\tdata: '',\n\t\t\t};\n\t\t} else {\n\t\t\tcurrentChunk.data += parser.template[parser.index++];\n\t\t}\n\t}\n\n\tparser.error(`Unexpected end of input`);\n}","export const whitespace = /[ \\t\\r\\n]/;\n","import { whitespace } from './patterns';\n\nexport function trimStart(str: string) {\n\tlet i = 0;\n\twhile (whitespace.test(str[i])) i += 1;\n\n\treturn str.slice(i);\n}\n\nexport function trimEnd(str: string) {\n\tlet i = str.length;\n\twhile (whitespace.test(str[i - 1])) i -= 1;\n\n\treturn str.slice(0, i);\n}\n","import readExpression from '../read/expression';\nimport { whitespace } from '../../utils/patterns';\nimport { trimStart, trimEnd } from '../../utils/trim';\nimport reservedNames from '../../utils/reservedNames';\nimport { Parser } from '../index';\nimport { Node } from '../../interfaces';\n\nfunction trimWhitespace(block: Node, trimBefore: boolean, trimAfter: boolean) {\n\tif (!block.children || block.children.length === 0) return; // AwaitBlock\n\n\tconst firstChild = block.children[0];\n\tconst lastChild = block.children[block.children.length - 1];\n\n\tif (firstChild.type === 'Text' && trimBefore) {\n\t\tfirstChild.data = trimStart(firstChild.data);\n\t\tif (!firstChild.data) block.children.shift();\n\t}\n\n\tif (lastChild.type === 'Text' && trimAfter) {\n\t\tlastChild.data = trimEnd(lastChild.data);\n\t\tif (!lastChild.data) block.children.pop();\n\t}\n\n\tif (block.else) {\n\t\ttrimWhitespace(block.else, trimBefore, trimAfter);\n\t}\n\n\tif (firstChild.elseif) {\n\t\ttrimWhitespace(firstChild, trimBefore, trimAfter);\n\t}\n}\n\nexport default function mustache(parser: Parser) {\n\tconst start = parser.index;\n\tparser.index += 2;\n\n\tparser.allowWhitespace();\n\n\t// {{/if}} or {{/each}}\n\tif (parser.eat('/')) {\n\t\tlet block = parser.current();\n\t\tlet expected;\n\n\t\tif (block.type === 'ElseBlock' || block.type === 'PendingBlock' || block.type === 'ThenBlock' || block.type === 'CatchBlock') {\n\t\t\tblock.end = start;\n\t\t\tparser.stack.pop();\n\t\t\tblock = parser.current();\n\n\t\t\texpected = 'await';\n\t\t}\n\n\t\tif (block.type === 'IfBlock') {\n\t\t\texpected = 'if';\n\t\t} else if (block.type === 'EachBlock') {\n\t\t\texpected = 'each';\n\t\t} else if (block.type === 'AwaitBlock') {\n\t\t\texpected = 'await';\n\t\t} else {\n\t\t\tparser.error(`Unexpected block closing tag`);\n\t\t}\n\n\t\tparser.eat(expected, true);\n\t\tparser.allowWhitespace();\n\t\tparser.eat('}}', true);\n\n\t\twhile (block.elseif) {\n\t\t\tblock.end = parser.index;\n\t\t\tparser.stack.pop();\n\t\t\tblock = parser.current();\n\n\t\t\tif (block.else) {\n\t\t\t\tblock.else.end = start;\n\t\t\t}\n\t\t}\n\n\t\t// strip leading/trailing whitespace as necessary\n\t\tconst charBefore = parser.template[block.start - 1];\n\t\tconst charAfter = parser.template[parser.index];\n\t\tconst trimBefore = !charBefore || whitespace.test(charBefore);\n\t\tconst trimAfter = !charAfter || whitespace.test(charAfter);\n\n\t\ttrimWhitespace(block, trimBefore, trimAfter);\n\n\t\tblock.end = parser.index;\n\t\tparser.stack.pop();\n\t} else if (parser.eat('elseif')) {\n\t\tconst block = parser.current();\n\t\tif (block.type !== 'IfBlock')\n\t\t\tparser.error(\n\t\t\t\t'Cannot have an {{elseif ...}} block outside an {{#if ...}} block'\n\t\t\t);\n\n\t\tparser.requireWhitespace();\n\n\t\tconst expression = readExpression(parser);\n\n\t\tparser.allowWhitespace();\n\t\tparser.eat('}}', true);\n\n\t\tblock.else = {\n\t\t\tstart: parser.index,\n\t\t\tend: null,\n\t\t\ttype: 'ElseBlock',\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\tstart: parser.index,\n\t\t\t\t\tend: null,\n\t\t\t\t\ttype: 'IfBlock',\n\t\t\t\t\telseif: true,\n\t\t\t\t\texpression,\n\t\t\t\t\tchildren: [],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tparser.stack.push(block.else.children[0]);\n\t} else if (parser.eat('else')) {\n\t\tconst block = parser.current();\n\t\tif (block.type !== 'IfBlock' && block.type !== 'EachBlock') {\n\t\t\tparser.error(\n\t\t\t\t'Cannot have an {{else}} block outside an {{#if ...}} or {{#each ...}} block'\n\t\t\t);\n\t\t}\n\n\t\tparser.allowWhitespace();\n\t\tparser.eat('}}', true);\n\n\t\tblock.else = {\n\t\t\tstart: parser.index,\n\t\t\tend: null,\n\t\t\ttype: 'ElseBlock',\n\t\t\tchildren: [],\n\t\t};\n\n\t\tparser.stack.push(block.else);\n\t} else if (parser.eat('then')) {\n\t\t// TODO DRY out this and the next section\n\t\tconst pendingBlock = parser.current();\n\t\tif (pendingBlock.type === 'PendingBlock') {\n\t\t\tpendingBlock.end = start;\n\t\t\tparser.stack.pop();\n\t\t\tconst awaitBlock = parser.current();\n\n\t\t\tparser.requireWhitespace();\n\t\t\tawaitBlock.value = parser.readIdentifier();\n\n\t\t\tparser.allowWhitespace();\n\t\t\tparser.eat('}}', true);\n\n\t\t\tconst thenBlock: Node = {\n\t\t\t\tstart,\n\t\t\t\tend: null,\n\t\t\t\ttype: 'ThenBlock',\n\t\t\t\tchildren: []\n\t\t\t};\n\n\t\t\tawaitBlock.then = thenBlock;\n\t\t\tparser.stack.push(thenBlock);\n\t\t}\n\t} else if (parser.eat('catch')) {\n\t\tconst thenBlock = parser.current();\n\t\tif (thenBlock.type === 'ThenBlock') {\n\t\t\tthenBlock.end = start;\n\t\t\tparser.stack.pop();\n\t\t\tconst awaitBlock = parser.current();\n\n\t\t\tparser.requireWhitespace();\n\t\t\tawaitBlock.error = parser.readIdentifier();\n\n\t\t\tparser.allowWhitespace();\n\t\t\tparser.eat('}}', true);\n\n\t\t\tconst catchBlock: Node = {\n\t\t\t\tstart,\n\t\t\t\tend: null,\n\t\t\t\ttype: 'CatchBlock',\n\t\t\t\tchildren: []\n\t\t\t};\n\n\t\t\tawaitBlock.catch = catchBlock;\n\t\t\tparser.stack.push(catchBlock);\n\t\t}\n\t} else if (parser.eat('#')) {\n\t\t// {{#if foo}} or {{#each foo}}\n\t\tlet type;\n\n\t\tif (parser.eat('if')) {\n\t\t\ttype = 'IfBlock';\n\t\t} else if (parser.eat('each')) {\n\t\t\ttype = 'EachBlock';\n\t\t} else if (parser.eat('await')) {\n\t\t\ttype = 'AwaitBlock';\n\t\t} else {\n\t\t\tparser.error(`Expected if, each or await`);\n\t\t}\n\n\t\tparser.requireWhitespace();\n\n\t\tconst expression = readExpression(parser);\n\n\t\tconst block: Node = type === 'AwaitBlock' ?\n\t\t\t{\n\t\t\t\tstart,\n\t\t\t\tend: null,\n\t\t\t\ttype,\n\t\t\t\texpression,\n\t\t\t\tvalue: null,\n\t\t\t\terror: null,\n\t\t\t\tpending: {\n\t\t\t\t\tstart: null,\n\t\t\t\t\tend: null,\n\t\t\t\t\ttype: 'PendingBlock',\n\t\t\t\t\tchildren: []\n\t\t\t\t},\n\t\t\t\tthen: {\n\t\t\t\t\tstart: null,\n\t\t\t\t\tend: null,\n\t\t\t\t\ttype: 'ThenBlock',\n\t\t\t\t\tchildren: []\n\t\t\t\t},\n\t\t\t\tcatch: {\n\t\t\t\t\tstart: null,\n\t\t\t\t\tend: null,\n\t\t\t\t\ttype: 'CatchBlock',\n\t\t\t\t\tchildren: []\n\t\t\t\t},\n\t\t\t} :\n\t\t\t{\n\t\t\t\tstart,\n\t\t\t\tend: null,\n\t\t\t\ttype,\n\t\t\t\texpression,\n\t\t\t\tchildren: [],\n\t\t\t};\n\n\t\tparser.allowWhitespace();\n\n\t\t// {{#each}} blocks must declare a context – {{#each list as item}}\n\t\tif (type === 'EachBlock') {\n\t\t\tparser.eat('as', true);\n\t\t\tparser.requireWhitespace();\n\n\t\t\tif (parser.eat('[')) {\n\t\t\t\tparser.allowWhitespace();\n\n\t\t\t\tblock.destructuredContexts = [];\n\n\t\t\t\tdo {\n\t\t\t\t\tparser.allowWhitespace();\n\n\t\t\t\t\tconst destructuredContext = parser.readIdentifier();\n\t\t\t\t\tif (!destructuredContext) parser.error(`Expected name`);\n\n\t\t\t\t\tblock.destructuredContexts.push(destructuredContext);\n\t\t\t\t\tparser.allowWhitespace();\n\t\t\t\t} while (parser.eat(','));\n\n\t\t\t\tif (!block.destructuredContexts.length) parser.error(`Expected name`);\n\t\t\t\tblock.context = block.destructuredContexts.join('_');\n\n\t\t\t\tparser.allowWhitespace();\n\t\t\t\tparser.eat(']', true);\n\t\t\t} else {\n\t\t\t\tblock.context = parser.readIdentifier();\n\t\t\t\tif (!block.context) parser.error(`Expected name`);\n\t\t\t}\n\n\t\t\tparser.allowWhitespace();\n\n\t\t\tif (parser.eat(',')) {\n\t\t\t\tparser.allowWhitespace();\n\t\t\t\tblock.index = parser.readIdentifier();\n\t\t\t\tif (!block.index) parser.error(`Expected name`);\n\t\t\t\tparser.allowWhitespace();\n\t\t\t}\n\n\t\t\tif (parser.eat('@')) {\n\t\t\t\tblock.key = parser.readIdentifier();\n\t\t\t\tif (!block.key) parser.error(`Expected name`);\n\t\t\t\tparser.allowWhitespace();\n\t\t\t}\n\t\t}\n\n\t\tlet awaitBlockShorthand = type === 'AwaitBlock' && parser.eat('then');\n\t\tif (awaitBlockShorthand) {\n\t\t\tparser.requireWhitespace();\n\t\t\tblock.value = parser.readIdentifier();\n\t\t\tparser.allowWhitespace();\n\t\t}\n\n\t\tparser.eat('}}', true);\n\n\t\tparser.current().children.push(block);\n\t\tparser.stack.push(block);\n\n\t\tif (type === 'AwaitBlock') {\n\t\t\tconst childBlock = awaitBlockShorthand ? block.then : block.pending;\n\t\t\tchildBlock.start = parser.index;\n\t\t\tparser.stack.push(childBlock);\n\t\t}\n\t} else if (parser.eat('yield')) {\n\t\t// {{yield}}\n\t\t// TODO deprecate\n\t\tparser.allowWhitespace();\n\t\tparser.eat('}}', true);\n\n\t\tparser.current().children.push({\n\t\t\tstart,\n\t\t\tend: parser.index,\n\t\t\ttype: 'Element',\n\t\t\tname: 'slot',\n\t\t\tattributes: [],\n\t\t\tchildren: []\n\t\t});\n\t} else if (parser.eat('{')) {\n\t\t// {{{raw}}} mustache\n\t\tconst expression = readExpression(parser);\n\n\t\tparser.allowWhitespace();\n\t\tparser.eat('}}}', true);\n\n\t\tparser.current().children.push({\n\t\t\tstart,\n\t\t\tend: parser.index,\n\t\t\ttype: 'RawMustacheTag',\n\t\t\texpression,\n\t\t});\n\t} else {\n\t\tconst expression = readExpression(parser);\n\n\t\tparser.allowWhitespace();\n\t\tparser.eat('}}', true);\n\n\t\tparser.current().children.push({\n\t\t\tstart,\n\t\t\tend: parser.index,\n\t\t\ttype: 'MustacheTag',\n\t\t\texpression,\n\t\t});\n\t}\n}\n","import { decodeCharacterReferences } from '../utils/html';\nimport { Parser } from '../index';\n\nexport default function text(parser: Parser) {\n\tconst start = parser.index;\n\n\tlet data = '';\n\n\twhile (\n\t\tparser.index < parser.template.length &&\n\t\t!parser.match('<') &&\n\t\t!parser.match('{{')\n\t) {\n\t\tdata += parser.template[parser.index++];\n\t}\n\n\tparser.current().children.push({\n\t\tstart,\n\t\tend: parser.index,\n\t\ttype: 'Text',\n\t\tdata: decodeCharacterReferences(data),\n\t});\n}\n","import tag from './tag';\nimport mustache from './mustache';\nimport text from './text';\nimport { Parser } from '../index';\n\nexport default function fragment(parser: Parser) {\n\tif (parser.match('<')) {\n\t\treturn tag;\n\t}\n\n\tif (parser.match('{{')) {\n\t\treturn mustache;\n\t}\n\n\treturn text;\n}\n","const reservedNames = new Set([\n\t'arguments',\n\t'await',\n\t'break',\n\t'case',\n\t'catch',\n\t'class',\n\t'const',\n\t'continue',\n\t'debugger',\n\t'default',\n\t'delete',\n\t'do',\n\t'else',\n\t'enum',\n\t'eval',\n\t'export',\n\t'extends',\n\t'false',\n\t'finally',\n\t'for',\n\t'function',\n\t'if',\n\t'implements',\n\t'import',\n\t'in',\n\t'instanceof',\n\t'interface',\n\t'let',\n\t'new',\n\t'null',\n\t'package',\n\t'private',\n\t'protected',\n\t'public',\n\t'return',\n\t'static',\n\t'super',\n\t'switch',\n\t'this',\n\t'throw',\n\t'true',\n\t'try',\n\t'typeof',\n\t'var',\n\t'void',\n\t'while',\n\t'with',\n\t'yield',\n]);\n\nexport default reservedNames;\n","// Adapted from https://github.com/acornjs/acorn/blob/6584815dca7440e00de841d1dad152302fdd7ca5/src/tokenize.js\n// Reproduced under MIT License https://github.com/acornjs/acorn/blob/master/LICENSE\n\nexport default function fullCharCodeAt(str: string, i: number): number {\n\tlet code = str.charCodeAt(i)\n\tif (code <= 0xd7ff || code >= 0xe000) return code;\n\n\tlet next = str.charCodeAt(i + 1);\n\treturn (code << 10) + next - 0x35fdc00;\n}","// https://github.com/darkskyapp/string-hash/blob/master/index.js\nexport default function hash(str: string): string {\n\tlet hash = 5381;\n\tlet i = str.length;\n\n\twhile (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n\treturn (hash >>> 0).toString(36);\n}\n","function getLocator(source, options) {\n    if (options === void 0) { options = {}; }\n    var offsetLine = options.offsetLine || 0;\n    var offsetColumn = options.offsetColumn || 0;\n    var originalLines = source.split('\\n');\n    var start = 0;\n    var lineRanges = originalLines.map(function (line, i) {\n        var end = start + line.length + 1;\n        var range = { start: start, end: end, line: i };\n        start = end;\n        return range;\n    });\n    var i = 0;\n    function rangeContains(range, index) {\n        return range.start <= index && index < range.end;\n    }\n    function getLocation(range, index) {\n        return { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };\n    }\n    function locate(search, startIndex) {\n        if (typeof search === 'string') {\n            search = source.indexOf(search, startIndex || 0);\n        }\n        var range = lineRanges[i];\n        var d = search >= range.end ? 1 : -1;\n        while (range) {\n            if (rangeContains(range, search))\n                return getLocation(range, search);\n            i += d;\n            range = lineRanges[i];\n        }\n    }\n    ;\n    return locate;\n}\nfunction locate(source, search, options) {\n    if (typeof options === 'number') {\n        throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');\n    }\n    return getLocator(source, options)(search, options && options.startIndex);\n}\n\nexport { getLocator, locate };","import repeat from './repeat';\n\nfunction tabsToSpaces(str: string) {\n\treturn str.replace(/^\\t+/, match => match.split('\\t').join('  '));\n}\n\nexport default function getCodeFrame(\n\tsource: string,\n\tline: number,\n\tcolumn: number\n) {\n\tconst lines = source.split('\\n');\n\n\tconst frameStart = Math.max(0, line - 2);\n\tconst frameEnd = Math.min(line + 3, lines.length);\n\n\tconst digits = String(frameEnd + 1).length;\n\n\treturn lines\n\t\t.slice(frameStart, frameEnd)\n\t\t.map((str, i) => {\n\t\t\tconst isErrorLine = frameStart + i === line;\n\n\t\t\tlet lineNum = String(i + frameStart + 1);\n\t\t\twhile (lineNum.length < digits) lineNum = ` ${lineNum}`;\n\n\t\t\tif (isErrorLine) {\n\t\t\t\tconst indicator =\n\t\t\t\t\trepeat(' ', digits + 2 + tabsToSpaces(str.slice(0, column)).length) + '^';\n\t\t\t\treturn `${lineNum}: ${tabsToSpaces(str)}\\n${indicator}`;\n\t\t\t}\n\n\t\t\treturn `${lineNum}: ${tabsToSpaces(str)}`;\n\t\t})\n\t\t.join('\\n');\n}\n","import { locate } from 'locate-character';\nimport getCodeFrame from '../utils/getCodeFrame';\n\nclass CompileError extends Error {\n\tloc: { line: number, column: number };\n\tend: { line: number, column: number };\n\tpos: number;\n\tfilename: string;\n\tframe: string;\n\n\ttoString() {\n\t\treturn `${this.message} (${this.loc.line}:${this.loc.column})\\n${this.frame}`;\n\t}\n}\n\nexport default function error(message: string, props: {\n\tname: string,\n\tsource: string,\n\tfilename: string,\n\tstart: number,\n\tend?: number\n}) {\n\tconst error = new CompileError(message);\n\terror.name = props.name;\n\n\tconst start = locate(props.source, props.start);\n\tconst end = locate(props.source, props.end || props.start);\n\n\terror.loc = { line: start.line + 1, column: start.column };\n\terror.end = { line: end.line + 1, column: end.column };\n\terror.pos = props.start;\n\terror.filename = props.filename;\n\n\terror.frame = getCodeFrame(props.source, start.line, start.column);\n\n\tthrow error;\n}","import { isIdentifierStart, isIdentifierChar } from 'acorn';\nimport { locate, Location } from 'locate-character';\nimport fragment from './state/fragment';\nimport { whitespace } from '../utils/patterns';\nimport { trimStart, trimEnd } from '../utils/trim';\nimport getCodeFrame from '../utils/getCodeFrame';\nimport reservedNames from '../utils/reservedNames';\nimport fullCharCodeAt from '../utils/fullCharCodeAt';\nimport hash from '../utils/hash';\nimport { Node, Parsed } from '../interfaces';\nimport error from '../utils/error';\n\ninterface ParserOptions {\n\tfilename?: string;\n\tbind?: boolean;\n}\n\ntype ParserState = (parser: Parser) => (ParserState | void);\n\nexport class Parser {\n\treadonly template: string;\n\treadonly filename?: string;\n\n\tindex: number;\n\tstack: Array<Node>;\n\n\thtml: Node;\n\tcss: Node;\n\tjs: Node;\n\tmetaTags: {};\n\n\tallowBindings: boolean;\n\n\tconstructor(template: string, options: ParserOptions) {\n\t\tif (typeof template !== 'string') {\n\t\t\tthrow new TypeError('Template must be a string');\n\t\t}\n\n\t\tthis.template = template.replace(/\\s+$/, '');\n\t\tthis.filename = options.filename;\n\n\t\tthis.allowBindings = options.bind !== false;\n\n\t\tthis.index = 0;\n\t\tthis.stack = [];\n\t\tthis.metaTags = {};\n\n\t\tthis.html = {\n\t\t\tstart: null,\n\t\t\tend: null,\n\t\t\ttype: 'Fragment',\n\t\t\tchildren: [],\n\t\t};\n\n\t\tthis.css = null;\n\t\tthis.js = null;\n\n\t\tthis.stack.push(this.html);\n\n\t\tlet state: ParserState = fragment;\n\n\t\twhile (this.index < this.template.length) {\n\t\t\tstate = state(this) || fragment;\n\t\t}\n\n\t\tif (this.stack.length > 1) {\n\t\t\tconst current = this.current();\n\n\t\t\tconst type = current.type === 'Element' ? `<${current.name}>` : 'Block';\n\t\t\tthis.error(`${type} was left open`, current.start);\n\t\t}\n\n\t\tif (state !== fragment) {\n\t\t\tthis.error('Unexpected end of input');\n\t\t}\n\n\t\tif (this.html.children.length) {\n\t\t\tlet start = this.html.children[0] && this.html.children[0].start;\n\t\t\twhile (/\\s/.test(template[start])) start += 1;\n\n\t\t\tlet end = this.html.children[this.html.children.length - 1] && this.html.children[this.html.children.length - 1].end;\n\t\t\twhile (/\\s/.test(template[end - 1])) end -= 1;\n\n\t\t\tthis.html.start = start;\n\t\t\tthis.html.end = end;\n\t\t} else {\n\t\t\tthis.html.start = this.html.end = null;\n\t\t}\n\t}\n\n\tcurrent() {\n\t\treturn this.stack[this.stack.length - 1];\n\t}\n\n\tacornError(err: any) {\n\t\tthis.error(err.message.replace(/ \\(\\d+:\\d+\\)$/, ''), err.pos);\n\t}\n\n\terror(message: string, index = this.index) {\n\t\terror(message, {\n\t\t\tname: 'ParseError',\n\t\t\tsource: this.template,\n\t\t\tstart: index,\n\t\t\tfilename: this.filename\n\t\t});\n\t}\n\n\teat(str: string, required?: boolean, message?: string) {\n\t\tif (this.match(str)) {\n\t\t\tthis.index += str.length;\n\t\t\treturn true;\n\t\t}\n\n\t\tif (required) {\n\t\t\tthis.error(message || `Expected ${str}`);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tmatch(str: string) {\n\t\treturn this.template.slice(this.index, this.index + str.length) === str;\n\t}\n\n\tallowWhitespace() {\n\t\twhile (\n\t\t\tthis.index < this.template.length &&\n\t\t\twhitespace.test(this.template[this.index])\n\t\t) {\n\t\t\tthis.index++;\n\t\t}\n\t}\n\n\tread(pattern: RegExp) {\n\t\tconst match = pattern.exec(this.template.slice(this.index));\n\t\tif (!match || match.index !== 0) return null;\n\n\t\tthis.index += match[0].length;\n\n\t\treturn match[0];\n\t}\n\n\treadIdentifier() {\n\t\tconst start = this.index;\n\n\t\tlet i = this.index;\n\n\t\tconst code = fullCharCodeAt(this.template, i);\n\t\tif (!isIdentifierStart(code, true)) return null;\n\n\t\ti += code <= 0xffff ? 1 : 2;\n\n\t\twhile (i < this.template.length) {\n\t\t\tconst code = fullCharCodeAt(this.template, i);\n\n\t\t\tif (!isIdentifierChar(code, true)) break;\n\t\t\ti += code <= 0xffff ? 1 : 2;\n\t\t}\n\n\t\tconst identifier = this.template.slice(this.index, this.index = i);\n\n\t\tif (reservedNames.has(identifier)) {\n\t\t\tthis.error(`'${identifier}' is a reserved word in JavaScript and cannot be used here`, start);\n\t\t}\n\n\t\treturn identifier;\n\t}\n\n\treadUntil(pattern: RegExp) {\n\t\tif (this.index >= this.template.length)\n\t\t\tthis.error('Unexpected end of input');\n\n\t\tconst start = this.index;\n\t\tconst match = pattern.exec(this.template.slice(start));\n\n\t\tif (match) {\n\t\t\tthis.index = start + match.index;\n\t\t\treturn this.template.slice(start, this.index);\n\t\t}\n\n\t\tthis.index = this.template.length;\n\t\treturn this.template.slice(start);\n\t}\n\n\tremaining() {\n\t\treturn this.template.slice(this.index);\n\t}\n\n\trequireWhitespace() {\n\t\tif (!whitespace.test(this.template[this.index])) {\n\t\t\tthis.error(`Expected whitespace`);\n\t\t}\n\n\t\tthis.allowWhitespace();\n\t}\n}\n\nexport default function parse(\n\ttemplate: string,\n\toptions: ParserOptions = {}\n): Parsed {\n\tconst parser = new Parser(template, options);\n\treturn {\n\t\thash: hash(parser.template),\n\t\thtml: parser.html,\n\t\tcss: parser.css,\n\t\tjs: parser.js,\n\t};\n}\n","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nconst disallowed = new Set(['Literal', 'ObjectExpression', 'ArrayExpression']);\n\nexport default function data(validator: Validator, prop: Node) {\n\twhile (prop.type === 'ParenthesizedExpression') prop = prop.expression;\n\n\tif (disallowed.has(prop.value.type)) {\n\t\tvalidator.error(`'data' must be a function`, prop.value);\n\t}\n}\n","import { Node } from '../interfaces';\n\nexport default function getMethodName(node: Node) {\n\tif (node.type === 'Identifier') return node.name;\n\tif (node.type === 'Literal') return String(node.value);\n}","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\nimport getName from '../../../utils/getName';\n\nexport default function checkForDupes(\n\tvalidator: Validator,\n\tproperties: Node[]\n) {\n\tconst seen = new Set();\n\n\tproperties.forEach(prop => {\n\t\tconst name = getName(prop.key);\n\n\t\tif (seen.has(name)) {\n\t\t\tvalidator.error(`Duplicate property '${name}'`, prop);\n\t\t}\n\n\t\tseen.add(name);\n\t});\n}\n","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function checkForComputedKeys(\n\tvalidator: Validator,\n\tproperties: Node[]\n) {\n\tproperties.forEach(prop => {\n\t\tif (prop.key.computed) {\n\t\t\tvalidator.error(`Cannot use computed keys`, prop);\n\t\t}\n\t});\n}\n","import checkForDupes from '../utils/checkForDupes';\nimport checkForComputedKeys from '../utils/checkForComputedKeys';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function actions(validator: Validator, prop: Node) {\n\tif (prop.value.type !== 'ObjectExpression') {\n\t\tvalidator.error(\n\t\t\t`The 'actions' property must be an object literal`,\n\t\t\tprop\n\t\t);\n\t}\n\n\tcheckForDupes(validator, prop.value.properties);\n\tcheckForComputedKeys(validator, prop.value.properties);\n}\n","import { isIdentifierStart, isIdentifierChar } from 'acorn';\nimport fullCharCodeAt from './fullCharCodeAt';\n\nexport default function isValidIdentifier(str: string): boolean {\n\tlet i = 0;\n\n\twhile (i < str.length) {\n\t\tconst code = fullCharCodeAt(str, i);\n\t\tif (!(i === 0 ? isIdentifierStart : isIdentifierChar)(code, true)) return false;\n\n\t\ti += code <= 0xffff ? 1 : 2;\n\t}\n\n\treturn true;\n}","import { Node } from '../interfaces';\nimport { walk } from 'estree-walker';\n\nexport default function walkThroughTopFunctionScope(body: Node, callback: Function) {\n  let lexicalDepth = 0;\n  walk(body, {\n    enter(node: Node) {\n      if (/^Function/.test(node.type)) {\n        lexicalDepth += 1;\n      } else if (lexicalDepth === 0) {\n        callback(node)\n      }\n    },\n\n    leave(node: Node) {\n      if (/^Function/.test(node.type)) {\n        lexicalDepth -= 1;\n      }\n    },\n  });\n}\n","import { Node } from '../interfaces';\n\nexport default function isThisGetCallExpression(node: Node): boolean {\n\t\treturn node.type === 'CallExpression' &&\n\t\t\t\tnode.callee.type === 'MemberExpression' &&\n\t\t\t\tnode.callee.object.type === 'ThisExpression' &&\n\t\t\t\tnode.callee.property.name === 'get';\n}\n","import checkForDupes from '../utils/checkForDupes';\nimport checkForComputedKeys from '../utils/checkForComputedKeys';\nimport getName from '../../../utils/getName';\nimport isValidIdentifier from '../../../utils/isValidIdentifier';\nimport reservedNames from '../../../utils/reservedNames';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\nimport walkThroughTopFunctionScope from '../../../utils/walkThroughTopFunctionScope';\nimport isThisGetCallExpression from '../../../utils/isThisGetCallExpression';\n\nconst isFunctionExpression = new Set([\n\t'FunctionExpression',\n\t'ArrowFunctionExpression',\n]);\n\nexport default function computed(validator: Validator, prop: Node) {\n\tif (prop.value.type !== 'ObjectExpression') {\n\t\tvalidator.error(\n\t\t\t`The 'computed' property must be an object literal`,\n\t\t\tprop\n\t\t);\n\t}\n\n\tcheckForDupes(validator, prop.value.properties);\n\tcheckForComputedKeys(validator, prop.value.properties);\n\n\tprop.value.properties.forEach((computation: Node) => {\n\t\tconst name = getName(computation.key);\n\n\t\tif (!isValidIdentifier(name)) {\n\t\t\tconst suggestion = name.replace(/[^_$a-z0-9]/ig, '_').replace(/^\\d/, '_$&');\n\t\t\tvalidator.error(\n\t\t\t\t`Computed property name '${name}' is invalid — must be a valid identifier such as ${suggestion}`,\n\t\t\t\tcomputation\n\t\t\t);\n\t\t}\n\n\t\tif (reservedNames.has(name)) {\n\t\t\tvalidator.error(\n\t\t\t\t`Computed property name '${name}' is invalid — cannot be a JavaScript reserved word`,\n\t\t\t\tcomputation\n\t\t\t);\n\t\t}\n\n\t\tif (!isFunctionExpression.has(computation.value.type)) {\n\t\t\tvalidator.error(\n\t\t\t\t`Computed properties can be function expressions or arrow function expressions`,\n\t\t\t\tcomputation.value\n\t\t\t);\n\t\t}\n\n\t\tconst { body, params } = computation.value;\n\n\t\twalkThroughTopFunctionScope(body, (node: Node) => {\n\t\t\tif (isThisGetCallExpression(node) && !node.callee.property.computed) {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`Cannot use this.get(...) — values must be passed into the function as arguments`,\n\t\t\t\t\tnode\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (node.type === 'ThisExpression') {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`Computed properties should be pure functions — they do not have access to the component instance and cannot use 'this'. Did you mean to put this in 'methods'?`,\n\t\t\t\t\tnode\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tif (params.length === 0) {\n\t\t\tvalidator.error(\n\t\t\t\t`A computed value must depend on at least one property`,\n\t\t\t\tcomputation.value\n\t\t\t);\n\t\t}\n\n\t\tparams.forEach((param: Node) => {\n\t\t\tconst valid =\n\t\t\t\tparam.type === 'Identifier' ||\n\t\t\t\t(param.type === 'AssignmentPattern' &&\n\t\t\t\t\tparam.left.type === 'Identifier');\n\n\t\t\tif (!valid) {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`Computed properties cannot use destructuring in function parameters`,\n\t\t\t\t\tparam\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t});\n}\n","function isReference(node, parent) {\n    if (node.type === 'MemberExpression') {\n        return !node.computed && isReference(node.object, node);\n    }\n    if (node.type === 'Identifier') {\n        // the only time we could have an identifier node without a parent is\n        // if it's the entire body of a function without a block statement –\n        // i.e. an arrow function expression like `a => a`\n        if (!parent)\n            return true;\n        // TODO is this right?\n        if (parent.type === 'MemberExpression' || parent.type === 'MethodDefinition') {\n            return parent.computed || node === parent.object;\n        }\n        // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n        if (parent.type === 'Property')\n            return parent.computed || node === parent.value;\n        // disregard the `bar` in `export { foo as bar }`\n        if (parent.type === 'ExportSpecifier' && node !== parent.local)\n            return false;\n        return true;\n    }\n    return false;\n}\n\nexport default isReference;\n","import { walk } from 'estree-walker';\nimport isReference from 'is-reference';\nimport { Node } from '../../../interfaces';\n\nexport default function usesThisOrArguments(node: Node) {\n\tlet result = false;\n\n\twalk(node, {\n\t\tenter(node: Node, parent: Node) {\n\t\t\tif (\n\t\t\t\tresult ||\n\t\t\t\tnode.type === 'FunctionExpression' ||\n\t\t\t\tnode.type === 'FunctionDeclaration'\n\t\t\t) {\n\t\t\t\treturn this.skip();\n\t\t\t}\n\n\t\t\tif (node.type === 'ThisExpression') {\n\t\t\t\tresult = true;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tnode.type === 'Identifier' &&\n\t\t\t\tisReference(node, parent) &&\n\t\t\t\tnode.name === 'arguments'\n\t\t\t) {\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t},\n\t});\n\n\treturn result;\n}\n","import usesThisOrArguments from '../utils/usesThisOrArguments';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function oncreate(validator: Validator, prop: Node) {\n\tif (prop.value.type === 'ArrowFunctionExpression') {\n\t\tif (usesThisOrArguments(prop.value.body)) {\n\t\t\tvalidator.error(\n\t\t\t\t`'oncreate' should be a function expression, not an arrow function expression`,\n\t\t\t\tprop\n\t\t\t);\n\t\t}\n\t}\n}\n","import usesThisOrArguments from '../utils/usesThisOrArguments';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function ondestroy(validator: Validator, prop: Node) {\n\tif (prop.value.type === 'ArrowFunctionExpression') {\n\t\tif (usesThisOrArguments(prop.value.body)) {\n\t\t\tvalidator.error(\n\t\t\t\t`'ondestroy' should be a function expression, not an arrow function expression`,\n\t\t\t\tprop\n\t\t\t);\n\t\t}\n\t}\n}\n","import oncreate from './oncreate';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function onrender(validator: Validator, prop: Node) {\n\tvalidator.warn(\n\t\t`'onrender' has been deprecated in favour of 'oncreate', and will cause an error in Svelte 2.x`,\n\t\tprop\n\t);\n\toncreate(validator, prop);\n}\n","import ondestroy from './ondestroy';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function onteardown(validator: Validator, prop: Node) {\n\tvalidator.warn(\n\t\t`'onteardown' has been deprecated in favour of 'ondestroy', and will cause an error in Svelte 2.x`,\n\t\tprop\n\t);\n\tondestroy(validator, prop);\n}\n","import checkForDupes from '../utils/checkForDupes';\nimport checkForComputedKeys from '../utils/checkForComputedKeys';\nimport { walk } from 'estree-walker';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\nimport walkThroughTopFunctionScope from '../../../utils/walkThroughTopFunctionScope';\nimport isThisGetCallExpression from '../../../utils/isThisGetCallExpression';\n\nexport default function helpers(validator: Validator, prop: Node) {\n\tif (prop.value.type !== 'ObjectExpression') {\n\t\tvalidator.error(\n\t\t\t`The 'helpers' property must be an object literal`,\n\t\t\tprop\n\t\t);\n\t}\n\n\tcheckForDupes(validator, prop.value.properties);\n\tcheckForComputedKeys(validator, prop.value.properties);\n\n\tprop.value.properties.forEach((prop: Node) => {\n\t\tif (!/FunctionExpression/.test(prop.value.type)) return;\n\n\t\tlet usesArguments = false;\n\n\t\twalkThroughTopFunctionScope(prop.value.body, (node: Node) => {\n\t\t\tif (isThisGetCallExpression(node) && !node.callee.property.computed) {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`Cannot use this.get(...) — values must be passed into the helper function as arguments`,\n\t\t\t\t\tnode\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (node.type === 'ThisExpression') {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`Helpers should be pure functions — they do not have access to the component instance and cannot use 'this'. Did you mean to put this in 'methods'?`,\n\t\t\t\t\tnode\n\t\t\t\t);\n\t\t\t} else if (node.type === 'Identifier' && node.name === 'arguments') {\n\t\t\t\tusesArguments = true;\n\t\t\t}\n\t\t});\n\n\t\tif (prop.value.params.length === 0 && !usesArguments) {\n\t\t\tvalidator.warn(\n\t\t\t\t`Helpers should be pure functions, with at least one argument`,\n\t\t\t\tprop\n\t\t\t);\n\t\t}\n\t});\n}\n","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function checkForAccessors(\n\tvalidator: Validator,\n\tproperties: Node[],\n\tlabel: string\n) {\n\tproperties.forEach(prop => {\n\t\tif (prop.kind !== 'init') {\n\t\t\tvalidator.error(`${label} cannot use getters and setters`, prop);\n\t\t}\n\t});\n}\n","import checkForAccessors from '../utils/checkForAccessors';\nimport checkForDupes from '../utils/checkForDupes';\nimport checkForComputedKeys from '../utils/checkForComputedKeys';\nimport usesThisOrArguments from '../utils/usesThisOrArguments';\nimport getName from '../../../utils/getName';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nconst builtin = new Set(['set', 'get', 'on', 'fire', 'observe', 'destroy']);\n\nexport default function methods(validator: Validator, prop: Node) {\n\tif (prop.value.type !== 'ObjectExpression') {\n\t\tvalidator.error(\n\t\t\t`The 'methods' property must be an object literal`,\n\t\t\tprop\n\t\t);\n\t}\n\n\tcheckForAccessors(validator, prop.value.properties, 'Methods');\n\tcheckForDupes(validator, prop.value.properties);\n\tcheckForComputedKeys(validator, prop.value.properties);\n\n\tprop.value.properties.forEach((prop: Node) => {\n\t\tconst name = getName(prop.key);\n\n\t\tif (builtin.has(name)) {\n\t\t\tvalidator.error(\n\t\t\t\t`Cannot overwrite built-in method '${name}'`,\n\t\t\t\tprop\n\t\t\t);\n\t\t}\n\n\t\tif (prop.value.type === 'ArrowFunctionExpression') {\n\t\t\tif (usesThisOrArguments(prop.value.body)) {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`Method '${prop.key\n\t\t\t\t\t\t.name}' should be a function expression, not an arrow function expression`,\n\t\t\t\t\tprop\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n}\n","import checkForDupes from '../utils/checkForDupes';\nimport checkForComputedKeys from '../utils/checkForComputedKeys';\nimport getName from '../../../utils/getName';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function components(validator: Validator, prop: Node) {\n\tif (prop.value.type !== 'ObjectExpression') {\n\t\tvalidator.error(\n\t\t\t`The 'components' property must be an object literal`,\n\t\t\tprop\n\t\t);\n\t}\n\n\tcheckForDupes(validator, prop.value.properties);\n\tcheckForComputedKeys(validator, prop.value.properties);\n\n\tprop.value.properties.forEach((component: Node) => {\n\t\tconst name = getName(component.key);\n\n\t\tif (name === 'state') {\n\t\t\tvalidator.error(\n\t\t\t\t`Component constructors cannot be called 'state' due to technical limitations`,\n\t\t\t\tcomponent\n\t\t\t);\n\t\t}\n\n\t\tif (!/^[A-Z]/.test(name)) {\n\t\t\tvalidator.warn(`Component names should be capitalised`, component);\n\t\t}\n\t});\n}\n","import checkForDupes from '../utils/checkForDupes';\nimport checkForComputedKeys from '../utils/checkForComputedKeys';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function events(validator: Validator, prop: Node) {\n\tif (prop.value.type !== 'ObjectExpression') {\n\t\tvalidator.error(\n\t\t\t`The 'events' property must be an object literal`,\n\t\t\tprop\n\t\t);\n\t}\n\n\tcheckForDupes(validator, prop.value.properties);\n\tcheckForComputedKeys(validator, prop.value.properties);\n}\n","export const html = 'http://www.w3.org/1999/xhtml';\nexport const mathml = 'http://www.w3.org/1998/Math/MathML';\nexport const svg = 'http://www.w3.org/2000/svg';\nexport const xlink = 'http://www.w3.org/1999/xlink';\nexport const xml = 'http://www.w3.org/XML/1998/namespace';\nexport const xmlns = 'http://www.w3.org/2000/xmlns';\n\nexport const validNamespaces = [\n\t'html',\n\t'mathml',\n\t'svg',\n\t'xlink',\n\t'xml',\n\t'xmlns',\n\thtml,\n\tmathml,\n\tsvg,\n\txlink,\n\txml,\n\txmlns,\n];\n\nconst namespaces: Record<string, string> = { html, mathml, svg, xlink, xml, xmlns };\n\nexport default namespaces;\n","import { Node } from '../interfaces';\n\nexport default function nodeToString(node: Node) {\n\tif (node.type === 'Literal' && typeof node.value === 'string') {\n\t\treturn node.value;\n\t} else if (node.type === 'TemplateLiteral'\n\t      && node.quasis.length === 1\n\t      && node.expressions.length === 0) {\n\t\treturn node.quasis[0].value.raw;\n\t}\n}\n","// adapted from https://github.com/Glench/fuzzyset.js/blob/master/lib/fuzzyset.js\n// BSD Licensed\n\nconst GRAM_SIZE_LOWER = 2;\nconst GRAM_SIZE_UPPER = 3;\n\n// return an edit distance from 0 to 1\nfunction _distance(str1: string, str2: string) {\n\tif (str1 === null && str2 === null)\n\t\tthrow 'Trying to compare two null values';\n\tif (str1 === null || str2 === null) return 0;\n\tstr1 = String(str1);\n\tstr2 = String(str2);\n\n\tconst distance = levenshtein(str1, str2);\n\tif (str1.length > str2.length) {\n\t\treturn 1 - distance / str1.length;\n\t} else {\n\t\treturn 1 - distance / str2.length;\n\t}\n}\n\n// helper functions\nfunction levenshtein(str1: string, str2: string) {\n\tconst current: number[] = [];\n\tlet prev;\n\tlet value;\n\n\tfor (let i = 0; i <= str2.length; i++) {\n\t\tfor (let j = 0; j <= str1.length; j++) {\n\t\t\tif (i && j) {\n\t\t\t\tif (str1.charAt(j - 1) === str2.charAt(i - 1)) {\n\t\t\t\t\tvalue = prev;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = Math.min(current[j], current[j - 1], prev) + 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalue = i + j;\n\t\t\t}\n\n\t\t\tprev = current[j];\n\t\t\tcurrent[j] = value;\n\t\t}\n\t}\n\n\treturn current.pop();\n}\n\nconst _nonWordRe = /[^\\w, ]+/;\n\nfunction _iterateGrams(value: string, gramSize: number) {\n\tgramSize = gramSize || 2;\n\tconst simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-';\n\tconst lenDiff = gramSize - simplified.length;\n\tconst results = [];\n\n\tif (lenDiff > 0) {\n\t\tfor (let i = 0; i < lenDiff; ++i) {\n\t\t\tvalue += '-';\n\t\t}\n\t}\n\tfor (let i = 0; i < simplified.length - gramSize + 1; ++i) {\n\t\tresults.push(simplified.slice(i, i + gramSize));\n\t}\n\treturn results;\n}\n\nfunction _gramCounter(value: string, gramSize: number) {\n\t// return an object where key=gram, value=number of occurrences\n\tgramSize = gramSize || 2;\n\tconst result = {};\n\tconst grams = _iterateGrams(value, gramSize);\n\tlet i = 0;\n\n\tfor (i; i < grams.length; ++i) {\n\t\tif (grams[i] in result) {\n\t\t\tresult[grams[i]] += 1;\n\t\t} else {\n\t\t\tresult[grams[i]] = 1;\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction sortDescending(a, b) {\n\treturn b[0] - a[0];\n}\n\nexport default class FuzzySet {\n\texactSet: object;\n\tmatchDict: object;\n\titems: object;\n\n\tconstructor(arr: string[]) {\n\t\t// define all the object functions and attributes\n\t\tthis.exactSet = {};\n\t\tthis.matchDict = {};\n\t\tthis.items = {};\n\n\t\t// initialization\n\t\tfor (let i = GRAM_SIZE_LOWER; i < GRAM_SIZE_UPPER + 1; ++i) {\n\t\t\tthis.items[i] = [];\n\t\t}\n\t\t// add all the items to the set\n\t\tfor (let i = 0; i < arr.length; ++i) {\n\t\t\tthis.add(arr[i]);\n\t\t}\n\t}\n\n\tadd(value: string) {\n\t\tconst normalizedValue = value.toLowerCase();\n\t\tif (normalizedValue in this.exactSet) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet i = GRAM_SIZE_LOWER;\n\t\tfor (i; i < GRAM_SIZE_UPPER + 1; ++i) {\n\t\t\tthis._add(value, i);\n\t\t}\n\t}\n\n\t_add(value: string, gramSize: number) {\n\t\tconst normalizedValue = value.toLowerCase();\n\t\tconst items = this.items[gramSize] || [];\n\t\tconst index = items.length;\n\n\t\titems.push(0);\n\t\tconst gramCounts = _gramCounter(normalizedValue, gramSize);\n\t\tlet sumOfSquareGramCounts = 0;\n\t\tlet gram;\n\t\tlet gramCount;\n\n\t\tfor (gram in gramCounts) {\n\t\t\tgramCount = gramCounts[gram];\n\t\t\tsumOfSquareGramCounts += Math.pow(gramCount, 2);\n\t\t\tif (gram in this.matchDict) {\n\t\t\t\tthis.matchDict[gram].push([index, gramCount]);\n\t\t\t} else {\n\t\t\t\tthis.matchDict[gram] = [[index, gramCount]];\n\t\t\t}\n\t\t}\n\t\tconst vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n\t\titems[index] = [vectorNormal, normalizedValue];\n\t\tthis.items[gramSize] = items;\n\t\tthis.exactSet[normalizedValue] = value;\n\t};\n\n\tget(value: string) {\n\t\tconst normalizedValue = value.toLowerCase();\n\t\tconst result = this.exactSet[normalizedValue];\n\n\t\tif (result) {\n\t\t\treturn [[1, result]];\n\t\t}\n\n\t\tlet results = [];\n\t\t// start with high gram size and if there are no results, go to lower gram sizes\n\t\tfor (\n\t\t\tlet gramSize = GRAM_SIZE_UPPER;\n\t\t\tgramSize >= GRAM_SIZE_LOWER;\n\t\t\t--gramSize\n\t\t) {\n\t\t\tresults = this.__get(value, gramSize);\n\t\t\tif (results) {\n\t\t\t\treturn results;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t__get(value: string, gramSize: number) {\n\t\tconst normalizedValue = value.toLowerCase();\n\t\tconst matches = {};\n\t\tconst gramCounts = _gramCounter(normalizedValue, gramSize);\n\t\tconst items = this.items[gramSize];\n\t\tlet sumOfSquareGramCounts = 0;\n\t\tlet gram;\n\t\tlet gramCount;\n\t\tlet i;\n\t\tlet index;\n\t\tlet otherGramCount;\n\n\t\tfor (gram in gramCounts) {\n\t\t\tgramCount = gramCounts[gram];\n\t\t\tsumOfSquareGramCounts += Math.pow(gramCount, 2);\n\t\t\tif (gram in this.matchDict) {\n\t\t\t\tfor (i = 0; i < this.matchDict[gram].length; ++i) {\n\t\t\t\t\tindex = this.matchDict[gram][i][0];\n\t\t\t\t\totherGramCount = this.matchDict[gram][i][1];\n\t\t\t\t\tif (index in matches) {\n\t\t\t\t\t\tmatches[index] += gramCount * otherGramCount;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatches[index] = gramCount * otherGramCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n\t\tlet results = [];\n\t\tlet matchScore;\n\n\t\t// build a results list of [score, str]\n\t\tfor (const matchIndex in matches) {\n\t\t\tmatchScore = matches[matchIndex];\n\t\t\tresults.push([\n\t\t\t\tmatchScore / (vectorNormal * items[matchIndex][0]),\n\t\t\t\titems[matchIndex][1],\n\t\t\t]);\n\t\t}\n\n\t\tresults.sort(sortDescending);\n\n\t\tlet newResults = [];\n\t\tconst endIndex = Math.min(50, results.length);\n\t\t// truncate somewhat arbitrarily to 50\n\t\tfor (let i = 0; i < endIndex; ++i) {\n\t\t\tnewResults.push([\n\t\t\t\t_distance(results[i][1], normalizedValue),\n\t\t\t\tresults[i][1],\n\t\t\t]);\n\t\t}\n\t\tresults = newResults;\n\t\tresults.sort(sortDescending);\n\n\t\tnewResults = [];\n\t\tfor (let i = 0; i < results.length; ++i) {\n\t\t\tif (results[i][0] == results[0][0]) {\n\t\t\t\tnewResults.push([results[i][0], this.exactSet[results[i][1]]]);\n\t\t\t}\n\t\t}\n\n\t\treturn newResults;\n\t};\n}","import FuzzySet from './FuzzySet';\n\nexport default function fuzzymatch(name: string, names: string[]) {\n\tconst set = new FuzzySet(names);\n\tconst matches = set.get(name);\n\n\treturn matches && matches[0] && matches[0][0] > 0.7 ? matches[0][1] : null;\n}\n","import * as namespaces from '../../../utils/namespaces';\nimport nodeToString from '../../../utils/nodeToString'\nimport fuzzymatch from '../../utils/fuzzymatch';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nconst valid = new Set(namespaces.validNamespaces);\n\nexport default function namespace(validator: Validator, prop: Node) {\n\tconst ns = nodeToString(prop.value);\n\n\tif (typeof ns !== 'string') {\n\t\tvalidator.error(\n\t\t\t`The 'namespace' property must be a string literal representing a valid namespace`,\n\t\t\tprop\n\t\t);\n\t}\n\n\tif (!valid.has(ns)) {\n\t\tconst match = fuzzymatch(ns, namespaces.validNamespaces);\n\t\tif (match) {\n\t\t\tvalidator.error(\n\t\t\t\t`Invalid namespace '${ns}' (did you mean '${match}'?)`,\n\t\t\t\tprop\n\t\t\t);\n\t\t} else {\n\t\t\tvalidator.error(`Invalid namespace '${ns}'`, prop);\n\t\t}\n\t}\n}\n","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function preload(validator: Validator, prop: Node) {\n\t// not sure there's anything we need to check here...\n}\n","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\nimport nodeToString from '../../../utils/nodeToString';\n\nexport default function props(validator: Validator, prop: Node) {\n\tif (prop.value.type !== 'ArrayExpression') {\n\t\tvalidator.error(\n\t\t\t`'props' must be an array expression, if specified`,\n\t\t\tprop.value\n\t\t);\n\t}\n\n\tprop.value.elements.forEach((element: Node) => {\n\t\tif (typeof nodeToString(element) !== 'string') {\n\t\t\tvalidator.error(\n\t\t\t\t`'props' must be an array of string literals`,\n\t\t\t\telement\n\t\t\t);\n\t\t}\n\t});\n}\n","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\nimport nodeToString from '../../../utils/nodeToString';\n\nexport default function tag(validator: Validator, prop: Node) {\n\tconst tag = nodeToString(prop.value);\n\tif (typeof tag !== 'string') {\n\t\tvalidator.error(\n\t\t\t`'tag' must be a string literal`,\n\t\t\tprop.value\n\t\t);\n\t}\n\n\tif (!/^[a-zA-Z][a-zA-Z0-9]*-[a-zA-Z0-9-]+$/.test(tag)) {\n\t\tvalidator.error(\n\t\t\t`tag name must be two or more words joined by the '-' character`,\n\t\t\tprop.value\n\t\t);\n\t}\n}\n","import checkForDupes from '../utils/checkForDupes';\nimport checkForComputedKeys from '../utils/checkForComputedKeys';\nimport { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function transitions(validator: Validator, prop: Node) {\n\tif (prop.value.type !== 'ObjectExpression') {\n\t\tvalidator.error(\n\t\t\t`The 'transitions' property must be an object literal`,\n\t\t\tprop\n\t\t);\n\t}\n\n\tcheckForDupes(validator, prop.value.properties);\n\tcheckForComputedKeys(validator, prop.value.properties);\n\n\tprop.value.properties.forEach(() => {\n\t\t// TODO probably some validation that can happen here...\n\t\t// checking for use of `this` etc?\n\t});\n}\n","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nconst disallowed = new Set(['Literal', 'ObjectExpression', 'ArrayExpression']);\n\nexport default function setup(validator: Validator, prop: Node) {\n\twhile (prop.type === 'ParenthesizedExpression') prop = prop.expression;\n\n\tif (disallowed.has(prop.value.type)) {\n\t\tvalidator.error(`'setup' must be a function`, prop.value);\n\t}\n}\n","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function store(validator: Validator, prop: Node) {\n\t// not sure there's anything we need to check here...\n}\n","import { Validator } from '../../';\nimport { Node } from '../../../interfaces';\n\nexport default function immutable(validator: Validator, prop: Node) {\n\tif (prop.value.type !== 'Literal' || typeof prop.value.value !== 'boolean') {\n\t\tvalidator.error(\n\t\t\t`'immutable' must be a boolean literal`,\n\t\t\tprop.value\n\t\t);\n\t}\n}\n","import data from './data';\nimport actions from './actions';\nimport computed from './computed';\nimport oncreate from './oncreate';\nimport ondestroy from './ondestroy';\nimport onrender from './onrender';\nimport onteardown from './onteardown';\nimport helpers from './helpers';\nimport methods from './methods';\nimport components from './components';\nimport events from './events';\nimport namespace from './namespace';\nimport preload from './preload';\nimport props from './props';\nimport tag from './tag';\nimport transitions from './transitions';\nimport setup from './setup';\nimport store from './store';\nimport immutable from './immutable';\n\nexport default {\n\tdata,\n\tactions,\n\tcomputed,\n\toncreate,\n\tondestroy,\n\tonrender,\n\tonteardown,\n\thelpers,\n\tmethods,\n\tcomponents,\n\tevents,\n\tnamespace,\n\tpreload,\n\tprops,\n\ttag,\n\ttransitions,\n\tsetup,\n\tstore,\n\timmutable,\n};\n","import propValidators from './propValidators/index';\nimport fuzzymatch from '../utils/fuzzymatch';\nimport checkForDupes from './utils/checkForDupes';\nimport checkForComputedKeys from './utils/checkForComputedKeys';\nimport namespaces from '../../utils/namespaces';\nimport nodeToString from '../../utils/nodeToString';\nimport getName from '../../utils/getName';\nimport { Validator } from '../';\nimport { Node } from '../../interfaces';\n\nconst validPropList = Object.keys(propValidators);\n\nexport default function validateJs(validator: Validator, js: Node) {\n\tjs.content.body.forEach((node: Node) => {\n\t\t// check there are no named exports\n\t\tif (node.type === 'ExportNamedDeclaration') {\n\t\t\tvalidator.error(`A component can only have a default export`, node);\n\t\t}\n\n\t\tif (node.type === 'ExportDefaultDeclaration') {\n\t\t\tif (node.declaration.type !== 'ObjectExpression') {\n\t\t\t\treturn validator.error(\n\t\t\t\t\t`Default export must be an object literal`,\n\t\t\t\t\tnode.declaration\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcheckForComputedKeys(validator, node.declaration.properties);\n\t\t\tcheckForDupes(validator, node.declaration.properties);\n\n\t\t\tconst props = validator.properties;\n\n\t\t\tnode.declaration.properties.forEach((prop: Node) => {\n\t\t\t\tprops.set(getName(prop.key), prop);\n\t\t\t});\n\n\t\t\t// Remove these checks in version 2\n\t\t\tif (props.has('oncreate') && props.has('onrender')) {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t'Cannot have both oncreate and onrender',\n\t\t\t\t\tprops.get('onrender')\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (props.has('ondestroy') && props.has('onteardown')) {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t'Cannot have both ondestroy and onteardown',\n\t\t\t\t\tprops.get('onteardown')\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// ensure all exported props are valid\n\t\t\tnode.declaration.properties.forEach((prop: Node) => {\n\t\t\t\tconst name = getName(prop.key);\n\t\t\t\tconst propValidator = propValidators[name];\n\n\t\t\t\tif (propValidator) {\n\t\t\t\t\tpropValidator(validator, prop);\n\t\t\t\t} else {\n\t\t\t\t\tconst match = fuzzymatch(name, validPropList);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t\t`Unexpected property '${name}' (did you mean '${match}'?)`,\n\t\t\t\t\t\t\tprop\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (/FunctionExpression/.test(prop.value.type)) {\n\t\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t\t`Unexpected property '${name}' (did you mean to include it in 'methods'?)`,\n\t\t\t\t\t\t\tprop\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t\t`Unexpected property '${name}'`,\n\t\t\t\t\t\t\tprop\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (props.has('namespace')) {\n\t\t\t\tconst ns = nodeToString(props.get('namespace').value);\n\t\t\t\tvalidator.namespace = namespaces[ns] || ns;\n\t\t\t}\n\n\t\t\tvalidator.defaultExport = node;\n\t\t}\n\t});\n\n\t['components', 'methods', 'helpers', 'transitions', 'actions'].forEach(key => {\n\t\tif (validator.properties.has(key)) {\n\t\t\tvalidator.properties.get(key).value.properties.forEach((prop: Node) => {\n\t\t\t\tvalidator[key].set(getName(prop.key), prop.value);\n\t\t\t});\n\t\t}\n\t});\n}\n","import { Node } from '../interfaces';\n\nexport default function flatten(node: Node) {\n\tconst parts = [];\n\tconst propEnd = node.end;\n\n\twhile (node.type === 'MemberExpression') {\n\t\tif (node.computed) return null;\n\t\tparts.unshift(node.property.name);\n\n\t\tnode = node.object;\n\t}\n\n\tconst propStart = node.end;\n\tconst name = node.type === 'Identifier'\n\t\t? node.name\n\t\t: node.type === 'ThisExpression' ? 'this' : null;\n\n\tif (!name) return null;\n\n\tparts.unshift(name);\n\treturn { name, parts, keypath: `${name}[✂${propStart}-${propEnd}✂]` };\n}\n","export default function list(items: string[], conjunction = 'or') {\n\tif (items.length === 1) return items[0];\n\treturn `${items.slice(0, -1).join(', ')} ${conjunction} ${items[\n\t\titems.length - 1\n\t]}`;\n}\n","const validCalleeObjects = new Set(['this', 'event', 'console']);\n\nexport default validCalleeObjects;","import flattenReference from '../../utils/flattenReference';\nimport list from '../../utils/list';\nimport validate, { Validator } from '../index';\nimport validCalleeObjects from '../../utils/validCalleeObjects';\nimport { Node } from '../../interfaces';\n\nconst validBuiltins = new Set(['set', 'fire', 'destroy']);\n\nexport default function validateEventHandlerCallee(\n\tvalidator: Validator,\n\tattribute: Node,\n\trefCallees: Node[]\n) {\n\tif (!attribute.expression) return;\n\n\tconst { callee, type } = attribute.expression;\n\n\tif (type !== 'CallExpression') {\n\t\tvalidator.error(`Expected a call expression`, attribute.expression);\n\t}\n\n\tconst { name } = flattenReference(callee);\n\n\tif (validCalleeObjects.has(name) || name === 'options') return;\n\n\tif (name === 'refs') {\n\t\trefCallees.push(callee);\n\t\treturn;\n\t}\n\n\tif (name === 'store' && attribute.expression.callee.type === 'MemberExpression') {\n\t\tif (!validator.options.store) {\n\t\t\tvalidator.warn(\n\t\t\t\t'compile with `store: true` in order to call store methods',\n\t\t\t\tattribute.expression\n\t\t\t);\n\t\t}\n\t\treturn;\n\t}\n\n\tif (\n\t\t(callee.type === 'Identifier' && validBuiltins.has(callee.name)) ||\n\t\tvalidator.methods.has(callee.name)\n\t)\n\t\treturn;\n\n\tconst validCallees = ['this.*', 'event.*', 'options.*', 'console.*'].concat(\n\t\tvalidator.options.store ? 'store.*' : [],\n\t\tArray.from(validBuiltins),\n\t\tArray.from(validator.methods.keys())\n\t);\n\n\tlet message = `'${validator.source.slice(\n\t\tcallee.start,\n\t\tcallee.end\n\t)}' is an invalid callee (should be one of ${list(validCallees)})`;\n\n\tif (callee.type === 'Identifier' && validator.helpers.has(callee.name)) {\n\t\tmessage += `. '${callee.name}' exists on 'helpers', did you put it in the wrong place?`;\n\t}\n\n\tvalidator.warn(message, attribute.expression);\n}\n","import * as namespaces from '../../utils/namespaces';\nimport validateEventHandler from './validateEventHandler';\nimport validate, { Validator } from '../index';\nimport { Node } from '../../interfaces';\n\nconst svg = /^(?:altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform|circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix|feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting|feSpotLight|feTile|feTurbulence|filter|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern|image|line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata|missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor|stop|switch|symbol|text|textPath|tref|tspan|unknown|use|view|vkern)$/;\n\nexport default function validateElement(\n\tvalidator: Validator,\n\tnode: Node,\n\trefs: Map<string, Node[]>,\n\trefCallees: Node[],\n\tstack: Node[],\n\telementStack: Node[],\n\tisComponent: Boolean\n) {\n\tif (isComponent) {\n\t\tvalidator.used.components.add(node.name);\n\t}\n\n\tif (!isComponent && /^[A-Z]/.test(node.name[0])) {\n\t\t// TODO upgrade to validator.error in v2\n\t\tvalidator.warn(`${node.name} component is not defined`, node);\n\t}\n\n\tif (elementStack.length === 0 && validator.namespace !== namespaces.svg && svg.test(node.name)) {\n\t\tvalidator.warn(\n\t\t\t`<${node.name}> is an SVG element – did you forget to add { namespace: 'svg' } ?`,\n\t\t\tnode\n\t\t);\n\t}\n\n\tif (node.name === 'slot') {\n\t\tconst nameAttribute = node.attributes.find((attribute: Node) => attribute.name === 'name');\n\t\tif (nameAttribute) {\n\t\t\tif (nameAttribute.value.length !== 1 || nameAttribute.value[0].type !== 'Text') {\n\t\t\t\tvalidator.error(`<slot> name cannot be dynamic`, nameAttribute);\n\t\t\t}\n\n\t\t\tconst slotName = nameAttribute.value[0].data;\n\t\t\tif (slotName === 'default') {\n\t\t\t\tvalidator.error(`default is a reserved word — it cannot be used as a slot name`, nameAttribute);\n\t\t\t}\n\n\t\t\t// TODO should duplicate slots be disallowed? Feels like it's more likely to be a\n\t\t\t// bug than anything. Perhaps it should be a warning\n\n\t\t\t// if (validator.slots.has(slotName)) {\n\t\t\t// \tvalidator.error(`duplicate '${slotName}' <slot> element`, nameAttribute.start);\n\t\t\t// }\n\n\t\t\t// validator.slots.add(slotName);\n\t\t} else {\n\t\t\t// if (validator.slots.has('default')) {\n\t\t\t// \tvalidator.error(`duplicate default <slot> element`, node.start);\n\t\t\t// }\n\n\t\t\t// validator.slots.add('default');\n\t\t}\n\t}\n\n\tif (node.name === 'title') {\n\t\tif (node.attributes.length > 0) {\n\t\t\tvalidator.error(\n\t\t\t\t`<title> cannot have attributes`,\n\t\t\t\tnode.attributes[0]\n\t\t\t);\n\t\t}\n\n\t\tnode.children.forEach(child => {\n\t\t\tif (child.type !== 'Text' && child.type !== 'MustacheTag') {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`<title> can only contain text and {{tags}}`,\n\t\t\t\t\tchild\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tlet hasIntro: boolean;\n\tlet hasOutro: boolean;\n\tlet hasTransition: boolean;\n\n\tnode.attributes.forEach((attribute: Node) => {\n\t\tif (attribute.type === 'Ref') {\n\t\t\tif (!refs.has(attribute.name)) refs.set(attribute.name, []);\n\t\t\trefs.get(attribute.name).push(node);\n\t\t}\n\n\t\tif (!isComponent && attribute.type === 'Binding') {\n\t\t\tconst { name } = attribute;\n\n\t\t\tif (name === 'value') {\n\t\t\t\tif (\n\t\t\t\t\tnode.name !== 'input' &&\n\t\t\t\t\tnode.name !== 'textarea' &&\n\t\t\t\t\tnode.name !== 'select'\n\t\t\t\t) {\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`'value' is not a valid binding on <${node.name}> elements`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (node.name === 'select') {\n\t\t\t\t\tconst attribute = node.attributes.find(\n\t\t\t\t\t\t(attribute: Node) => attribute.name === 'multiple'\n\t\t\t\t\t);\n\n\t\t\t\t\tif (attribute && isDynamic(attribute)) {\n\t\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t\t`'multiple' attribute cannot be dynamic if select uses two-way binding`,\n\t\t\t\t\t\t\tattribute\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcheckTypeAttribute(validator, node);\n\t\t\t\t}\n\t\t\t} else if (name === 'checked' || name === 'indeterminate') {\n\t\t\t\tif (node.name !== 'input') {\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`'${name}' is not a valid binding on <${node.name}> elements`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (checkTypeAttribute(validator, node) !== 'checkbox') {\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`'${name}' binding can only be used with <input type=\"checkbox\">`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (name === 'group') {\n\t\t\t\tif (node.name !== 'input') {\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`'group' is not a valid binding on <${node.name}> elements`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst type = checkTypeAttribute(validator, node);\n\n\t\t\t\tif (type !== 'checkbox' && type !== 'radio') {\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`'checked' binding can only be used with <input type=\"checkbox\"> or <input type=\"radio\">`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tname === 'currentTime' ||\n\t\t\t\tname === 'duration' ||\n\t\t\t\tname === 'paused' ||\n\t\t\t\tname === 'buffered' ||\n\t\t\t\tname === 'seekable' ||\n\t\t\t\tname === 'played' ||\n\t\t\t\tname === 'volume'\n\t\t\t) {\n\t\t\t\tif (node.name !== 'audio' && node.name !== 'video') {\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`'${name}' binding can only be used with <audio> or <video>`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`'${attribute.name}' is not a valid binding`,\n\t\t\t\t\tattribute\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (attribute.type === 'EventHandler') {\n\t\t\tvalidator.used.events.add(attribute.name);\n\t\t\tvalidateEventHandler(validator, attribute, refCallees);\n\t\t} else if (attribute.type === 'Transition') {\n\t\t\tif (isComponent) {\n\t\t\t\tvalidator.error(`Transitions can only be applied to DOM elements, not components`, attribute);\n\t\t\t}\n\n\t\t\tvalidator.used.transitions.add(attribute.name);\n\n\t\t\tconst bidi = attribute.intro && attribute.outro;\n\n\t\t\tif (hasTransition) {\n\t\t\t\tif (bidi)\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`An element can only have one 'transition' directive`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`An element cannot have both a 'transition' directive and an '${attribute.intro\n\t\t\t\t\t\t? 'in'\n\t\t\t\t\t\t: 'out'}' directive`,\n\t\t\t\t\tattribute\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ((hasIntro && attribute.intro) || (hasOutro && attribute.outro)) {\n\t\t\t\tif (bidi)\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`An element cannot have both an '${hasIntro\n\t\t\t\t\t\t\t? 'in'\n\t\t\t\t\t\t\t: 'out'}' directive and a 'transition' directive`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`An element can only have one '${hasIntro ? 'in' : 'out'}' directive`,\n\t\t\t\t\tattribute\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (attribute.intro) hasIntro = true;\n\t\t\tif (attribute.outro) hasOutro = true;\n\t\t\tif (bidi) hasTransition = true;\n\n\t\t\tif (!validator.transitions.has(attribute.name)) {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`Missing transition '${attribute.name}'`,\n\t\t\t\t\tattribute\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (attribute.type === 'Attribute') {\n\t\t\tif (attribute.name === 'value' && node.name === 'textarea') {\n\t\t\t\tif (node.children.length) {\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`A <textarea> can have either a value attribute or (equivalently) child content, but not both`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (attribute.name === 'slot' && !isComponent) {\n\t\t\t\tcheckSlotAttribute(validator, node, attribute, stack);\n\t\t\t}\n\t\t} else if (attribute.type === 'Action') {\n\t\t\tif (isComponent) {\n\t\t\t\tvalidator.error(`Actions can only be applied to DOM elements, not components`, attribute);\n\t\t\t}\n\n\t\t\tvalidator.used.actions.add(attribute.name);\n\n\t\t\tif (!validator.actions.has(attribute.name)) {\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`Missing action '${attribute.name}'`,\n\t\t\t\t\tattribute\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction checkTypeAttribute(validator: Validator, node: Node) {\n\tconst attribute = node.attributes.find(\n\t\t(attribute: Node) => attribute.name === 'type'\n\t);\n\tif (!attribute) return null;\n\n\tif (attribute.value === true) {\n\t\tvalidator.error(`'type' attribute must be specified`, attribute);\n\t}\n\n\tif (isDynamic(attribute)) {\n\t\tvalidator.error(\n\t\t\t`'type' attribute cannot be dynamic if input uses two-way binding`,\n\t\t\tattribute\n\t\t);\n\t}\n\n\treturn attribute.value[0].data;\n}\n\nfunction checkSlotAttribute(validator: Validator, node: Node, attribute: Node, stack: Node[]) {\n\tif (isDynamic(attribute)) {\n\t\tvalidator.error(\n\t\t\t`slot attribute cannot have a dynamic value`,\n\t\t\tattribute\n\t\t);\n\t}\n\n\tlet i = stack.length;\n\twhile (i--) {\n\t\tconst parent = stack[i];\n\t\tif (parent.type === 'Element') {\n\t\t\t// if we're inside a component or a custom element, gravy\n\t\t\tif (parent.name === ':Self' || parent.name === ':Component' || validator.components.has(parent.name)) return;\n\t\t\tif (/-/.test(parent.name)) return;\n\t\t}\n\n\t\tif (parent.type === 'IfBlock' || parent.type === 'EachBlock') {\n\t\t\tconst message = `Cannot place slotted elements inside an ${parent.type === 'IfBlock' ? 'if' : 'each'}-block`;\n\t\t\tvalidator.error(message, attribute);\n\t\t}\n\t}\n\n\tvalidator.error(`Element with a slot='...' attribute must be a descendant of a component or custom element`, attribute);\n}\n\nfunction isDynamic(attribute: Node) {\n\tif (attribute.value === true) return false;\n\treturn attribute.value.length > 1 || attribute.value[0].type !== 'Text';\n}\n","import flattenReference from '../../utils/flattenReference';\nimport fuzzymatch from '../utils/fuzzymatch';\nimport list from '../../utils/list';\nimport validateEventHandler from './validateEventHandler';\nimport { Validator } from '../index';\nimport { Node } from '../../interfaces';\n\nconst validBindings = [\n\t'innerWidth',\n\t'innerHeight',\n\t'outerWidth',\n\t'outerHeight',\n\t'scrollX',\n\t'scrollY',\n\t'online'\n];\n\nexport default function validateWindow(validator: Validator, node: Node, refs: Map<string, Node[]>, refCallees: Node[]) {\n\tnode.attributes.forEach((attribute: Node) => {\n\t\tif (attribute.type === 'Binding') {\n\t\t\tif (attribute.value.type !== 'Identifier') {\n\t\t\t\tconst { parts } = flattenReference(attribute.value);\n\n\t\t\t\tvalidator.error(\n\t\t\t\t\t`Bindings on <:Window/> must be to top-level properties, e.g. '${parts[\n\t\t\t\t\t\tparts.length - 1\n\t\t\t\t\t]}' rather than '${parts.join('.')}'`,\n\t\t\t\t\tattribute.value\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!~validBindings.indexOf(attribute.name)) {\n\t\t\t\tconst match = attribute.name === 'width'\n\t\t\t\t\t? 'innerWidth'\n\t\t\t\t\t: attribute.name === 'height'\n\t\t\t\t\t\t? 'innerHeight'\n\t\t\t\t\t\t: fuzzymatch(attribute.name, validBindings);\n\n\t\t\t\tconst message = `'${attribute.name}' is not a valid binding on <:Window>`;\n\n\t\t\t\tif (match) {\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`${message} (did you mean '${match}'?)`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tvalidator.error(\n\t\t\t\t\t\t`${message} — valid bindings are ${list(validBindings)}`,\n\t\t\t\t\t\tattribute\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (attribute.type === 'EventHandler') {\n\t\t\tvalidator.used.events.add(attribute.name);\n\t\t\tvalidateEventHandler(validator, attribute, refCallees);\n\t\t}\n\t});\n}\n","import validateElement from './validateElement';\nimport { Validator } from '../index';\nimport { Node } from '../../interfaces';\n\nexport default function validateHead(validator: Validator, node: Node, refs: Map<string, Node[]>, refCallees: Node[]) {\n\tif (node.attributes.length) {\n\t\tvalidator.error(`<:Head> should not have any attributes or directives`, node);\n\t}\n\n\t// TODO ensure only valid elements are included here\n\n\tnode.children.forEach(node => {\n\t\tif (node.type !== 'Element') return; // TODO handle {{#if}} and friends?\n\t\tvalidateElement(validator, node, refs, refCallees, [], [], false);\n\t});\n}\n","import { Node } from '../interfaces';\n\nexport default function getStaticAttributeValue(node: Node, name: string) {\n\tconst attribute = node.attributes.find(\n\t\t(attr: Node) => attr.name.toLowerCase() === name\n\t);\n\n\tif (!attribute) return null;\n\n\tif (attribute.value === true) return true;\n\tif (attribute.value.length === 0) return '';\n\n\tif (attribute.value.length === 1 && attribute.value[0].type === 'Text') {\n\t\treturn attribute.value[0].data;\n\t}\n\n\treturn null;\n}\n","import * as namespaces from '../../utils/namespaces';\nimport getStaticAttributeValue from '../../utils/getStaticAttributeValue';\nimport fuzzymatch from '../utils/fuzzymatch';\nimport validateEventHandler from './validateEventHandler';\nimport { Validator } from '../index';\nimport { Node } from '../../interfaces';\n\nconst ariaAttributes = 'activedescendant atomic autocomplete busy checked controls current describedby disabled dropeffect expanded flowto grabbed haspopup hidden invalid label labelledby level live multiline multiselectable orientation owns posinset pressed readonly relevant required selected setsize sort valuemax valuemin valuenow valuetext'.split(' ');\nconst ariaAttributeSet = new Set(ariaAttributes);\n\nconst ariaRoles = 'alert alertdialog application article banner button checkbox columnheader combobox command complementary composite contentinfo definition dialog directory document feed form grid gridcell group heading img input landmark link list listbox listitem log main marquee math menu menubar menuitem menuitemcheckbox menuitemradio navigation note option presentation progressbar radio radiogroup range region roletype row rowgroup rowheader scrollbar search section sectionhead select separator slider spinbutton status structure tab tablist tabpanel textbox timer toolbar tooltip tree treegrid treeitem widget window'.split(' ');\nconst ariaRoleSet = new Set(ariaRoles);\n\nconst invisibleElements = new Set(['meta', 'html', 'script', 'style']);\n\nexport default function a11y(\n\tvalidator: Validator,\n\tnode: Node,\n\telementStack: Node[]\n) {\n\tif (node.type === 'Text') {\n\t\t// accessible-emoji\n\t\treturn;\n\t}\n\n\tif (node.type !== 'Element') return;\n\n\tconst attributeMap = new Map();\n\tnode.attributes.forEach((attribute: Node) => {\n\t\tif (attribute.type === 'Spread') return;\n\n\t\tconst name = attribute.name.toLowerCase();\n\n\t\t// aria-props\n\t\tif (name.startsWith('aria-')) {\n\t\t\tif (invisibleElements.has(node.name)) {\n\t\t\t\t// aria-unsupported-elements\n\t\t\t\tvalidator.warn(`A11y: <${node.name}> should not have aria-* attributes`, attribute);\n\t\t\t}\n\n\t\t\tconst type = name.slice(5);\n\t\t\tif (!ariaAttributeSet.has(type)) {\n\t\t\t\tconst match = fuzzymatch(type, ariaAttributes);\n\t\t\t\tlet message = `A11y: Unknown aria attribute 'aria-${type}'`;\n\t\t\t\tif (match) message += ` (did you mean '${match}'?)`;\n\n\t\t\t\tvalidator.warn(message, attribute);\n\t\t\t}\n\t\t}\n\n\t\t// aria-role\n\t\tif (name === 'role') {\n\t\t\tif (invisibleElements.has(node.name)) {\n\t\t\t\t// aria-unsupported-elements\n\t\t\t\tvalidator.warn(`A11y: <${node.name}> should not have role attribute`, attribute);\n\t\t\t}\n\n\t\t\tconst value = getStaticAttributeValue(node, 'role');\n\t\t\tif (value && !ariaRoleSet.has(value)) {\n\t\t\t\tconst match = fuzzymatch(value, ariaRoles);\n\t\t\t\tlet message = `A11y: Unknown role '${value}'`;\n\t\t\t\tif (match) message += ` (did you mean '${match}'?)`;\n\n\t\t\t\tvalidator.warn(message, attribute);\n\t\t\t}\n\t\t}\n\n\t\t// no-access-key\n\t\tif (name === 'accesskey') {\n\t\t\tvalidator.warn(`A11y: Avoid using accesskey`, attribute);\n\t\t}\n\n\t\t// no-autofocus\n\t\tif (name === 'autofocus') {\n\t\t\tvalidator.warn(`A11y: Avoid using autofocus`, attribute);\n\t\t}\n\n\t\t// scope\n\t\tif (name === 'scope' && node.name !== 'th') {\n\t\t\tvalidator.warn(`A11y: The scope attribute should only be used with <th> elements`, attribute);\n\t\t}\n\n\t\t// tabindex-no-positive\n\t\tif (name === 'tabindex') {\n\t\t\tconst value = getStaticAttributeValue(node, 'tabindex');\n\t\t\tif (!isNaN(value) && +value > 0) {\n\t\t\t\tvalidator.warn(`A11y: avoid tabindex values above zero`, attribute);\n\t\t\t}\n\t\t}\n\n\t\tattributeMap.set(attribute.name, attribute);\n\t});\n\n\tfunction shouldHaveAttribute(attributes: string[], name = node.name) {\n\t\tif (attributes.length === 0 || !attributes.some((name: string) => attributeMap.has(name))) {\n\t\t\tconst article = /^[aeiou]/.test(attributes[0]) ? 'an' : 'a';\n\t\t\tconst sequence = attributes.length > 1 ?\n\t\t\t\tattributes.slice(0, -1).join(', ') + ` or ${attributes[attributes.length - 1]}` :\n\t\t\t\tattributes[0];\n\n\t\t\tvalidator.warn(`A11y: <${name}> element should have ${article} ${sequence} attribute`, node);\n\t\t}\n\t}\n\n\tfunction shouldHaveContent() {\n\t\tif (node.children.length === 0) {\n\t\t\tvalidator.warn(`A11y: <${node.name}> element should have child content`, node);\n\t\t}\n\t}\n\n\tfunction shouldHaveValidHref (attribute) {\n\t\tconst href = attributeMap.get(attribute);\n\t\tconst value = getStaticAttributeValue(node, attribute);\n\t\tif (value === '' || value === '#') {\n\t\t\tvalidator.warn(`A11y: '${value}' is not a valid ${attribute} attribute`, href);\n\t\t}\n\t}\n\n\tif (node.name === 'a') {\n\t\tif (attributeMap.has('href')) {\n\t\t\t// anchor-is-valid\n\t\t\tshouldHaveValidHref('href')\n\t\t} else if (attributeMap.has('xlink:href')) {\n\t\t\t// anchor-in-svg-is-valid\n\t\t\tshouldHaveValidHref('xlink:href')\n\t\t} else {\n\t\t\tvalidator.warn(`A11y: <a> element should have an href attribute`, node);\n\t\t}\n\n\t\t// anchor-has-content\n\t\tshouldHaveContent();\n\t}\n\n\tif (node.name === 'img') shouldHaveAttribute(['alt']);\n\tif (node.name === 'area') shouldHaveAttribute(['alt', 'aria-label', 'aria-labelledby']);\n\tif (node.name === 'object') shouldHaveAttribute(['title', 'aria-label', 'aria-labelledby']);\n\tif (node.name === 'input' && getStaticAttributeValue(node, 'type') === 'image') {\n\t\tshouldHaveAttribute(['alt', 'aria-label', 'aria-labelledby'], 'input type=\"image\"');\n\t}\n\n\t// heading-has-content\n\tif (/^h[1-6]$/.test(node.name)) {\n\t\tshouldHaveContent();\n\n\t\tif (attributeMap.has('aria-hidden')) {\n\t\t\tvalidator.warn(`A11y: <${node.name}> element should not be hidden`, attributeMap.get('aria-hidden'));\n\t\t}\n\t}\n\n\t// iframe-has-title\n\tif (node.name === 'iframe') {\n\t\tshouldHaveAttribute(['title']);\n\t}\n\n\t// html-has-lang\n\tif (node.name === 'html') {\n\t\tshouldHaveAttribute(['lang']);\n\t}\n\n\t// no-distracting-elements\n\tif (node.name === 'marquee' || node.name === 'blink') {\n\t\tvalidator.warn(`A11y: Avoid <${node.name}> elements`, node);\n\t}\n\n\tif (node.name === 'figcaption') {\n\t\tconst parent = elementStack[elementStack.length - 1];\n\t\tif (parent) {\n\t\t\tif (parent.name !== 'figure') {\n\t\t\t\tvalidator.warn(`A11y: <figcaption> must be an immediate child of <figure>`, node);\n\t\t\t} else {\n\t\t\t\tconst children = parent.children.filter(node => {\n\t\t\t\t\tif (node.type === 'Comment') return false;\n\t\t\t\t\tif (node.type === 'Text') return /\\S/.test(node.data);\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\n\t\t\t\tconst index = children.indexOf(node);\n\n\t\t\t\tif (index !== 0 && index !== children.length - 1) {\n\t\t\t\t\tvalidator.warn(`A11y: <figcaption> must be first or last child of <figure>`, node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction getValue(attribute: Node) {\n\tif (attribute.value.length === 0) return '';\n\tif (attribute.value.length === 1 && attribute.value[0].type === 'Text') return attribute.value[0].data;\n\n\treturn null;\n}\n","import validateElement from './validateElement';\nimport validateWindow from './validateWindow';\nimport validateHead from './validateHead';\nimport a11y from './a11y';\nimport fuzzymatch from '../utils/fuzzymatch'\nimport flattenReference from '../../utils/flattenReference';\nimport { Validator } from '../index';\nimport { Node } from '../../interfaces';\n\nfunction isEmptyBlock(node: Node) {\n\tif (!/Block$/.test(node.type) || !node.children) return false;\n\tif (node.children.length > 1) return false;\n\tconst child = node.children[0];\n\treturn !child || (child.type === 'Text' && !/\\S/.test(child.data));\n}\n\nexport default function validateHtml(validator: Validator, html: Node) {\n\tconst refs = new Map();\n\tconst refCallees: Node[] = [];\n\tconst stack: Node[] = [];\n\tconst elementStack: Node[] = [];\n\n\tfunction visit(node: Node) {\n\t\tif (node.type === 'Window') {\n\t\t\tvalidateWindow(validator, node, refs, refCallees);\n\t\t}\n\n\t\telse if (node.type === 'Head') {\n\t\t\tvalidateHead(validator, node, refs, refCallees);\n\t\t}\n\n\t\telse if (node.type === 'Element') {\n\t\t\tconst isComponent =\n\t\t\t\tnode.name === ':Self' ||\n\t\t\t\tnode.name === ':Component' ||\n\t\t\t\tvalidator.components.has(node.name);\n\n\t\t\tvalidateElement(\n\t\t\t\tvalidator,\n\t\t\t\tnode,\n\t\t\t\trefs,\n\t\t\t\trefCallees,\n\t\t\t\tstack,\n\t\t\t\telementStack,\n\t\t\t\tisComponent\n\t\t\t);\n\n\t\t\tif (!isComponent) {\n\t\t\t\ta11y(validator, node, elementStack);\n\t\t\t}\n\t\t}\n\n\t\telse if (node.type === 'EachBlock') {\n\t\t\tif (validator.helpers.has(node.context)) {\n\t\t\t\tlet c: number = node.expression.end;\n\n\t\t\t\t// find start of context\n\t\t\t\twhile (/\\s/.test(validator.source[c])) c += 1;\n\t\t\t\tc += 2;\n\t\t\t\twhile (/\\s/.test(validator.source[c])) c += 1;\n\n\t\t\t\tvalidator.warn(\n\t\t\t\t\t`Context clashes with a helper. Rename one or the other to eliminate any ambiguity`,\n\t\t\t\t\t{ start: c, end: c + node.context.length }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (validator.options.dev && isEmptyBlock(node)) {\n\t\t\tvalidator.warn('Empty block', node);\n\t\t}\n\n\t\tif (node.children) {\n\t\t\tif (node.type === 'Element') elementStack.push(node);\n\t\t\tstack.push(node);\n\t\t\tnode.children.forEach(visit);\n\t\t\tstack.pop();\n\t\t\tif (node.type === 'Element') elementStack.pop();\n\t\t}\n\n\t\tif (node.else) {\n\t\t\tvisit(node.else);\n\t\t}\n\n\t\tif (node.type === 'AwaitBlock') {\n\t\t\tvisit(node.pending);\n\t\t\tvisit(node.then);\n\t\t\tvisit(node.catch);\n\t\t}\n\t}\n\n\thtml.children.forEach(visit);\n\n\trefCallees.forEach(callee => {\n\t\tconst { parts } = flattenReference(callee);\n\t\tconst ref = parts[1];\n\n\t\tif (refs.has(ref)) {\n\t\t\t// TODO check method is valid, e.g. `audio.stop()` should be `audio.pause()`\n\t\t} else {\n\t\t\tconst match = fuzzymatch(ref, Array.from(refs.keys()));\n\n\t\t\tlet message = `'refs.${ref}' does not exist`;\n\t\t\tif (match) message += ` (did you mean 'refs.${match}'?)`;\n\n\t\t\tvalidator.error(message, callee);\n\t\t}\n\t});\n}\n","import validateJs from './js/index';\nimport validateHtml from './html/index';\nimport { getLocator, Location } from 'locate-character';\nimport getCodeFrame from '../utils/getCodeFrame';\nimport Stats from '../Stats';\nimport error from '../utils/error';\nimport Stylesheet from '../css/Stylesheet';\nimport { Node, Parsed, CompileOptions, Warning } from '../interfaces';\n\nexport class Validator {\n\treadonly source: string;\n\treadonly filename: string;\n\n\toptions: CompileOptions;\n\tonwarn: ({}) => void;\n\tlocator?: (pos: number) => Location;\n\n\tnamespace: string;\n\tdefaultExport: Node;\n\tproperties: Map<string, Node>;\n\tcomponents: Map<string, Node>;\n\tmethods: Map<string, Node>;\n\thelpers: Map<string, Node>;\n\ttransitions: Map<string, Node>;\n\tactions: Map<string, Node>;\n\tslots: Set<string>;\n\n\tused: {\n\t\tcomponents: Set<string>;\n\t\thelpers: Set<string>;\n\t\tevents: Set<string>;\n\t\ttransitions: Set<string>;\n\t\tactions: Set<string>;\n\t};\n\n\tconstructor(parsed: Parsed, source: string, options: CompileOptions) {\n\t\tthis.source = source;\n\t\tthis.filename = options.filename;\n\t\tthis.onwarn = options.onwarn;\n\t\tthis.options = options;\n\n\t\tthis.namespace = null;\n\t\tthis.defaultExport = null;\n\n\t\tthis.properties = new Map();\n\t\tthis.components = new Map();\n\t\tthis.methods = new Map();\n\t\tthis.helpers = new Map();\n\t\tthis.transitions = new Map();\n\t\tthis.actions = new Map();\n\t\tthis.slots = new Set();\n\n\t\tthis.used = {\n\t\t\tcomponents: new Set(),\n\t\t\thelpers: new Set(),\n\t\t\tevents: new Set(),\n\t\t\ttransitions: new Set(),\n\t\t\tactions: new Set(),\n\t\t};\n\t}\n\n\terror(message: string, pos: { start: number, end: number }) {\n\t\terror(message, {\n\t\t\tname: 'ValidationError',\n\t\t\tsource: this.source,\n\t\t\tstart: pos.start,\n\t\t\tend: pos.end,\n\t\t\tfilename: this.filename\n\t\t});\n\t}\n\n\twarn(message: string, pos: { start: number, end: number }) {\n\t\tif (!this.locator) this.locator = getLocator(this.source);\n\t\tconst start = this.locator(pos.start);\n\t\tconst end = this.locator(pos.end);\n\n\t\tconst frame = getCodeFrame(this.source, start.line, start.column);\n\n\t\tthis.onwarn({\n\t\t\tmessage,\n\t\t\tframe,\n\t\t\tloc: { line: start.line + 1, column: start.column },\n\t\t\tend: { line: end.line + 1, column: end.column },\n\t\t\tpos: pos.start,\n\t\t\tfilename: this.filename,\n\t\t\ttoString: () => `${message} (${start.line + 1}:${start.column})\\n${frame}`,\n\t\t});\n\t}\n}\n\nexport default function validate(\n\tparsed: Parsed,\n\tsource: string,\n\tstylesheet: Stylesheet,\n\toptions: CompileOptions\n) {\n\tconst { onwarn, onerror, name, filename, store, dev } = options;\n\n\ttry {\n\t\tif (name && !/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(name)) {\n\t\t\tconst error = new Error(`options.name must be a valid identifier (got '${name}')`);\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (name && /^[a-z]/.test(name)) {\n\t\t\tconst message = `options.name should be capitalised`;\n\t\t\tonwarn({\n\t\t\t\tmessage,\n\t\t\t\tfilename,\n\t\t\t\ttoString: () => message,\n\t\t\t});\n\t\t}\n\n\t\tconst validator = new Validator(parsed, source, {\n\t\t\tonwarn,\n\t\t\tname,\n\t\t\tfilename,\n\t\t\tstore,\n\t\t\tdev\n\t\t});\n\n\t\tif (parsed.js) {\n\t\t\tvalidateJs(validator, parsed.js);\n\t\t}\n\n\t\tif (parsed.css) {\n\t\t\tstylesheet.validate(validator);\n\t\t}\n\n\t\tif (parsed.html) {\n\t\t\tvalidateHtml(validator, parsed.html);\n\t\t}\n\n\t\t// need to do a second pass of the JS, now that we've analysed the markup\n\t\tif (parsed.js && validator.defaultExport) {\n\t\t\tconst categories = {\n\t\t\t\tcomponents: 'component',\n\t\t\t\t// TODO helpers require a bit more work — need to analyse all expressions\n\t\t\t\t// helpers: 'helper',\n\t\t\t\tevents: 'event definition',\n\t\t\t\ttransitions: 'transition',\n\t\t\t\tactions: 'actions',\n\t\t\t};\n\n\t\t\tObject.keys(categories).forEach(category => {\n\t\t\t\tconst definitions = validator.defaultExport.declaration.properties.find(prop => prop.key.name === category);\n\t\t\t\tif (definitions) {\n\t\t\t\t\tdefinitions.value.properties.forEach(prop => {\n\t\t\t\t\t\tconst { name } = prop.key;\n\t\t\t\t\t\tif (!validator.used[category].has(name)) {\n\t\t\t\t\t\t\tvalidator.warn(\n\t\t\t\t\t\t\t\t`The '${name}' ${categories[category]} is unused`,\n\t\t\t\t\t\t\t\tprop\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} catch (err) {\n\t\tif (onerror) {\n\t\t\tonerror(err);\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n","var charToInteger = {};\nvar integerToChar = {};\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {\n\tcharToInteger[ char ] = i;\n\tintegerToChar[ i ] = char;\n});\n\nexport function decode ( string ) {\n\tvar result = [];\n\tvar shift = 0;\n\tvar value = 0;\n\n\tfor ( var i = 0; i < string.length; i += 1 ) {\n\t\tvar integer = charToInteger[ string[i] ];\n\n\t\tif ( integer === undefined ) {\n\t\t\tthrow new Error( 'Invalid character (' + string[i] + ')' );\n\t\t}\n\n\t\tvar hasContinuationBit = integer & 32;\n\n\t\tinteger &= 31;\n\t\tvalue += integer << shift;\n\n\t\tif ( hasContinuationBit ) {\n\t\t\tshift += 5;\n\t\t} else {\n\t\t\tvar shouldNegate = value & 1;\n\t\t\tvalue >>= 1;\n\n\t\t\tresult.push( shouldNegate ? -value : value );\n\n\t\t\t// reset\n\t\t\tvalue = shift = 0;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function encode ( value ) {\n\tvar result;\n\n\tif ( typeof value === 'number' ) {\n\t\tresult = encodeInteger( value );\n\t} else {\n\t\tresult = '';\n\t\tfor ( var i = 0; i < value.length; i += 1 ) {\n\t\t\tresult += encodeInteger( value[i] );\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encodeInteger ( num ) {\n\tvar result = '';\n\n\tif ( num < 0 ) {\n\t\tnum = ( -num << 1 ) | 1;\n\t} else {\n\t\tnum <<= 1;\n\t}\n\n\tdo {\n\t\tvar clamped = num & 31;\n\t\tnum >>= 5;\n\n\t\tif ( num > 0 ) {\n\t\t\tclamped |= 32;\n\t\t}\n\n\t\tresult += integerToChar[ clamped ];\n\t} while ( num > 0 );\n\n\treturn result;\n}\n","import { encode } from 'vlq';\n\nfunction Chunk ( start, end, content ) {\n\tthis.start = start;\n\tthis.end = end;\n\tthis.original = content;\n\n\tthis.intro = '';\n\tthis.outro = '';\n\n\tthis.content = content;\n\tthis.storeName = false;\n\tthis.edited = false;\n\n\t// we make these non-enumerable, for sanity while debugging\n\tObject.defineProperties( this, {\n\t\tprevious: { writable: true, value: null },\n\t\tnext: { writable: true, value: null }\n\t});\n}\n\nChunk.prototype = {\n\tappendLeft: function appendLeft ( content ) {\n\t\tthis.outro += content;\n\t},\n\n\tappendRight: function appendRight ( content ) {\n\t\tthis.intro = this.intro + content;\n\t},\n\n\tclone: function clone () {\n\t\tvar chunk = new Chunk( this.start, this.end, this.original );\n\n\t\tchunk.intro = this.intro;\n\t\tchunk.outro = this.outro;\n\t\tchunk.content = this.content;\n\t\tchunk.storeName = this.storeName;\n\t\tchunk.edited = this.edited;\n\n\t\treturn chunk;\n\t},\n\n\tcontains: function contains ( index ) {\n\t\treturn this.start < index && index < this.end;\n\t},\n\n\teachNext: function eachNext ( fn ) {\n\t\tvar chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.next;\n\t\t}\n\t},\n\n\teachPrevious: function eachPrevious ( fn ) {\n\t\tvar chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.previous;\n\t\t}\n\t},\n\n\tedit: function edit ( content, storeName, contentOnly ) {\n\t\tthis.content = content;\n\t\tif ( !contentOnly ) {\n\t\t\tthis.intro = '';\n\t\t\tthis.outro = '';\n\t\t}\n\t\tthis.storeName = storeName;\n\n\t\tthis.edited = true;\n\n\t\treturn this;\n\t},\n\n\tprependLeft: function prependLeft ( content ) {\n\t\tthis.outro = content + this.outro;\n\t},\n\n\tprependRight: function prependRight ( content ) {\n\t\tthis.intro = content + this.intro;\n\t},\n\n\tsplit: function split ( index ) {\n\t\tvar sliceIndex = index - this.start;\n\n\t\tvar originalBefore = this.original.slice( 0, sliceIndex );\n\t\tvar originalAfter = this.original.slice( sliceIndex );\n\n\t\tthis.original = originalBefore;\n\n\t\tvar newChunk = new Chunk( index, this.end, originalAfter );\n\t\tnewChunk.outro = this.outro;\n\t\tthis.outro = '';\n\n\t\tthis.end = index;\n\n\t\tif ( this.edited ) {\n\t\t\t// TODO is this block necessary?...\n\t\t\tnewChunk.edit( '', false );\n\t\t\tthis.content = '';\n\t\t} else {\n\t\t\tthis.content = originalBefore;\n\t\t}\n\n\t\tnewChunk.next = this.next;\n\t\tif ( newChunk.next ) { newChunk.next.previous = newChunk; }\n\t\tnewChunk.previous = this;\n\t\tthis.next = newChunk;\n\n\t\treturn newChunk;\n\t},\n\n\ttoString: function toString () {\n\t\treturn this.intro + this.content + this.outro;\n\t},\n\n\ttrimEnd: function trimEnd ( rx ) {\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) { return true; }\n\n\t\tvar trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.start + trimmed.length ).edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.intro = this.intro.replace( rx, '' );\n\t\t\tif ( this.intro.length ) { return true; }\n\t\t}\n\t},\n\n\ttrimStart: function trimStart ( rx ) {\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) { return true; }\n\n\t\tvar trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.end - trimmed.length );\n\t\t\t\tthis.edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.outro = this.outro.replace( rx, '' );\n\t\t\tif ( this.outro.length ) { return true; }\n\t\t}\n\t}\n};\n\nvar _btoa;\n\nif ( typeof window !== 'undefined' && typeof window.btoa === 'function' ) {\n\t_btoa = window.btoa;\n} else if ( typeof Buffer === 'function' ) {\n\t_btoa = function (str) { return new Buffer( str ).toString( 'base64' ); };\n} else {\n\t_btoa = function () {\n\t\tthrow new Error( 'Unsupported environment: `window.btoa` or `Buffer` should be supported.' );\n\t};\n}\n\nvar btoa = _btoa;\n\nfunction SourceMap ( properties ) {\n\tthis.version = 3;\n\n\tthis.file           = properties.file;\n\tthis.sources        = properties.sources;\n\tthis.sourcesContent = properties.sourcesContent;\n\tthis.names          = properties.names;\n\tthis.mappings       = properties.mappings;\n}\n\nSourceMap.prototype = {\n\ttoString: function toString () {\n\t\treturn JSON.stringify( this );\n\t},\n\n\ttoUrl: function toUrl () {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa( this.toString() );\n\t}\n};\n\nfunction guessIndent ( code ) {\n\tvar lines = code.split( '\\n' );\n\n\tvar tabbed = lines.filter( function (line) { return /^\\t+/.test( line ); } );\n\tvar spaced = lines.filter( function (line) { return /^ {2,}/.test( line ); } );\n\n\tif ( tabbed.length === 0 && spaced.length === 0 ) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif ( tabbed.length >= spaced.length ) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tvar min = spaced.reduce( function ( previous, current ) {\n\t\tvar numSpaces = /^ +/.exec( current )[0].length;\n\t\treturn Math.min( numSpaces, previous );\n\t}, Infinity );\n\n\treturn new Array( min + 1 ).join( ' ' );\n}\n\nfunction getRelativePath ( from, to ) {\n\tvar fromParts = from.split( /[\\/\\\\]/ );\n\tvar toParts = to.split( /[\\/\\\\]/ );\n\n\tfromParts.pop(); // get dirname\n\n\twhile ( fromParts[0] === toParts[0] ) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif ( fromParts.length ) {\n\t\tvar i = fromParts.length;\n\t\twhile ( i-- ) { fromParts[i] = '..'; }\n\t}\n\n\treturn fromParts.concat( toParts ).join( '/' );\n}\n\nvar toString$1 = Object.prototype.toString;\n\nfunction isObject ( thing ) {\n\treturn toString$1.call( thing ) === '[object Object]';\n}\n\nfunction getLocator ( source ) {\n\tvar originalLines = source.split( '\\n' );\n\n\tvar start = 0;\n\tvar lineRanges = originalLines.map( function ( line, i ) {\n\t\tvar end = start + line.length + 1;\n\t\tvar range = { start: start, end: end, line: i };\n\n\t\tstart = end;\n\t\treturn range;\n\t});\n\n\tvar i = 0;\n\n\tfunction rangeContains ( range, index ) {\n\t\treturn range.start <= index && index < range.end;\n\t}\n\n\tfunction getLocation ( range, index ) {\n\t\treturn { line: range.line, column: index - range.start };\n\t}\n\n\treturn function locate ( index ) {\n\t\tvar range = lineRanges[i];\n\n\t\tvar d = index >= range.end ? 1 : -1;\n\n\t\twhile ( range ) {\n\t\t\tif ( rangeContains( range, index ) ) { return getLocation( range, index ); }\n\n\t\t\ti += d;\n\t\t\trange = lineRanges[i];\n\t\t}\n\t};\n}\n\nfunction Mappings ( hires ) {\n\tvar this$1 = this;\n\n\tvar offsets = {\n\t\tgeneratedCodeColumn: 0,\n\t\tsourceIndex: 0,\n\t\tsourceCodeLine: 0,\n\t\tsourceCodeColumn: 0,\n\t\tsourceCodeName: 0\n\t};\n\n\tvar generatedCodeLine = 0;\n\tvar generatedCodeColumn = 0;\n\n\tthis.raw = [];\n\tvar rawSegments = this.raw[ generatedCodeLine ] = [];\n\n\tvar pending = null;\n\n\tthis.addEdit = function ( sourceIndex, content, original, loc, nameIndex ) {\n\t\tif ( content.length ) {\n\t\t\trawSegments.push([\n\t\t\t\tgeneratedCodeColumn,\n\t\t\t\tsourceIndex,\n\t\t\t\tloc.line,\n\t\t\t\tloc.column,\n\t\t\t\tnameIndex ]);\n\t\t} else if ( pending ) {\n\t\t\trawSegments.push( pending );\n\t\t}\n\n\t\tthis$1.advance( content );\n\t\tpending = null;\n\t};\n\n\tthis.addUneditedChunk = function ( sourceIndex, chunk, original, loc, sourcemapLocations ) {\n\t\tvar originalCharIndex = chunk.start;\n\t\tvar first = true;\n\n\t\twhile ( originalCharIndex < chunk.end ) {\n\t\t\tif ( hires || first || sourcemapLocations[ originalCharIndex ] ) {\n\t\t\t\trawSegments.push([\n\t\t\t\t\tgeneratedCodeColumn,\n\t\t\t\t\tsourceIndex,\n\t\t\t\t\tloc.line,\n\t\t\t\t\tloc.column,\n\t\t\t\t\t-1\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tif ( original[ originalCharIndex ] === '\\n' ) {\n\t\t\t\tloc.line += 1;\n\t\t\t\tloc.column = 0;\n\t\t\t\tgeneratedCodeLine += 1;\n\t\t\t\tthis$1.raw[ generatedCodeLine ] = rawSegments = [];\n\t\t\t\tgeneratedCodeColumn = 0;\n\t\t\t} else {\n\t\t\t\tloc.column += 1;\n\t\t\t\tgeneratedCodeColumn += 1;\n\t\t\t}\n\n\t\t\toriginalCharIndex += 1;\n\t\t\tfirst = false;\n\t\t}\n\n\t\tpending = [\n\t\t\tgeneratedCodeColumn,\n\t\t\tsourceIndex,\n\t\t\tloc.line,\n\t\t\tloc.column,\n\t\t\t-1 ];\n\t};\n\n\tthis.advance = function (str) {\n\t\tif ( !str ) { return; }\n\n\t\tvar lines = str.split( '\\n' );\n\t\tvar lastLine = lines.pop();\n\n\t\tif ( lines.length ) {\n\t\t\tgeneratedCodeLine += lines.length;\n\t\t\tthis$1.raw[ generatedCodeLine ] = rawSegments = [];\n\t\t\tgeneratedCodeColumn = lastLine.length;\n\t\t} else {\n\t\t\tgeneratedCodeColumn += lastLine.length;\n\t\t}\n\t};\n\n\tthis.encode = function () {\n\t\treturn this$1.raw.map( function (segments) {\n\t\t\tvar generatedCodeColumn = 0;\n\n\t\t\treturn segments.map( function (segment) {\n\t\t\t\tvar arr = [\n\t\t\t\t\tsegment[0] - generatedCodeColumn,\n\t\t\t\t\tsegment[1] - offsets.sourceIndex,\n\t\t\t\t\tsegment[2] - offsets.sourceCodeLine,\n\t\t\t\t\tsegment[3] - offsets.sourceCodeColumn\n\t\t\t\t];\n\n\t\t\t\tgeneratedCodeColumn = segment[0];\n\t\t\t\toffsets.sourceIndex = segment[1];\n\t\t\t\toffsets.sourceCodeLine = segment[2];\n\t\t\t\toffsets.sourceCodeColumn = segment[3];\n\n\t\t\t\tif ( ~segment[4] ) {\n\t\t\t\t\tarr.push( segment[4] - offsets.sourceCodeName );\n\t\t\t\t\toffsets.sourceCodeName = segment[4];\n\t\t\t\t}\n\n\t\t\t\treturn encode( arr );\n\t\t\t}).join( ',' );\n\t\t}).join( ';' );\n\t};\n}\n\nvar Stats = function Stats () {\n\tObject.defineProperties( this, {\n\t\tstartTimes: { value: {} }\n\t});\n};\n\nStats.prototype.time = function time ( label ) {\n\tthis.startTimes[ label ] = process.hrtime();\n};\n\nStats.prototype.timeEnd = function timeEnd ( label ) {\n\tvar elapsed = process.hrtime( this.startTimes[ label ] );\n\n\tif ( !this[ label ] ) { this[ label ] = 0; }\n\tthis[ label ] += elapsed[0] * 1e3 + elapsed[1] * 1e-6;\n};\n\nvar warned = {\n\tinsertLeft: false,\n\tinsertRight: false,\n\tstoreName: false\n};\n\nfunction MagicString$1 ( string, options ) {\n\tif ( options === void 0 ) options = {};\n\n\tvar chunk = new Chunk( 0, string.length, string );\n\n\tObject.defineProperties( this, {\n\t\toriginal:              { writable: true, value: string },\n\t\toutro:                 { writable: true, value: '' },\n\t\tintro:                 { writable: true, value: '' },\n\t\tfirstChunk:            { writable: true, value: chunk },\n\t\tlastChunk:             { writable: true, value: chunk },\n\t\tlastSearchedChunk:     { writable: true, value: chunk },\n\t\tbyStart:               { writable: true, value: {} },\n\t\tbyEnd:                 { writable: true, value: {} },\n\t\tfilename:              { writable: true, value: options.filename },\n\t\tindentExclusionRanges: { writable: true, value: options.indentExclusionRanges },\n\t\tsourcemapLocations:    { writable: true, value: {} },\n\t\tstoredNames:           { writable: true, value: {} },\n\t\tindentStr:             { writable: true, value: guessIndent( string ) }\n\t});\n\n\tthis.byStart[ 0 ] = chunk;\n\tthis.byEnd[ string.length ] = chunk;\n}\n\nMagicString$1.prototype = {\n\taddSourcemapLocation: function addSourcemapLocation ( char ) {\n\t\tthis.sourcemapLocations[ char ] = true;\n\t},\n\n\tappend: function append ( content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'outro content must be a string' ); }\n\n\t\tthis.outro += content;\n\t\treturn this;\n\t},\n\n\tappendLeft: function appendLeft ( index, content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byEnd[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.appendLeft( content );\n\t\t} else {\n\t\t\tthis.intro += content;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tappendRight: function appendRight ( index, content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byStart[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.appendRight( content );\n\t\t} else {\n\t\t\tthis.outro += content;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function clone () {\n\t\tvar cloned = new MagicString$1( this.original, { filename: this.filename });\n\n\t\tvar originalChunk = this.firstChunk;\n\t\tvar clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();\n\n\t\twhile ( originalChunk ) {\n\t\t\tcloned.byStart[ clonedChunk.start ] = clonedChunk;\n\t\t\tcloned.byEnd[ clonedChunk.end ] = clonedChunk;\n\n\t\t\tvar nextOriginalChunk = originalChunk.next;\n\t\t\tvar nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\t\t\tif ( nextClonedChunk ) {\n\t\t\t\tclonedChunk.next = nextClonedChunk;\n\t\t\t\tnextClonedChunk.previous = clonedChunk;\n\n\t\t\t\tclonedChunk = nextClonedChunk;\n\t\t\t}\n\n\t\t\toriginalChunk = nextOriginalChunk;\n\t\t}\n\n\t\tcloned.lastChunk = clonedChunk;\n\n\t\tif ( this.indentExclusionRanges ) {\n\t\t\tcloned.indentExclusionRanges = this.indentExclusionRanges.slice();\n\t\t}\n\n\t\tObject.keys( this.sourcemapLocations ).forEach( function (loc) {\n\t\t\tcloned.sourcemapLocations[ loc ] = true;\n\t\t});\n\n\t\treturn cloned;\n\t},\n\n\tgenerateMap: function generateMap ( options ) {\n\t\tvar this$1 = this;\n\n\t\toptions = options || {};\n\n\t\tvar sourceIndex = 0;\n\t\tvar names = Object.keys( this.storedNames );\n\t\tvar mappings = new Mappings( options.hires );\n\n\t\tvar locate = getLocator( this.original );\n\n\t\tif ( this.intro ) {\n\t\t\tmappings.advance( this.intro );\n\t\t}\n\n\t\tthis.firstChunk.eachNext( function (chunk) {\n\t\t\tvar loc = locate( chunk.start );\n\n\t\t\tif ( chunk.intro.length ) { mappings.advance( chunk.intro ); }\n\n\t\t\tif ( chunk.edited ) {\n\t\t\t\tmappings.addEdit( sourceIndex, chunk.content, chunk.original, loc, chunk.storeName ? names.indexOf( chunk.original ) : -1 );\n\t\t\t} else {\n\t\t\t\tmappings.addUneditedChunk( sourceIndex, chunk, this$1.original, loc, this$1.sourcemapLocations );\n\t\t\t}\n\n\t\t\tif ( chunk.outro.length ) { mappings.advance( chunk.outro ); }\n\t\t});\n\n\t\tvar map = new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: [ options.source ? getRelativePath( options.file || '', options.source ) : null ],\n\t\t\tsourcesContent: options.includeContent ? [ this.original ] : [ null ],\n\t\t\tnames: names,\n\t\t\tmappings: mappings.encode()\n\t\t});\n\t\treturn map;\n\t},\n\n\tgetIndentString: function getIndentString () {\n\t\treturn this.indentStr === null ? '\\t' : this.indentStr;\n\t},\n\n\tindent: function indent ( indentStr, options ) {\n\t\tvar this$1 = this;\n\n\t\tvar pattern = /^[^\\r\\n]/gm;\n\n\t\tif ( isObject( indentStr ) ) {\n\t\t\toptions = indentStr;\n\t\t\tindentStr = undefined;\n\t\t}\n\n\t\tindentStr = indentStr !== undefined ? indentStr : ( this.indentStr || '\\t' );\n\n\t\tif ( indentStr === '' ) { return this; } // noop\n\n\t\toptions = options || {};\n\n\t\t// Process exclusion ranges\n\t\tvar isExcluded = {};\n\n\t\tif ( options.exclude ) {\n\t\t\tvar exclusions = typeof options.exclude[0] === 'number' ? [ options.exclude ] : options.exclude;\n\t\t\texclusions.forEach( function (exclusion) {\n\t\t\t\tfor ( var i = exclusion[0]; i < exclusion[1]; i += 1 ) {\n\t\t\t\t\tisExcluded[i] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tvar shouldIndentNextCharacter = options.indentStart !== false;\n\t\tvar replacer = function (match) {\n\t\t\tif ( shouldIndentNextCharacter ) { return (\"\" + indentStr + match); }\n\t\t\tshouldIndentNextCharacter = true;\n\t\t\treturn match;\n\t\t};\n\n\t\tthis.intro = this.intro.replace( pattern, replacer );\n\n\t\tvar charIndex = 0;\n\n\t\tvar chunk = this.firstChunk;\n\n\t\twhile ( chunk ) {\n\t\t\tvar end = chunk.end;\n\n\t\t\tif ( chunk.edited ) {\n\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\tchunk.content = chunk.content.replace( pattern, replacer );\n\n\t\t\t\t\tif ( chunk.content.length ) {\n\t\t\t\t\t\tshouldIndentNextCharacter = chunk.content[ chunk.content.length - 1 ] === '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcharIndex = chunk.start;\n\n\t\t\t\twhile ( charIndex < end ) {\n\t\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\t\tvar char = this$1.original[ charIndex ];\n\n\t\t\t\t\t\tif ( char === '\\n' ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = true;\n\t\t\t\t\t\t} else if ( char !== '\\r' && shouldIndentNextCharacter ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = false;\n\n\t\t\t\t\t\t\tif ( charIndex === chunk.start ) {\n\t\t\t\t\t\t\t\tchunk.prependRight( indentStr );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis$1._splitChunk( chunk, charIndex );\n\t\t\t\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t\t\t\t\tchunk.prependRight( indentStr );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcharIndex += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcharIndex = chunk.end;\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tthis.outro = this.outro.replace( pattern, replacer );\n\n\t\treturn this;\n\t},\n\n\tinsert: function insert () {\n\t\tthrow new Error( 'magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)' );\n\t},\n\n\tinsertLeft: function insertLeft ( index, content ) {\n\t\tif ( !warned.insertLeft ) {\n\t\t\tconsole.warn( 'magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead' ); // eslint-disable-line no-console\n\t\t\twarned.insertLeft = true;\n\t\t}\n\n\t\treturn this.appendLeft( index, content );\n\t},\n\n\tinsertRight: function insertRight ( index, content ) {\n\t\tif ( !warned.insertRight ) {\n\t\t\tconsole.warn( 'magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead' ); // eslint-disable-line no-console\n\t\t\twarned.insertRight = true;\n\t\t}\n\n\t\treturn this.prependRight( index, content );\n\t},\n\n\tmove: function move ( start, end, index ) {\n\t\tif ( index >= start && index <= end ) { throw new Error( 'Cannot move a selection inside itself' ); }\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\t\tthis._split( index );\n\n\t\tvar first = this.byStart[ start ];\n\t\tvar last = this.byEnd[ end ];\n\n\t\tvar oldLeft = first.previous;\n\t\tvar oldRight = last.next;\n\n\t\tvar newRight = this.byStart[ index ];\n\t\tif ( !newRight && last === this.lastChunk ) { return this; }\n\t\tvar newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\t\tif ( oldLeft ) { oldLeft.next = oldRight; }\n\t\tif ( oldRight ) { oldRight.previous = oldLeft; }\n\n\t\tif ( newLeft ) { newLeft.next = first; }\n\t\tif ( newRight ) { newRight.previous = last; }\n\n\t\tif ( !first.previous ) { this.firstChunk = last.next; }\n\t\tif ( !last.next ) {\n\t\t\tthis.lastChunk = first.previous;\n\t\t\tthis.lastChunk.next = null;\n\t\t}\n\n\t\tfirst.previous = newLeft;\n\t\tlast.next = newRight || null;\n\n\t\tif ( !newLeft ) { this.firstChunk = first; }\n\t\tif ( !newRight ) { this.lastChunk = last; }\n\n\t\treturn this;\n\t},\n\n\toverwrite: function overwrite ( start, end, content, options ) {\n\t\tvar this$1 = this;\n\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'replacement content must be a string' ); }\n\n\t\twhile ( start < 0 ) { start += this$1.original.length; }\n\t\twhile ( end < 0 ) { end += this$1.original.length; }\n\n\t\tif ( end > this.original.length ) { throw new Error( 'end is out of bounds' ); }\n\t\tif ( start === end ) { throw new Error( 'Cannot overwrite a zero-length range – use appendLeft or prependRight instead' ); }\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\n\t\tif ( options === true ) {\n\t\t\tif ( !warned.storeName ) {\n\t\t\t\tconsole.warn( 'The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string' ); // eslint-disable-line no-console\n\t\t\t\twarned.storeName = true;\n\t\t\t}\n\n\t\t\toptions = { storeName: true };\n\t\t}\n\t\tvar storeName = options !== undefined ? options.storeName : false;\n\t\tvar contentOnly = options !== undefined ? options.contentOnly : false;\n\n\t\tif ( storeName ) {\n\t\t\tvar original = this.original.slice( start, end );\n\t\t\tthis.storedNames[ original ] = true;\n\t\t}\n\n\t\tvar first = this.byStart[ start ];\n\t\tvar last = this.byEnd[ end ];\n\n\t\tif ( first ) {\n\t\t\tif ( end > first.end && first.next !== this.byStart[ first.end ] ) {\n\t\t\t\tthrow new Error( 'Cannot overwrite across a split point' );\n\t\t\t}\n\n\t\t\tfirst.edit( content, storeName, contentOnly );\n\n\t\t\tif ( first !== last ) {\n\t\t\t\tvar chunk = first.next;\n\t\t\t\twhile ( chunk !== last ) {\n\t\t\t\t\tchunk.edit( '', false );\n\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tchunk.edit( '', false );\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\t// must be inserting at the end\n\t\t\tvar newChunk = new Chunk( start, end, '' ).edit( content, storeName );\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n\t\t\tlast.next = newChunk;\n\t\t\tnewChunk.previous = last;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'outro content must be a string' ); }\n\n\t\tthis.intro = content + this.intro;\n\t\treturn this;\n\t},\n\n\tprependLeft: function prependLeft ( index, content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byEnd[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.prependLeft( content );\n\t\t} else {\n\t\t\tthis.intro = content + this.intro;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprependRight: function prependRight ( index, content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byStart[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.prependRight( content );\n\t\t} else {\n\t\t\tthis.outro = content + this.outro;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremove: function remove ( start, end ) {\n\t\tvar this$1 = this;\n\n\t\twhile ( start < 0 ) { start += this$1.original.length; }\n\t\twhile ( end < 0 ) { end += this$1.original.length; }\n\n\t\tif ( start === end ) { return this; }\n\n\t\tif ( start < 0 || end > this.original.length ) { throw new Error( 'Character is out of bounds' ); }\n\t\tif ( start > end ) { throw new Error( 'end must be greater than start' ); }\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\n\t\tvar chunk = this.byStart[ start ];\n\n\t\twhile ( chunk ) {\n\t\t\tchunk.intro = '';\n\t\t\tchunk.outro = '';\n\t\t\tchunk.edit( '' );\n\n\t\t\tchunk = end > chunk.end ? this$1.byStart[ chunk.end ] : null;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tslice: function slice ( start, end ) {\n\t\tvar this$1 = this;\n\t\tif ( start === void 0 ) start = 0;\n\t\tif ( end === void 0 ) end = this.original.length;\n\n\t\twhile ( start < 0 ) { start += this$1.original.length; }\n\t\twhile ( end < 0 ) { end += this$1.original.length; }\n\n\t\tvar result = '';\n\n\t\t// find start chunk\n\t\tvar chunk = this.firstChunk;\n\t\twhile ( chunk && ( chunk.start > start || chunk.end <= start ) ) {\n\n\t\t\t// found end chunk before start\n\t\t\tif ( chunk.start < end && chunk.end >= end ) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tif ( chunk && chunk.edited && chunk.start !== start ) { throw new Error((\"Cannot use replaced character \" + start + \" as slice start anchor.\")); }\n\n\t\tvar startChunk = chunk;\n\t\twhile ( chunk ) {\n\t\t\tif ( chunk.intro && ( startChunk !== chunk || chunk.start === start ) ) {\n\t\t\t\tresult += chunk.intro;\n\t\t\t}\n\n\t\t\tvar containsEnd = chunk.start < end && chunk.end >= end;\n\t\t\tif ( containsEnd && chunk.edited && chunk.end !== end ) { throw new Error((\"Cannot use replaced character \" + end + \" as slice end anchor.\")); }\n\n\t\t\tvar sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\t\t\tvar sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\t\t\tresult += chunk.content.slice( sliceStart, sliceEnd );\n\n\t\t\tif ( chunk.outro && ( !containsEnd || chunk.end === end ) ) {\n\t\t\t\tresult += chunk.outro;\n\t\t\t}\n\n\t\t\tif ( containsEnd ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t// TODO deprecate this? not really very useful\n\tsnip: function snip ( start, end ) {\n\t\tvar clone = this.clone();\n\t\tclone.remove( 0, start );\n\t\tclone.remove( end, clone.original.length );\n\n\t\treturn clone;\n\t},\n\n\t_split: function _split ( index ) {\n\t\tvar this$1 = this;\n\n\t\tif ( this.byStart[ index ] || this.byEnd[ index ] ) { return; }\n\n\t\tvar chunk = this.lastSearchedChunk;\n\t\tvar searchForward = index > chunk.end;\n\n\t\twhile ( true ) {\n\t\t\tif ( chunk.contains( index ) ) { return this$1._splitChunk( chunk, index ); }\n\n\t\t\tchunk = searchForward ?\n\t\t\t\tthis$1.byStart[ chunk.end ] :\n\t\t\t\tthis$1.byEnd[ chunk.start ];\n\t\t}\n\t},\n\n\t_splitChunk: function _splitChunk ( chunk, index ) {\n\t\tif ( chunk.edited && chunk.content.length ) { // zero-length edited chunks are a special case (overlapping replacements)\n\t\t\tvar loc = getLocator( this.original )( index );\n\t\t\tthrow new Error( (\"Cannot split a chunk that has already been edited (\" + (loc.line) + \":\" + (loc.column) + \" – \\\"\" + (chunk.original) + \"\\\")\") );\n\t\t}\n\n\t\tvar newChunk = chunk.split( index );\n\n\t\tthis.byEnd[ index ] = chunk;\n\t\tthis.byStart[ index ] = newChunk;\n\t\tthis.byEnd[ newChunk.end ] = newChunk;\n\n\t\tif ( chunk === this.lastChunk ) { this.lastChunk = newChunk; }\n\n\t\tthis.lastSearchedChunk = chunk;\n\t\treturn true;\n\t},\n\n\ttoString: function toString () {\n\t\tvar str = this.intro;\n\n\t\tvar chunk = this.firstChunk;\n\t\twhile ( chunk ) {\n\t\t\tstr += chunk.toString();\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn str + this.outro;\n\t},\n\n\ttrimLines: function trimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function trim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimEnd: function trimEnd ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) { return this; }\n\n\t\tvar chunk = this.lastChunk;\n\n\t\tdo {\n\t\t\tvar end = chunk.end;\n\t\t\tvar aborted = chunk.trimEnd( rx );\n\n\t\t\t// if chunk was trimmed, we have a new lastChunk\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\tif ( this$1.lastChunk === chunk ) {\n\t\t\t\t\tthis$1.lastChunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tthis$1.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis$1.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t\tthis$1.byEnd[ chunk.next.end ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) { return this$1; }\n\t\t\tchunk = chunk.previous;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t},\n\n\ttrimStart: function trimStart ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) { return this; }\n\n\t\tvar chunk = this.firstChunk;\n\n\t\tdo {\n\t\t\tvar end = chunk.end;\n\t\t\tvar aborted = chunk.trimStart( rx );\n\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\t// special case...\n\t\t\t\tif ( chunk === this$1.lastChunk ) { this$1.lastChunk = chunk.next; }\n\n\t\t\t\tthis$1.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis$1.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t\tthis$1.byEnd[ chunk.next.end ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) { return this$1; }\n\t\t\tchunk = chunk.next;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t}\n};\n\nvar hasOwnProp = Object.prototype.hasOwnProperty;\n\nfunction Bundle ( options ) {\n\tif ( options === void 0 ) options = {};\n\n\tthis.intro = options.intro || '';\n\tthis.separator = options.separator !== undefined ? options.separator : '\\n';\n\n\tthis.sources = [];\n\n\tthis.uniqueSources = [];\n\tthis.uniqueSourceIndexByFilename = {};\n}\n\nBundle.prototype = {\n\taddSource: function addSource ( source ) {\n\t\tif ( source instanceof MagicString$1 ) {\n\t\t\treturn this.addSource({\n\t\t\t\tcontent: source,\n\t\t\t\tfilename: source.filename,\n\t\t\t\tseparator: this.separator\n\t\t\t});\n\t\t}\n\n\t\tif ( !isObject( source ) || !source.content ) {\n\t\t\tthrow new Error( 'bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`' );\n\t\t}\n\n\t\t[ 'filename', 'indentExclusionRanges', 'separator' ].forEach( function (option) {\n\t\t\tif ( !hasOwnProp.call( source, option ) ) { source[ option ] = source.content[ option ]; }\n\t\t});\n\n\t\tif ( source.separator === undefined ) { // TODO there's a bunch of this sort of thing, needs cleaning up\n\t\t\tsource.separator = this.separator;\n\t\t}\n\n\t\tif ( source.filename ) {\n\t\t\tif ( !hasOwnProp.call( this.uniqueSourceIndexByFilename, source.filename ) ) {\n\t\t\t\tthis.uniqueSourceIndexByFilename[ source.filename ] = this.uniqueSources.length;\n\t\t\t\tthis.uniqueSources.push({ filename: source.filename, content: source.content.original });\n\t\t\t} else {\n\t\t\t\tvar uniqueSource = this.uniqueSources[ this.uniqueSourceIndexByFilename[ source.filename ] ];\n\t\t\t\tif ( source.content.original !== uniqueSource.content ) {\n\t\t\t\t\tthrow new Error( (\"Illegal source: same filename (\" + (source.filename) + \"), different contents\") );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.sources.push( source );\n\t\treturn this;\n\t},\n\n\tappend: function append ( str, options ) {\n\t\tthis.addSource({\n\t\t\tcontent: new MagicString$1( str ),\n\t\t\tseparator: ( options && options.separator ) || ''\n\t\t});\n\n\t\treturn this;\n\t},\n\n\tclone: function clone () {\n\t\tvar bundle = new Bundle({\n\t\t\tintro: this.intro,\n\t\t\tseparator: this.separator\n\t\t});\n\n\t\tthis.sources.forEach( function (source) {\n\t\t\tbundle.addSource({\n\t\t\t\tfilename: source.filename,\n\t\t\t\tcontent: source.content.clone(),\n\t\t\t\tseparator: source.separator\n\t\t\t});\n\t\t});\n\n\t\treturn bundle;\n\t},\n\n\tgenerateMap: function generateMap ( options ) {\n\t\tvar this$1 = this;\n\t\tif ( options === void 0 ) options = {};\n\n\t\tvar names = [];\n\t\tthis.sources.forEach( function (source) {\n\t\t\tObject.keys( source.content.storedNames ).forEach( function (name) {\n\t\t\t\tif ( !~names.indexOf( name ) ) { names.push( name ); }\n\t\t\t});\n\t\t});\n\n\t\tvar mappings = new Mappings( options.hires );\n\n\t\tif ( this.intro ) {\n\t\t\tmappings.advance( this.intro );\n\t\t}\n\n\t\tthis.sources.forEach( function ( source, i ) {\n\t\t\tif ( i > 0 ) {\n\t\t\t\tmappings.advance( this$1.separator );\n\t\t\t}\n\n\t\t\tvar sourceIndex = source.filename ? this$1.uniqueSourceIndexByFilename[ source.filename ] : -1;\n\t\t\tvar magicString = source.content;\n\t\t\tvar locate = getLocator( magicString.original );\n\n\t\t\tif ( magicString.intro ) {\n\t\t\t\tmappings.advance( magicString.intro );\n\t\t\t}\n\n\t\t\tmagicString.firstChunk.eachNext( function (chunk) {\n\t\t\t\tvar loc = locate( chunk.start );\n\n\t\t\t\tif ( chunk.intro.length ) { mappings.advance( chunk.intro ); }\n\n\t\t\t\tif ( source.filename ) {\n\t\t\t\t\tif ( chunk.edited ) {\n\t\t\t\t\t\tmappings.addEdit( sourceIndex, chunk.content, chunk.original, loc, chunk.storeName ? names.indexOf( chunk.original ) : -1 );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmappings.addUneditedChunk( sourceIndex, chunk, magicString.original, loc, magicString.sourcemapLocations );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tmappings.advance( chunk.content );\n\t\t\t\t}\n\n\t\t\t\tif ( chunk.outro.length ) { mappings.advance( chunk.outro ); }\n\t\t\t});\n\n\t\t\tif ( magicString.outro ) {\n\t\t\t\tmappings.advance( magicString.outro );\n\t\t\t}\n\t\t});\n\n\t\treturn new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: this.uniqueSources.map( function (source) {\n\t\t\t\treturn options.file ? getRelativePath( options.file, source.filename ) : source.filename;\n\t\t\t}),\n\t\t\tsourcesContent: this.uniqueSources.map( function (source) {\n\t\t\t\treturn options.includeContent ? source.content : null;\n\t\t\t}),\n\t\t\tnames: names,\n\t\t\tmappings: mappings.encode()\n\t\t});\n\t},\n\n\tgetIndentString: function getIndentString () {\n\t\tvar indentStringCounts = {};\n\n\t\tthis.sources.forEach( function (source) {\n\t\t\tvar indentStr = source.content.indentStr;\n\n\t\t\tif ( indentStr === null ) { return; }\n\n\t\t\tif ( !indentStringCounts[ indentStr ] ) { indentStringCounts[ indentStr ] = 0; }\n\t\t\tindentStringCounts[ indentStr ] += 1;\n\t\t});\n\n\t\treturn ( Object.keys( indentStringCounts ).sort( function ( a, b ) {\n\t\t\treturn indentStringCounts[a] - indentStringCounts[b];\n\t\t})[0] ) || '\\t';\n\t},\n\n\tindent: function indent ( indentStr ) {\n\t\tvar this$1 = this;\n\n\t\tif ( !arguments.length ) {\n\t\t\tindentStr = this.getIndentString();\n\t\t}\n\n\t\tif ( indentStr === '' ) { return this; } // noop\n\n\t\tvar trailingNewline = !this.intro || this.intro.slice( -1 ) === '\\n';\n\n\t\tthis.sources.forEach( function ( source, i ) {\n\t\t\tvar separator = source.separator !== undefined ? source.separator : this$1.separator;\n\t\t\tvar indentStart = trailingNewline || ( i > 0 && /\\r?\\n$/.test( separator ) );\n\n\t\t\tsource.content.indent( indentStr, {\n\t\t\t\texclude: source.indentExclusionRanges,\n\t\t\t\tindentStart: indentStart//: trailingNewline || /\\r?\\n$/.test( separator )  //true///\\r?\\n/.test( separator )\n\t\t\t});\n\n\t\t\t// TODO this is a very slow way to determine this\n\t\t\ttrailingNewline = source.content.toString().slice( 0, -1 ) === '\\n';\n\t\t});\n\n\t\tif ( this.intro ) {\n\t\t\tthis.intro = indentStr + this.intro.replace( /^[^\\n]/gm, function ( match, index ) {\n\t\t\t\treturn index > 0 ? indentStr + match : match;\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( str ) {\n\t\tthis.intro = str + this.intro;\n\t\treturn this;\n\t},\n\n\ttoString: function toString () {\n\t\tvar this$1 = this;\n\n\t\tvar body = this.sources.map( function ( source, i ) {\n\t\t\tvar separator = source.separator !== undefined ? source.separator : this$1.separator;\n\t\t\tvar str = ( i > 0 ? separator : '' ) + source.content.toString();\n\n\t\t\treturn str;\n\t\t}).join( '' );\n\n\t\treturn this.intro + body;\n\t},\n\n\ttrimLines: function trimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function trim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimStart: function trimStart ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\t\tthis.intro = this.intro.replace( rx, '' );\n\n\t\tif ( !this.intro ) {\n\t\t\tvar source;\n\t\t\tvar i = 0;\n\n\t\t\tdo {\n\t\t\t\tsource = this$1.sources[i];\n\n\t\t\t\tif ( !source ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsource.content.trimStart( charType );\n\t\t\t\ti += 1;\n\t\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttrimEnd: function trimEnd ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tvar source;\n\t\tvar i = this.sources.length - 1;\n\n\t\tdo {\n\t\t\tsource = this$1.sources[i];\n\n\t\t\tif ( !source ) {\n\t\t\t\tthis$1.intro = this$1.intro.replace( rx, '' );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsource.content.trimEnd( charType );\n\t\t\ti -= 1;\n\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\n\t\treturn this;\n\t}\n};\n\nexport { Bundle };export default MagicString$1;\n//# sourceMappingURL=magic-string.es.js.map\n","import { walk } from 'estree-walker';\nimport isReference from 'is-reference';\nimport { Node } from '../interfaces';\n\nexport default function annotateWithScopes(expression: Node) {\n\tconst globals = new Set();\n\tlet scope = new Scope(null, false);\n\n\twalk(expression, {\n\t\tenter(node: Node, parent: Node) {\n\t\t\tif (/Function/.test(node.type)) {\n\t\t\t\tif (node.type === 'FunctionDeclaration') {\n\t\t\t\t\tscope.declarations.add(node.id.name);\n\t\t\t\t} else {\n\t\t\t\t\tnode._scope = scope = new Scope(scope, false);\n\t\t\t\t\tif (node.id) scope.declarations.add(node.id.name);\n\t\t\t\t}\n\n\t\t\t\tnode.params.forEach((param: Node) => {\n\t\t\t\t\textractNames(param).forEach(name => {\n\t\t\t\t\t\tscope.declarations.add(name);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else if (/For(?:In|Of)Statement/.test(node.type)) {\n\t\t\t\tnode._scope = scope = new Scope(scope, true);\n\t\t\t} else if (node.type === 'BlockStatement') {\n\t\t\t\tnode._scope = scope = new Scope(scope, true);\n\t\t\t} else if (/(Function|Class|Variable)Declaration/.test(node.type)) {\n\t\t\t\tscope.addDeclaration(node);\n\t\t\t} else if (isReference(node, parent)) {\n\t\t\t\tif (!scope.has(node.name)) {\n\t\t\t\t\tglobals.add(node.name);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tleave(node: Node) {\n\t\t\tif (node._scope) {\n\t\t\t\tscope = scope.parent;\n\t\t\t}\n\t\t},\n\t});\n\n\treturn { scope, globals };\n}\n\nexport class Scope {\n\tparent: Scope;\n\tblock: boolean;\n\tdeclarations: Set<string>;\n\n\tconstructor(parent: Scope, block: boolean) {\n\t\tthis.parent = parent;\n\t\tthis.block = block;\n\t\tthis.declarations = new Set();\n\t}\n\n\taddDeclaration(node: Node) {\n\t\tif (node.kind === 'var' && !this.block && this.parent) {\n\t\t\tthis.parent.addDeclaration(node);\n\t\t} else if (node.type === 'VariableDeclaration') {\n\t\t\tnode.declarations.forEach((declarator: Node) => {\n\t\t\t\textractNames(declarator.id).forEach(name => {\n\t\t\t\t\tthis.declarations.add(name);\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tthis.declarations.add(node.id.name);\n\t\t}\n\t}\n\n\thas(name: string): boolean {\n\t\treturn (\n\t\t\tthis.declarations.has(name) || (this.parent && this.parent.has(name))\n\t\t);\n\t}\n}\n\nfunction extractNames(param: Node) {\n\tconst names: string[] = [];\n\textractors[param.type](names, param);\n\treturn names;\n}\n\nconst extractors = {\n\tIdentifier(names: string[], param: Node) {\n\t\tnames.push(param.name);\n\t},\n\n\tObjectPattern(names: string[], param: Node) {\n\t\tparam.properties.forEach((prop: Node) => {\n\t\t\textractors[prop.value.type](names, prop.value);\n\t\t});\n\t},\n\n\tArrayPattern(names: string[], param: Node) {\n\t\tparam.elements.forEach((element: Node) => {\n\t\t\tif (element) extractors[element.type](names, element);\n\t\t});\n\t},\n\n\tRestElement(names: string[], param: Node) {\n\t\textractors[param.argument.type](names, param.argument);\n\t},\n\n\tAssignmentPattern(names: string[], param: Node) {\n\t\textractors[param.left.type](names, param.left);\n\t},\n};\n","const start = /\\n(\\t+)/;\n\nexport default function deindent(\n\tstrings: TemplateStringsArray,\n\t...values: any[]\n) {\n\tconst indentation = start.exec(strings[0])[1];\n\tconst pattern = new RegExp(`^${indentation}`, 'gm');\n\n\tlet result = strings[0].replace(start, '').replace(pattern, '');\n\n\tlet trailingIndentation = getTrailingIndentation(result);\n\n\tfor (let i = 1; i < strings.length; i += 1) {\n\t\tlet expression = values[i - 1];\n\t\tconst string = strings[i].replace(pattern, '');\n\n\t\tif (Array.isArray(expression)) {\n\t\t\texpression = expression.length ? expression.join('\\n') : null;\n\t\t}\n\n\t\tif (expression || expression === '') {\n\t\t\tconst value = String(expression).replace(\n\t\t\t\t/\\n/g,\n\t\t\t\t`\\n${trailingIndentation}`\n\t\t\t);\n\t\t\tresult += value + string;\n\t\t} else {\n\t\t\tlet c = result.length;\n\t\t\twhile (/\\s/.test(result[c - 1])) c -= 1;\n\t\t\tresult = result.slice(0, c) + string;\n\t\t}\n\n\t\ttrailingIndentation = getTrailingIndentation(result);\n\t}\n\n\treturn result.trim().replace(/\\t+$/gm, '');\n}\n\nfunction getTrailingIndentation(str: string) {\n\tlet i = str.length;\n\twhile (str[i - 1] === ' ' || str[i - 1] === '\\t') i -= 1;\n\treturn str.slice(i, str.length);\n}\n","export function stringify(data: string, options = {}) {\n\treturn JSON.stringify(escape(data, options));\n}\n\nexport function escape(data: string, { onlyEscapeAtSymbol = false } = {}) {\n\treturn data.replace(onlyEscapeAtSymbol ? /(%+|@+)/g : /(%+|@+|#+)/g, (match: string) => {\n\t\treturn match + match[0];\n\t});\n}\n\nconst escaped = {\n\t'&': '&amp;',\n\t'<': '&lt;',\n\t'>': '&gt;',\n};\n\nexport function escapeHTML(html) {\n\treturn String(html).replace(/[&<>]/g, match => escaped[match]);\n}\n\nexport function escapeTemplate(str) {\n\treturn str.replace(/(\\${|`|\\\\)/g, '\\\\$1');\n}\n","import repeat from './repeat';\n\nenum ChunkType {\n\tLine,\n\tBlock\n}\n\ninterface Condition {\n\tcondition: string;\n\tused: boolean;\n}\n\nexport default class CodeBuilder {\n\tresult: string;\n\tfirst: ChunkType;\n\tlast: ChunkType;\n\tlastCondition: string;\n\tconditionStack: Condition[];\n\tindent: string;\n\n\tconstructor(str = '') {\n\t\tthis.result = str;\n\n\t\tconst initial = str\n\t\t\t? /\\n/.test(str) ? ChunkType.Block : ChunkType.Line\n\t\t\t: null;\n\t\tthis.first = initial;\n\t\tthis.last = initial;\n\n\t\tthis.lastCondition = null;\n\t\tthis.conditionStack = [];\n\t\tthis.indent = '';\n\t}\n\n\taddConditional(condition: string, body: string) {\n\t\tthis.reifyConditions();\n\n\t\tbody = body.replace(/^/gm, `${this.indent}\\t`);\n\n\t\tif (condition === this.lastCondition) {\n\t\t\tthis.result += `\\n${body}`;\n\t\t} else {\n\t\t\tif (this.lastCondition) {\n\t\t\t\tthis.result += `\\n${this.indent}}`;\n\t\t\t}\n\n\t\t\tthis.result += `${this.last === ChunkType.Block ? '\\n\\n' : '\\n'}${this.indent}if (${condition}) {\\n${body}`;\n\t\t\tthis.lastCondition = condition;\n\t\t}\n\n\t\tthis.last = ChunkType.Block;\n\t}\n\n\taddLine(line: string) {\n\t\tthis.reifyConditions();\n\n\t\tif (this.lastCondition) {\n\t\t\tthis.result += `\\n${this.indent}}`;\n\t\t\tthis.lastCondition = null;\n\t\t}\n\n\t\tif (this.last === ChunkType.Block) {\n\t\t\tthis.result += `\\n\\n${this.indent}${line}`;\n\t\t} else if (this.last === ChunkType.Line) {\n\t\t\tthis.result += `\\n${this.indent}${line}`;\n\t\t} else {\n\t\t\tthis.result += line;\n\t\t}\n\n\t\tthis.last = ChunkType.Line;\n\t\tif (!this.first) this.first = ChunkType.Line;\n\t}\n\n\taddLineAtStart(line: string) {\n\t\tthis.reifyConditions();\n\n\t\tif (this.first === ChunkType.Block) {\n\t\t\tthis.result = `${line}\\n\\n${this.indent}${this.result}`;\n\t\t} else if (this.first === ChunkType.Line) {\n\t\t\tthis.result = `${line}\\n${this.indent}${this.result}`;\n\t\t} else {\n\t\t\tthis.result += line;\n\t\t}\n\n\t\tthis.first = ChunkType.Line;\n\t\tif (!this.last) this.last = ChunkType.Line;\n\t}\n\n\taddBlock(block: string) {\n\t\tthis.reifyConditions();\n\n\t\tif (this.indent) block = block.replace(/^/gm, `${this.indent}`);\n\n\t\tif (this.lastCondition) {\n\t\t\tthis.result += `\\n${this.indent}}`;\n\t\t\tthis.lastCondition = null;\n\t\t}\n\n\t\tif (this.result) {\n\t\t\tthis.result += `\\n\\n${this.indent}${block}`;\n\t\t} else {\n\t\t\tthis.result += block;\n\t\t}\n\n\t\tthis.last = ChunkType.Block;\n\t\tif (!this.first) this.first = ChunkType.Block;\n\t}\n\n\taddBlockAtStart(block: string) {\n\t\tthis.reifyConditions();\n\n\t\tif (this.result) {\n\t\t\tthis.result = `${block}\\n\\n${this.indent}${this.result}`;\n\t\t} else {\n\t\t\tthis.result += block;\n\t\t}\n\n\t\tthis.first = ChunkType.Block;\n\t\tif (!this.last) this.last = ChunkType.Block;\n\t}\n\n\tisEmpty() {\n\t\treturn this.result === '';\n\t}\n\n\tpushCondition(condition: string) {\n\t\tthis.conditionStack.push({ condition, used: false });\n\t}\n\n\tpopCondition() {\n\t\tconst { used } = this.conditionStack.pop();\n\n\t\tthis.indent = repeat('\\t', this.conditionStack.length);\n\t\tif (used) this.addLine('}');\n\t}\n\n\treifyConditions() {\n\t\tfor (let i = 0; i < this.conditionStack.length; i += 1) {\n\t\t\tconst condition = this.conditionStack[i];\n\t\t\tif (!condition.used) {\n\t\t\t\tconst line = `if (${condition.condition}) {`;\n\n\t\t\t\tif (this.last === ChunkType.Block) {\n\t\t\t\t\tthis.result += `\\n\\n${this.indent}${line}`;\n\t\t\t\t} else if (this.last === ChunkType.Line) {\n\t\t\t\t\tthis.result += `\\n${this.indent}${line}`;\n\t\t\t\t} else {\n\t\t\t\t\tthis.result += line;\n\t\t\t\t}\n\n\t\t\t\tthis.last = ChunkType.Line;\n\t\t\t\tif (!this.first) this.first = ChunkType.Line;\n\n\t\t\t\tthis.indent = repeat('\\t', this.conditionStack.length);\n\t\t\t\tcondition.used = true;\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.result.trim() + (this.lastCondition ? `\\n}` : ``);\n\t}\n}\n","export default new Set([\n\t'Array',\n\t'Boolean',\n\t'console',\n\t'Date',\n\t'decodeURI',\n\t'decodeURIComponent',\n\t'encodeURI',\n\t'encodeURIComponent',\n\t'Infinity',\n\t'Intl',\n\t'isFinite',\n\t'isNaN',\n\t'JSON',\n\t'Map',\n\t'Math',\n\t'NaN',\n\t'Number',\n\t'Object',\n\t'parseFloat',\n\t'parseInt',\n\t'RegExp',\n\t'Set',\n\t'String',\n\t'undefined',\n]);\n","// this file is auto-generated, do not edit it\nconst shared: Record<string, string> = {\n\t\"appendNode\": \"function appendNode(node, target) {\\n\\ttarget.appendChild(node);\\n}\",\n\t\"insertNode\": \"function insertNode(node, target, anchor) {\\n\\ttarget.insertBefore(node, anchor);\\n}\",\n\t\"detachNode\": \"function detachNode(node) {\\n\\tnode.parentNode.removeChild(node);\\n}\",\n\t\"detachBetween\": \"function detachBetween(before, after) {\\n\\twhile (before.nextSibling && before.nextSibling !== after) {\\n\\t\\tbefore.parentNode.removeChild(before.nextSibling);\\n\\t}\\n}\",\n\t\"detachBefore\": \"function detachBefore(after) {\\n\\twhile (after.previousSibling) {\\n\\t\\tafter.parentNode.removeChild(after.previousSibling);\\n\\t}\\n}\",\n\t\"detachAfter\": \"function detachAfter(before) {\\n\\twhile (before.nextSibling) {\\n\\t\\tbefore.parentNode.removeChild(before.nextSibling);\\n\\t}\\n}\",\n\t\"reinsertBetween\": \"function reinsertBetween(before, after, target) {\\n\\twhile (before.nextSibling && before.nextSibling !== after) {\\n\\t\\ttarget.appendChild(before.parentNode.removeChild(before.nextSibling));\\n\\t}\\n}\",\n\t\"reinsertChildren\": \"function reinsertChildren(parent, target) {\\n\\twhile (parent.firstChild) target.appendChild(parent.firstChild);\\n}\",\n\t\"reinsertAfter\": \"function reinsertAfter(before, target) {\\n\\twhile (before.nextSibling) target.appendChild(before.nextSibling);\\n}\",\n\t\"reinsertBefore\": \"function reinsertBefore(after, target) {\\n\\tvar parent = after.parentNode;\\n\\twhile (parent.firstChild !== after) target.appendChild(parent.firstChild);\\n}\",\n\t\"destroyEach\": \"function destroyEach(iterations) {\\n\\tfor (var i = 0; i < iterations.length; i += 1) {\\n\\t\\tif (iterations[i]) iterations[i].d();\\n\\t}\\n}\",\n\t\"createFragment\": \"function createFragment() {\\n\\treturn document.createDocumentFragment();\\n}\",\n\t\"createElement\": \"function createElement(name) {\\n\\treturn document.createElement(name);\\n}\",\n\t\"createSvgElement\": \"function createSvgElement(name) {\\n\\treturn document.createElementNS('http://www.w3.org/2000/svg', name);\\n}\",\n\t\"createText\": \"function createText(data) {\\n\\treturn document.createTextNode(data);\\n}\",\n\t\"createComment\": \"function createComment() {\\n\\treturn document.createComment('');\\n}\",\n\t\"addListener\": \"function addListener(node, event, handler) {\\n\\tnode.addEventListener(event, handler, false);\\n}\",\n\t\"removeListener\": \"function removeListener(node, event, handler) {\\n\\tnode.removeEventListener(event, handler, false);\\n}\",\n\t\"setAttribute\": \"function setAttribute(node, attribute, value) {\\n\\tnode.setAttribute(attribute, value);\\n}\",\n\t\"setAttributes\": \"function setAttributes(node, attributes) {\\n\\tfor (var key in attributes) {\\n\\t\\tif (key in node) {\\n\\t\\t\\tnode[key] = attributes[key];\\n\\t\\t} else {\\n\\t\\t\\tif (attributes[key] === undefined) removeAttribute(node, key);\\n\\t\\t\\telse setAttribute(node, key, attributes[key]);\\n\\t\\t}\\n\\t}\\n}\",\n\t\"removeAttribute\": \"function removeAttribute(node, attribute) {\\n\\tnode.removeAttribute(attribute);\\n}\",\n\t\"setXlinkAttribute\": \"function setXlinkAttribute(node, attribute, value) {\\n\\tnode.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\\n}\",\n\t\"getBindingGroupValue\": \"function getBindingGroupValue(group) {\\n\\tvar value = [];\\n\\tfor (var i = 0; i < group.length; i += 1) {\\n\\t\\tif (group[i].checked) value.push(group[i].__value);\\n\\t}\\n\\treturn value;\\n}\",\n\t\"toNumber\": \"function toNumber(value) {\\n\\treturn value === '' ? undefined : +value;\\n}\",\n\t\"timeRangesToArray\": \"function timeRangesToArray(ranges) {\\n\\tvar array = [];\\n\\tfor (var i = 0; i < ranges.length; i += 1) {\\n\\t\\tarray.push({ start: ranges.start(i), end: ranges.end(i) });\\n\\t}\\n\\treturn array;\\n}\",\n\t\"children\": \"function children (element) {\\n\\treturn Array.from(element.childNodes);\\n}\",\n\t\"claimElement\": \"function claimElement (nodes, name, attributes, svg) {\\n\\tfor (var i = 0; i < nodes.length; i += 1) {\\n\\t\\tvar node = nodes[i];\\n\\t\\tif (node.nodeName === name) {\\n\\t\\t\\tfor (var j = 0; j < node.attributes.length; j += 1) {\\n\\t\\t\\t\\tvar attribute = node.attributes[j];\\n\\t\\t\\t\\tif (!attributes[attribute.name]) node.removeAttribute(attribute.name);\\n\\t\\t\\t}\\n\\t\\t\\treturn nodes.splice(i, 1)[0]; // TODO strip unwanted attributes\\n\\t\\t}\\n\\t}\\n\\n\\treturn svg ? createSvgElement(name) : createElement(name);\\n}\",\n\t\"claimText\": \"function claimText (nodes, data) {\\n\\tfor (var i = 0; i < nodes.length; i += 1) {\\n\\t\\tvar node = nodes[i];\\n\\t\\tif (node.nodeType === 3) {\\n\\t\\t\\tnode.data = data;\\n\\t\\t\\treturn nodes.splice(i, 1)[0];\\n\\t\\t}\\n\\t}\\n\\n\\treturn createText(data);\\n}\",\n\t\"setInputType\": \"function setInputType(input, type) {\\n\\ttry {\\n\\t\\tinput.type = type;\\n\\t} catch (e) {}\\n}\",\n\t\"setStyle\": \"function setStyle(node, key, value) {\\n\\tnode.style.setProperty(key, value);\\n}\",\n\t\"selectOption\": \"function selectOption(select, value) {\\n\\tfor (var i = 0; i < select.options.length; i += 1) {\\n\\t\\tvar option = select.options[i];\\n\\n\\t\\tif (option.__value === value) {\\n\\t\\t\\toption.selected = true;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n}\",\n\t\"selectOptions\": \"function selectOptions(select, value) {\\n\\tfor (var i = 0; i < select.options.length; i += 1) {\\n\\t\\tvar option = select.options[i];\\n\\t\\toption.selected = ~value.indexOf(option.__value);\\n\\t}\\n}\",\n\t\"selectValue\": \"function selectValue(select) {\\n\\tvar selectedOption = select.querySelector(':checked') || select.options[0];\\n\\treturn selectedOption && selectedOption.__value;\\n}\",\n\t\"selectMultipleValue\": \"function selectMultipleValue(select) {\\n\\treturn [].map.call(select.querySelectorAll(':checked'), function(option) {\\n\\t\\treturn option.__value;\\n\\t});\\n}\",\n\t\"blankObject\": \"function blankObject() {\\n\\treturn Object.create(null);\\n}\",\n\t\"destroy\": \"function destroy(detach) {\\n\\tthis.destroy = noop;\\n\\tthis.fire('destroy');\\n\\tthis.set = this.get = noop;\\n\\n\\tif (detach !== false) this._fragment.u();\\n\\tthis._fragment.d();\\n\\tthis._fragment = this._state = null;\\n}\",\n\t\"destroyDev\": \"function destroyDev(detach) {\\n\\tdestroy.call(this, detach);\\n\\tthis.destroy = function() {\\n\\t\\tconsole.warn('Component was already destroyed');\\n\\t};\\n}\",\n\t\"_differs\": \"function _differs(a, b) {\\n\\treturn a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\\n}\",\n\t\"_differsImmutable\": \"function _differsImmutable(a, b) {\\n\\treturn a != a ? b == b : a !== b;\\n}\",\n\t\"dispatchObservers\": \"function dispatchObservers(component, group, changed, newState, oldState) {\\n\\tfor (var key in group) {\\n\\t\\tif (!changed[key]) continue;\\n\\n\\t\\tvar newValue = newState[key];\\n\\t\\tvar oldValue = oldState[key];\\n\\n\\t\\tvar callbacks = group[key];\\n\\t\\tif (!callbacks) continue;\\n\\n\\t\\tfor (var i = 0; i < callbacks.length; i += 1) {\\n\\t\\t\\tvar callback = callbacks[i];\\n\\t\\t\\tif (callback.__calling) continue;\\n\\n\\t\\t\\tcallback.__calling = true;\\n\\t\\t\\tcallback.call(component, newValue, oldValue);\\n\\t\\t\\tcallback.__calling = false;\\n\\t\\t}\\n\\t}\\n}\",\n\t\"fire\": \"function fire(eventName, data) {\\n\\tvar handlers =\\n\\t\\teventName in this._handlers && this._handlers[eventName].slice();\\n\\tif (!handlers) return;\\n\\n\\tfor (var i = 0; i < handlers.length; i += 1) {\\n\\t\\thandlers[i].call(this, data);\\n\\t}\\n}\",\n\t\"get\": \"function get(key) {\\n\\treturn key ? this._state[key] : this._state;\\n}\",\n\t\"init\": \"function init(component, options) {\\n\\tcomponent._observers = { pre: blankObject(), post: blankObject() };\\n\\tcomponent._handlers = blankObject();\\n\\tcomponent._bind = options._bind;\\n\\n\\tcomponent.options = options;\\n\\tcomponent.root = options.root || component;\\n\\tcomponent.store = component.root.store || options.store;\\n}\",\n\t\"observe\": \"function observe(key, callback, options) {\\n\\tvar group = options && options.defer\\n\\t\\t? this._observers.post\\n\\t\\t: this._observers.pre;\\n\\n\\t(group[key] || (group[key] = [])).push(callback);\\n\\n\\tif (!options || options.init !== false) {\\n\\t\\tcallback.__calling = true;\\n\\t\\tcallback.call(this, this._state[key]);\\n\\t\\tcallback.__calling = false;\\n\\t}\\n\\n\\treturn {\\n\\t\\tcancel: function() {\\n\\t\\t\\tvar index = group[key].indexOf(callback);\\n\\t\\t\\tif (~index) group[key].splice(index, 1);\\n\\t\\t}\\n\\t};\\n}\",\n\t\"observeDev\": \"function observeDev(key, callback, options) {\\n\\tvar c = (key = '' + key).search(/[.[]/);\\n\\tif (c > -1) {\\n\\t\\tvar message =\\n\\t\\t\\t'The first argument to component.observe(...) must be the name of a top-level property';\\n\\t\\tif (c > 0)\\n\\t\\t\\tmessage += \\\", i.e. '\\\" + key.slice(0, c) + \\\"' rather than '\\\" + key + \\\"'\\\";\\n\\n\\t\\tthrow new Error(message);\\n\\t}\\n\\n\\treturn observe.call(this, key, callback, options);\\n}\",\n\t\"on\": \"function on(eventName, handler) {\\n\\tif (eventName === 'teardown') return this.on('destroy', handler);\\n\\n\\tvar handlers = this._handlers[eventName] || (this._handlers[eventName] = []);\\n\\thandlers.push(handler);\\n\\n\\treturn {\\n\\t\\tcancel: function() {\\n\\t\\t\\tvar index = handlers.indexOf(handler);\\n\\t\\t\\tif (~index) handlers.splice(index, 1);\\n\\t\\t}\\n\\t};\\n}\",\n\t\"onDev\": \"function onDev(eventName, handler) {\\n\\tif (eventName === 'teardown') {\\n\\t\\tconsole.warn(\\n\\t\\t\\t\\\"Use component.on('destroy', ...) instead of component.on('teardown', ...) which has been deprecated and will be unsupported in Svelte 2\\\"\\n\\t\\t);\\n\\t\\treturn this.on('destroy', handler);\\n\\t}\\n\\n\\treturn on.call(this, eventName, handler);\\n}\",\n\t\"run\": \"function run(fn) {\\n\\tfn();\\n}\",\n\t\"set\": \"function set(newState) {\\n\\tthis._set(assign({}, newState));\\n\\tif (this.root._lock) return;\\n\\tthis.root._lock = true;\\n\\tcallAll(this.root._beforecreate);\\n\\tcallAll(this.root._oncreate);\\n\\tcallAll(this.root._aftercreate);\\n\\tthis.root._lock = false;\\n}\",\n\t\"_set\": \"function _set(newState) {\\n\\tvar oldState = this._state,\\n\\t\\tchanged = {},\\n\\t\\tdirty = false;\\n\\n\\tfor (var key in newState) {\\n\\t\\tif (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;\\n\\t}\\n\\tif (!dirty) return;\\n\\n\\tthis._state = assign(assign({}, oldState), newState);\\n\\tthis._recompute(changed, this._state);\\n\\tif (this._bind) this._bind(changed, this._state);\\n\\n\\tif (this._fragment) {\\n\\t\\tdispatchObservers(this, this._observers.pre, changed, this._state, oldState);\\n\\t\\tthis._fragment.p(changed, this._state);\\n\\t\\tdispatchObservers(this, this._observers.post, changed, this._state, oldState);\\n\\t}\\n}\",\n\t\"setDev\": \"function setDev(newState) {\\n\\tif (typeof newState !== 'object') {\\n\\t\\tthrow new Error(\\n\\t\\t\\tthis._debugName + '.set was called without an object of data key-values to update.'\\n\\t\\t);\\n\\t}\\n\\n\\tthis._checkReadOnly(newState);\\n\\tset.call(this, newState);\\n}\",\n\t\"callAll\": \"function callAll(fns) {\\n\\twhile (fns && fns.length) fns.shift()();\\n}\",\n\t\"_mount\": \"function _mount(target, anchor) {\\n\\tthis._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);\\n}\",\n\t\"_unmount\": \"function _unmount() {\\n\\tif (this._fragment) this._fragment.u();\\n}\",\n\t\"isPromise\": \"function isPromise(value) {\\n\\treturn value && typeof value.then === 'function';\\n}\",\n\t\"PENDING\": \"{}\",\n\t\"SUCCESS\": \"{}\",\n\t\"FAILURE\": \"{}\",\n\t\"removeFromStore\": \"function removeFromStore() {\\n\\tthis.store._remove(this);\\n}\",\n\t\"proto\": \"{\\n\\tdestroy: destroy,\\n\\tget: get,\\n\\tfire: fire,\\n\\tobserve: observe,\\n\\ton: on,\\n\\tset: set,\\n\\tteardown: destroy,\\n\\t_recompute: noop,\\n\\t_set: _set,\\n\\t_mount: _mount,\\n\\t_unmount: _unmount,\\n\\t_differs: _differs\\n}\",\n\t\"protoDev\": \"{\\n\\tdestroy: destroyDev,\\n\\tget: get,\\n\\tfire: fire,\\n\\tobserve: observeDev,\\n\\ton: onDev,\\n\\tset: setDev,\\n\\tteardown: destroyDev,\\n\\t_recompute: noop,\\n\\t_set: _set,\\n\\t_mount: _mount,\\n\\t_unmount: _unmount,\\n\\t_differs: _differs\\n}\",\n\t\"destroyBlock\": \"function destroyBlock(block, lookup) {\\n\\tblock.u();\\n\\tblock.d();\\n\\tlookup[block.key] = null;\\n}\",\n\t\"outroAndDestroyBlock\": \"function outroAndDestroyBlock(block, lookup) {\\n\\tblock.o(function() {\\n\\t\\tdestroyBlock(block, lookup);\\n\\t});\\n}\",\n\t\"updateKeyedEach\": \"function updateKeyedEach(old_blocks, component, changed, key_prop, dynamic, list, lookup, node, has_outro, create_each_block, intro_method, next, get_context) {\\n\\tvar o = old_blocks.length;\\n\\tvar n = list.length;\\n\\n\\tvar i = o;\\n\\tvar old_indexes = {};\\n\\twhile (i--) old_indexes[old_blocks[i].key] = i;\\n\\n\\tvar new_blocks = [];\\n\\tvar new_lookup = {};\\n\\tvar deltas = {};\\n\\n\\tvar i = n;\\n\\twhile (i--) {\\n\\t\\tvar key = list[i][key_prop];\\n\\t\\tvar block = lookup[key];\\n\\n\\t\\tif (!block) {\\n\\t\\t\\tblock = create_each_block(component, key, get_context(i));\\n\\t\\t\\tblock.c();\\n\\t\\t} else if (dynamic) {\\n\\t\\t\\tblock.p(changed, get_context(i));\\n\\t\\t}\\n\\n\\t\\tnew_blocks[i] = new_lookup[key] = block;\\n\\n\\t\\tif (key in old_indexes) deltas[key] = Math.abs(i - old_indexes[key]);\\n\\t}\\n\\n\\tvar will_move = {};\\n\\tvar did_move = {};\\n\\n\\tvar destroy = has_outro ? outroAndDestroyBlock : destroyBlock;\\n\\n\\tfunction insert(block) {\\n\\t\\tblock[intro_method](node, next);\\n\\t\\tlookup[block.key] = block;\\n\\t\\tnext = block.first;\\n\\t\\tn--;\\n\\t}\\n\\n\\twhile (o && n) {\\n\\t\\tvar new_block = new_blocks[n - 1];\\n\\t\\tvar old_block = old_blocks[o - 1];\\n\\t\\tvar new_key = new_block.key;\\n\\t\\tvar old_key = old_block.key;\\n\\n\\t\\tif (new_block === old_block) {\\n\\t\\t\\t// do nothing\\n\\t\\t\\tnext = new_block.first;\\n\\t\\t\\to--;\\n\\t\\t\\tn--;\\n\\t\\t}\\n\\n\\t\\telse if (!new_lookup[old_key]) {\\n\\t\\t\\t// remove old block\\n\\t\\t\\tdestroy(old_block, lookup);\\n\\t\\t\\to--;\\n\\t\\t}\\n\\n\\t\\telse if (!lookup[new_key] || will_move[new_key]) {\\n\\t\\t\\tinsert(new_block);\\n\\t\\t}\\n\\n\\t\\telse if (did_move[old_key]) {\\n\\t\\t\\to--;\\n\\n\\t\\t} else if (deltas[new_key] > deltas[old_key]) {\\n\\t\\t\\tdid_move[new_key] = true;\\n\\t\\t\\tinsert(new_block);\\n\\n\\t\\t} else {\\n\\t\\t\\twill_move[old_key] = true;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t}\\n\\n\\twhile (o--) {\\n\\t\\tvar old_block = old_blocks[o];\\n\\t\\tif (!new_lookup[old_block.key]) destroy(old_block, lookup);\\n\\t}\\n\\n\\twhile (n) insert(new_blocks[n - 1]);\\n\\n\\treturn new_blocks;\\n}\",\n\t\"getSpreadUpdate\": \"function getSpreadUpdate(levels, updates) {\\n\\tvar update = {};\\n\\n\\tvar to_null_out = {};\\n\\tvar accounted_for = {};\\n\\n\\tvar i = levels.length;\\n\\twhile (i--) {\\n\\t\\tvar o = levels[i];\\n\\t\\tvar n = updates[i];\\n\\n\\t\\tif (n) {\\n\\t\\t\\tfor (var key in o) {\\n\\t\\t\\t\\tif (!(key in n)) to_null_out[key] = 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor (var key in n) {\\n\\t\\t\\t\\tif (!accounted_for[key]) {\\n\\t\\t\\t\\t\\tupdate[key] = n[key];\\n\\t\\t\\t\\t\\taccounted_for[key] = 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tlevels[i] = n;\\n\\t\\t} else {\\n\\t\\t\\tfor (var key in o) {\\n\\t\\t\\t\\taccounted_for[key] = 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfor (var key in to_null_out) {\\n\\t\\tif (!(key in update)) update[key] = undefined;\\n\\t}\\n\\n\\treturn update;\\n}\",\n\t\"linear\": \"function linear(t) {\\n\\treturn t;\\n}\",\n\t\"generateRule\": \"function generateRule(\\n\\ta,\\n\\tb,\\n\\tdelta,\\n\\tduration,\\n\\tease,\\n\\tfn\\n) {\\n\\tvar keyframes = '{\\\\n';\\n\\n\\tfor (var p = 0; p <= 1; p += 16.666 / duration) {\\n\\t\\tvar t = a + delta * ease(p);\\n\\t\\tkeyframes += p * 100 + '%{' + fn(t) + '}\\\\n';\\n\\t}\\n\\n\\treturn keyframes + '100% {' + fn(b) + '}\\\\n}';\\n}\",\n\t\"hash\": \"function hash(str) {\\n\\tvar hash = 5381;\\n\\tvar i = str.length;\\n\\n\\twhile (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\\n\\treturn hash >>> 0;\\n}\",\n\t\"wrapTransition\": \"function wrapTransition(component, node, fn, params, intro, outgroup) {\\n\\tvar obj = fn(node, params);\\n\\tvar duration = obj.duration || 300;\\n\\tvar ease = obj.easing || linear;\\n\\tvar cssText;\\n\\n\\t// TODO share <style> tag between all transitions?\\n\\tif (obj.css && !transitionManager.stylesheet) {\\n\\t\\tvar style = createElement('style');\\n\\t\\tdocument.head.appendChild(style);\\n\\t\\ttransitionManager.stylesheet = style.sheet;\\n\\t}\\n\\n\\tif (intro) {\\n\\t\\tif (obj.css && obj.delay) {\\n\\t\\t\\tcssText = node.style.cssText;\\n\\t\\t\\tnode.style.cssText += obj.css(0);\\n\\t\\t}\\n\\n\\t\\tif (obj.tick) obj.tick(0);\\n\\t}\\n\\n\\treturn {\\n\\t\\tt: intro ? 0 : 1,\\n\\t\\trunning: false,\\n\\t\\tprogram: null,\\n\\t\\tpending: null,\\n\\t\\trun: function(intro, callback) {\\n\\t\\t\\tvar program = {\\n\\t\\t\\t\\tstart: window.performance.now() + (obj.delay || 0),\\n\\t\\t\\t\\tintro: intro,\\n\\t\\t\\t\\tcallback: callback\\n\\t\\t\\t};\\n\\n\\t\\t\\tif (obj.delay) {\\n\\t\\t\\t\\tthis.pending = program;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.start(program);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.running) {\\n\\t\\t\\t\\tthis.running = true;\\n\\t\\t\\t\\ttransitionManager.add(this);\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tstart: function(program) {\\n\\t\\t\\tcomponent.fire(program.intro ? 'intro.start' : 'outro.start', { node: node });\\n\\n\\t\\t\\tprogram.a = this.t;\\n\\t\\t\\tprogram.b = program.intro ? 1 : 0;\\n\\t\\t\\tprogram.delta = program.b - program.a;\\n\\t\\t\\tprogram.duration = duration * Math.abs(program.b - program.a);\\n\\t\\t\\tprogram.end = program.start + program.duration;\\n\\n\\t\\t\\tif (obj.css) {\\n\\t\\t\\t\\tif (obj.delay) node.style.cssText = cssText;\\n\\n\\t\\t\\t\\tprogram.rule = generateRule(\\n\\t\\t\\t\\t\\tprogram.a,\\n\\t\\t\\t\\t\\tprogram.b,\\n\\t\\t\\t\\t\\tprogram.delta,\\n\\t\\t\\t\\t\\tprogram.duration,\\n\\t\\t\\t\\t\\tease,\\n\\t\\t\\t\\t\\tobj.css\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\ttransitionManager.addRule(program.rule, program.name = '__svelte_' + hash(program.rule));\\n\\n\\t\\t\\t\\tnode.style.animation = (node.style.animation || '')\\n\\t\\t\\t\\t\\t.split(', ')\\n\\t\\t\\t\\t\\t.filter(function(anim) {\\n\\t\\t\\t\\t\\t\\t// when introing, discard old animations if there are any\\n\\t\\t\\t\\t\\t\\treturn anim && (program.delta < 0 || !/__svelte/.test(anim));\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.concat(program.name + ' ' + program.duration + 'ms linear 1 forwards')\\n\\t\\t\\t\\t\\t.join(', ');\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.program = program;\\n\\t\\t\\tthis.pending = null;\\n\\t\\t},\\n\\t\\tupdate: function(now) {\\n\\t\\t\\tvar program = this.program;\\n\\t\\t\\tif (!program) return;\\n\\n\\t\\t\\tvar p = now - program.start;\\n\\t\\t\\tthis.t = program.a + program.delta * ease(p / program.duration);\\n\\t\\t\\tif (obj.tick) obj.tick(this.t);\\n\\t\\t},\\n\\t\\tdone: function() {\\n\\t\\t\\tvar program = this.program;\\n\\t\\t\\tthis.t = program.b;\\n\\t\\t\\tif (obj.tick) obj.tick(this.t);\\n\\t\\t\\tif (obj.css) transitionManager.deleteRule(node, program.name);\\n\\t\\t\\tprogram.callback();\\n\\t\\t\\tprogram = null;\\n\\t\\t\\tthis.running = !!this.pending;\\n\\t\\t},\\n\\t\\tabort: function() {\\n\\t\\t\\tif (obj.tick) obj.tick(1);\\n\\t\\t\\tif (obj.css) transitionManager.deleteRule(node, this.program.name);\\n\\t\\t\\tthis.program = this.pending = null;\\n\\t\\t\\tthis.running = false;\\n\\t\\t}\\n\\t};\\n}\",\n\t\"transitionManager\": \"{\\n\\trunning: false,\\n\\ttransitions: [],\\n\\tbound: null,\\n\\tstylesheet: null,\\n\\tactiveRules: {},\\n\\n\\tadd: function(transition) {\\n\\t\\tthis.transitions.push(transition);\\n\\n\\t\\tif (!this.running) {\\n\\t\\t\\tthis.running = true;\\n\\t\\t\\trequestAnimationFrame(this.bound || (this.bound = this.next.bind(this)));\\n\\t\\t}\\n\\t},\\n\\n\\taddRule: function(rule, name) {\\n\\t\\tif (!this.activeRules[name]) {\\n\\t\\t\\tthis.activeRules[name] = true;\\n\\t\\t\\tthis.stylesheet.insertRule('@keyframes ' + name + ' ' + rule, this.stylesheet.cssRules.length);\\n\\t\\t}\\n\\t},\\n\\n\\tnext: function() {\\n\\t\\tthis.running = false;\\n\\n\\t\\tvar now = window.performance.now();\\n\\t\\tvar i = this.transitions.length;\\n\\n\\t\\twhile (i--) {\\n\\t\\t\\tvar transition = this.transitions[i];\\n\\n\\t\\t\\tif (transition.program && now >= transition.program.end) {\\n\\t\\t\\t\\ttransition.done();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (transition.pending && now >= transition.pending.start) {\\n\\t\\t\\t\\ttransition.start(transition.pending);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (transition.running) {\\n\\t\\t\\t\\ttransition.update(now);\\n\\t\\t\\t\\tthis.running = true;\\n\\t\\t\\t} else if (!transition.pending) {\\n\\t\\t\\t\\tthis.transitions.splice(i, 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (this.running) {\\n\\t\\t\\trequestAnimationFrame(this.bound);\\n\\t\\t} else if (this.stylesheet) {\\n\\t\\t\\tvar i = this.stylesheet.cssRules.length;\\n\\t\\t\\twhile (i--) this.stylesheet.deleteRule(i);\\n\\t\\t\\tthis.activeRules = {};\\n\\t\\t}\\n\\t},\\n\\n\\tdeleteRule: function(node, name) {\\n\\t\\tnode.style.animation = node.style.animation\\n\\t\\t\\t.split(', ')\\n\\t\\t\\t.filter(function(anim) {\\n\\t\\t\\t\\treturn anim.indexOf(name) === -1;\\n\\t\\t\\t})\\n\\t\\t\\t.join(', ');\\n\\t}\\n}\",\n\t\"noop\": \"function noop() {}\",\n\t\"assign\": \"function assign(tar, src) {\\n\\tfor (var k in src) tar[k] = src[k];\\n\\treturn tar;\\n}\"\n};\n\nexport default shared;","import MagicString from 'magic-string';\nimport getName from '../utils/getName';\nimport { Node } from '../interfaces';\n\nconst keys = {\n\tObjectExpression: 'properties',\n\tProgram: 'body',\n};\n\nconst offsets = {\n\tObjectExpression: [1, -1],\n\tProgram: [0, 0],\n};\n\nexport function removeNode(code: MagicString, parent: Node, node: Node) {\n\tconst key = keys[parent.type];\n\tconst offset = offsets[parent.type];\n\tif (!key || !offset) throw new Error(`not implemented: ${parent.type}`);\n\n\tconst list = parent[key];\n\tconst i = list.indexOf(node);\n\tif (i === -1) throw new Error('node not in list');\n\n\tlet a;\n\tlet b;\n\n\tif (list.length === 1) {\n\t\t// remove everything, leave {}\n\t\ta = parent.start + offset[0];\n\t\tb = parent.end + offset[1];\n\t} else if (i === 0) {\n\t\t// remove everything before second node, including comments\n\t\ta = parent.start + offset[0];\n\t\twhile (/\\s/.test(code.original[a])) a += 1;\n\n\t\tb = list[i].end;\n\t\twhile (/[\\s,]/.test(code.original[b])) b += 1;\n\t} else {\n\t\t// remove the end of the previous node to the end of this one\n\t\ta = list[i - 1].end;\n\t\tb = node.end;\n\t}\n\n\tcode.remove(a, b);\n\tlist.splice(i, 1);\n\treturn;\n}\n\nexport function removeObjectKey(code: MagicString, node: Node, key: string) {\n\tif (node.type !== 'ObjectExpression') return;\n\n\tlet i = node.properties.length;\n\twhile (i--) {\n\t\tconst property = node.properties[i];\n\t\tif (property.key.type === 'Identifier' && getName(property.key) === key) {\n\t\t\tremoveNode(code, node, property);\n\t\t}\n\t}\n}\n","import deindent from '../utils/deindent';\nimport list from '../utils/list';\nimport { CompileOptions, ModuleFormat, Node } from '../interfaces';\n\ninterface Dependency {\n\tname: string;\n\tstatements: string[];\n\tsource: string;\n}\n\nconst wrappers = { es, amd, cjs, iife, umd, eval: expr };\n\nexport default function wrapModule(\n\tcode: string,\n\tformat: ModuleFormat,\n\tname: string,\n\toptions: CompileOptions,\n\tbanner: string,\n\tsharedPath: string,\n\thelpers: { name: string, alias: string }[],\n\timports: Node[],\n\tsource: string\n): string {\n\tif (format === 'es') return es(code, name, options, banner, sharedPath, helpers, imports, source);\n\n\tconst dependencies = imports.map((declaration, i) => {\n\t\tconst defaultImport = declaration.specifiers.find(\n\t\t\t(x: Node) =>\n\t\t\t\tx.type === 'ImportDefaultSpecifier' ||\n\t\t\t\t(x.type === 'ImportSpecifier' && x.imported.name === 'default')\n\t\t);\n\n\t\tconst namespaceImport = declaration.specifiers.find(\n\t\t\t(x: Node) => x.type === 'ImportNamespaceSpecifier'\n\t\t);\n\n\t\tconst namedImports = declaration.specifiers.filter(\n\t\t\t(x: Node) =>\n\t\t\t\tx.type === 'ImportSpecifier' && x.imported.name !== 'default'\n\t\t);\n\n\t\tconst name = defaultImport || namespaceImport\n\t\t\t? (defaultImport || namespaceImport).local.name\n\t\t\t: `__import${i}`;\n\n\t\tconst statements: string[] = [];\n\n\t\tnamedImports.forEach((specifier: Node) => {\n\t\t\tstatements.push(\n\t\t\t\t`var ${specifier.local.name} = ${name}.${specifier.imported.name};`\n\t\t\t);\n\t\t});\n\n\t\tif (defaultImport) {\n\t\t\tstatements.push(\n\t\t\t\t`${name} = (${name} && ${name}.__esModule) ? ${name}[\"default\"] : ${name};`\n\t\t\t);\n\t\t}\n\n\t\treturn { name, statements, source: declaration.source.value };\n\t});\n\n\tif (format === 'amd') return amd(code, name, options, banner, dependencies);\n\tif (format === 'cjs') return cjs(code, name, options, banner, sharedPath, helpers, dependencies);\n\tif (format === 'iife') return iife(code, name, options, banner, dependencies);\n\tif (format === 'umd') return umd(code, name, options, banner, dependencies);\n\tif (format === 'eval') return expr(code, name, options, banner, dependencies);\n\n\tthrow new Error(`options.format is invalid (must be ${list(Object.keys(wrappers))})`);\n}\n\nfunction es(\n\tcode: string,\n\tname: string,\n\toptions: CompileOptions,\n\tbanner: string,\n\tsharedPath: string,\n\thelpers: { name: string, alias: string }[],\n\timports: Node[],\n\tsource: string\n) {\n\tconst importHelpers = helpers && (\n\t\t`import { ${helpers.map(h => h.name === h.alias ? h.name : `${h.name} as ${h.alias}`).join(', ')} } from ${JSON.stringify(sharedPath)};`\n\t);\n\n\tconst importBlock = imports.length > 0 && (\n\t\timports\n\t\t\t.map((declaration: Node) => source.slice(declaration.start, declaration.end))\n\t\t\t.join('\\n')\n\t);\n\n\treturn deindent`\n\t\t${banner}\n\t\t${importHelpers}\n\t\t${importBlock}\n\n\t\t${code}\n\t\texport default ${name};`;\n}\n\nfunction amd(\n\tcode: string,\n\tname: string,\n\toptions: CompileOptions,\n\tbanner: string,\n\tdependencies: Dependency[]\n) {\n\tconst sourceString = dependencies.length\n\t\t? `[${dependencies.map(d => `\"${removeExtension(d.source)}\"`).join(', ')}], `\n\t\t: '';\n\n\tconst id = options.amd && options.amd.id;\n\n\treturn deindent`\n\t\tdefine(${id ? `\"${id}\", ` : ''}${sourceString}function(${paramString(dependencies)}) { \"use strict\";\n\t\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t\t${code}\n\t\t\treturn ${name};\n\t\t});`;\n}\n\nfunction cjs(\n\tcode: string,\n\tname: string,\n\toptions: CompileOptions,\n\tbanner: string,\n\tsharedPath: string,\n\thelpers: { name: string, alias: string }[],\n\tdependencies: Dependency[]\n) {\n\tconst SHARED = '__shared';\n\tconst helperBlock = helpers && (\n\t\t`var ${SHARED} = require(${JSON.stringify(sharedPath)});\\n` +\n\t\thelpers.map(helper => {\n\t\t\treturn `var ${helper.alias} = ${SHARED}.${helper.name};`;\n\t\t}).join('\\n')\n\t);\n\n\tconst requireBlock = dependencies.length > 0 && (\n\t\tdependencies\n\t\t\t.map(d => `var ${d.name} = require(\"${d.source}\");`)\n\t\t\t.join('\\n\\n')\n\t);\n\n\treturn deindent`\n\t\t${banner}\n\t\t\"use strict\";\n\n\t\t${helperBlock}\n\t\t${requireBlock}\n\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t${code}\n\n\t\tmodule.exports = ${name};`\n}\n\nfunction iife(\n\tcode: string,\n\tname: string,\n\toptions: CompileOptions,\n\tbanner: string,\n\tdependencies: Dependency[]\n) {\n\tif (!options.name) {\n\t\tthrow new Error(`Missing required 'name' option for IIFE export`);\n\t}\n\n\tconst globals = getGlobals(dependencies, options);\n\n\treturn deindent`\n\t\t${banner}\n\t\tvar ${options.name} = (function(${paramString(dependencies)}) { \"use strict\";\n\t\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t\t${code}\n\t\t\treturn ${name};\n\t\t}(${globals.join(', ')}));`;\n}\n\nfunction umd(\n\tcode: string,\n\tname: string,\n\toptions: CompileOptions,\n\tbanner: string,\n\tdependencies: Dependency[]\n) {\n\tif (!options.name) {\n\t\tthrow new Error(`Missing required 'name' option for UMD export`);\n\t}\n\n\tconst amdId = options.amd && options.amd.id ? `'${options.amd.id}', ` : '';\n\n\tconst amdDeps = dependencies.length\n\t\t? `[${dependencies.map(d => `\"${removeExtension(d.source)}\"`).join(', ')}], `\n\t\t: '';\n\n\tconst cjsDeps = dependencies\n\t\t.map(d => `require(\"${d.source}\")`)\n\t\t.join(', ');\n\n\tconst globals = getGlobals(dependencies, options);\n\n\treturn deindent`\n\t\t${banner}\n\t\t(function(global, factory) {\n\t\t\ttypeof exports === \"object\" && typeof module !== \"undefined\" ? module.exports = factory(${cjsDeps}) :\n\t\t\ttypeof define === \"function\" && define.amd ? define(${amdId}${amdDeps}factory) :\n\t\t\t(global.${options.name} = factory(${globals.join(', ')}));\n\t\t}(this, (function (${paramString(dependencies)}) { \"use strict\";\n\n\t\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t\t${code}\n\n\t\t\treturn ${name};\n\n\t\t})));`;\n}\n\nfunction expr(\n\tcode: string,\n\tname: string,\n\toptions: CompileOptions,\n\tbanner: string,\n\tdependencies: Dependency[]\n) {\n\tconst globals = getGlobals(dependencies, options);\n\n\treturn deindent`\n\t\t(function (${paramString(dependencies)}) { \"use strict\";\n\t\t\t${banner}\n\n\t\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t\t${code}\n\n\t\t\treturn ${name};\n\t\t}(${globals.join(', ')}))`;\n}\n\nfunction paramString(dependencies: Dependency[]) {\n\treturn dependencies.map(dep => dep.name).join(', ');\n}\n\nfunction removeExtension(file: string) {\n\tconst index = file.lastIndexOf('.');\n\treturn ~index ? file.slice(0, index) : file;\n}\n\nfunction getCompatibilityStatements(dependencies: Dependency[]) {\n\tif (!dependencies.length) return null;\n\n\tconst statements: string[] = [];\n\n\tdependencies.forEach(dependency => {\n\t\tstatements.push(...dependency.statements);\n\t});\n\n\treturn statements.join('\\n');\n}\n\nfunction getGlobals(dependencies: Dependency[], options: CompileOptions) {\n\tconst { globals, onerror, onwarn } = options;\n\tconst globalFn = getGlobalFn(globals);\n\n\treturn dependencies.map(d => {\n\t\tlet name = globalFn(d.source);\n\n\t\tif (!name) {\n\t\t\tif (d.name.startsWith('__import')) {\n\t\t\t\tconst error = new Error(\n\t\t\t\t\t`Could not determine name for imported module '${d.source}' – use options.globals`\n\t\t\t\t);\n\t\t\t\tonerror(error);\n\t\t\t} else {\n\t\t\t\tconst warning = {\n\t\t\t\t\tmessage: `No name was supplied for imported module '${d.source}'. Guessing '${d.name}', but you should use options.globals`,\n\t\t\t\t};\n\n\t\t\t\tonwarn(warning);\n\t\t\t}\n\n\t\t\tname = d.name;\n\t\t}\n\n\t\treturn name;\n\t});\n}\n\nfunction getGlobalFn(globals: any): (id: string) => string {\n\tif (typeof globals === 'function') return globals;\n\tif (typeof globals === 'object') {\n\t\treturn id => globals[id];\n\t}\n\n\treturn () => undefined;\n}","import { Node, Parsed } from '../interfaces';\n\nexport default function clone(node: Node|Parsed) {\n\tconst cloned: any = {};\n\n\tfor (const key in node) {\n\t\tconst value = node[key];\n\t\tif (Array.isArray(value)) {\n\t\t\tcloned[key] = value.map(clone);\n\t\t} else if (value && typeof value === 'object') {\n\t\t\tcloned[key] = clone(value);\n\t\t} else {\n\t\t\tcloned[key] = value;\n\t\t}\n\t}\n\n\treturn cloned;\n}\n","export const test = typeof process !== 'undefined' && process.env.TEST;","const svgAttributes = 'accent-height accumulate additive alignment-baseline allowReorder alphabetic amplitude arabic-form ascent attributeName attributeType autoReverse azimuth baseFrequency baseline-shift baseProfile bbox begin bias by calcMode cap-height class clip clipPathUnits clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominant-baseline dur dx dy edgeMode elevation enable-background end exponent externalResourcesRequired fill fill-opacity fill-rule filter filterRes filterUnits flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight format from fr fx fy g1 g2 glyph-name glyph-orientation-horizontal glyph-orientation-vertical glyphRef gradientTransform gradientUnits hanging height href horiz-adv-x horiz-origin-x id ideographic image-rendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lang lengthAdjust letter-spacing lighting-color limitingConeAngle local marker-end marker-mid marker-start markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical max media method min mode name numOctaves offset onabort onactivate onbegin onclick onend onerror onfocusin onfocusout onload onmousedown onmousemove onmouseout onmouseover onmouseup onrepeat onresize onscroll onunload opacity operator order orient orientation origin overflow overline-position overline-thickness panose-1 paint-order pathLength patternContentUnits patternTransform patternUnits pointer-events points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shape-rendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stop-color stop-opacity strikethrough-position strikethrough-thickness string stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width style surfaceScale systemLanguage tabindex tableValues target targetX targetY text-anchor text-decoration text-rendering textLength to transform type u1 u2 underline-position underline-thickness unicode unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical values version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget visibility width widths word-spacing writing-mode x x-height x1 x2 xChannelSelector xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space y y1 y2 yChannelSelector z zoomAndPan'.split(' ');\n\nconst svgAttributeLookup = new Map();\n\nsvgAttributes.forEach(name => {\n\tsvgAttributeLookup.set(name.toLowerCase(), name);\n});\n\nexport default function fixAttributeCasing(name) {\n\tname = name.toLowerCase();\n\treturn svgAttributeLookup.get(name) || name;\n}\n","import { Node } from '../interfaces';\n\nconst binaryOperators: Record<string, number> = {\n\t'**': 15,\n\t'*': 14,\n\t'/': 14,\n\t'%': 14,\n\t'+': 13,\n\t'-': 13,\n\t'<<': 12,\n\t'>>': 12,\n\t'>>>': 12,\n\t'<': 11,\n\t'<=': 11,\n\t'>': 11,\n\t'>=': 11,\n\t'in': 11,\n\t'instanceof': 11,\n\t'==': 10,\n\t'!=': 10,\n\t'===': 10,\n\t'!==': 10,\n\t'&': 9,\n\t'^': 8,\n\t'|': 7\n};\n\nconst logicalOperators: Record<string, number> = {\n\t'&&': 6,\n\t'||': 5\n};\n\nconst precedence: Record<string, (expression?: Node) => number> = {\n\tLiteral: () => 21,\n\tIdentifier: () => 21,\n\tParenthesizedExpression: () => 20,\n\tMemberExpression: () => 19,\n\tNewExpression: () => 19, // can be 18 (if no args) but makes no practical difference\n\tCallExpression: () => 19,\n\tUpdateExpression: () => 17,\n\tUnaryExpression: () => 16,\n\tBinaryExpression: (expression: Node) => binaryOperators[expression.operator],\n\tLogicalExpression: (expression: Node) => logicalOperators[expression.operator],\n\tConditionalExpression: () => 4,\n\tAssignmentExpression: () => 3,\n\tYieldExpression: () => 2,\n\tSpreadElement: () => 1,\n\tSequenceExpression: () => 0\n};\n\nexport default function getExpressionPrecedence(expression: Node) {\n\treturn expression.type in precedence ? precedence[expression.type](expression) : 0;\n}","import deindent from '../../utils/deindent';\nimport { stringify } from '../../utils/stringify';\nimport fixAttributeCasing from '../../utils/fixAttributeCasing';\nimport getExpressionPrecedence from '../../utils/getExpressionPrecedence';\nimport { DomGenerator } from '../dom/index';\nimport Node from './shared/Node';\nimport Element from './Element';\nimport Block from '../dom/Block';\n\nexport interface StyleProp {\n\tkey: string;\n\tvalue: Node[];\n}\n\nexport default class Attribute {\n\ttype: 'Attribute';\n\tstart: number;\n\tend: number;\n\n\tgenerator: DomGenerator;\n\tparent: Element;\n\tname: string;\n\tvalue: true | Node[]\n\texpression: Node;\n\n\tconstructor({\n\t\tgenerator,\n\t\tname,\n\t\tvalue,\n\t\tparent\n\t}: {\n\t\tgenerator: DomGenerator,\n\t\tname: string,\n\t\tvalue: Node[],\n\t\tparent: Element\n\t}) {\n\t\tthis.type = 'Attribute';\n\t\tthis.generator = generator;\n\t\tthis.parent = parent;\n\n\t\tthis.name = name;\n\t\tthis.value = value;\n\t}\n\n\trender(block: Block) {\n\t\tconst node = this.parent;\n\t\tconst name = fixAttributeCasing(this.name);\n\n\t\tif (name === 'style') {\n\t\t\tconst styleProps = optimizeStyle(this.value);\n\t\t\tif (styleProps) {\n\t\t\t\tthis.renderStyle(block, styleProps);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet metadata = node.namespace ? null : attributeLookup[name];\n\t\tif (metadata && metadata.appliesTo && !~metadata.appliesTo.indexOf(node.name))\n\t\t\tmetadata = null;\n\n\t\tconst isIndirectlyBoundValue =\n\t\t\tname === 'value' &&\n\t\t\t(node.name === 'option' || // TODO check it's actually bound\n\t\t\t\t(node.name === 'input' &&\n\t\t\t\t\tnode.attributes.find(\n\t\t\t\t\t\t(attribute: Attribute) =>\n\t\t\t\t\t\t\tattribute.type === 'Binding' && /checked|group/.test(attribute.name)\n\t\t\t\t\t\t)));\n\n\t\tconst propertyName = isIndirectlyBoundValue\n\t\t\t? '__value'\n\t\t\t: metadata && metadata.propertyName;\n\n\t\t// xlink is a special case... we could maybe extend this to generic\n\t\t// namespaced attributes but I'm not sure that's applicable in\n\t\t// HTML5?\n\t\tconst method = name.slice(0, 6) === 'xlink:'\n\t\t\t? '@setXlinkAttribute'\n\t\t\t: '@setAttribute';\n\n\t\tconst isDynamic = this.isDynamic();\n\t\tconst isLegacyInputType = this.generator.legacy && name === 'type' && this.parent.name === 'input';\n\n\t\tconst isDataSet = /^data-/.test(name) && !this.generator.legacy && !node.namespace;\n\t\tconst camelCaseName = isDataSet ? name.replace('data-', '').replace(/(-\\w)/g, function (m) {\n\t\t\treturn m[1].toUpperCase();\n\t\t}) : name;\n\n\t\tif (isDynamic) {\n\t\t\tlet value;\n\n\t\t\tconst allDependencies = new Set();\n\t\t\tlet shouldCache;\n\t\t\tlet hasChangeableIndex;\n\n\t\t\t// TODO some of this code is repeated in Tag.ts — would be good to\n\t\t\t// DRY it out if that's possible without introducing crazy indirection\n\t\t\tif (this.value.length === 1) {\n\t\t\t\t// single {{tag}} — may be a non-string\n\t\t\t\tconst { expression } = this.value[0];\n\t\t\t\tconst { indexes } = block.contextualise(expression);\n\t\t\t\tconst { dependencies, snippet } = this.value[0].metadata;\n\n\t\t\t\tvalue = snippet;\n\t\t\t\tdependencies.forEach(d => {\n\t\t\t\t\tallDependencies.add(d);\n\t\t\t\t});\n\n\t\t\t\thasChangeableIndex = Array.from(indexes).some(index => block.changeableIndexes.get(index));\n\n\t\t\t\tshouldCache = (\n\t\t\t\t\texpression.type !== 'Identifier' ||\n\t\t\t\t\tblock.contexts.has(expression.name) ||\n\t\t\t\t\thasChangeableIndex\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// '{{foo}} {{bar}}' — treat as string concatenation\n\t\t\t\tvalue =\n\t\t\t\t\t(this.value[0].type === 'Text' ? '' : `\"\" + `) +\n\t\t\t\t\tthis.value\n\t\t\t\t\t\t.map((chunk: Node) => {\n\t\t\t\t\t\t\tif (chunk.type === 'Text') {\n\t\t\t\t\t\t\t\treturn stringify(chunk.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst { indexes } = block.contextualise(chunk.expression);\n\t\t\t\t\t\t\t\tconst { dependencies, snippet } = chunk.metadata;\n\n\t\t\t\t\t\t\t\tif (Array.from(indexes).some(index => block.changeableIndexes.get(index))) {\n\t\t\t\t\t\t\t\t\thasChangeableIndex = true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tdependencies.forEach(d => {\n\t\t\t\t\t\t\t\t\tallDependencies.add(d);\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn getExpressionPrecedence(chunk.expression) <= 13 ? `(${snippet})` : snippet;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join(' + ');\n\n\t\t\t\tshouldCache = true;\n\t\t\t}\n\n\t\t\tconst isSelectValueAttribute =\n\t\t\t\tname === 'value' && node.name === 'select';\n\n\t\t\tconst last = (shouldCache || isSelectValueAttribute) && block.getUniqueName(\n\t\t\t\t`${node.var}_${name.replace(/[^a-zA-Z_$]/g, '_')}_value`\n\t\t\t);\n\n\t\t\tif (shouldCache || isSelectValueAttribute) block.addVariable(last);\n\n\t\t\tlet updater;\n\t\t\tconst init = shouldCache ? `${last} = ${value}` : value;\n\n\t\t\tif (isLegacyInputType) {\n\t\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t\t`@setInputType(${node.var}, ${init});`\n\t\t\t\t);\n\t\t\t\tupdater = `@setInputType(${node.var}, ${shouldCache ? last : value});`;\n\t\t\t} else if (isSelectValueAttribute) {\n\t\t\t\t// annoying special case\n\t\t\t\tconst isMultipleSelect = node.getStaticAttributeValue('multiple');\n\t\t\t\tconst i = block.getUniqueName('i');\n\t\t\t\tconst option = block.getUniqueName('option');\n\n\t\t\t\tconst ifStatement = isMultipleSelect\n\t\t\t\t\t? deindent`\n\t\t\t\t\t\t${option}.selected = ~${last}.indexOf(${option}.__value);`\n\t\t\t\t\t: deindent`\n\t\t\t\t\t\tif (${option}.__value === ${last}) {\n\t\t\t\t\t\t\t${option}.selected = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}`;\n\n\t\t\t\tupdater = deindent`\n\t\t\t\t\tfor (var ${i} = 0; ${i} < ${node.var}.options.length; ${i} += 1) {\n\t\t\t\t\t\tvar ${option} = ${node.var}.options[${i}];\n\n\t\t\t\t\t\t${ifStatement}\n\t\t\t\t\t}\n\t\t\t\t`;\n\n\t\t\t\tblock.builders.hydrate.addBlock(deindent`\n\t\t\t\t\t${last} = ${value};\n\t\t\t\t\t${updater}\n\t\t\t\t`);\n\n\t\t\t\tblock.builders.update.addLine(`${last} = ${value};`);\n\t\t\t} else if (propertyName) {\n\t\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t\t`${node.var}.${propertyName} = ${init};`\n\t\t\t\t);\n\t\t\t\tupdater = `${node.var}.${propertyName} = ${shouldCache ? last : value};`;\n\t\t\t} else if (isDataSet) {\n\t\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t\t`${node.var}.dataset.${camelCaseName} = ${init};`\n\t\t\t\t);\n\t\t\t\tupdater = `${node.var}.dataset.${camelCaseName} = ${shouldCache ? last : value};`;\n\t\t\t} else {\n\t\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t\t`${method}(${node.var}, \"${name}\", ${init});`\n\t\t\t\t);\n\t\t\t\tupdater = `${method}(${node.var}, \"${name}\", ${shouldCache ? last : value});`;\n\t\t\t}\n\n\t\t\tif (allDependencies.size || hasChangeableIndex || isSelectValueAttribute) {\n\t\t\t\tconst dependencies = Array.from(allDependencies);\n\t\t\t\tconst changedCheck = (\n\t\t\t\t\t( block.hasOutroMethod ? `#outroing || ` : '' ) +\n\t\t\t\t\tdependencies.map(dependency => `changed.${dependency}`).join(' || ')\n\t\t\t\t);\n\n\t\t\t\tconst updateCachedValue = `${last} !== (${last} = ${value})`;\n\n\t\t\t\tconst condition = shouldCache ?\n\t\t\t\t\t( dependencies.length ? `(${changedCheck}) && ${updateCachedValue}` : updateCachedValue ) :\n\t\t\t\t\tchangedCheck;\n\n\t\t\t\tblock.builders.update.addConditional(\n\t\t\t\t\tcondition,\n\t\t\t\t\tupdater\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst value = this.value === true\n\t\t\t\t? 'true'\n\t\t\t\t: this.value.length === 0 ? `\"\"` : stringify(this.value[0].data);\n\n\t\t\tconst statement = (\n\t\t\t\tisLegacyInputType\n\t\t\t\t\t? `@setInputType(${node.var}, ${value});`\n\t\t\t\t\t: propertyName\n\t\t\t\t\t\t? `${node.var}.${propertyName} = ${value};`\n\t\t\t\t\t\t: isDataSet\n\t\t\t\t\t\t\t? `${node.var}.dataset.${camelCaseName} = ${value};`\n\t\t\t\t\t\t\t: `${method}(${node.var}, \"${name}\", ${value});`\n\t\t\t);\n\n\t\t\tblock.builders.hydrate.addLine(statement);\n\n\t\t\t// special case – autofocus. has to be handled in a bit of a weird way\n\t\t\tif (this.value === true && name === 'autofocus') {\n\t\t\t\tblock.autofocus = node.var;\n\t\t\t}\n\t\t}\n\n\t\tif (isIndirectlyBoundValue) {\n\t\t\tconst updateValue = `${node.var}.value = ${node.var}.__value;`;\n\n\t\t\tblock.builders.hydrate.addLine(updateValue);\n\t\t\tif (isDynamic) block.builders.update.addLine(updateValue);\n\t\t}\n\t}\n\n\trenderStyle(\n\t\tblock: Block,\n\t\tstyleProps: StyleProp[]\n\t) {\n\t\tstyleProps.forEach((prop: StyleProp) => {\n\t\t\tlet value;\n\n\t\t\tif (isDynamic(prop.value)) {\n\t\t\t\tconst allDependencies = new Set();\n\t\t\t\tlet shouldCache;\n\t\t\t\tlet hasChangeableIndex;\n\n\t\t\t\tvalue =\n\t\t\t\t\t((prop.value.length === 1 || prop.value[0].type === 'Text') ? '' : `\"\" + `) +\n\t\t\t\t\tprop.value\n\t\t\t\t\t\t.map((chunk: Node) => {\n\t\t\t\t\t\t\tif (chunk.type === 'Text') {\n\t\t\t\t\t\t\t\treturn stringify(chunk.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst { indexes } = block.contextualise(chunk.expression);\n\t\t\t\t\t\t\t\tconst { dependencies, snippet } = chunk.metadata;\n\n\t\t\t\t\t\t\t\tif (Array.from(indexes).some(index => block.changeableIndexes.get(index))) {\n\t\t\t\t\t\t\t\t\thasChangeableIndex = true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tdependencies.forEach(d => {\n\t\t\t\t\t\t\t\t\tallDependencies.add(d);\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn getExpressionPrecedence(chunk.expression) <= 13 ? `( ${snippet} )` : snippet;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join(' + ');\n\n\t\t\t\tif (allDependencies.size || hasChangeableIndex) {\n\t\t\t\t\tconst dependencies = Array.from(allDependencies);\n\t\t\t\t\tconst condition = (\n\t\t\t\t\t\t( block.hasOutroMethod ? `#outroing || ` : '' ) +\n\t\t\t\t\t\tdependencies.map(dependency => `changed.${dependency}`).join(' || ')\n\t\t\t\t\t);\n\n\t\t\t\t\tblock.builders.update.addConditional(\n\t\t\t\t\t\tcondition,\n\t\t\t\t\t\t`@setStyle(${this.parent.var}, \"${prop.key}\", ${value});`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalue = stringify(prop.value[0].data);\n\t\t\t}\n\n\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t`@setStyle(${this.parent.var}, \"${prop.key}\", ${value});`\n\t\t\t);\n\t\t});\n\t}\n\n\tisDynamic() {\n\t\tif (this.value === true || this.value.length === 0) return false;\n\t\tif (this.value.length > 1) return true;\n\t\treturn this.value[0].type !== 'Text';\n\t}\n}\n\n// source: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\nconst attributeLookup = {\n\taccept: { appliesTo: ['form', 'input'] },\n\t'accept-charset': { propertyName: 'acceptCharset', appliesTo: ['form'] },\n\taccesskey: { propertyName: 'accessKey' },\n\taction: { appliesTo: ['form'] },\n\talign: {\n\t\tappliesTo: [\n\t\t\t'applet',\n\t\t\t'caption',\n\t\t\t'col',\n\t\t\t'colgroup',\n\t\t\t'hr',\n\t\t\t'iframe',\n\t\t\t'img',\n\t\t\t'table',\n\t\t\t'tbody',\n\t\t\t'td',\n\t\t\t'tfoot',\n\t\t\t'th',\n\t\t\t'thead',\n\t\t\t'tr',\n\t\t],\n\t},\n\tallowfullscreen: { propertyName: 'allowFullscreen', appliesTo: ['iframe'] },\n\talt: { appliesTo: ['applet', 'area', 'img', 'input'] },\n\tasync: { appliesTo: ['script'] },\n\tautocomplete: { appliesTo: ['form', 'input'] },\n\tautofocus: { appliesTo: ['button', 'input', 'keygen', 'select', 'textarea'] },\n\tautoplay: { appliesTo: ['audio', 'video'] },\n\tautosave: { appliesTo: ['input'] },\n\tbgcolor: {\n\t\tpropertyName: 'bgColor',\n\t\tappliesTo: [\n\t\t\t'body',\n\t\t\t'col',\n\t\t\t'colgroup',\n\t\t\t'marquee',\n\t\t\t'table',\n\t\t\t'tbody',\n\t\t\t'tfoot',\n\t\t\t'td',\n\t\t\t'th',\n\t\t\t'tr',\n\t\t],\n\t},\n\tborder: { appliesTo: ['img', 'object', 'table'] },\n\tbuffered: { appliesTo: ['audio', 'video'] },\n\tchallenge: { appliesTo: ['keygen'] },\n\tcharset: { appliesTo: ['meta', 'script'] },\n\tchecked: { appliesTo: ['command', 'input'] },\n\tcite: { appliesTo: ['blockquote', 'del', 'ins', 'q'] },\n\tclass: { propertyName: 'className' },\n\tcode: { appliesTo: ['applet'] },\n\tcodebase: { propertyName: 'codeBase', appliesTo: ['applet'] },\n\tcolor: { appliesTo: ['basefont', 'font', 'hr'] },\n\tcols: { appliesTo: ['textarea'] },\n\tcolspan: { propertyName: 'colSpan', appliesTo: ['td', 'th'] },\n\tcontent: { appliesTo: ['meta'] },\n\tcontenteditable: { propertyName: 'contentEditable' },\n\tcontextmenu: {},\n\tcontrols: { appliesTo: ['audio', 'video'] },\n\tcoords: { appliesTo: ['area'] },\n\tdata: { appliesTo: ['object'] },\n\tdatetime: { propertyName: 'dateTime', appliesTo: ['del', 'ins', 'time'] },\n\tdefault: { appliesTo: ['track'] },\n\tdefer: { appliesTo: ['script'] },\n\tdir: {},\n\tdirname: { propertyName: 'dirName', appliesTo: ['input', 'textarea'] },\n\tdisabled: {\n\t\tappliesTo: [\n\t\t\t'button',\n\t\t\t'command',\n\t\t\t'fieldset',\n\t\t\t'input',\n\t\t\t'keygen',\n\t\t\t'optgroup',\n\t\t\t'option',\n\t\t\t'select',\n\t\t\t'textarea',\n\t\t],\n\t},\n\tdownload: { appliesTo: ['a', 'area'] },\n\tdraggable: {},\n\tdropzone: {},\n\tenctype: { appliesTo: ['form'] },\n\tfor: { propertyName: 'htmlFor', appliesTo: ['label', 'output'] },\n\tform: {\n\t\tappliesTo: [\n\t\t\t'button',\n\t\t\t'fieldset',\n\t\t\t'input',\n\t\t\t'keygen',\n\t\t\t'label',\n\t\t\t'meter',\n\t\t\t'object',\n\t\t\t'output',\n\t\t\t'progress',\n\t\t\t'select',\n\t\t\t'textarea',\n\t\t],\n\t},\n\tformaction: { appliesTo: ['input', 'button'] },\n\theaders: { appliesTo: ['td', 'th'] },\n\theight: {\n\t\tappliesTo: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],\n\t},\n\thidden: {},\n\thigh: { appliesTo: ['meter'] },\n\thref: { appliesTo: ['a', 'area', 'base', 'link'] },\n\threflang: { appliesTo: ['a', 'area', 'link'] },\n\t'http-equiv': { propertyName: 'httpEquiv', appliesTo: ['meta'] },\n\ticon: { appliesTo: ['command'] },\n\tid: {},\n\tindeterminate: { appliesTo: ['input'] },\n\tismap: { propertyName: 'isMap', appliesTo: ['img'] },\n\titemprop: {},\n\tkeytype: { appliesTo: ['keygen'] },\n\tkind: { appliesTo: ['track'] },\n\tlabel: { appliesTo: ['track'] },\n\tlang: {},\n\tlanguage: { appliesTo: ['script'] },\n\tloop: { appliesTo: ['audio', 'bgsound', 'marquee', 'video'] },\n\tlow: { appliesTo: ['meter'] },\n\tmanifest: { appliesTo: ['html'] },\n\tmax: { appliesTo: ['input', 'meter', 'progress'] },\n\tmaxlength: { propertyName: 'maxLength', appliesTo: ['input', 'textarea'] },\n\tmedia: { appliesTo: ['a', 'area', 'link', 'source', 'style'] },\n\tmethod: { appliesTo: ['form'] },\n\tmin: { appliesTo: ['input', 'meter'] },\n\tmultiple: { appliesTo: ['input', 'select'] },\n\tmuted: { appliesTo: ['audio', 'video'] },\n\tname: {\n\t\tappliesTo: [\n\t\t\t'button',\n\t\t\t'form',\n\t\t\t'fieldset',\n\t\t\t'iframe',\n\t\t\t'input',\n\t\t\t'keygen',\n\t\t\t'object',\n\t\t\t'output',\n\t\t\t'select',\n\t\t\t'textarea',\n\t\t\t'map',\n\t\t\t'meta',\n\t\t\t'param',\n\t\t],\n\t},\n\tnovalidate: { propertyName: 'noValidate', appliesTo: ['form'] },\n\topen: { appliesTo: ['details'] },\n\toptimum: { appliesTo: ['meter'] },\n\tpattern: { appliesTo: ['input'] },\n\tping: { appliesTo: ['a', 'area'] },\n\tplaceholder: { appliesTo: ['input', 'textarea'] },\n\tposter: { appliesTo: ['video'] },\n\tpreload: { appliesTo: ['audio', 'video'] },\n\tradiogroup: { appliesTo: ['command'] },\n\treadonly: { propertyName: 'readOnly', appliesTo: ['input', 'textarea'] },\n\trel: { appliesTo: ['a', 'area', 'link'] },\n\trequired: { appliesTo: ['input', 'select', 'textarea'] },\n\treversed: { appliesTo: ['ol'] },\n\trows: { appliesTo: ['textarea'] },\n\trowspan: { propertyName: 'rowSpan', appliesTo: ['td', 'th'] },\n\tsandbox: { appliesTo: ['iframe'] },\n\tscope: { appliesTo: ['th'] },\n\tscoped: { appliesTo: ['style'] },\n\tseamless: { appliesTo: ['iframe'] },\n\tselected: { appliesTo: ['option'] },\n\tshape: { appliesTo: ['a', 'area'] },\n\tsize: { appliesTo: ['input', 'select'] },\n\tsizes: { appliesTo: ['link', 'img', 'source'] },\n\tspan: { appliesTo: ['col', 'colgroup'] },\n\tspellcheck: {},\n\tsrc: {\n\t\tappliesTo: [\n\t\t\t'audio',\n\t\t\t'embed',\n\t\t\t'iframe',\n\t\t\t'img',\n\t\t\t'input',\n\t\t\t'script',\n\t\t\t'source',\n\t\t\t'track',\n\t\t\t'video',\n\t\t],\n\t},\n\tsrcdoc: { appliesTo: ['iframe'] },\n\tsrclang: { appliesTo: ['track'] },\n\tsrcset: { appliesTo: ['img'] },\n\tstart: { appliesTo: ['ol'] },\n\tstep: { appliesTo: ['input'] },\n\tstyle: { propertyName: 'style.cssText' },\n\tsummary: { appliesTo: ['table'] },\n\ttabindex: { propertyName: 'tabIndex' },\n\ttarget: { appliesTo: ['a', 'area', 'base', 'form'] },\n\ttitle: {},\n\ttype: {\n\t\tappliesTo: [\n\t\t\t'button',\n\t\t\t'command',\n\t\t\t'embed',\n\t\t\t'object',\n\t\t\t'script',\n\t\t\t'source',\n\t\t\t'style',\n\t\t\t'menu',\n\t\t],\n\t},\n\tusemap: { propertyName: 'useMap', appliesTo: ['img', 'input', 'object'] },\n\tvalue: {\n\t\tappliesTo: [\n\t\t\t'button',\n\t\t\t'option',\n\t\t\t'input',\n\t\t\t'li',\n\t\t\t'meter',\n\t\t\t'progress',\n\t\t\t'param',\n\t\t\t'select',\n\t\t\t'textarea',\n\t\t],\n\t},\n\tvolume: { appliesTo: ['audio', 'video'] },\n\twidth: {\n\t\tappliesTo: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],\n\t},\n\twrap: { appliesTo: ['textarea'] },\n};\n\nObject.keys(attributeLookup).forEach(name => {\n\tconst metadata = attributeLookup[name];\n\tif (!metadata.propertyName) metadata.propertyName = name;\n});\n\nfunction optimizeStyle(value: Node[]) {\n\tlet expectingKey = true;\n\tlet i = 0;\n\n\tconst props: { key: string, value: Node[] }[] = [];\n\tlet chunks = value.slice();\n\n\twhile (chunks.length) {\n\t\tconst chunk = chunks[0];\n\n\t\tif (chunk.type !== 'Text') return null;\n\n\t\tconst keyMatch = /^\\s*([\\w-]+):\\s*/.exec(chunk.data);\n\t\tif (!keyMatch) return null;\n\n\t\tconst key = keyMatch[1];\n\n\t\tconst offset = keyMatch.index + keyMatch[0].length;\n\t\tconst remainingData = chunk.data.slice(offset);\n\n\t\tif (remainingData) {\n\t\t\tchunks[0] = {\n\t\t\t\tstart: chunk.start + offset,\n\t\t\t\tend: chunk.end,\n\t\t\t\ttype: 'Text',\n\t\t\t\tdata: remainingData\n\t\t\t};\n\t\t} else {\n\t\t\tchunks.shift();\n\t\t}\n\n\t\tconst result = getStyleValue(chunks);\n\t\tif (!result) return null;\n\n\t\tprops.push({ key, value: result.value });\n\t\tchunks = result.chunks;\n\t}\n\n\treturn props;\n}\n\nfunction getStyleValue(chunks: Node[]) {\n\tconst value: Node[] = [];\n\n\tlet inUrl = false;\n\tlet quoteMark = null;\n\tlet escaped = false;\n\n\twhile (chunks.length) {\n\t\tconst chunk = chunks.shift();\n\n\t\tif (chunk.type === 'Text') {\n\t\t\tlet c = 0;\n\t\t\twhile (c < chunk.data.length) {\n\t\t\t\tconst char = chunk.data[c];\n\n\t\t\t\tif (escaped) {\n\t\t\t\t\tescaped = false;\n\t\t\t\t} else if (char === '\\\\') {\n\t\t\t\t\tescaped = true;\n\t\t\t\t} else if (char === quoteMark) {\n\t\t\t\t\tquoteMark === null;\n\t\t\t\t} else if (char === '\"' || char === \"'\") {\n\t\t\t\t\tquoteMark = char;\n\t\t\t\t} else if (char === ')' && inUrl) {\n\t\t\t\t\tinUrl = false;\n\t\t\t\t} else if (char === 'u' && chunk.data.slice(c, c + 4) === 'url(') {\n\t\t\t\t\tinUrl = true;\n\t\t\t\t} else if (char === ';' && !inUrl && !quoteMark) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tc += 1;\n\t\t\t}\n\n\t\t\tif (c > 0) {\n\t\t\t\tvalue.push({\n\t\t\t\t\ttype: 'Text',\n\t\t\t\t\tstart: chunk.start,\n\t\t\t\t\tend: chunk.start + c,\n\t\t\t\t\tdata: chunk.data.slice(0, c)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\twhile (/[;\\s]/.test(chunk.data[c])) c += 1;\n\t\t\tconst remainingData = chunk.data.slice(c);\n\n\t\t\tif (remainingData) {\n\t\t\t\tchunks.unshift({\n\t\t\t\t\tstart: chunk.start + c,\n\t\t\t\t\tend: chunk.end,\n\t\t\t\t\ttype: 'Text',\n\t\t\t\t\tdata: remainingData\n\t\t\t\t});\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tvalue.push(chunk);\n\t\t}\n\t}\n\n\treturn {\n\t\tchunks,\n\t\tvalue\n\t};\n}\n\nfunction isDynamic(value: Node[]) {\n\treturn value.length > 1 || value[0].type !== 'Text';\n}\n","import { DomGenerator } from '../../dom/index';\nimport Block from '../../dom/Block';\nimport { trimStart, trimEnd } from '../../../utils/trim';\n\nexport default class Node {\n\ttype: string;\n\tstart: number;\n\tend: number;\n\t[key: string]: any;\n\n\tmetadata?: {\n\t\tdependencies: string[];\n\t\tsnippet: string;\n\t};\n\n\tparent: Node;\n\tprev?: Node;\n\tnext?: Node;\n\tgenerator: DomGenerator;\n\n\tcanUseInnerHTML: boolean;\n\tvar: string;\n\n\tconstructor(data: Record<string, any>) {\n\t\tObject.assign(this, data);\n\t}\n\n\tcannotUseInnerHTML() {\n\t\tif (this.canUseInnerHTML !== false) {\n\t\t\tthis.canUseInnerHTML = false;\n\t\t\tif (this.parent) {\n\t\t\t\tif (!this.parent.cannotUseInnerHTML) console.log(this.parent.type, this.type);\n\t\t\t\tthis.parent.cannotUseInnerHTML();\n\t\t\t}\n\t\t}\n\t}\n\n\tinit(\n\t\tblock: Block,\n\t\tstripWhitespace: boolean,\n\t\tnextSibling: Node\n\t) {\n\t\t// implemented by subclasses\n\t}\n\n\tinitChildren(\n\t\tblock: Block,\n\t\tstripWhitespace: boolean,\n\t\tnextSibling: Node\n\t) {\n\t\t// glue text nodes together\n\t\tconst cleaned: Node[] = [];\n\t\tlet lastChild: Node;\n\n\t\tlet windowComponent;\n\n\t\tthis.children.forEach((child: Node) => {\n\t\t\tif (child.type === 'Comment') return;\n\n\t\t\t// special case — this is an easy way to remove whitespace surrounding\n\t\t\t// <:Window/>. lil hacky but it works\n\t\t\tif (child.type === 'Window') {\n\t\t\t\twindowComponent = child;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (child.type === 'Text' && lastChild && lastChild.type === 'Text') {\n\t\t\t\tlastChild.data += child.data;\n\t\t\t\tlastChild.end = child.end;\n\t\t\t} else {\n\t\t\t\tif (child.type === 'Text' && stripWhitespace && cleaned.length === 0) {\n\t\t\t\t\tchild.data = trimStart(child.data);\n\t\t\t\t\tif (child.data) cleaned.push(child);\n\t\t\t\t} else {\n\t\t\t\t\tcleaned.push(child);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastChild = child;\n\t\t});\n\n\t\tlastChild = null;\n\n\t\tcleaned.forEach((child: Node, i: number) => {\n\t\t\tchild.canUseInnerHTML = !this.generator.hydratable;\n\n\t\t\tchild.init(block, stripWhitespace, cleaned[i + 1] || nextSibling);\n\n\t\t\tif (child.shouldSkip) return;\n\n\t\t\tif (lastChild) lastChild.next = child;\n\t\t\tchild.prev = lastChild;\n\n\t\t\tlastChild = child;\n\t\t});\n\n\t\t// We want to remove trailing whitespace inside an element/component/block,\n\t\t// *unless* there is no whitespace between this node and its next sibling\n\t\tif (stripWhitespace && lastChild && lastChild.type === 'Text') {\n\t\t\tconst shouldTrim = (\n\t\t\t\tnextSibling ?  (nextSibling.type === 'Text' && /^\\s/.test(nextSibling.data)) : !this.hasAncestor('EachBlock')\n\t\t\t);\n\n\t\t\tif (shouldTrim) {\n\t\t\t\tlastChild.data = trimEnd(lastChild.data);\n\t\t\t\tif (!lastChild.data) {\n\t\t\t\t\tcleaned.pop();\n\t\t\t\t\tlastChild = cleaned[cleaned.length - 1];\n\t\t\t\t\tlastChild.next = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.children = cleaned;\n\t\tif (windowComponent) cleaned.unshift(windowComponent);\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\t// implemented by subclasses\n\t}\n\n\tisDomNode() {\n\t\treturn this.type === 'Element' || this.type === 'Text' || this.type === 'MustacheTag';\n\t}\n\n\thasAncestor(type: string) {\n\t\treturn this.parent ?\n\t\t\tthis.parent.type === type || this.parent.hasAncestor(type) :\n\t\t\tfalse;\n\t}\n\n\tfindNearest(selector: RegExp) {\n\t\tif (selector.test(this.type)) return this;\n\t\tif (this.parent) return this.parent.findNearest(selector);\n\t}\n\n\tgetOrCreateAnchor(block: Block, parentNode: string, parentNodes: string) {\n\t\t// TODO use this in EachBlock and IfBlock — tricky because\n\t\t// children need to be created first\n\t\tconst needsAnchor = this.next ? !this.next.isDomNode() : !parentNode || !this.parent.isDomNode();\n\t\tconst anchor = needsAnchor\n\t\t\t? block.getUniqueName(`${this.var}_anchor`)\n\t\t\t: (this.next && this.next.var) || 'null';\n\n\t\tif (needsAnchor) {\n\t\t\tblock.addElement(\n\t\t\t\tanchor,\n\t\t\t\t`@createComment()`,\n\t\t\t\tparentNodes && `@createComment()`,\n\t\t\t\tparentNode\n\t\t\t);\n\t\t}\n\n\t\treturn anchor;\n\t}\n\n\tgetUpdateMountNode(anchor: string) {\n\t\treturn this.parent.isDomNode() ? this.parent.var : `${anchor}.parentNode`;\n\t}\n\n\tremount(name: string) {\n\t\treturn `${this.var}.m(${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`}, null);`;\n\t}\n}","import { DomGenerator } from '../generators/dom/index';\nimport { Node } from '../interfaces';\n\nexport default function createDebuggingComment(node: Node, generator: DomGenerator) {\n\tconst { locate, source } = generator;\n\n\tlet c = node.start;\n\tif (node.type === 'ElseBlock') {\n\t\twhile (source[c] !== '{') c -= 1;\n\t\tc -= 1;\n\t}\n\n\tlet d = node.expression ? node.expression.end : c;\n\twhile (source[d] !== '}') d += 1;\n\td += 2;\n\n\tconst start = locate(c);\n\tconst loc = `(${start.line + 1}:${start.column})`;\n\n\treturn `${loc} ${source.slice(c, d)}`.replace(/\\s/g, ' ');\n}\n","import deindent from '../../utils/deindent';\nimport Node from './shared/Node';\nimport { DomGenerator } from '../dom/index';\nimport Block from '../dom/Block';\nimport PendingBlock from './PendingBlock';\nimport ThenBlock from './ThenBlock';\nimport CatchBlock from './CatchBlock';\nimport createDebuggingComment from '../../utils/createDebuggingComment';\n\nexport default class AwaitBlock extends Node {\n\tvalue: string;\n\terror: string;\n\texpression: Node;\n\n\tpending: PendingBlock;\n\tthen: ThenBlock;\n\tcatch: CatchBlock;\n\n\tinit(\n\t\tblock: Block,\n\t\tstripWhitespace: boolean,\n\t\tnextSibling: Node\n\t) {\n\t\tthis.cannotUseInnerHTML();\n\n\t\tthis.var = block.getUniqueName('await_block');\n\t\tblock.addDependencies(this.metadata.dependencies);\n\n\t\tlet dynamic = false;\n\n\t\t[\n\t\t\t['pending', null],\n\t\t\t['then', this.value],\n\t\t\t['catch', this.error]\n\t\t].forEach(([status, arg]) => {\n\t\t\tconst child = this[status];\n\n\t\t\tchild.block = block.child({\n\t\t\t\tcomment: createDebuggingComment(child, this.generator),\n\t\t\t\tname: this.generator.getUniqueName(`create_${status}_block`),\n\t\t\t\tcontexts: new Map(block.contexts),\n\t\t\t\tcontextTypes: new Map(block.contextTypes)\n\t\t\t});\n\n\t\t\tif (arg) {\n\t\t\t\tchild.block.context = arg;\n\t\t\t\tchild.block.contexts.set(arg, arg); // TODO should be using getUniqueName\n\t\t\t\tchild.block.contextTypes.set(arg, status);\n\t\t\t}\n\n\t\t\tchild.initChildren(child.block, stripWhitespace, nextSibling);\n\t\t\tthis.generator.blocks.push(child.block);\n\n\t\t\tif (child.block.dependencies.size > 0) {\n\t\t\t\tdynamic = true;\n\t\t\t\tblock.addDependencies(child.block.dependencies);\n\t\t\t}\n\t\t});\n\n\t\tthis.pending.block.hasUpdateMethod = dynamic;\n\t\tthis.then.block.hasUpdateMethod = dynamic;\n\t\tthis.catch.block.hasUpdateMethod = dynamic;\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst name = this.var;\n\n\t\tconst anchor = this.getOrCreateAnchor(block, parentNode, parentNodes);\n\t\tconst updateMountNode = this.getUpdateMountNode(anchor);\n\n\t\tblock.contextualise(this.expression);\n\t\tconst { snippet } = this.metadata;\n\n\t\tconst promise = block.getUniqueName(`promise`);\n\t\tconst resolved = block.getUniqueName(`resolved`);\n\t\tconst await_block = block.getUniqueName(`await_block`);\n\t\tconst await_block_type = block.getUniqueName(`await_block_type`);\n\t\tconst token = block.getUniqueName(`token`);\n\t\tconst await_token = block.getUniqueName(`await_token`);\n\t\tconst handle_promise = block.getUniqueName(`handle_promise`);\n\t\tconst replace_await_block = block.getUniqueName(`replace_await_block`);\n\t\tconst old_block = block.getUniqueName(`old_block`);\n\t\tconst value = block.getUniqueName(`value`);\n\t\tconst error = block.getUniqueName(`error`);\n\t\tconst create_pending_block = this.pending.block.name;\n\t\tconst create_then_block = this.then.block.name;\n\t\tconst create_catch_block = this.catch.block.name;\n\n\t\tblock.addVariable(await_block);\n\t\tblock.addVariable(await_block_type);\n\t\tblock.addVariable(await_token);\n\t\tblock.addVariable(promise);\n\t\tblock.addVariable(resolved);\n\n\t\t// the `#component.root.set({})` below is just a cheap way to flush\n\t\t// any oncreate handlers. We could have a dedicated `flush()` method\n\t\t// but it's probably not worth it\n\n\t\tblock.builders.init.addBlock(deindent`\n\t\t\tfunction ${replace_await_block}(${token}, type, state) {\n\t\t\t\tif (${token} !== ${await_token}) return;\n\n\t\t\t\tvar ${old_block} = ${await_block};\n\t\t\t\t${await_block} = type && (${await_block_type} = type)(#component, state);\n\n\t\t\t\tif (${old_block}) {\n\t\t\t\t\t${old_block}.u();\n\t\t\t\t\t${old_block}.d();\n\t\t\t\t\t${await_block}.c();\n\t\t\t\t\t${await_block}.m(${updateMountNode}, ${anchor});\n\n\t\t\t\t\t#component.root.set({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction ${handle_promise}(${promise}, state) {\n\t\t\t\tvar ${token} = ${await_token} = {};\n\n\t\t\t\tif (@isPromise(${promise})) {\n\t\t\t\t\t${promise}.then(function(${value}) {\n\t\t\t\t\t\t${this.then.block.context ? deindent`\n\t\t\t\t\t\t\tvar state = #component.get();\n\t\t\t\t\t\t\t${resolved} = { ${this.then.block.context}: ${value} };\n\t\t\t\t\t\t\t${replace_await_block}(${token}, ${create_then_block}, @assign(@assign({}, state), ${resolved}));\n\t\t\t\t\t\t` : deindent`\n\t\t\t\t\t\t\t${replace_await_block}(${token}, null, null);\n\t\t\t\t\t\t`}\n\t\t\t\t\t}, function (${error}) {\n\t\t\t\t\t\t${this.catch.block.context ? deindent`\n\t\t\t\t\t\t\tvar state = #component.get();\n\t\t\t\t\t\t\t${resolved} = { ${this.catch.block.context}: ${error} };\n\t\t\t\t\t\t\t${replace_await_block}(${token}, ${create_catch_block}, @assign(@assign({}, state), ${resolved}));\n\t\t\t\t\t\t` : deindent`\n\t\t\t\t\t\t\t${replace_await_block}(${token}, null, null);\n\t\t\t\t\t\t`}\n\t\t\t\t\t});\n\n\t\t\t\t\t// if we previously had a then/catch block, destroy it\n\t\t\t\t\tif (${await_block_type} !== ${create_pending_block}) {\n\t\t\t\t\t\t${replace_await_block}(${token}, ${create_pending_block}, state);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t${resolved} = { ${this.then.block.context}: ${promise} };\n\t\t\t\t\tif (${await_block_type} !== ${create_then_block}) {\n\t\t\t\t\t\t${replace_await_block}(${token}, ${create_then_block}, @assign(@assign({}, state), ${resolved}));\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t${handle_promise}(${promise} = ${snippet}, state);\n\t\t`);\n\n\t\tblock.builders.create.addBlock(deindent`\n\t\t\t${await_block}.c();\n\t\t`);\n\n\t\tif (parentNodes) {\n\t\t\tblock.builders.claim.addBlock(deindent`\n\t\t\t\t${await_block}.l(${parentNodes});\n\t\t\t`);\n\t\t}\n\n\t\tconst initialMountNode = parentNode || '#target';\n\t\tconst anchorNode = parentNode ? 'null' : 'anchor';\n\n\t\tblock.builders.mount.addBlock(deindent`\n\t\t\t${await_block}.m(${initialMountNode}, ${anchorNode});\n\t\t`);\n\n\t\tconst conditions = [];\n\t\tif (this.metadata.dependencies) {\n\t\t\tconditions.push(\n\t\t\t\t`(${this.metadata.dependencies.map(dep => `'${dep}' in changed`).join(' || ')})`\n\t\t\t);\n\t\t}\n\n\t\tconditions.push(\n\t\t\t`${promise} !== (${promise} = ${snippet})`,\n\t\t\t`${handle_promise}(${promise}, state)`\n\t\t);\n\n\t\tif (this.pending.block.hasUpdateMethod) {\n\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\tif (${conditions.join(' && ')}) {\n\t\t\t\t\t// nothing\n\t\t\t\t} else {\n\t\t\t\t\t${await_block}.p(changed, @assign(@assign({}, state), ${resolved}));\n\t\t\t\t}\n\t\t\t`);\n\t\t} else {\n\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\tif (${conditions.join(' && ')}) {\n\t\t\t\t\t${await_block}.c();\n\t\t\t\t\t${await_block}.m(${anchor}.parentNode, ${anchor});\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tblock.builders.unmount.addBlock(deindent`\n\t\t\t${await_block}.u();\n\t\t`);\n\n\t\tblock.builders.destroy.addBlock(deindent`\n\t\t\t${await_token} = null;\n\t\t\t${await_block}.d();\n\t\t`);\n\n\t\t[this.pending, this.then, this.catch].forEach(status => {\n\t\t\tstatus.children.forEach(child => {\n\t\t\t\tchild.build(status.block, null,'nodes');\n\t\t\t});\n\t\t});\n\t}\n}\n","import Node from './shared/Node';\n\nexport default class Action extends Node {\n\tname: string;\n\tvalue: Node[]\n\texpression: Node\n}","import { Node } from '../interfaces';\n\nexport default function getObject(node: Node) {\n\twhile (node.type === 'MemberExpression') node = node.object;\n\treturn node;\n}\n","import { Node } from '../interfaces';\n\nexport default function getTailSnippet(node: Node) {\n\tconst end = node.end;\n\twhile (node.type === 'MemberExpression') node = node.object;\n\tconst start = node.end;\n\n\treturn `[✂${start}-${end}✂]`;\n}\n","import Node from './shared/Node';\nimport Element from './Element';\nimport getObject from '../../utils/getObject';\nimport getTailSnippet from '../../utils/getTailSnippet';\nimport flattenReference from '../../utils/flattenReference';\nimport { DomGenerator } from '../dom/index';\nimport Block from '../dom/Block';\n\nconst readOnlyMediaAttributes = new Set([\n\t'duration',\n\t'buffered',\n\t'seekable',\n\t'played'\n]);\n\nexport default class Binding extends Node {\n\tname: string;\n\tvalue: Node;\n\texpression: Node;\n\n\tmunge(\n\t\tblock: Block,\n\t\tallUsedContexts: Set<string>\n\t) {\n\t\tconst node: Element = this.parent;\n\n\t\tconst needsLock = node.name !== 'input' || !/radio|checkbox|range|color/.test(node.getStaticAttributeValue('type'));\n\t\tconst isReadOnly = node.isMediaNode() && readOnlyMediaAttributes.has(this.name);\n\n\t\tlet updateCondition: string;\n\n\t\tconst { name } = getObject(this.value);\n\t\tconst { contexts } = block.contextualise(this.value);\n\t\tconst { snippet } = this.metadata;\n\n\t\t// special case: if you have e.g. `<input type=checkbox bind:checked=selected.done>`\n\t\t// and `selected` is an object chosen with a <select>, then when `checked` changes,\n\t\t// we need to tell the component to update all the values `selected` might be\n\t\t// pointing to\n\t\t// TODO should this happen in preprocess?\n\t\tconst dependencies = this.metadata.dependencies.slice();\n\t\tthis.metadata.dependencies.forEach((prop: string) => {\n\t\t\tconst indirectDependencies = this.generator.indirectDependencies.get(prop);\n\t\t\tif (indirectDependencies) {\n\t\t\t\tindirectDependencies.forEach(indirectDependency => {\n\t\t\t\t\tif (!~dependencies.indexOf(indirectDependency)) dependencies.push(indirectDependency);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tcontexts.forEach(context => {\n\t\t\tallUsedContexts.add(context);\n\t\t});\n\n\t\t// view to model\n\t\tconst valueFromDom = getValueFromDom(this.generator, node, this);\n\t\tconst handler = getEventHandler(this.generator, block, name, snippet, this, dependencies, valueFromDom);\n\n\t\t// model to view\n\t\tlet updateDom = getDomUpdater(node, this, snippet);\n\t\tlet initialUpdate = updateDom;\n\n\t\t// special cases\n\t\tif (this.name === 'group') {\n\t\t\tconst bindingGroup = getBindingGroup(this.generator, this.value);\n\n\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t`#component._bindingGroups[${bindingGroup}].push(${node.var});`\n\t\t\t);\n\n\t\t\tblock.builders.destroy.addLine(\n\t\t\t\t`#component._bindingGroups[${bindingGroup}].splice(#component._bindingGroups[${bindingGroup}].indexOf(${node.var}), 1);`\n\t\t\t);\n\t\t}\n\n\t\tif (this.name === 'currentTime' || this.name === 'volume') {\n\t\t\tupdateCondition = `!isNaN(${snippet})`;\n\n\t\t\tif (this.name === 'currentTime')\n\t\t\t\tinitialUpdate = null;\n\t\t}\n\n\t\tif (this.name === 'paused') {\n\t\t\t// this is necessary to prevent audio restarting by itself\n\t\t\tconst last = block.getUniqueName(`${node.var}_is_paused`);\n\t\t\tblock.addVariable(last, 'true');\n\n\t\t\tupdateCondition = `${last} !== (${last} = ${snippet})`;\n\t\t\tupdateDom = `${node.var}[${last} ? \"pause\" : \"play\"]();`;\n\t\t\tinitialUpdate = null;\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tobject: name,\n\t\t\thandler,\n\t\t\tupdateDom,\n\t\t\tinitialUpdate,\n\t\t\tneedsLock: !isReadOnly && needsLock,\n\t\t\tupdateCondition,\n\t\t\tisReadOnlyMediaAttribute: this.isReadOnlyMediaAttribute()\n\t\t};\n\t}\n\n\tisReadOnlyMediaAttribute() {\n\t\treturn readOnlyMediaAttributes.has(this.name);\n\t}\n}\n\nfunction getDomUpdater(\n\tnode: Element,\n\tbinding: Binding,\n\tsnippet: string\n) {\n\tif (binding.isReadOnlyMediaAttribute()) {\n\t\treturn null;\n\t}\n\n\tif (node.name === 'select') {\n\t\treturn node.getStaticAttributeValue('multiple') === true ?\n\t\t\t`@selectOptions(${node.var}, ${snippet})` :\n\t\t\t`@selectOption(${node.var}, ${snippet})`;\n\t}\n\n\tif (binding.name === 'group') {\n\t\tconst type = node.getStaticAttributeValue('type');\n\n\t\tconst condition = type === 'checkbox'\n\t\t\t? `~${snippet}.indexOf(${node.var}.__value)`\n\t\t\t: `${node.var}.__value === ${snippet}`;\n\n\t\treturn `${node.var}.checked = ${condition};`\n\t}\n\n\treturn `${node.var}.${binding.name} = ${snippet};`;\n}\n\nfunction getBindingGroup(generator: DomGenerator, value: Node) {\n\tconst { parts } = flattenReference(value); // TODO handle cases involving computed member expressions\n\tconst keypath = parts.join('.');\n\n\t// TODO handle contextual bindings — `keypath` should include unique ID of\n\t// each block that provides context\n\tlet index = generator.bindingGroups.indexOf(keypath);\n\tif (index === -1) {\n\t\tindex = generator.bindingGroups.length;\n\t\tgenerator.bindingGroups.push(keypath);\n\t}\n\n\treturn index;\n}\n\nfunction getEventHandler(\n\tgenerator: DomGenerator,\n\tblock: Block,\n\tname: string,\n\tsnippet: string,\n\tattribute: Node,\n\tdependencies: string[],\n\tvalue: string,\n) {\n\tlet storeDependencies = [];\n\n\tif (generator.options.store) {\n\t\tstoreDependencies = dependencies.filter(prop => prop[0] === '$').map(prop => prop.slice(1));\n\t\tdependencies = dependencies.filter(prop => prop[0] !== '$');\n\t}\n\n\tif (block.contexts.has(name)) {\n\t\tconst tail = attribute.value.type === 'MemberExpression'\n\t\t\t? getTailSnippet(attribute.value)\n\t\t\t: '';\n\n\t\tconst list = `context.${block.listNames.get(name)}`;\n\t\tconst index = `context.${block.indexNames.get(name)}`;\n\n\t\treturn {\n\t\t\tusesContext: true,\n\t\t\tusesState: true,\n\t\t\tusesStore: storeDependencies.length > 0,\n\t\t\tmutation: `${list}[${index}]${tail} = ${value};`,\n\t\t\tprops: dependencies.map(prop => `${prop}: state.${prop}`),\n\t\t\tstoreProps: storeDependencies.map(prop => `${prop}: $.${prop}`)\n\t\t};\n\t}\n\n\tif (attribute.value.type === 'MemberExpression') {\n\t\t// This is a little confusing, and should probably be tidied up\n\t\t// at some point. It addresses a tricky bug (#893), wherein\n\t\t// Svelte tries to `set()` a computed property, which throws an\n\t\t// error in dev mode. a) it's possible that we should be\n\t\t// replacing computations with *their* dependencies, and b)\n\t\t// we should probably populate `generator.readonly` sooner so\n\t\t// that we don't have to do the `.some()` here\n\t\tdependencies = dependencies.filter(prop => !generator.computations.some(computation => computation.key === prop));\n\n\t\treturn {\n\t\t\tusesContext: false,\n\t\t\tusesState: true,\n\t\t\tusesStore: storeDependencies.length > 0,\n\t\t\tmutation: `${snippet} = ${value}`,\n\t\t\tprops: dependencies.map((prop: string) => `${prop}: state.${prop}`),\n\t\t\tstoreProps: storeDependencies.map(prop => `${prop}: $.${prop}`)\n\t\t};\n\t}\n\n\tlet props;\n\tlet storeProps;\n\n\tif (generator.options.store && name[0] === '$') {\n\t\tprops = [];\n\t\tstoreProps = [`${name.slice(1)}: ${value}`];\n\t} else {\n\t\tprops = [`${name}: ${value}`];\n\t\tstoreProps = [];\n\t}\n\n\treturn {\n\t\tusesContext: false,\n\t\tusesState: false,\n\t\tusesStore: false,\n\t\tmutation: null,\n\t\tprops,\n\t\tstoreProps\n\t};\n}\n\nfunction getValueFromDom(\n\tgenerator: DomGenerator,\n\tnode: Element,\n\tbinding: Node\n) {\n\t// <select bind:value='selected>\n\tif (node.name === 'select') {\n\t\treturn node.getStaticAttributeValue('multiple') === true ?\n\t\t\t`@selectMultipleValue(${node.var})` :\n\t\t\t`@selectValue(${node.var})`;\n\t}\n\n\tconst type = node.getStaticAttributeValue('type');\n\n\t// <input type='checkbox' bind:group='foo'>\n\tif (binding.name === 'group') {\n\t\tconst bindingGroup = getBindingGroup(generator, binding.value);\n\t\tif (type === 'checkbox') {\n\t\t\treturn `@getBindingGroupValue(#component._bindingGroups[${bindingGroup}])`;\n\t\t}\n\n\t\treturn `${node.var}.__value`;\n\t}\n\n\t// <input type='range|number' bind:value>\n\tif (type === 'range' || type === 'number') {\n\t\treturn `@toNumber(${node.var}.${binding.name})`;\n\t}\n\n\tif ((binding.name === 'buffered' || binding.name === 'seekable' || binding.name === 'played')) {\n\t\treturn `@timeRangesToArray(${node.var}.${binding.name})`\n\t}\n\n\t// everything else\n\treturn `${node.var}.${binding.name}`;\n}\n\nfunction isComputed(node: Node) {\n\twhile (node.type === 'MemberExpression') {\n\t\tif (node.computed) return true;\n\t\tnode = node.object;\n\t}\n\n\treturn false;\n}\n","import Node from './shared/Node';\nimport Block from '../dom/Block';\n\nexport default class CatchBlock extends Node {\n\tblock: Block;\n\tchildren: Node[];\n}","import Node from './shared/Node';\n\nexport default class Comment extends Node {\n\ttype: 'Comment'\n}","export default function stringifyProps(props: string[]) {\n\tif (!props.length) return '{}';\n\n\tconst joined = props.join(', ');\n\tif (joined.length > 40) {\n\t\t// make larger data objects readable\n\t\treturn `{\\n\\t${props.join(',\\n\\t')}\\n}`;\n\t}\n\n\treturn `{ ${joined} }`;\n}","import isValidIdentifier from './isValidIdentifier';\nimport reservedNames from './reservedNames';\n\nexport default function quoteIfNecessary(name: string, legacy?: boolean) {\n\tif (!isValidIdentifier(name) || (legacy && reservedNames.has(name))) return `\"${name}\"`;\n\treturn name;\n}","import { stringify } from '../../../utils/stringify';\nimport getExpressionPrecedence from '../../../utils/getExpressionPrecedence';\nimport Node from './Node';\nimport Attribute from '../Attribute';\nimport Block from '../../dom/Block';\n\ntype MungedAttribute = {\n\tspread: boolean;\n\tname: string;\n\tvalue: string | true;\n\tdependencies: string[];\n\tdynamic: boolean;\n}\n\nexport default function mungeAttribute(attribute: Node, block: Block): MungedAttribute {\n\tif (attribute.type === 'Spread') {\n\t\tblock.contextualise(attribute.expression); // TODO remove\n\t\tconst { dependencies, snippet } = attribute.metadata;\n\n\t\treturn {\n\t\t\tspread: true,\n\t\t\tname: null,\n\t\t\tvalue: snippet,\n\t\t\tdynamic: dependencies.length > 0,\n\t\t\tdependencies\n\t\t};\n\t}\n\n\tif (attribute.value === true) {\n\t\t// attributes without values, e.g. <textarea readonly>\n\t\treturn {\n\t\t\tspread: false,\n\t\t\tname: attribute.name,\n\t\t\tvalue: true,\n\t\t\tdynamic: false,\n\t\t\tdependencies: []\n\t\t};\n\t}\n\n\tif (attribute.value.length === 0) {\n\t\treturn {\n\t\t\tspread: false,\n\t\t\tname: attribute.name,\n\t\t\tvalue: `''`,\n\t\t\tdynamic: false,\n\t\t\tdependencies: []\n\t\t};\n\t}\n\n\tif (attribute.value.length === 1) {\n\t\tconst value = attribute.value[0];\n\n\t\tif (value.type === 'Text') {\n\t\t\t// static attributes\n\t\t\treturn {\n\t\t\t\tspread: false,\n\t\t\t\tname: attribute.name,\n\t\t\t\tvalue: isNaN(value.data) ? stringify(value.data) : value.data,\n\t\t\t\tdynamic: false,\n\t\t\t\tdependencies: []\n\t\t\t};\n\t\t}\n\n\t\t// simple dynamic attributes\n\t\tblock.contextualise(value.expression); // TODO remove\n\t\tconst { dependencies, snippet } = value.metadata;\n\n\t\t// TODO only update attributes that have changed\n\t\treturn {\n\t\t\tspread: false,\n\t\t\tname: attribute.name,\n\t\t\tvalue: snippet,\n\t\t\tdependencies,\n\t\t\tdynamic: true\n\t\t};\n\t}\n\n\t// otherwise we're dealing with a complex dynamic attribute\n\tconst allDependencies = new Set();\n\n\tconst value =\n\t\t(attribute.value[0].type === 'Text' ? '' : `\"\" + `) +\n\t\tattribute.value\n\t\t\t.map((chunk: Node) => {\n\t\t\t\tif (chunk.type === 'Text') {\n\t\t\t\t\treturn stringify(chunk.data);\n\t\t\t\t} else {\n\t\t\t\t\tblock.contextualise(chunk.expression); // TODO remove\n\t\t\t\t\tconst { dependencies, snippet } = chunk.metadata;\n\n\t\t\t\t\tdependencies.forEach((dependency: string) => {\n\t\t\t\t\t\tallDependencies.add(dependency);\n\t\t\t\t\t});\n\n\t\t\t\t\treturn getExpressionPrecedence(chunk.expression) <= 13 ? `(${snippet})` : snippet;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.join(' + ');\n\n\treturn {\n\t\tspread: false,\n\t\tname: attribute.name,\n\t\tvalue,\n\t\tdependencies: Array.from(allDependencies),\n\t\tdynamic: true\n\t};\n}","import deindent from '../../utils/deindent';\nimport flattenReference from '../../utils/flattenReference';\nimport validCalleeObjects from '../../utils/validCalleeObjects';\nimport stringifyProps from '../../utils/stringifyProps';\nimport CodeBuilder from '../../utils/CodeBuilder';\nimport getTailSnippet from '../../utils/getTailSnippet';\nimport getObject from '../../utils/getObject';\nimport quoteIfNecessary from '../../utils/quoteIfNecessary';\nimport mungeAttribute from './shared/mungeAttribute';\nimport Node from './shared/Node';\nimport Block from '../dom/Block';\nimport Attribute from './Attribute';\n\nexport default class Component extends Node {\n\ttype: 'Component';\n\tname: string;\n\tattributes: Attribute[];\n\tchildren: Node[];\n\n\tinit(\n\t\tblock: Block,\n\t\tstripWhitespace: boolean,\n\t\tnextSibling: Node\n\t) {\n\t\tthis.cannotUseInnerHTML();\n\n\t\tthis.attributes.forEach((attribute: Node) => {\n\t\t\tif (attribute.type === 'Attribute' && attribute.value !== true) {\n\t\t\t\tattribute.value.forEach((chunk: Node) => {\n\t\t\t\t\tif (chunk.type !== 'Text') {\n\t\t\t\t\t\tconst dependencies = chunk.metadata.dependencies;\n\t\t\t\t\t\tblock.addDependencies(dependencies);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (attribute.type === 'EventHandler' && attribute.expression) {\n\t\t\t\t\tattribute.expression.arguments.forEach((arg: Node) => {\n\t\t\t\t\t\tblock.addDependencies(arg.metadata.dependencies);\n\t\t\t\t\t});\n\t\t\t\t} else if (attribute.type === 'Binding') {\n\t\t\t\t\tblock.addDependencies(attribute.metadata.dependencies);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.var = block.getUniqueName(\n\t\t\t(\n\t\t\t\tthis.name === ':Self' ? this.generator.name :\n\t\t\t\tthis.name === ':Component' ? 'switch_instance' :\n\t\t\t\tthis.name\n\t\t\t).toLowerCase()\n\t\t);\n\n\t\tif (this.children.length) {\n\t\t\tthis._slots = new Set(['default']);\n\n\t\t\tthis.children.forEach(child => {\n\t\t\t\tchild.init(block, stripWhitespace, nextSibling);\n\t\t\t});\n\t\t}\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst { generator } = this;\n\t\tgenerator.hasComponents = true;\n\n\t\tconst name = this.var;\n\n\t\tconst componentInitProperties = [`root: #component.root`];\n\n\t\tif (this.children.length > 0) {\n\t\t\tconst slots = Array.from(this._slots).map(name => `${quoteIfNecessary(name, generator.legacy)}: @createFragment()`);\n\t\t\tcomponentInitProperties.push(`slots: { ${slots.join(', ')} }`);\n\n\t\t\tthis.children.forEach((child: Node) => {\n\t\t\t\tchild.build(block, `${this.var}._slotted${generator.legacy ? `[\"default\"]` : `.default`}`, 'nodes');\n\t\t\t});\n\t\t}\n\n\t\tconst allContexts = new Set();\n\t\tconst statements: string[] = [];\n\n\t\tconst name_initial_data = block.getUniqueName(`${name}_initial_data`);\n\t\tconst name_changes = block.getUniqueName(`${name}_changes`);\n\t\tlet name_updating: string;\n\t\tlet beforecreate: string = null;\n\n\t\tconst attributes = this.attributes\n\t\t\t.filter(a => a.type === 'Attribute' || a.type === 'Spread')\n\t\t\t.map(a => mungeAttribute(a, block));\n\n\t\tconst bindings = this.attributes\n\t\t\t.filter(a => a.type === 'Binding')\n\t\t\t.map(a => mungeBinding(a, block));\n\n\t\tconst eventHandlers = this.attributes\n\t\t\t.filter((a: Node) => a.type === 'EventHandler')\n\t\t\t.map(a => mungeEventHandler(generator, this, a, block, allContexts));\n\n\t\tconst ref = this.attributes.find((a: Node) => a.type === 'Ref');\n\t\tif (ref) generator.usesRefs = true;\n\n\t\tconst updates: string[] = [];\n\n\t\tconst usesSpread = !!attributes.find(a => a.spread);\n\n\t\tconst attributeObject = usesSpread\n\t\t\t? '{}'\n\t\t\t: stringifyProps(\n\t\t\t\tattributes.map((attribute: Attribute) => `${attribute.name}: ${attribute.value}`)\n\t\t\t);\n\n\t\tif (attributes.length || bindings.length) {\n\t\t\tcomponentInitProperties.push(`data: ${name_initial_data}`);\n\t\t}\n\n\t\tif ((!usesSpread && attributes.filter(a => a.dynamic).length) || bindings.length) {\n\t\t\tupdates.push(`var ${name_changes} = {};`);\n\t\t}\n\n\t\tif (attributes.length) {\n\t\t\tif (usesSpread) {\n\t\t\t\tconst levels = block.getUniqueName(`${this.var}_spread_levels`);\n\n\t\t\t\tconst initialProps = [];\n\t\t\t\tconst changes = [];\n\n\t\t\t\tattributes\n\t\t\t\t\t.forEach(munged => {\n\t\t\t\t\t\tconst { spread, name, dynamic, value, dependencies } = munged;\n\n\t\t\t\t\t\tif (spread) {\n\t\t\t\t\t\t\tinitialProps.push(value);\n\n\t\t\t\t\t\t\tconst condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');\n\t\t\t\t\t\t\tchanges.push(condition ? `${condition} && ${value}` : value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst obj = `{ ${quoteIfNecessary(name, this.generator.legacy)}: ${value} }`;\n\t\t\t\t\t\t\tinitialProps.push(obj);\n\n\t\t\t\t\t\t\tconst condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');\n\t\t\t\t\t\t\tchanges.push(condition ? `${condition} && ${obj}` : obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\tblock.addVariable(levels);\n\n\t\t\t\tstatements.push(deindent`\n\t\t\t\t\t${levels} = [\n\t\t\t\t\t\t${initialProps.join(',\\n')}\n\t\t\t\t\t];\n\n\t\t\t\t\tfor (var #i = 0; #i < ${levels}.length; #i += 1) {\n\t\t\t\t\t\t${name_initial_data} = @assign(${name_initial_data}, ${levels}[#i]);\n\t\t\t\t\t}\n\t\t\t\t`);\n\n\t\t\t\tupdates.push(deindent`\n\t\t\t\t\tvar ${name_changes} = @getSpreadUpdate(${levels}, [\n\t\t\t\t\t\t${changes.join(',\\n')}\n\t\t\t\t\t]);\n\t\t\t\t`);\n\t\t\t} else {\n\t\t\t\tattributes\n\t\t\t\t\t.filter((attribute: Attribute) => attribute.dynamic)\n\t\t\t\t\t.forEach((attribute: Attribute) => {\n\t\t\t\t\t\tif (attribute.dependencies.length) {\n\t\t\t\t\t\t\tupdates.push(deindent`\n\t\t\t\t\t\t\t\tif (${attribute.dependencies\n\t\t\t\t\t\t\t\t\t.map(dependency => `changed.${dependency}`)\n\t\t\t\t\t\t\t\t\t.join(' || ')}) ${name_changes}.${attribute.name} = ${attribute.value};\n\t\t\t\t\t\t\t`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// TODO this is an odd situation to encounter – I *think* it should only happen with\n\t\t\t\t\t\t\t// each block indices, in which case it may be possible to optimise this\n\t\t\t\t\t\t\tupdates.push(`${name_changes}.${attribute.name} = ${attribute.value};`);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t}\n\n\t\tif (bindings.length) {\n\t\t\tgenerator.hasComplexBindings = true;\n\n\t\t\tname_updating = block.alias(`${name}_updating`);\n\t\t\tblock.addVariable(name_updating, '{}');\n\n\t\t\tlet hasLocalBindings = false;\n\t\t\tlet hasStoreBindings = false;\n\n\t\t\tconst builder = new CodeBuilder();\n\n\t\t\tbindings.forEach((binding: Binding) => {\n\t\t\t\tlet { name: key } = getObject(binding.value);\n\n\t\t\t\tbinding.contexts.forEach(context => {\n\t\t\t\t\tallContexts.add(context);\n\t\t\t\t});\n\n\t\t\t\tlet setFromChild;\n\n\t\t\t\tif (block.contexts.has(key)) {\n\t\t\t\t\tconst computed = isComputed(binding.value);\n\t\t\t\t\tconst tail = binding.value.type === 'MemberExpression' ? getTailSnippet(binding.value) : '';\n\n\t\t\t\t\tconst list = block.listNames.get(key);\n\t\t\t\t\tconst index = block.indexNames.get(key);\n\n\t\t\t\t\tsetFromChild = deindent`\n\t\t\t\t\t\t${list}[${index}]${tail} = childState.${binding.name};\n\n\t\t\t\t\t\t${binding.dependencies\n\t\t\t\t\t\t\t.map((name: string) => {\n\t\t\t\t\t\t\t\tconst isStoreProp = generator.options.store && name[0] === '$';\n\t\t\t\t\t\t\t\tconst prop = isStoreProp ? name.slice(1) : name;\n\t\t\t\t\t\t\t\tconst newState = isStoreProp ? 'newStoreState' : 'newState';\n\n\t\t\t\t\t\t\t\tif (isStoreProp) hasStoreBindings = true;\n\t\t\t\t\t\t\t\telse hasLocalBindings = true;\n\n\t\t\t\t\t\t\t\treturn `${newState}.${prop} = state.${name};`;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t`;\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tconst isStoreProp = generator.options.store && key[0] === '$';\n\t\t\t\t\tconst prop = isStoreProp ? key.slice(1) : key;\n\t\t\t\t\tconst newState = isStoreProp ? 'newStoreState' : 'newState';\n\n\t\t\t\t\tif (isStoreProp) hasStoreBindings = true;\n\t\t\t\t\telse hasLocalBindings = true;\n\n\t\t\t\t\tif (binding.value.type === 'MemberExpression') {\n\t\t\t\t\t\tsetFromChild = deindent`\n\t\t\t\t\t\t\t${binding.snippet} = childState.${binding.name};\n\t\t\t\t\t\t\t${newState}.${prop} = state.${key};\n\t\t\t\t\t\t`;\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\t\t\t\t\t\tsetFromChild = `${newState}.${prop} = childState.${binding.name};`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstatements.push(deindent`\n\t\t\t\t\tif (${binding.prop} in ${binding.obj}) {\n\t\t\t\t\t\t${name_initial_data}.${binding.name} = ${binding.snippet};\n\t\t\t\t\t\t${name_updating}.${binding.name} = true;\n\t\t\t\t\t}`\n\t\t\t\t);\n\n\t\t\t\tbuilder.addConditional(\n\t\t\t\t\t`!${name_updating}.${binding.name} && changed.${binding.name}`,\n\t\t\t\t\tsetFromChild\n\t\t\t\t);\n\n\t\t\t\tupdates.push(deindent`\n\t\t\t\t\tif (!${name_updating}.${binding.name} && ${binding.dependencies.map((dependency: string) => `changed.${dependency}`).join(' || ')}) {\n\t\t\t\t\t\t${name_changes}.${binding.name} = ${binding.snippet};\n\t\t\t\t\t\t${name_updating}.${binding.name} = true;\n\t\t\t\t\t}\n\t\t\t\t`);\n\t\t\t});\n\n\t\t\tconst initialisers = [\n\t\t\t\t'state = #component.get()',\n\t\t\t\thasLocalBindings && 'newState = {}',\n\t\t\t\thasStoreBindings && 'newStoreState = {}',\n\t\t\t].filter(Boolean).join(', ');\n\n\t\t\tcomponentInitProperties.push(deindent`\n\t\t\t\t_bind: function(changed, childState) {\n\t\t\t\t\tvar ${initialisers};\n\t\t\t\t\t${builder}\n\t\t\t\t\t${hasStoreBindings && `#component.store.set(newStoreState);`}\n\t\t\t\t\t${hasLocalBindings && `#component._set(newState);`}\n\t\t\t\t\t${name_updating} = {};\n\t\t\t\t}\n\t\t\t`);\n\n\t\t\tbeforecreate = deindent`\n\t\t\t\t#component.root._beforecreate.push(function() {\n\t\t\t\t\t${name}._bind({ ${bindings.map(b => `${b.name}: 1`).join(', ')} }, ${name}.get());\n\t\t\t\t});\n\t\t\t`;\n\t\t}\n\n\t\tif (this.name === ':Component') {\n\t\t\tconst switch_value = block.getUniqueName('switch_value');\n\t\t\tconst switch_props = block.getUniqueName('switch_props');\n\n\t\t\tblock.contextualise(this.expression);\n\t\t\tconst { dependencies, snippet } = this.metadata;\n\n\t\t\tconst anchor = this.getOrCreateAnchor(block, parentNode, parentNodes);\n\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\tvar ${switch_value} = ${snippet};\n\n\t\t\t\tfunction ${switch_props}(state) {\n\t\t\t\t\t${(attributes.length || bindings.length) && deindent`\n\t\t\t\t\tvar ${name_initial_data} = ${attributeObject};`}\n\t\t\t\t\t${statements}\n\t\t\t\t\treturn {\n\t\t\t\t\t\t${componentInitProperties.join(',\\n')}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (${switch_value}) {\n\t\t\t\t\tvar ${name} = new ${switch_value}(${switch_props}(state));\n\n\t\t\t\t\t${beforecreate}\n\t\t\t\t}\n\n\t\t\t\t${eventHandlers.map(handler => deindent`\n\t\t\t\t\tfunction ${handler.var}(event) {\n\t\t\t\t\t\t${handler.body}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (${name}) ${name}.on(\"${handler.name}\", ${handler.var});\n\t\t\t\t`)}\n\t\t\t`);\n\n\t\t\tblock.builders.create.addLine(\n\t\t\t\t`if (${name}) ${name}._fragment.c();`\n\t\t\t);\n\n\t\t\tif (parentNodes) {\n\t\t\t\tblock.builders.claim.addLine(\n\t\t\t\t\t`if (${name}) ${name}._fragment.l(${parentNodes});`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tblock.builders.mount.addBlock(deindent`\n\t\t\t\tif (${name}) {\n\t\t\t\t\t${name}._mount(${parentNode || '#target'}, ${parentNode ? 'null' : 'anchor'});\n\t\t\t\t\t${ref && `#component.refs.${ref.name} = ${name};`}\n\t\t\t\t}\n\t\t\t`);\n\n\t\t\tconst updateMountNode = this.getUpdateMountNode(anchor);\n\n\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\tif (${switch_value} !== (${switch_value} = ${snippet})) {\n\t\t\t\t\tif (${name}) ${name}.destroy();\n\n\t\t\t\t\tif (${switch_value}) {\n\t\t\t\t\t\t${name} = new ${switch_value}(${switch_props}(state));\n\t\t\t\t\t\t${name}._fragment.c();\n\n\t\t\t\t\t\t${this.children.map(child => child.remount(name))}\n\t\t\t\t\t\t${name}._mount(${updateMountNode}, ${anchor});\n\n\t\t\t\t\t\t${eventHandlers.map(handler => deindent`\n\t\t\t\t\t\t\t${name}.on(\"${handler.name}\", ${handler.var});\n\t\t\t\t\t\t`)}\n\n\t\t\t\t\t\t${ref && `#component.refs.${ref.name} = ${name};`}\n\t\t\t\t\t}\n\n\t\t\t\t\t${ref && deindent`\n\t\t\t\t\t\telse if (#component.refs.${ref.name} === ${name}) {\n\t\t\t\t\t\t\t#component.refs.${ref.name} = null;\n\t\t\t\t\t\t}`}\n\t\t\t\t}\n\t\t\t`);\n\n\t\t\tif (updates.length) {\n\t\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\t\telse {\n\t\t\t\t\t\t${updates}\n\t\t\t\t\t\t${name}._set(${name_changes});\n\t\t\t\t\t\t${bindings.length && `${name_updating} = {};`}\n\t\t\t\t\t}\n\t\t\t\t`);\n\t\t\t}\n\n\t\t\tif (!parentNode) block.builders.unmount.addLine(`if (${name}) ${name}._unmount();`);\n\n\t\t\tblock.builders.destroy.addLine(`if (${name}) ${name}.destroy(false);`);\n\t\t} else {\n\t\t\tconst expression = this.name === ':Self'\n\t\t\t\t? generator.name\n\t\t\t\t: `%components-${this.name}`;\n\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\t${(attributes.length || bindings.length) && deindent`\n\t\t\t\tvar ${name_initial_data} = ${attributeObject};`}\n\t\t\t\t${statements}\n\t\t\t\tvar ${name} = new ${expression}({\n\t\t\t\t\t${componentInitProperties.join(',\\n')}\n\t\t\t\t});\n\n\t\t\t\t${beforecreate}\n\n\t\t\t\t${eventHandlers.map(handler => deindent`\n\t\t\t\t\t${name}.on(\"${handler.name}\", function(event) {\n\t\t\t\t\t\t${handler.body}\n\t\t\t\t\t});\n\t\t\t\t`)}\n\n\t\t\t\t${ref && `#component.refs.${ref.name} = ${name};`}\n\t\t\t`);\n\n\t\t\tblock.builders.create.addLine(`${name}._fragment.c();`);\n\n\t\t\tif (parentNodes) {\n\t\t\t\tblock.builders.claim.addLine(\n\t\t\t\t\t`${name}._fragment.l(${parentNodes});`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tblock.builders.mount.addLine(\n\t\t\t\t`${name}._mount(${parentNode || '#target'}, ${parentNode ? 'null' : 'anchor'});`\n\t\t\t);\n\n\t\t\tif (updates.length) {\n\t\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\t\t${updates}\n\t\t\t\t\t${name}._set(${name_changes});\n\t\t\t\t\t${bindings.length && `${name_updating} = {};`}\n\t\t\t\t`);\n\t\t\t}\n\n\t\t\tif (!parentNode) block.builders.unmount.addLine(`${name}._unmount();`);\n\n\t\t\tblock.builders.destroy.addLine(deindent`\n\t\t\t\t${name}.destroy(false);\n\t\t\t\t${ref && `if (#component.refs.${ref.name} === ${name}) #component.refs.${ref.name} = null;`}\n\t\t\t`);\n\t\t}\n\t}\n\n\tremount(name: string) {\n\t\treturn `${this.var}._mount(${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`}, null);`;\n\t}\n}\n\nfunction mungeBinding(binding: Node, block: Block): Binding {\n\tconst { name } = getObject(binding.value);\n\tconst { contexts } = block.contextualise(binding.value);\n\tconst { dependencies, snippet } = binding.metadata;\n\n\tconst contextual = block.contexts.has(name);\n\n\tlet obj;\n\tlet prop;\n\n\tif (contextual) {\n\t\tobj = `state.${block.listNames.get(name)}`;\n\t\tprop = `${block.indexNames.get(name)}`;\n\t} else if (binding.value.type === 'MemberExpression') {\n\t\tprop = `[✂${binding.value.property.start}-${binding.value.property.end}✂]`;\n\t\tif (!binding.value.computed) prop = `'${prop}'`;\n\t\tobj = `[✂${binding.value.object.start}-${binding.value.object.end}✂]`;\n\t} else {\n\t\tobj = 'state';\n\t\tprop = `'${name}'`;\n\t}\n\n\treturn {\n\t\tname: binding.name,\n\t\tvalue: binding.value,\n\t\tcontexts,\n\t\tsnippet,\n\t\tobj,\n\t\tprop,\n\t\tdependencies\n\t};\n}\n\nfunction mungeEventHandler(generator: DomGenerator, node: Node, handler: Node, block: Block, allContexts: Set<string>) {\n\tlet body;\n\n\tif (handler.expression) {\n\t\tgenerator.addSourcemapLocations(handler.expression);\n\n\t\t// TODO try out repetition between this and element counterpart\n\t\tconst flattened = flattenReference(handler.expression.callee);\n\t\t\tif (!validCalleeObjects.has(flattened.name)) {\n\t\t\t\t// allow event.stopPropagation(), this.select() etc\n\t\t\t\t// TODO verify that it's a valid callee (i.e. built-in or declared method)\n\t\t\t\tgenerator.code.prependRight(\n\t\t\t\t\thandler.expression.start,\n\t\t\t\t\t`${block.alias('component')}.`\n\t\t\t\t);\n\t\t\t}\n\n\t\thandler.expression.arguments.forEach((arg: Node) => {\n\t\t\tconst { contexts } = block.contextualise(arg, null, true);\n\n\t\t\tcontexts.forEach(context => {\n\t\t\t\tallContexts.add(context);\n\t\t\t});\n\t\t});\n\n\t\tbody = deindent`\n\t\t\t[✂${handler.expression.start}-${handler.expression.end}✂];\n\t\t`;\n\t} else {\n\t\tbody = deindent`\n\t\t\t${block.alias('component')}.fire('${handler.name}', event);\n\t\t`;\n\t}\n\n\treturn {\n\t\tname: handler.name,\n\t\tvar: block.getUniqueName(`${node.var}_${handler.name}`),\n\t\tbody\n\t};\n}\n\nfunction isComputed(node: Node) {\n\twhile (node.type === 'MemberExpression') {\n\t\tif (node.computed) return true;\n\t\tnode = node.object;\n\t}\n\n\treturn false;\n}\n","import deindent from '../../utils/deindent';\nimport Node from './shared/Node';\nimport ElseBlock from './ElseBlock';\nimport Block from '../dom/Block';\nimport createDebuggingComment from '../../utils/createDebuggingComment';\n\nexport default class EachBlock extends Node {\n\ttype: 'EachBlock';\n\n\tblock: Block;\n\texpression: Node;\n\n\titerations: string;\n\tindex: string;\n\tcontext: string;\n\tkey: string;\n\tdestructuredContexts: string[];\n\n\tchildren: Node[];\n\telse?: ElseBlock;\n\n\tinit(\n\t\tblock: Block,\n\t\tstripWhitespace: boolean,\n\t\tnextSibling: Node\n\t) {\n\t\tthis.cannotUseInnerHTML();\n\n\t\tthis.var = block.getUniqueName(`each`);\n\t\tthis.iterations = block.getUniqueName(`${this.var}_blocks`);\n\t\tthis.each_context = block.getUniqueName(`${this.var}_context`);\n\n\t\tconst { dependencies } = this.metadata;\n\t\tblock.addDependencies(dependencies);\n\n\t\tthis.block = block.child({\n\t\t\tcomment: createDebuggingComment(this, this.generator),\n\t\t\tname: this.generator.getUniqueName('create_each_block'),\n\t\t\tcontext: this.context,\n\t\t\tkey: this.key,\n\n\t\t\tcontexts: new Map(block.contexts),\n\t\t\tcontextTypes: new Map(block.contextTypes),\n\t\t\tindexes: new Map(block.indexes),\n\t\t\tchangeableIndexes: new Map(block.changeableIndexes),\n\n\t\t\tindexNames: new Map(block.indexNames),\n\t\t\tlistNames: new Map(block.listNames)\n\t\t});\n\n\t\tconst listName = this.generator.getUniqueName('each_value');\n\t\tconst indexName = this.index || this.generator.getUniqueName(`${this.context}_index`);\n\n\t\tthis.block.contextTypes.set(this.context, 'each');\n\t\tthis.block.indexNames.set(this.context, indexName);\n\t\tthis.block.listNames.set(this.context, listName);\n\n\t\tif (this.index) {\n\t\t\tthis.block.getUniqueName(this.index); // this prevents name collisions (#1254)\n\t\t\tthis.block.indexes.set(this.index, this.context);\n\t\t\tthis.block.changeableIndexes.set(this.index, this.key); // TODO is this right?\n\t\t}\n\n\t\tconst context = this.block.getUniqueName(this.context);\n\t\tthis.block.contexts.set(this.context, context); // TODO this is now redundant?\n\n\t\tif (this.destructuredContexts) {\n\t\t\tfor (let i = 0; i < this.destructuredContexts.length; i += 1) {\n\t\t\t\tconst context = this.block.getUniqueName(this.destructuredContexts[i]);\n\t\t\t\tthis.block.contexts.set(this.destructuredContexts[i], context);\n\t\t\t}\n\t\t}\n\n\t\tthis.contextProps = [\n\t\t\t`${listName}: ${listName}`,\n\t\t\t`${this.context}: ${listName}[#i]`,\n\t\t\t`${indexName}: #i`\n\t\t];\n\n\t\tif (this.destructuredContexts) {\n\t\t\tfor (let i = 0; i < this.destructuredContexts.length; i += 1) {\n\t\t\t\tthis.contextProps.push(`${this.destructuredContexts[i]}: ${listName}[#i][${i}]`);\n\t\t\t}\n\t\t}\n\n\t\tthis.generator.blocks.push(this.block);\n\t\tthis.initChildren(this.block, stripWhitespace, nextSibling);\n\t\tblock.addDependencies(this.block.dependencies);\n\t\tthis.block.hasUpdateMethod = this.block.dependencies.size > 0;\n\n\t\tif (this.else) {\n\t\t\tthis.else.block = block.child({\n\t\t\t\tcomment: createDebuggingComment(this.else, this.generator),\n\t\t\t\tname: this.generator.getUniqueName(`${this.block.name}_else`),\n\t\t\t});\n\n\t\t\tthis.generator.blocks.push(this.else.block);\n\t\t\tthis.else.initChildren(\n\t\t\t\tthis.else.block,\n\t\t\t\tstripWhitespace,\n\t\t\t\tnextSibling\n\t\t\t);\n\t\t\tthis.else.block.hasUpdateMethod = this.else.block.dependencies.size > 0;\n\t\t}\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tif (this.children.length === 0) return;\n\n\t\tconst { generator } = this;\n\n\t\tconst each = this.var;\n\n\t\tconst create_each_block = this.block.name;\n\t\tconst each_block_value = this.block.listNames.get(this.context);\n\t\tconst iterations = this.iterations;\n\n\t\tconst needsAnchor = this.next ? !this.next.isDomNode() : !parentNode || !this.parent.isDomNode();\n\t\tconst anchor = needsAnchor\n\t\t\t? block.getUniqueName(`${each}_anchor`)\n\t\t\t: (this.next && this.next.var) || 'null';\n\n\t\t// hack the sourcemap, so that if data is missing the bug\n\t\t// is easy to find\n\t\tlet c = this.start + 3;\n\t\twhile (generator.source[c] !== 'e') c += 1;\n\t\tgenerator.code.overwrite(c, c + 4, 'length');\n\t\tconst length = `[✂${c}-${c+4}✂]`;\n\n\t\tconst mountOrIntro = this.block.hasIntroMethod ? 'i' : 'm';\n\t\tconst vars = {\n\t\t\teach,\n\t\t\tcreate_each_block,\n\t\t\teach_block_value,\n\t\t\tlength,\n\t\t\titerations,\n\t\t\tanchor,\n\t\t\tmountOrIntro,\n\t\t};\n\n\t\tblock.contextualise(this.expression);\n\t\tconst { snippet } = this.metadata;\n\n\t\tblock.builders.init.addLine(`var ${each_block_value} = ${snippet};`);\n\n\t\tif (this.key) {\n\t\t\tthis.buildKeyed(block, parentNode, parentNodes, snippet, vars);\n\t\t} else {\n\t\t\tthis.buildUnkeyed(block, parentNode, parentNodes, snippet, vars);\n\t\t}\n\n\t\tif (needsAnchor) {\n\t\t\tblock.addElement(\n\t\t\t\tanchor,\n\t\t\t\t`@createComment()`,\n\t\t\t\tparentNodes && `@createComment()`,\n\t\t\t\tparentNode\n\t\t\t);\n\t\t}\n\n\t\tif (this.else) {\n\t\t\tconst each_block_else = generator.getUniqueName(`${each}_else`);\n\n\t\t\tblock.builders.init.addLine(`var ${each_block_else} = null;`);\n\n\t\t\t// TODO neaten this up... will end up with an empty line in the block\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\tif (!${each_block_value}.${length}) {\n\t\t\t\t\t${each_block_else} = ${this.else.block.name}(#component, state);\n\t\t\t\t\t${each_block_else}.c();\n\t\t\t\t}\n\t\t\t`);\n\n\t\t\tblock.builders.mount.addBlock(deindent`\n\t\t\t\tif (${each_block_else}) {\n\t\t\t\t\t${each_block_else}.${mountOrIntro}(${parentNode || '#target'}, null);\n\t\t\t\t}\n\t\t\t`);\n\n\t\t\tconst initialMountNode = parentNode || `${anchor}.parentNode`;\n\n\t\t\tif (this.else.block.hasUpdateMethod) {\n\t\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\t\tif (!${each_block_value}.${length} && ${each_block_else}) {\n\t\t\t\t\t\t${each_block_else}.p(changed, state);\n\t\t\t\t\t} else if (!${each_block_value}.${length}) {\n\t\t\t\t\t\t${each_block_else} = ${this.else.block.name}(#component, state);\n\t\t\t\t\t\t${each_block_else}.c();\n\t\t\t\t\t\t${each_block_else}.${mountOrIntro}(${initialMountNode}, ${anchor});\n\t\t\t\t\t} else if (${each_block_else}) {\n\t\t\t\t\t\t${each_block_else}.u();\n\t\t\t\t\t\t${each_block_else}.d();\n\t\t\t\t\t\t${each_block_else} = null;\n\t\t\t\t\t}\n\t\t\t\t`);\n\t\t\t} else {\n\t\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\t\tif (${each_block_value}.${length}) {\n\t\t\t\t\t\tif (${each_block_else}) {\n\t\t\t\t\t\t\t${each_block_else}.u();\n\t\t\t\t\t\t\t${each_block_else}.d();\n\t\t\t\t\t\t\t${each_block_else} = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!${each_block_else}) {\n\t\t\t\t\t\t${each_block_else} = ${this.else.block.name}(#component, state);\n\t\t\t\t\t\t${each_block_else}.c();\n\t\t\t\t\t\t${each_block_else}.${mountOrIntro}(${initialMountNode}, ${anchor});\n\t\t\t\t\t}\n\t\t\t\t`);\n\t\t\t}\n\n\t\t\tblock.builders.unmount.addLine(\n\t\t\t\t`if (${each_block_else}) ${each_block_else}.u()`\n\t\t\t);\n\n\t\t\tblock.builders.destroy.addBlock(deindent`\n\t\t\t\tif (${each_block_else}) ${each_block_else}.d();\n\t\t\t`);\n\t\t}\n\n\t\tthis.children.forEach((child: Node) => {\n\t\t\tchild.build(this.block, null, 'nodes');\n\t\t});\n\n\t\tif (this.else) {\n\t\t\tthis.else.children.forEach((child: Node) => {\n\t\t\t\tchild.build(this.else.block, null, 'nodes');\n\t\t\t});\n\t\t}\n\t}\n\n\tbuildKeyed(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string,\n\t\tsnippet: string,\n\t\t{\n\t\t\teach,\n\t\t\tcreate_each_block,\n\t\t\teach_block_value,\n\t\t\tlength,\n\t\t\tanchor,\n\t\t\tmountOrIntro,\n\t\t}\n\t) {\n\t\tconst key = block.getUniqueName('key');\n\t\tconst blocks = block.getUniqueName(`${each}_blocks`);\n\t\tconst lookup = block.getUniqueName(`${each}_lookup`);\n\n\t\tblock.addVariable(blocks, '[]');\n\t\tblock.addVariable(lookup, `@blankObject()`);\n\n\t\tif (this.children[0].isDomNode()) {\n\t\t\tthis.block.first = this.children[0].var;\n\t\t} else {\n\t\t\tthis.block.first = this.block.getUniqueName('first');\n\t\t\tthis.block.addElement(\n\t\t\t\tthis.block.first,\n\t\t\t\t`@createComment()`,\n\t\t\t\tparentNodes && `@createComment()`,\n\t\t\t\tnull\n\t\t\t);\n\t\t}\n\n\t\tblock.builders.init.addBlock(deindent`\n\t\t\tfor (var #i = 0; #i < ${each_block_value}.${length}; #i += 1) {\n\t\t\t\tvar ${key} = ${each_block_value}[#i].${this.key};\n\t\t\t\t${blocks}[#i] = ${lookup}[${key}] = ${create_each_block}(#component, ${key}, @assign(@assign({}, state), {\n\t\t\t\t\t${this.contextProps.join(',\\n')}\n\t\t\t\t}));\n\t\t\t}\n\t\t`);\n\n\t\tconst initialMountNode = parentNode || '#target';\n\t\tconst updateMountNode = this.getUpdateMountNode(anchor);\n\t\tconst anchorNode = parentNode ? 'null' : 'anchor';\n\n\t\tblock.builders.create.addBlock(deindent`\n\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].c();\n\t\t`);\n\n\t\tif (parentNodes) {\n\t\t\tblock.builders.claim.addBlock(deindent`\n\t\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].l(${parentNodes});\n\t\t\t`);\n\t\t}\n\n\t\tblock.builders.mount.addBlock(deindent`\n\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].${mountOrIntro}(${initialMountNode}, ${anchorNode});\n\t\t`);\n\n\t\tconst dynamic = this.block.hasUpdateMethod;\n\n\t\tblock.builders.update.addBlock(deindent`\n\t\t\tvar ${each_block_value} = ${snippet};\n\n\t\t\t${blocks} = @updateKeyedEach(${blocks}, #component, changed, \"${this.key}\", ${dynamic ? '1' : '0'}, ${each_block_value}, ${lookup}, ${updateMountNode}, ${String(this.block.hasOutroMethod)}, ${create_each_block}, \"${mountOrIntro}\", ${anchor}, function(#i) {\n\t\t\t\treturn @assign(@assign({}, state), {\n\t\t\t\t\t${this.contextProps.join(',\\n')}\n\t\t\t\t});\n\t\t\t});\n\t\t`);\n\n\t\tif (!parentNode) {\n\t\t\tblock.builders.unmount.addBlock(deindent`\n\t\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].u();\n\t\t\t`);\n\t\t}\n\n\t\tblock.builders.destroy.addBlock(deindent`\n\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].d();\n\t\t`);\n\t}\n\n\tbuildUnkeyed(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string,\n\t\tsnippet: string,\n\t\t{\n\t\t\tcreate_each_block,\n\t\t\teach_block_value,\n\t\t\tlength,\n\t\t\titerations,\n\t\t\tanchor,\n\t\t\tmountOrIntro,\n\t\t}\n\t) {\n\t\tblock.builders.init.addBlock(deindent`\n\t\t\tvar ${iterations} = [];\n\n\t\t\tfor (var #i = 0; #i < ${each_block_value}.${length}; #i += 1) {\n\t\t\t\t${iterations}[#i] = ${create_each_block}(#component, @assign(@assign({}, state), {\n\t\t\t\t\t${this.contextProps.join(',\\n')}\n\t\t\t\t}));\n\t\t\t}\n\t\t`);\n\n\t\tconst initialMountNode = parentNode || '#target';\n\t\tconst updateMountNode = this.getUpdateMountNode(anchor);\n\t\tconst anchorNode = parentNode ? 'null' : 'anchor';\n\n\t\tblock.builders.create.addBlock(deindent`\n\t\t\tfor (var #i = 0; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t${iterations}[#i].c();\n\t\t\t}\n\t\t`);\n\n\t\tif (parentNodes) {\n\t\t\tblock.builders.claim.addBlock(deindent`\n\t\t\t\tfor (var #i = 0; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t\t${iterations}[#i].l(${parentNodes});\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tblock.builders.mount.addBlock(deindent`\n\t\t\tfor (var #i = 0; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t${iterations}[#i].${mountOrIntro}(${initialMountNode}, ${anchorNode});\n\t\t\t}\n\t\t`);\n\n\t\tconst allDependencies = new Set(this.block.dependencies);\n\t\tconst { dependencies } = this.metadata;\n\t\tdependencies.forEach((dependency: string) => {\n\t\t\tallDependencies.add(dependency);\n\t\t});\n\n\t\t// TODO do this for keyed blocks as well\n\t\tconst condition = Array.from(allDependencies)\n\t\t\t.map(dependency => `changed.${dependency}`)\n\t\t\t.join(' || ');\n\n\t\tif (condition !== '') {\n\t\t\tconst forLoopBody = this.block.hasUpdateMethod\n\t\t\t\t? this.block.hasIntroMethod\n\t\t\t\t\t? deindent`\n\t\t\t\t\t\tif (${iterations}[#i]) {\n\t\t\t\t\t\t\t${iterations}[#i].p(changed, ${this.each_context});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t${iterations}[#i] = ${create_each_block}(#component, ${this.each_context});\n\t\t\t\t\t\t\t${iterations}[#i].c();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t${iterations}[#i].i(${updateMountNode}, ${anchor});\n\t\t\t\t\t`\n\t\t\t\t\t: deindent`\n\t\t\t\t\t\tif (${iterations}[#i]) {\n\t\t\t\t\t\t\t${iterations}[#i].p(changed, ${this.each_context});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t${iterations}[#i] = ${create_each_block}(#component, ${this.each_context});\n\t\t\t\t\t\t\t${iterations}[#i].c();\n\t\t\t\t\t\t\t${iterations}[#i].m(${updateMountNode}, ${anchor});\n\t\t\t\t\t\t}\n\t\t\t\t\t`\n\t\t\t\t: deindent`\n\t\t\t\t\t${iterations}[#i] = ${create_each_block}(#component, ${this.each_context});\n\t\t\t\t\t${iterations}[#i].c();\n\t\t\t\t\t${iterations}[#i].${mountOrIntro}(${updateMountNode}, ${anchor});\n\t\t\t\t`;\n\n\t\t\tconst start = this.block.hasUpdateMethod ? '0' : `${iterations}.length`;\n\n\t\t\tconst outro = block.getUniqueName('outro');\n\t\t\tconst destroy = this.block.hasOutroMethod\n\t\t\t\t? deindent`\n\t\t\t\t\tfunction ${outro}(i) {\n\t\t\t\t\t\tif (${iterations}[i]) {\n\t\t\t\t\t\t\t${iterations}[i].o(function() {\n\t\t\t\t\t\t\t\t${iterations}[i].u();\n\t\t\t\t\t\t\t\t${iterations}[i].d();\n\t\t\t\t\t\t\t\t${iterations}[i] = null;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (; #i < ${iterations}.length; #i += 1) ${outro}(#i);\n\t\t\t\t`\n\t\t\t\t: deindent`\n\t\t\t\t\tfor (; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t\t\t${iterations}[#i].u();\n\t\t\t\t\t\t${iterations}[#i].d();\n\t\t\t\t\t}\n\t\t\t\t\t${iterations}.length = ${each_block_value}.${length};\n\t\t\t\t`;\n\n\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\tvar ${each_block_value} = ${snippet};\n\n\t\t\t\tif (${condition}) {\n\t\t\t\t\tfor (var #i = ${start}; #i < ${each_block_value}.${length}; #i += 1) {\n\t\t\t\t\t\tvar ${this.each_context} = @assign(@assign({}, state), {\n\t\t\t\t\t\t\t${this.contextProps.join(',\\n')}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t${forLoopBody}\n\t\t\t\t\t}\n\n\t\t\t\t\t${destroy}\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tblock.builders.unmount.addBlock(deindent`\n\t\t\tfor (var #i = 0; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t${iterations}[#i].u();\n\t\t\t}\n\t\t`);\n\n\t\tblock.builders.destroy.addBlock(`@destroyEach(${iterations});`);\n\t}\n\n\tremount(name: string) {\n\t\t// TODO consider keyed blocks\n\t\treturn `for (var #i = 0; #i < ${this.iterations}.length; #i += 1) ${this.iterations}[#i].m(${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`}, null);`;\n\t}\n}\n","import deindent from '../../utils/deindent';\nimport { stringify, escapeHTML } from '../../utils/stringify';\nimport flattenReference from '../../utils/flattenReference';\nimport isVoidElementName from '../../utils/isVoidElementName';\nimport validCalleeObjects from '../../utils/validCalleeObjects';\nimport reservedNames from '../../utils/reservedNames';\nimport fixAttributeCasing from '../../utils/fixAttributeCasing';\nimport quoteIfNecessary from '../../utils/quoteIfNecessary';\nimport mungeAttribute from './shared/mungeAttribute';\nimport Node from './shared/Node';\nimport Block from '../dom/Block';\nimport Attribute from './Attribute';\nimport Binding from './Binding';\nimport EventHandler from './EventHandler';\nimport Ref from './Ref';\nimport Transition from './Transition';\nimport Action from './Action';\nimport Text from './Text';\nimport * as namespaces from '../../utils/namespaces';\n\nexport default class Element extends Node {\n\ttype: 'Element';\n\tname: string;\n\tattributes: (Attribute | Binding | EventHandler | Ref | Transition | Action)[]; // TODO split these up sooner\n\tchildren: Node[];\n\n\tinit(\n\t\tblock: Block,\n\t\tstripWhitespace: boolean,\n\t\tnextSibling: Node\n\t) {\n\t\tif (this.name === 'slot' || this.name === 'option') {\n\t\t\tthis.cannotUseInnerHTML();\n\t\t}\n\n\t\tconst parentElement = this.parent && this.parent.findNearest(/^Element/);\n\t\tthis.namespace = this.name === 'svg' ?\n\t\t\tnamespaces.svg :\n\t\t\tparentElement ? parentElement.namespace : this.generator.namespace;\n\n\t\tthis.attributes.forEach(attribute => {\n\t\t\tif (attribute.type === 'Attribute' && attribute.value !== true) {\n\t\t\t\t// special case — xmlns\n\t\t\t\tif (attribute.name === 'xmlns') {\n\t\t\t\t\t// TODO this attribute must be static – enforce at compile time\n\t\t\t\t\tthis.namespace = attribute.value[0].data;\n\t\t\t\t}\n\n\t\t\t\tattribute.value.forEach((chunk: Node) => {\n\t\t\t\t\tif (chunk.type !== 'Text') {\n\t\t\t\t\t\tif (this.parent) this.parent.cannotUseInnerHTML();\n\n\t\t\t\t\t\tconst dependencies = chunk.metadata.dependencies;\n\t\t\t\t\t\tblock.addDependencies(dependencies);\n\n\t\t\t\t\t\t// special case — <option value='{{foo}}'> — see below\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis.name === 'option' &&\n\t\t\t\t\t\t\tattribute.name === 'value'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tlet select = this.parent;\n\t\t\t\t\t\t\twhile (select && (select.type !== 'Element' || select.name !== 'select')) select = select.parent;\n\n\t\t\t\t\t\t\tif (select && select.selectBindingDependencies) {\n\t\t\t\t\t\t\t\tselect.selectBindingDependencies.forEach(prop => {\n\t\t\t\t\t\t\t\t\tdependencies.forEach((dependency: string) => {\n\t\t\t\t\t\t\t\t\t\tthis.generator.indirectDependencies.get(prop).add(dependency);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (this.parent) this.parent.cannotUseInnerHTML();\n\n\t\t\t\tif (attribute.type === 'EventHandler' && attribute.expression) {\n\t\t\t\t\tattribute.expression.arguments.forEach((arg: Node) => {\n\t\t\t\t\t\tblock.addDependencies(arg.metadata.dependencies);\n\t\t\t\t\t});\n\t\t\t\t} else if (attribute.type === 'Binding') {\n\t\t\t\t\tblock.addDependencies(attribute.metadata.dependencies);\n\t\t\t\t} else if (attribute.type === 'Transition') {\n\t\t\t\t\tif (attribute.intro)\n\t\t\t\t\t\tthis.generator.hasIntroTransitions = block.hasIntroMethod = true;\n\t\t\t\t\tif (attribute.outro) {\n\t\t\t\t\t\tthis.generator.hasOutroTransitions = block.hasOutroMethod = true;\n\t\t\t\t\t\tblock.outros += 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (attribute.type === 'Action' && attribute.expression) {\n\t\t\t\t\tblock.addDependencies(attribute.metadata.dependencies);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst valueAttribute = this.attributes.find((attribute: Attribute) => attribute.name === 'value');\n\n\t\tif (this.name === 'textarea') {\n\t\t\t// this is an egregious hack, but it's the easiest way to get <textarea>\n\t\t\t// children treated the same way as a value attribute\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tthis.attributes.push(new Attribute({\n\t\t\t\t\tgenerator: this.generator,\n\t\t\t\t\tname: 'value',\n\t\t\t\t\tvalue: this.children,\n\t\t\t\t\tparent: this\n\t\t\t\t}));\n\n\t\t\t\tthis.children = [];\n\t\t\t}\n\t\t}\n\n\t\t// special case — in a case like this...\n\t\t//\n\t\t//   <select bind:value='foo'>\n\t\t//     <option value='{{bar}}'>bar</option>\n\t\t//     <option value='{{baz}}'>baz</option>\n\t\t//   </option>\n\t\t//\n\t\t// ...we need to know that `foo` depends on `bar` and `baz`,\n\t\t// so that if `foo.qux` changes, we know that we need to\n\t\t// mark `bar` and `baz` as dirty too\n\t\tif (this.name === 'select') {\n\t\t\tconst binding = this.attributes.find(node => node.type === 'Binding' && node.name === 'value');\n\t\t\tif (binding) {\n\t\t\t\t// TODO does this also apply to e.g. `<input type='checkbox' bind:group='foo'>`?\n\t\t\t\tconst dependencies = binding.metadata.dependencies;\n\t\t\t\tthis.selectBindingDependencies = dependencies;\n\t\t\t\tdependencies.forEach((prop: string) => {\n\t\t\t\t\tthis.generator.indirectDependencies.set(prop, new Set());\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.selectBindingDependencies = null;\n\t\t\t}\n\t\t}\n\n\t\tconst slot = this.getStaticAttributeValue('slot');\n\t\tif (slot && this.hasAncestor('Component')) {\n\t\t\tthis.cannotUseInnerHTML();\n\t\t\tthis.slotted = true;\n\t\t\t// TODO validate slots — no nesting, no dynamic names...\n\t\t\tconst component = this.findNearest(/^Component/);\n\t\t\tcomponent._slots.add(slot);\n\t\t}\n\n\t\tif (this.spread) {\n\t\t\tblock.addDependencies(this.spread.metadata.dependencies);\n\t\t}\n\n\t\tthis.var = block.getUniqueName(\n\t\t\tthis.name.replace(/[^a-zA-Z0-9_$]/g, '_')\n\t\t);\n\n\t\tif (this.children.length) {\n\t\t\tif (this.name === 'pre' || this.name === 'textarea') stripWhitespace = false;\n\t\t\tthis.initChildren(block, stripWhitespace, nextSibling);\n\t\t}\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst { generator } = this;\n\n\t\tif (this.name === 'slot') {\n\t\t\tconst slotName = this.getStaticAttributeValue('name') || 'default';\n\t\t\tthis.generator.slots.add(slotName);\n\t\t}\n\n\t\tif (this.name === 'noscript') return;\n\n\t\tconst childState = {\n\t\t\tparentNode: this.var,\n\t\t\tparentNodes: parentNodes && block.getUniqueName(`${this.var}_nodes`) // if we're in unclaimable territory, i.e. <head>, parentNodes is null\n\t\t};\n\n\t\tconst name = this.var;\n\t\tconst allUsedContexts: Set<string> = new Set();\n\n\t\tconst slot = this.attributes.find((attribute: Node) => attribute.name === 'slot');\n\t\tconst initialMountNode = this.slotted ?\n\t\t\t`${this.findNearest(/^Component/).var}._slotted.${slot.value[0].data}` : // TODO this looks bonkers\n\t\t\tparentNode;\n\n\t\tblock.addVariable(name);\n\t\tconst renderStatement = getRenderStatement(this.generator, this.namespace, this.name);\n\t\tblock.builders.create.addLine(\n\t\t\t`${name} = ${renderStatement};`\n\t\t);\n\n\t\tif (this.generator.hydratable) {\n\t\t\tif (parentNodes) {\n\t\t\t\tblock.builders.claim.addBlock(deindent`\n\t\t\t\t\t${name} = ${getClaimStatement(generator, this.namespace, parentNodes, this)};\n\t\t\t\t\tvar ${childState.parentNodes} = @children(${name});\n\t\t\t\t`);\n\t\t\t} else {\n\t\t\t\tblock.builders.claim.addLine(\n\t\t\t\t\t`${name} = ${renderStatement};`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (initialMountNode) {\n\t\t\tblock.builders.mount.addLine(\n\t\t\t\t`@appendNode(${name}, ${initialMountNode});`\n\t\t\t);\n\n\t\t\tif (initialMountNode === 'document.head') {\n\t\t\t\tblock.builders.unmount.addLine(`@detachNode(${name});`);\n\t\t\t}\n\t\t} else {\n\t\t\tblock.builders.mount.addLine(`@insertNode(${name}, #target, anchor);`);\n\n\t\t\t// TODO we eventually need to consider what happens to elements\n\t\t\t// that belong to the same outgroup as an outroing element...\n\t\t\tblock.builders.unmount.addLine(`@detachNode(${name});`);\n\t\t}\n\n\t\t// TODO move this into a class as well?\n\t\tif (this._cssRefAttribute) {\n\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t`@setAttribute(${name}, \"svelte-ref-${this._cssRefAttribute}\", \"\");`\n\t\t\t)\n\t\t}\n\n\t\t// insert static children with textContent or innerHTML\n\t\tif (!this.namespace && this.canUseInnerHTML && this.children.length > 0) {\n\t\t\tif (this.children.length === 1 && this.children[0].type === 'Text') {\n\t\t\t\tblock.builders.create.addLine(\n\t\t\t\t\t`${name}.textContent = ${stringify(this.children[0].data)};`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tblock.builders.create.addLine(\n\t\t\t\t\t`${name}.innerHTML = ${stringify(this.children.map(toHTML).join(''))};`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.children.forEach((child: Node) => {\n\t\t\t\tchild.build(block, childState.parentNode, childState.parentNodes);\n\t\t\t});\n\t\t}\n\n\t\tthis.addBindings(block, allUsedContexts);\n\t\tconst eventHandlerUsesComponent = this.addEventHandlers(block, allUsedContexts);\n\t\tthis.addRefs(block);\n\t\tthis.addAttributes(block);\n\t\tthis.addTransitions(block);\n\t\tthis.addActions(block);\n\n\t\tif (allUsedContexts.size || eventHandlerUsesComponent) {\n\t\t\tconst initialProps: string[] = [];\n\t\t\tconst updates: string[] = [];\n\n\t\t\tif (eventHandlerUsesComponent) {\n\t\t\t\tinitialProps.push(`component: #component`);\n\t\t\t}\n\n\t\t\tallUsedContexts.forEach((contextName: string) => {\n\t\t\t\tif (contextName === 'state') return;\n\t\t\t\tif (block.contextTypes.get(contextName) !== 'each') return;\n\n\t\t\t\tconst listName = block.listNames.get(contextName);\n\t\t\t\tconst indexName = block.indexNames.get(contextName);\n\n\t\t\t\tinitialProps.push(\n\t\t\t\t\t`${listName}: state.${listName},\\n${indexName}: state.${indexName}`\n\t\t\t\t);\n\t\t\t\tupdates.push(\n\t\t\t\t\t`${name}._svelte.${listName} = state.${listName};\\n${name}._svelte.${indexName} = state.${indexName};`\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tif (initialProps.length) {\n\t\t\t\tblock.builders.hydrate.addBlock(deindent`\n\t\t\t\t\t${name}._svelte = {\n\t\t\t\t\t\t${initialProps.join(',\\n')}\n\t\t\t\t\t};\n\t\t\t\t`);\n\t\t\t}\n\n\t\t\tif (updates.length) {\n\t\t\t\tblock.builders.update.addBlock(updates.join('\\n'));\n\t\t\t}\n\t\t}\n\n\t\tif (this.initialUpdate) {\n\t\t\tblock.builders.mount.addBlock(this.initialUpdate);\n\t\t}\n\n\t\tif (childState.parentNodes) {\n\t\t\tblock.builders.claim.addLine(\n\t\t\t\t`${childState.parentNodes}.forEach(@detachNode);`\n\t\t\t);\n\t\t}\n\n\t\tfunction toHTML(node: Element | Text) {\n\t\t\tif (node.type === 'Text') {\n\t\t\t\treturn node.parent &&\n\t\t\t\t\tnode.parent.type === 'Element' &&\n\t\t\t\t\t(node.parent.name === 'script' || node.parent.name === 'style')\n\t\t\t\t\t? node.data\n\t\t\t\t\t: escapeHTML(node.data);\n\t\t\t}\n\n\t\t\tif (node.name === 'noscript') return '';\n\n\t\t\tlet open = `<${node.name}`;\n\n\t\t\tif (node._cssRefAttribute) {\n\t\t\t\topen += ` svelte-ref-${node._cssRefAttribute}`;\n\t\t\t}\n\n\t\t\tnode.attributes.forEach((attr: Node) => {\n\t\t\t\topen += ` ${fixAttributeCasing(attr.name)}${stringifyAttributeValue(attr.value)}`\n\t\t\t});\n\n\t\t\tif (isVoidElementName(node.name)) return open + '>';\n\n\t\t\treturn `${open}>${node.children.map(toHTML).join('')}</${node.name}>`;\n\t\t}\n\t}\n\n\taddBindings(\n\t\tblock: Block,\n\t\tallUsedContexts: Set<string>\n\t) {\n\t\tconst bindings: Binding[] = this.attributes.filter((a: Binding) => a.type === 'Binding');\n\t\tif (bindings.length === 0) return;\n\n\t\tif (this.name === 'select' || this.isMediaNode()) this.generator.hasComplexBindings = true;\n\n\t\tconst needsLock = this.name !== 'input' || !/radio|checkbox|range|color/.test(this.getStaticAttributeValue('type'));\n\n\t\tconst mungedBindings = bindings.map(binding => binding.munge(block, allUsedContexts));\n\n\t\tconst lock = mungedBindings.some(binding => binding.needsLock) ?\n\t\t\tblock.getUniqueName(`${this.var}_updating`) :\n\t\t\tnull;\n\n\t\tif (lock) block.addVariable(lock, 'false');\n\n\t\tconst groups = events\n\t\t\t.map(event => {\n\t\t\t\treturn {\n\t\t\t\t\tevents: event.eventNames,\n\t\t\t\t\tbindings: mungedBindings.filter(binding => event.filter(this, binding.name))\n\t\t\t\t};\n\t\t\t})\n\t\t\t.filter(group => group.bindings.length);\n\n\t\tgroups.forEach(group => {\n\t\t\tconst handler = block.getUniqueName(`${this.var}_${group.events.join('_')}_handler`);\n\n\t\t\tconst needsLock = group.bindings.some(binding => binding.needsLock);\n\n\t\t\tgroup.bindings.forEach(binding => {\n\t\t\t\tif (!binding.updateDom) return;\n\n\t\t\t\tconst updateConditions = needsLock ? [`!${lock}`] : [];\n\t\t\t\tif (binding.updateCondition) updateConditions.push(binding.updateCondition);\n\n\t\t\t\tblock.builders.update.addLine(\n\t\t\t\t\tupdateConditions.length ? `if (${updateConditions.join(' && ')}) ${binding.updateDom}` : binding.updateDom\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tconst usesContext = group.bindings.some(binding => binding.handler.usesContext);\n\t\t\tconst usesState = group.bindings.some(binding => binding.handler.usesState);\n\t\t\tconst usesStore = group.bindings.some(binding => binding.handler.usesStore);\n\t\t\tconst mutations = group.bindings.map(binding => binding.handler.mutation).filter(Boolean).join('\\n');\n\n\t\t\tconst props = new Set();\n\t\t\tconst storeProps = new Set();\n\t\t\tgroup.bindings.forEach(binding => {\n\t\t\t\tbinding.handler.props.forEach(prop => {\n\t\t\t\t\tprops.add(prop);\n\t\t\t\t});\n\n\t\t\t\tbinding.handler.storeProps.forEach(prop => {\n\t\t\t\t\tstoreProps.add(prop);\n\t\t\t\t});\n\t\t\t}); // TODO use stringifyProps here, once indenting is fixed\n\n\t\t\t// media bindings — awkward special case. The native timeupdate events\n\t\t\t// fire too infrequently, so we need to take matters into our\n\t\t\t// own hands\n\t\t\tlet animation_frame;\n\t\t\tif (group.events[0] === 'timeupdate') {\n\t\t\t\tanimation_frame = block.getUniqueName(`${this.var}_animationframe`);\n\t\t\t\tblock.addVariable(animation_frame);\n\t\t\t}\n\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\tfunction ${handler}() {\n\t\t\t\t\t${\n\t\t\t\t\t\tanimation_frame && deindent`\n\t\t\t\t\t\t\tcancelAnimationFrame(${animation_frame});\n\t\t\t\t\t\t\tif (!${this.var}.paused) ${animation_frame} = requestAnimationFrame(${handler});`\n\t\t\t\t\t}\n\t\t\t\t\t${usesContext && `var context = ${this.var}._svelte;`}\n\t\t\t\t\t${usesState && `var state = #component.get();`}\n\t\t\t\t\t${usesStore && `var $ = #component.store.get();`}\n\t\t\t\t\t${needsLock && `${lock} = true;`}\n\t\t\t\t\t${mutations.length > 0 && mutations}\n\t\t\t\t\t${props.size > 0 && `#component.set({ ${Array.from(props).join(', ')} });`}\n\t\t\t\t\t${storeProps.size > 0 && `#component.store.set({ ${Array.from(storeProps).join(', ')} });`}\n\t\t\t\t\t${needsLock && `${lock} = false;`}\n\t\t\t\t}\n\t\t\t`);\n\n\t\t\tgroup.events.forEach(name => {\n\t\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t\t`@addListener(${this.var}, \"${name}\", ${handler});`\n\t\t\t\t);\n\n\t\t\t\tblock.builders.destroy.addLine(\n\t\t\t\t\t`@removeListener(${this.var}, \"${name}\", ${handler});`\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tconst allInitialStateIsDefined = group.bindings\n\t\t\t\t.map(binding => `'${binding.object}' in state`)\n\t\t\t\t.join(' && ');\n\n\t\t\tif (this.name === 'select' || group.bindings.find(binding => binding.name === 'indeterminate' || binding.isReadOnlyMediaAttribute)) {\n\t\t\t\tthis.generator.hasComplexBindings = true;\n\n\t\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t\t`if (!(${allInitialStateIsDefined})) #component.root._beforecreate.push(${handler});`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tthis.initialUpdate = mungedBindings.map(binding => binding.initialUpdate).filter(Boolean).join('\\n');\n\t}\n\n\taddAttributes(block: Block) {\n\t\tif (this.attributes.find(attr => attr.type === 'Spread')) {\n\t\t\tthis.addSpreadAttributes(block);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.attributes.filter((a: Attribute) => a.type === 'Attribute').forEach((attribute: Attribute) => {\n\t\t\tattribute.render(block);\n\t\t});\n\t}\n\n\taddSpreadAttributes(block: Block) {\n\t\tconst levels = block.getUniqueName(`${this.var}_levels`);\n\t\tconst data = block.getUniqueName(`${this.var}_data`);\n\n\t\tconst initialProps = [];\n\t\tconst updates = [];\n\n\t\tthis.attributes\n\t\t\t.filter(attr => attr.type === 'Attribute' || attr.type === 'Spread')\n\t\t\t.forEach(attr => {\n\t\t\t\tif (attr.type === 'Attribute') {\n\t\t\t\t\tconst { dynamic, value, dependencies } = mungeAttribute(attr, block);\n\n\t\t\t\t\tconst snippet = `{ ${quoteIfNecessary(attr.name, this.generator.legacy)}: ${value} }`;\n\t\t\t\t\tinitialProps.push(snippet);\n\n\t\t\t\t\tconst condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');\n\t\t\t\t\tupdates.push(condition ? `${condition} && ${snippet}` : snippet);\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tblock.contextualise(attr.expression); // TODO gah\n\t\t\t\t\tconst { snippet, dependencies } = attr.metadata;\n\n\t\t\t\t\tinitialProps.push(snippet);\n\n\t\t\t\t\tconst condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');\n\t\t\t\t\tupdates.push(condition ? `${condition} && ${snippet}` : snippet);\n\t\t\t\t}\n\t\t\t});\n\n\t\tblock.builders.init.addBlock(deindent`\n\t\t\tvar ${levels} = [\n\t\t\t\t${initialProps.join(',\\n')}\n\t\t\t];\n\n\t\t\tvar ${data} = {};\n\t\t\tfor (var #i = 0; #i < ${levels}.length; #i += 1) {\n\t\t\t\t${data} = @assign(${data}, ${levels}[#i]);\n\t\t\t}\n\t\t`);\n\n\t\tblock.builders.hydrate.addLine(\n\t\t\t`@setAttributes(${this.var}, ${data});`\n\t\t);\n\n\t\tblock.builders.update.addBlock(deindent`\n\t\t\t@setAttributes(${this.var}, @getSpreadUpdate(${levels}, [\n\t\t\t\t${updates.join(',\\n')}\n\t\t\t]));\n\t\t`);\n\t}\n\n\taddEventHandlers(block: Block, allUsedContexts) {\n\t\tconst { generator } = this;\n\t\tlet eventHandlerUsesComponent = false;\n\n\t\tthis.attributes.filter((a: EventHandler) => a.type === 'EventHandler').forEach((attribute: EventHandler) => {\n\t\t\tconst isCustomEvent = generator.events.has(attribute.name);\n\t\t\tconst shouldHoist = !isCustomEvent && this.hasAncestor('EachBlock');\n\n\t\t\tconst context = shouldHoist ? null : this.var;\n\t\t\tconst usedContexts: string[] = [];\n\n\t\t\tif (attribute.expression) {\n\t\t\t\tgenerator.addSourcemapLocations(attribute.expression);\n\n\t\t\t\tconst flattened = flattenReference(attribute.expression.callee);\n\t\t\t\tif (!validCalleeObjects.has(flattened.name)) {\n\t\t\t\t\t// allow event.stopPropagation(), this.select() etc\n\t\t\t\t\t// TODO verify that it's a valid callee (i.e. built-in or declared method)\n\t\t\t\t\tgenerator.code.prependRight(\n\t\t\t\t\t\tattribute.expression.start,\n\t\t\t\t\t\t`${block.alias('component')}.`\n\t\t\t\t\t);\n\t\t\t\t\tif (shouldHoist) eventHandlerUsesComponent = true; // this feels a bit hacky but it works!\n\t\t\t\t}\n\n\t\t\t\tattribute.expression.arguments.forEach((arg: Node) => {\n\t\t\t\t\tconst { contexts } = block.contextualise(arg, context, true);\n\n\t\t\t\t\tcontexts.forEach(context => {\n\t\t\t\t\t\tif (!~usedContexts.indexOf(context)) usedContexts.push(context);\n\t\t\t\t\t\tallUsedContexts.add(context);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst ctx = context || 'this';\n\t\t\tconst declarations = usedContexts\n\t\t\t\t.map(name => {\n\t\t\t\t\tif (name === 'state') {\n\t\t\t\t\t\tif (shouldHoist) eventHandlerUsesComponent = true;\n\t\t\t\t\t\treturn `var state = ${block.alias('component')}.get();`;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst contextType = block.contextTypes.get(name);\n\t\t\t\t\tif (contextType === 'each') {\n\t\t\t\t\t\tconst listName = block.listNames.get(name);\n\t\t\t\t\t\tconst indexName = block.indexNames.get(name);\n\t\t\t\t\t\tconst contextName = block.contexts.get(name);\n\n\t\t\t\t\t\treturn `var ${listName} = ${ctx}._svelte.${listName}, ${indexName} = ${ctx}._svelte.${indexName}, ${contextName} = ${listName}[${indexName}];`;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.filter(Boolean);\n\n\t\t\t// get a name for the event handler that is globally unique\n\t\t\t// if hoisted, locally unique otherwise\n\t\t\tconst handlerName = (shouldHoist ? generator : block).getUniqueName(\n\t\t\t\t`${attribute.name.replace(/[^a-zA-Z0-9_$]/g, '_')}_handler`\n\t\t\t);\n\n\t\t\t// create the handler body\n\t\t\tconst handlerBody = deindent`\n\t\t\t\t${eventHandlerUsesComponent &&\n\t\t\t\t\t`var ${block.alias('component')} = ${ctx}._svelte.component;`}\n\t\t\t\t${declarations}\n\t\t\t\t${attribute.expression ?\n\t\t\t\t\t`[✂${attribute.expression.start}-${attribute.expression.end}✂];` :\n\t\t\t\t\t`${block.alias('component')}.fire(\"${attribute.name}\", event);`}\n\t\t\t`;\n\n\t\t\tif (isCustomEvent) {\n\t\t\t\tblock.addVariable(handlerName);\n\n\t\t\t\tblock.builders.hydrate.addBlock(deindent`\n\t\t\t\t\t${handlerName} = %events-${attribute.name}.call(#component, ${this.var}, function(event) {\n\t\t\t\t\t\t${handlerBody}\n\t\t\t\t\t});\n\t\t\t\t`);\n\n\t\t\t\tif (generator.options.dev) {\n\t\t\t\t\tblock.builders.hydrate.addBlock(deindent`\n\t\t\t\t\t\tif (${handlerName}.teardown) {\n\t\t\t\t\t\t\tconsole.warn(\"Return 'destroy()' from custom event handlers. Returning 'teardown()' has been deprecated and will be unsupported in Svelte 2\");\n\t\t\t\t\t\t}\n\t\t\t\t\t`);\n\t\t\t\t}\n\n\t\t\t\tblock.builders.destroy.addLine(deindent`\n\t\t\t\t\t${handlerName}[${handlerName}.destroy ? 'destroy' : 'teardown']();\n\t\t\t\t`);\n\t\t\t} else {\n\t\t\t\tconst handler = deindent`\n\t\t\t\t\tfunction ${handlerName}(event) {\n\t\t\t\t\t\t${handlerBody}\n\t\t\t\t\t}\n\t\t\t\t`;\n\n\t\t\t\tif (shouldHoist) {\n\t\t\t\t\tgenerator.blocks.push(handler);\n\t\t\t\t} else {\n\t\t\t\t\tblock.builders.init.addBlock(handler);\n\t\t\t\t}\n\n\t\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t\t`@addListener(${this.var}, \"${attribute.name}\", ${handlerName});`\n\t\t\t\t);\n\n\t\t\t\tblock.builders.destroy.addLine(\n\t\t\t\t\t`@removeListener(${this.var}, \"${attribute.name}\", ${handlerName});`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\treturn eventHandlerUsesComponent;\n\t}\n\n\taddRefs(block: Block) {\n\t\t// TODO it should surely be an error to have more than one ref\n\t\tthis.attributes.filter((a: Ref) => a.type === 'Ref').forEach((attribute: Ref) => {\n\t\t\tconst ref = `#component.refs.${attribute.name}`;\n\n\t\t\tblock.builders.mount.addLine(\n\t\t\t\t`${ref} = ${this.var};`\n\t\t\t);\n\n\t\t\tblock.builders.destroy.addLine(\n\t\t\t\t`if (${ref} === ${this.var}) ${ref} = null;`\n\t\t\t);\n\n\t\t\tthis.generator.usesRefs = true; // so component.refs object is created\n\t\t});\n\t}\n\n\taddTransitions(\n\t\tblock: Block\n\t) {\n\t\tconst intro = this.attributes.find((a: Transition) => a.type === 'Transition' && a.intro);\n\t\tconst outro = this.attributes.find((a: Transition) => a.type === 'Transition' && a.outro);\n\n\t\tif (!intro && !outro) return;\n\n\t\tif (intro === outro) {\n\t\t\tblock.contextualise(intro.expression); // TODO remove all these\n\n\t\t\tconst name = block.getUniqueName(`${this.var}_transition`);\n\t\t\tconst snippet = intro.expression\n\t\t\t\t? intro.metadata.snippet\n\t\t\t\t: '{}';\n\n\t\t\tblock.addVariable(name);\n\n\t\t\tconst fn = `%transitions-${intro.name}`;\n\n\t\t\tblock.builders.intro.addBlock(deindent`\n\t\t\t\t#component.root._aftercreate.push(function() {\n\t\t\t\t\tif (!${name}) ${name} = @wrapTransition(#component, ${this.var}, ${fn}, ${snippet}, true, null);\n\t\t\t\t\t${name}.run(true, function() {\n\t\t\t\t\t\t#component.fire(\"intro.end\", { node: ${this.var} });\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t`);\n\n\t\t\tblock.builders.outro.addBlock(deindent`\n\t\t\t\t${name}.run(false, function() {\n\t\t\t\t\t#component.fire(\"outro.end\", { node: ${this.var} });\n\t\t\t\t\tif (--#outros === 0) #outrocallback();\n\t\t\t\t\t${name} = null;\n\t\t\t\t});\n\t\t\t`);\n\t\t} else {\n\t\t\tconst introName = intro && block.getUniqueName(`${this.var}_intro`);\n\t\t\tconst outroName = outro && block.getUniqueName(`${this.var}_outro`);\n\n\t\t\tif (intro) {\n\t\t\t\tblock.contextualise(intro.expression);\n\n\t\t\t\tblock.addVariable(introName);\n\t\t\t\tconst snippet = intro.expression\n\t\t\t\t\t? intro.metadata.snippet\n\t\t\t\t\t: '{}';\n\n\t\t\t\tconst fn = `%transitions-${intro.name}`; // TODO add built-in transitions?\n\n\t\t\t\tif (outro) {\n\t\t\t\t\tblock.builders.intro.addBlock(deindent`\n\t\t\t\t\t\tif (${introName}) ${introName}.abort();\n\t\t\t\t\t\tif (${outroName}) ${outroName}.abort();\n\t\t\t\t\t`);\n\t\t\t\t}\n\n\t\t\t\tblock.builders.intro.addBlock(deindent`\n\t\t\t\t\t#component.root._aftercreate.push(function() {\n\t\t\t\t\t\t${introName} = @wrapTransition(#component, ${this.var}, ${fn}, ${snippet}, true, null);\n\t\t\t\t\t\t${introName}.run(true, function() {\n\t\t\t\t\t\t\t#component.fire(\"intro.end\", { node: ${this.var} });\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t`);\n\t\t\t}\n\n\t\t\tif (outro) {\n\t\t\t\tblock.contextualise(outro.expression);\n\n\t\t\t\tblock.addVariable(outroName);\n\t\t\t\tconst snippet = outro.expression\n\t\t\t\t\t? outro.metadata.snippet\n\t\t\t\t\t: '{}';\n\n\t\t\t\tconst fn = `%transitions-${outro.name}`;\n\n\t\t\t\t// TODO hide elements that have outro'd (unless they belong to a still-outroing\n\t\t\t\t// group) prior to their removal from the DOM\n\t\t\t\tblock.builders.outro.addBlock(deindent`\n\t\t\t\t\t${outroName} = @wrapTransition(#component, ${this.var}, ${fn}, ${snippet}, false, null);\n\t\t\t\t\t${outroName}.run(false, function() {\n\t\t\t\t\t\t#component.fire(\"outro.end\", { node: ${this.var} });\n\t\t\t\t\t\tif (--#outros === 0) #outrocallback();\n\t\t\t\t\t});\n\t\t\t\t`);\n\t\t\t}\n\t\t}\n\t}\n\n\taddActions(block: Block) {\n\t\tthis.attributes.filter((a: Action) => a.type === 'Action').forEach((attribute:Action) => {\n\t\t\tconst { expression } = attribute;\n\t\t\tlet snippet, dependencies;\n\t\t\tif (expression) {\n\t\t\t\tthis.generator.addSourcemapLocations(expression);\n\t\t\t\tblock.contextualise(expression);\n\t\t\t\tsnippet = attribute.metadata.snippet;\n\t\t\t\tdependencies = attribute.metadata.dependencies;\n\t\t\t}\n\n\t\t\tconst name = block.getUniqueName(\n\t\t\t\t`${attribute.name.replace(/[^a-zA-Z0-9_$]/g, '_')}_action`\n\t\t\t);\n\n\t\t\tblock.addVariable(name);\n\t\t\tconst fn = `%actions-${attribute.name}`;\n\n\t\t\tblock.builders.hydrate.addLine(\n\t\t\t\t`${name} = ${fn}.call(#component, ${this.var}${snippet ? `, ${snippet}` : ''}) || {};`\n\t\t\t);\n\n\t\t\tif (dependencies && dependencies.length) {\n\t\t\t\tlet conditional = `typeof ${name}.update === 'function' && `;\n\t\t\t\tconst deps = dependencies.map(dependency => `changed.${dependency}`).join(' || ');\n\t\t\t\tconditional += dependencies.length > 1 ? `(${deps})` : deps;\n\n\t\t\t\tblock.builders.update.addConditional(\n\t\t\t\t\tconditional,\n\t\t\t\t\t`${name}.update.call(#component, ${snippet});`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tblock.builders.destroy.addLine(\n\t\t\t\t`if (typeof ${name}.destroy === 'function') ${name}.destroy.call(#component);`\n\t\t\t);\n\t\t});\n\t}\n\n\tgetStaticAttributeValue(name: string) {\n\t\tconst attribute = this.attributes.find(\n\t\t\t(attr: Attribute) => attr.type === 'Attribute' && attr.name.toLowerCase() === name\n\t\t);\n\n\t\tif (!attribute) return null;\n\n\t\tif (attribute.value === true) return true;\n\t\tif (attribute.value.length === 0) return '';\n\n\t\tif (attribute.value.length === 1 && attribute.value[0].type === 'Text') {\n\t\t\treturn attribute.value[0].data;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tisMediaNode() {\n\t\treturn this.name === 'audio' || this.name === 'video';\n\t}\n\n\tremount(name: string) {\n\t\tconst slot = this.attributes.find(attribute => attribute.name === 'slot');\n\t\tif (slot) {\n\t\t\treturn `@appendNode(${this.var}, ${name}._slotted.${this.getStaticAttributeValue('slot')});`;\n\t\t}\n\n\t\treturn `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`});`;\n\t}\n\n\taddCssClass() {\n\t\tconst classAttribute = this.attributes.find(a => a.name === 'class');\n\t\tif (classAttribute && classAttribute.value !== true) {\n\t\t\tif (classAttribute.value.length === 1 && classAttribute.value[0].type === 'Text') {\n\t\t\t\tclassAttribute.value[0].data += ` ${this.generator.stylesheet.id}`;\n\t\t\t} else {\n\t\t\t\t(<Node[]>classAttribute.value).push(\n\t\t\t\t\tnew Node({ type: 'Text', data: ` ${this.generator.stylesheet.id}` })\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.attributes.push(\n\t\t\t\tnew Attribute({\n\t\t\t\t\tgenerator: this.generator,\n\t\t\t\t\tname: 'class',\n\t\t\t\t\tvalue: [new Node({ type: 'Text', data: `${this.generator.stylesheet.id}` })],\n\t\t\t\t\tparent: this,\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n}\n\nfunction getRenderStatement(\n\tgenerator: DomGenerator,\n\tnamespace: string,\n\tname: string\n) {\n\tif (namespace === 'http://www.w3.org/2000/svg') {\n\t\treturn `@createSvgElement(\"${name}\")`;\n\t}\n\n\tif (namespace) {\n\t\treturn `document.createElementNS(\"${namespace}\", \"${name}\")`;\n\t}\n\n\treturn `@createElement(\"${name}\")`;\n}\n\nfunction getClaimStatement(\n\tgenerator: DomGenerator,\n\tnamespace: string,\n\tnodes: string,\n\tnode: Node\n) {\n\tconst attributes = node.attributes\n\t\t.filter((attr: Node) => attr.type === 'Attribute')\n\t\t.map((attr: Node) => `${quoteProp(attr.name, generator.legacy)}: true`)\n\t\t.join(', ');\n\n\tconst name = namespace ? node.name : node.name.toUpperCase();\n\n\treturn `@claimElement(${nodes}, \"${name}\", ${attributes\n\t\t? `{ ${attributes} }`\n\t\t: `{}`}, ${namespace === namespaces.svg ? true : false})`;\n}\n\nfunction quoteProp(name: string, legacy: boolean) {\n\tconst isLegacyPropName = legacy && reservedNames.has(name);\n\n\tif (/[^a-zA-Z_$0-9]/.test(name) || isLegacyPropName) return `\"${name}\"`;\n\treturn name;\n}\n\nfunction stringifyAttributeValue(value: Node | true) {\n\tif (value === true) return '';\n\tif (value.length === 0) return `=\"\"`;\n\n\tconst data = value[0].data;\n\treturn `=${JSON.stringify(data)}`;\n}\n\nconst events = [\n\t{\n\t\teventNames: ['input'],\n\t\tfilter: (node: Element, name: string) =>\n\t\t\tnode.name === 'textarea' ||\n\t\t\tnode.name === 'input' && !/radio|checkbox/.test(node.getStaticAttributeValue('type'))\n\t},\n\t{\n\t\teventNames: ['change'],\n\t\tfilter: (node: Element, name: string) =>\n\t\t\tnode.name === 'select' ||\n\t\t\tnode.name === 'input' && /radio|checkbox|range/.test(node.getStaticAttributeValue('type'))\n\t},\n\n\t// media events\n\t{\n\t\teventNames: ['timeupdate'],\n\t\tfilter: (node: Element, name: string) =>\n\t\t\tnode.isMediaNode() &&\n\t\t\t(name === 'currentTime' || name === 'played')\n\t},\n\t{\n\t\teventNames: ['durationchange'],\n\t\tfilter: (node: Element, name: string) =>\n\t\t\tnode.isMediaNode() &&\n\t\t\tname === 'duration'\n\t},\n\t{\n\t\teventNames: ['play', 'pause'],\n\t\tfilter: (node: Element, name: string) =>\n\t\t\tnode.isMediaNode() &&\n\t\t\tname === 'paused'\n\t},\n\t{\n\t\teventNames: ['progress'],\n\t\tfilter: (node: Element, name: string) =>\n\t\t\tnode.isMediaNode() &&\n\t\t\tname === 'buffered'\n\t},\n\t{\n\t\teventNames: ['loadedmetadata'],\n\t\tfilter: (node: Element, name: string) =>\n\t\t\tnode.isMediaNode() &&\n\t\t\t(name === 'buffered' || name === 'seekable')\n\t},\n\t{\n\t\teventNames: ['volumechange'],\n\t\tfilter: (node: Element, name: string) =>\n\t\t\tnode.isMediaNode() &&\n\t\t\tname === 'volume'\n\t}\n];\n","import Node from './shared/Node';\nimport Block from '../dom/Block';\n\nexport default class ElseBlock extends Node {\n\ttype: 'ElseBlock';\n\tchildren: Node[];\n\tblock: Block;\n}","import Node from './shared/Node';\n\nexport default class EventHandler extends Node {\n\tname: string;\n\tvalue: Node[]\n\texpression: Node\n}","import CodeBuilder from '../../utils/CodeBuilder';\nimport deindent from '../../utils/deindent';\nimport { escape } from '../../utils/stringify';\nimport { DomGenerator } from './index';\nimport { Node } from '../../interfaces';\nimport shared from './shared';\n\nexport interface BlockOptions {\n\tname: string;\n\tgenerator?: DomGenerator;\n\texpression?: Node;\n\tcontext?: string;\n\tdestructuredContexts?: string[];\n\tcomment?: string;\n\tkey?: string;\n\tcontexts?: Map<string, string>;\n\tcontextTypes?: Map<string, string>;\n\tindexes?: Map<string, string>;\n\tchangeableIndexes?: Map<string, boolean>;\n\tindexNames?: Map<string, string>;\n\tlistNames?: Map<string, string>;\n\tdependencies?: Set<string>;\n}\n\nexport default class Block {\n\tgenerator: DomGenerator;\n\tname: string;\n\texpression: Node;\n\tcontext: string;\n\tdestructuredContexts?: string[];\n\tcomment?: string;\n\n\tkey: string;\n\tfirst: string;\n\n\tcontexts: Map<string, string>;\n\tcontextTypes: Map<string, string>;\n\tindexes: Map<string, string>;\n\tchangeableIndexes: Map<string, boolean>;\n\tdependencies: Set<string>;\n\tindexNames: Map<string, string>;\n\tlistNames: Map<string, string>;\n\n\tbuilders: {\n\t\tinit: CodeBuilder;\n\t\tcreate: CodeBuilder;\n\t\tclaim: CodeBuilder;\n\t\thydrate: CodeBuilder;\n\t\tmount: CodeBuilder;\n\t\tintro: CodeBuilder;\n\t\tupdate: CodeBuilder;\n\t\toutro: CodeBuilder;\n\t\tunmount: CodeBuilder;\n\t\tdetachRaw: CodeBuilder;\n\t\tdestroy: CodeBuilder;\n\t};\n\n\thasIntroMethod: boolean;\n\thasOutroMethod: boolean;\n\toutros: number;\n\n\taliases: Map<string, string>;\n\tvariables: Map<string, string>;\n\tgetUniqueName: (name: string) => string;\n\n\thasUpdateMethod: boolean;\n\tautofocus: string;\n\n\tconstructor(options: BlockOptions) {\n\t\tthis.generator = options.generator;\n\t\tthis.name = options.name;\n\t\tthis.expression = options.expression;\n\t\tthis.context = options.context;\n\t\tthis.destructuredContexts = options.destructuredContexts;\n\t\tthis.comment = options.comment;\n\n\t\t// for keyed each blocks\n\t\tthis.key = options.key;\n\t\tthis.first = null;\n\n\t\tthis.contexts = options.contexts;\n\t\tthis.contextTypes = options.contextTypes;\n\t\tthis.indexes = options.indexes;\n\t\tthis.changeableIndexes = options.changeableIndexes;\n\t\tthis.dependencies = new Set();\n\n\t\tthis.indexNames = options.indexNames;\n\t\tthis.listNames = options.listNames;\n\n\t\tthis.builders = {\n\t\t\tinit: new CodeBuilder(),\n\t\t\tcreate: new CodeBuilder(),\n\t\t\tclaim: new CodeBuilder(),\n\t\t\thydrate: new CodeBuilder(),\n\t\t\tmount: new CodeBuilder(),\n\t\t\tintro: new CodeBuilder(),\n\t\t\tupdate: new CodeBuilder(),\n\t\t\toutro: new CodeBuilder(),\n\t\t\tunmount: new CodeBuilder(),\n\t\t\tdetachRaw: new CodeBuilder(),\n\t\t\tdestroy: new CodeBuilder(),\n\t\t};\n\n\t\tthis.hasIntroMethod = false; // a block could have an intro method but not intro transitions, e.g. if a sibling block has intros\n\t\tthis.hasOutroMethod = false;\n\t\tthis.outros = 0;\n\n\t\tthis.getUniqueName = this.generator.getUniqueNameMaker([...this.contexts.values()]);\n\t\tthis.variables = new Map();\n\n\t\tthis.aliases = new Map()\n\t\t\t.set('component', this.getUniqueName('component'))\n\t\t\t.set('state', this.getUniqueName('state'));\n\t\tif (this.key) this.aliases.set('key', this.getUniqueName('key'));\n\n\t\tthis.hasUpdateMethod = false; // determined later\n\t}\n\n\taddDependencies(dependencies: string[]) {\n\t\tdependencies.forEach(dependency => {\n\t\t\tthis.dependencies.add(dependency);\n\t\t});\n\t}\n\n\taddElement(\n\t\tname: string,\n\t\trenderStatement: string,\n\t\tclaimStatement: string,\n\t\tparentNode: string\n\t) {\n\t\tthis.addVariable(name);\n\t\tthis.builders.create.addLine(`${name} = ${renderStatement};`);\n\t\tthis.builders.claim.addLine(`${name} = ${claimStatement || renderStatement};`);\n\n\t\tif (parentNode) {\n\t\t\tthis.builders.mount.addLine(`@appendNode(${name}, ${parentNode});`);\n\t\t\tif (parentNode === 'document.head') this.builders.unmount.addLine(`@detachNode(${name});`);\n\t\t} else {\n\t\t\tthis.builders.mount.addLine(`@insertNode(${name}, #target, anchor);`);\n\t\t\tthis.builders.unmount.addLine(`@detachNode(${name});`);\n\t\t}\n\t}\n\n\taddVariable(name: string, init?: string) {\n\t\tif (this.variables.has(name) && this.variables.get(name) !== init) {\n\t\t\tthrow new Error(\n\t\t\t\t`Variable '${name}' already initialised with a different value`\n\t\t\t);\n\t\t}\n\n\t\tthis.variables.set(name, init);\n\t}\n\n\talias(name: string) {\n\t\tif (!this.aliases.has(name)) {\n\t\t\tthis.aliases.set(name, this.getUniqueName(name));\n\t\t}\n\n\t\treturn this.aliases.get(name);\n\t}\n\n\tchild(options: BlockOptions) {\n\t\treturn new Block(Object.assign({}, this, { key: null }, options, { parent: this }));\n\t}\n\n\tcontextualise(expression: Node, context?: string, isEventHandler?: boolean) {\n\t\treturn this.generator.contextualise(this.contexts, this.indexes, expression, context, isEventHandler);\n\t}\n\n\ttoString() {\n\t\tlet introing;\n\t\tconst hasIntros = !this.builders.intro.isEmpty();\n\t\tif (hasIntros) {\n\t\t\tintroing = this.getUniqueName('introing');\n\t\t\tthis.addVariable(introing);\n\t\t}\n\n\t\tlet outroing;\n\t\tconst hasOutros = !this.builders.outro.isEmpty();\n\t\tif (hasOutros) {\n\t\t\toutroing = this.alias('outroing');\n\t\t\tthis.addVariable(outroing);\n\t\t}\n\n\t\tif (this.autofocus) {\n\t\t\tthis.builders.mount.addLine(`${this.autofocus}.focus();`);\n\t\t}\n\n\t\t// TODO `this.contexts` is possibly redundant post-#1122\n\t\tconst initializers = [];\n\n\t\tthis.contexts.forEach((name, context) => {\n\t\t\t// TODO only the ones that are actually used in this block...\n\t\t\tconst listName = this.listNames.get(context);\n\t\t\tconst indexName = this.indexNames.get(context);\n\n\t\t\tinitializers.push(\n\t\t\t\t`${name} = state.${context}`,\n\t\t\t\t`${listName} = state.${listName}`,\n\t\t\t\t`${indexName} = state.${indexName}`\n\t\t\t);\n\n\t\t\tthis.hasUpdateMethod = true;\n\t\t});\n\n\t\t// minor hack – we need to ensure that any {{{triples}}} are detached first\n\t\tthis.builders.unmount.addBlockAtStart(this.builders.detachRaw.toString());\n\n\t\tconst properties = new CodeBuilder();\n\n\t\tlet localKey;\n\t\tif (this.key) {\n\t\t\tlocalKey = this.getUniqueName('key');\n\t\t\tproperties.addBlock(`key: ${localKey},`);\n\t\t}\n\n\t\tif (this.first) {\n\t\t\tproperties.addBlock(`first: null,`);\n\t\t\tthis.builders.hydrate.addLine(`this.first = ${this.first};`);\n\t\t}\n\n\t\tif (this.builders.create.isEmpty() && this.builders.hydrate.isEmpty()) {\n\t\t\tproperties.addBlock(`c: @noop,`);\n\t\t} else {\n\t\t\tproperties.addBlock(deindent`\n\t\t\t\tc: function create() {\n\t\t\t\t\t${this.builders.create}\n\t\t\t\t\t${!this.builders.hydrate.isEmpty() && `this.h();`}\n\t\t\t\t},\n\t\t\t`);\n\t\t}\n\n\t\tif (this.generator.hydratable) {\n\t\t\tif (this.builders.claim.isEmpty() && this.builders.hydrate.isEmpty()) {\n\t\t\t\tproperties.addBlock(`l: @noop,`);\n\t\t\t} else {\n\t\t\t\tproperties.addBlock(deindent`\n\t\t\t\t\tl: function claim(nodes) {\n\t\t\t\t\t\t${this.builders.claim}\n\t\t\t\t\t\t${!this.builders.hydrate.isEmpty() && `this.h();`}\n\t\t\t\t\t},\n\t\t\t\t`);\n\t\t\t}\n\t\t}\n\n\t\tif (!this.builders.hydrate.isEmpty()) {\n\t\t\tproperties.addBlock(deindent`\n\t\t\t\th: function hydrate() {\n\t\t\t\t\t${this.builders.hydrate}\n\t\t\t\t},\n\t\t\t`);\n\t\t}\n\n\t\tif (this.builders.mount.isEmpty()) {\n\t\t\tproperties.addBlock(`m: @noop,`);\n\t\t} else {\n\t\t\tproperties.addBlock(deindent`\n\t\t\t\tm: function mount(#target, anchor) {\n\t\t\t\t\t${this.builders.mount}\n\t\t\t\t},\n\t\t\t`);\n\t\t}\n\n\t\tif (this.hasUpdateMethod) {\n\t\t\tif (this.builders.update.isEmpty() && initializers.length === 0) {\n\t\t\t\tproperties.addBlock(`p: @noop,`);\n\t\t\t} else {\n\t\t\t\tproperties.addBlock(deindent`\n\t\t\t\t\tp: function update(changed, state) {\n\t\t\t\t\t\t${initializers.map(str => `${str};`)}\n\t\t\t\t\t\t${this.builders.update}\n\t\t\t\t\t},\n\t\t\t\t`);\n\t\t\t}\n\t\t}\n\n\t\tif (this.hasIntroMethod) {\n\t\t\tif (hasIntros) {\n\t\t\t\tproperties.addBlock(deindent`\n\t\t\t\t\ti: function intro(#target, anchor) {\n\t\t\t\t\t\tif (${introing}) return;\n\t\t\t\t\t\t${introing} = true;\n\t\t\t\t\t\t${hasOutros && `${outroing} = false;`}\n\n\t\t\t\t\t\t${this.builders.intro}\n\n\t\t\t\t\t\tthis.m(#target, anchor);\n\t\t\t\t\t},\n\t\t\t\t`);\n\t\t\t} else {\n\t\t\t\tproperties.addBlock(deindent`\n\t\t\t\t\ti: function intro(#target, anchor) {\n\t\t\t\t\t\tthis.m(#target, anchor);\n\t\t\t\t\t},\n\t\t\t\t`);\n\t\t\t}\n\t\t}\n\n\t\tif (this.hasOutroMethod) {\n\t\t\tif (hasOutros) {\n\t\t\t\tproperties.addBlock(deindent`\n\t\t\t\t\to: function outro(#outrocallback) {\n\t\t\t\t\t\tif (${outroing}) return;\n\t\t\t\t\t\t${outroing} = true;\n\t\t\t\t\t\t${hasIntros && `${introing} = false;`}\n\n\t\t\t\t\t\tvar #outros = ${this.outros};\n\n\t\t\t\t\t\t${this.builders.outro}\n\t\t\t\t\t},\n\t\t\t\t`);\n\t\t\t} else {\n\t\t\t\tproperties.addBlock(deindent`\n\t\t\t\t\to: @run,\n\t\t\t\t`);\n\t\t\t}\n\t\t}\n\n\t\tif (this.builders.unmount.isEmpty()) {\n\t\t\tproperties.addBlock(`u: @noop,`);\n\t\t} else {\n\t\t\tproperties.addBlock(deindent`\n\t\t\t\tu: function unmount() {\n\t\t\t\t\t${this.builders.unmount}\n\t\t\t\t},\n\t\t\t`);\n\t\t}\n\n\t\tif (this.builders.destroy.isEmpty()) {\n\t\t\tproperties.addBlock(`d: @noop`);\n\t\t} else {\n\t\t\tproperties.addBlock(deindent`\n\t\t\t\td: function destroy() {\n\t\t\t\t\t${this.builders.destroy}\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\treturn deindent`\n\t\t\t${this.comment && `// ${escape(this.comment)}`}\n\t\t\tfunction ${this.name}(#component${this.key ? `, ${localKey}` : ''}, state) {\n\t\t\t\t${initializers.length > 0 &&\n\t\t\t\t\t`var ${initializers.join(', ')};`}\n\t\t\t\t${this.variables.size > 0 &&\n\t\t\t\t\t`var ${Array.from(this.variables.keys())\n\t\t\t\t\t\t.map(key => {\n\t\t\t\t\t\t\tconst init = this.variables.get(key);\n\t\t\t\t\t\t\treturn init !== undefined ? `${key} = ${init}` : key;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join(', ')};`}\n\n\t\t\t\t${!this.builders.init.isEmpty() && this.builders.init}\n\n\t\t\t\treturn {\n\t\t\t\t\t${properties}\n\t\t\t\t};\n\t\t\t}\n\t\t`.replace(/(#+)(\\w*)/g, (match: string, sigil: string, name: string) => {\n\t\t\treturn sigil === '#' ? this.alias(name) : sigil.slice(1) + name;\n\t\t});\n\t}\n}\n","import Node from './shared/Node';\nimport { DomGenerator } from '../dom/index';\nimport Block from '../dom/Block';\n\nexport default class Fragment extends Node {\n\tblock: Block;\n\tchildren: Node[];\n\n\tinit() {\n\t\tthis.block = new Block({\n\t\t\tgenerator: this.generator,\n\t\t\tname: '@create_main_fragment',\n\t\t\tkey: null,\n\n\t\t\tcontexts: new Map(),\n\t\t\tindexes: new Map(),\n\t\t\tchangeableIndexes: new Map(),\n\n\t\t\tindexNames: new Map(),\n\t\t\tlistNames: new Map(),\n\n\t\t\tdependencies: new Set(),\n\t\t});\n\n\t\tthis.generator.blocks.push(this.block);\n\t\tthis.initChildren(this.block, true, null);\n\n\t\tthis.block.hasUpdateMethod = true;\n\t}\n\n\tbuild() {\n\t\tthis.init();\n\n\t\tthis.children.forEach(child => {\n\t\t\tchild.build(this.block, null, 'nodes');\n\t\t});\n\t}\n}","import deindent from '../../utils/deindent';\nimport { stringify } from '../../utils/stringify';\nimport Node from './shared/Node';\nimport Block from '../dom/Block';\nimport Attribute from './Attribute';\n\nexport default class Head extends Node {\n\ttype: 'Head';\n\tattributes: Attribute[];\n\n\tinit(\n\t\tblock: Block,\n\t\tstripWhitespace: boolean,\n\t\tnextSibling: Node\n\t) {\n\t\tthis.initChildren(block, true, null);\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst { generator } = this;\n\n\t\tthis.var = 'document.head';\n\n\t\tthis.children.forEach((child: Node) => {\n\t\t\tchild.build(block, 'document.head', null);\n\t\t});\n\t}\n}\n","import deindent from '../../utils/deindent';\nimport Node from './shared/Node';\nimport ElseBlock from './ElseBlock';\nimport { DomGenerator } from '../dom/index';\nimport Block from '../dom/Block';\nimport createDebuggingComment from '../../utils/createDebuggingComment';\n\nfunction isElseIf(node: ElseBlock) {\n\treturn (\n\t\tnode && node.children.length === 1 && node.children[0].type === 'IfBlock'\n\t);\n}\n\nfunction isElseBranch(branch) {\n\treturn branch.block && !branch.condition;\n}\n\nexport default class IfBlock extends Node {\n\ttype: 'IfBlock';\n\telse: ElseBlock;\n\n\tblock: Block;\n\n\tinit(\n\t\tblock: Block,\n\t\tstripWhitespace: boolean,\n\t\tnextSibling: Node\n\t) {\n\t\tconst { generator } = this;\n\n\t\tthis.cannotUseInnerHTML();\n\n\t\tconst blocks: Block[] = [];\n\t\tlet dynamic = false;\n\t\tlet hasIntros = false;\n\t\tlet hasOutros = false;\n\n\t\tfunction attachBlocks(node: IfBlock) {\n\t\t\tnode.var = block.getUniqueName(`if_block`);\n\n\t\t\tblock.addDependencies(node.metadata.dependencies);\n\n\t\t\tnode.block = block.child({\n\t\t\t\tcomment: createDebuggingComment(node, generator),\n\t\t\t\tname: generator.getUniqueName(`create_if_block`),\n\t\t\t});\n\n\t\t\tblocks.push(node.block);\n\t\t\tnode.initChildren(node.block, stripWhitespace, nextSibling);\n\n\t\t\tif (node.block.dependencies.size > 0) {\n\t\t\t\tdynamic = true;\n\t\t\t\tblock.addDependencies(node.block.dependencies);\n\t\t\t}\n\n\t\t\tif (node.block.hasIntroMethod) hasIntros = true;\n\t\t\tif (node.block.hasOutroMethod) hasOutros = true;\n\n\t\t\tif (isElseIf(node.else)) {\n\t\t\t\tattachBlocks(node.else.children[0]);\n\t\t\t} else if (node.else) {\n\t\t\t\tnode.else.block = block.child({\n\t\t\t\t\tcomment: createDebuggingComment(node.else, generator),\n\t\t\t\t\tname: generator.getUniqueName(`create_if_block`),\n\t\t\t\t});\n\n\t\t\t\tblocks.push(node.else.block);\n\t\t\t\tnode.else.initChildren(\n\t\t\t\t\tnode.else.block,\n\t\t\t\t\tstripWhitespace,\n\t\t\t\t\tnextSibling\n\t\t\t\t);\n\n\t\t\t\tif (node.else.block.dependencies.size > 0) {\n\t\t\t\t\tdynamic = true;\n\t\t\t\t\tblock.addDependencies(node.else.block.dependencies);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tattachBlocks(this);\n\n\t\tblocks.forEach(block => {\n\t\t\tblock.hasUpdateMethod = dynamic;\n\t\t\tblock.hasIntroMethod = hasIntros;\n\t\t\tblock.hasOutroMethod = hasOutros;\n\t\t});\n\n\t\tgenerator.blocks.push(...blocks);\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst name = this.var;\n\n\t\tconst needsAnchor = this.next ? !this.next.isDomNode() : !parentNode || !this.parent.isDomNode();\n\t\tconst anchor = needsAnchor\n\t\t\t? block.getUniqueName(`${name}_anchor`)\n\t\t\t: (this.next && this.next.var) || 'null';\n\n\t\tconst branches = this.getBranches(block, parentNode, parentNodes, this);\n\n\t\tconst hasElse = isElseBranch(branches[branches.length - 1]);\n\t\tconst if_name = hasElse ? '' : `if (${name}) `;\n\n\t\tconst dynamic = branches[0].hasUpdateMethod; // can use [0] as proxy for all, since they necessarily have the same value\n\t\tconst hasOutros = branches[0].hasOutroMethod;\n\n\t\tconst vars = { name, anchor, if_name, hasElse };\n\n\t\tif (this.else) {\n\t\t\tif (hasOutros) {\n\t\t\t\tthis.buildCompoundWithOutros(block, parentNode, parentNodes, branches, dynamic, vars);\n\t\t\t} else {\n\t\t\t\tthis.buildCompound(block, parentNode, parentNodes, branches, dynamic, vars);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.buildSimple(block, parentNode, parentNodes, branches[0], dynamic, vars);\n\t\t}\n\n\t\tblock.builders.create.addLine(`${if_name}${name}.c();`);\n\n\t\tif (parentNodes) {\n\t\t\tblock.builders.claim.addLine(\n\t\t\t\t`${if_name}${name}.l(${parentNodes});`\n\t\t\t);\n\t\t}\n\n\t\tif (needsAnchor) {\n\t\t\tblock.addElement(\n\t\t\t\tanchor,\n\t\t\t\t`@createComment()`,\n\t\t\t\tparentNodes && `@createComment()`,\n\t\t\t\tparentNode\n\t\t\t);\n\t\t}\n\t}\n\n\tbuildCompound(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string,\n\t\tbranches,\n\t\tdynamic,\n\t\t{ name, anchor, hasElse, if_name }\n\t) {\n\t\tconst select_block_type = this.generator.getUniqueName(`select_block_type`);\n\t\tconst current_block_type = block.getUniqueName(`current_block_type`);\n\t\tconst current_block_type_and = hasElse ? '' : `${current_block_type} && `;\n\n\t\tblock.builders.init.addBlock(deindent`\n\t\t\tfunction ${select_block_type}(state) {\n\t\t\t\t${branches\n\t\t\t\t\t.map(({ condition, block }) => `${condition ? `if (${condition}) ` : ''}return ${block};`)\n\t\t\t\t\t.join('\\n')}\n\t\t\t}\n\t\t`);\n\n\t\tblock.builders.init.addBlock(deindent`\n\t\t\tvar ${current_block_type} = ${select_block_type}(state);\n\t\t\tvar ${name} = ${current_block_type_and}${current_block_type}(#component, state);\n\t\t`);\n\n\t\tconst mountOrIntro = branches[0].hasIntroMethod ? 'i' : 'm';\n\n\t\tconst initialMountNode = parentNode || '#target';\n\t\tconst anchorNode = parentNode ? 'null' : 'anchor';\n\t\tblock.builders.mount.addLine(\n\t\t\t`${if_name}${name}.${mountOrIntro}(${initialMountNode}, ${anchorNode});`\n\t\t);\n\n\t\tconst updateMountNode = this.getUpdateMountNode(anchor);\n\n\t\tconst changeBlock = deindent`\n\t\t\t${hasElse\n\t\t\t\t? deindent`\n\t\t\t\t\t${name}.u();\n\t\t\t\t\t${name}.d();\n\t\t\t\t`\n\t\t\t\t: deindent`\n\t\t\t\t\tif (${name}) {\n\t\t\t\t\t\t${name}.u();\n\t\t\t\t\t\t${name}.d();\n\t\t\t\t\t}`}\n\t\t\t${name} = ${current_block_type_and}${current_block_type}(#component, state);\n\t\t\t${if_name}${name}.c();\n\t\t\t${if_name}${name}.${mountOrIntro}(${updateMountNode}, ${anchor});\n\t\t`;\n\n\t\tif (dynamic) {\n\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\tif (${current_block_type} === (${current_block_type} = ${select_block_type}(state)) && ${name}) {\n\t\t\t\t\t${name}.p(changed, state);\n\t\t\t\t} else {\n\t\t\t\t\t${changeBlock}\n\t\t\t\t}\n\t\t\t`);\n\t\t} else {\n\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\tif (${current_block_type} !== (${current_block_type} = ${select_block_type}(state))) {\n\t\t\t\t\t${changeBlock}\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tblock.builders.unmount.addLine(`${if_name}${name}.u();`);\n\n\t\tblock.builders.destroy.addLine(`${if_name}${name}.d();`);\n\t}\n\n\t// if any of the siblings have outros, we need to keep references to the blocks\n\t// (TODO does this only apply to bidi transitions?)\n\tbuildCompoundWithOutros(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string,\n\t\tbranches,\n\t\tdynamic,\n\t\t{ name, anchor, hasElse }\n\t) {\n\t\tconst select_block_type = block.getUniqueName(`select_block_type`);\n\t\tconst current_block_type_index = block.getUniqueName(`current_block_type_index`);\n\t\tconst previous_block_index = block.getUniqueName(`previous_block_index`);\n\t\tconst if_block_creators = block.getUniqueName(`if_block_creators`);\n\t\tconst if_blocks = block.getUniqueName(`if_blocks`);\n\n\t\tconst if_current_block_type_index = hasElse\n\t\t\t? ''\n\t\t\t: `if (~${current_block_type_index}) `;\n\n\t\tblock.addVariable(current_block_type_index);\n\t\tblock.addVariable(name);\n\n\t\tblock.builders.init.addBlock(deindent`\n\t\t\tvar ${if_block_creators} = [\n\t\t\t\t${branches.map(branch => branch.block).join(',\\n')}\n\t\t\t];\n\n\t\t\tvar ${if_blocks} = [];\n\n\t\t\tfunction ${select_block_type}(state) {\n\t\t\t\t${branches\n\t\t\t\t\t.map(({ condition, block }, i) => `${condition ? `if (${condition}) ` : ''}return ${block ? i : -1};`)\n\t\t\t\t\t.join('\\n')}\n\t\t\t}\n\t\t`);\n\n\t\tif (hasElse) {\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\t${current_block_type_index} = ${select_block_type}(state);\n\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#component, state);\n\t\t\t`);\n\t\t} else {\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\tif (~(${current_block_type_index} = ${select_block_type}(state))) {\n\t\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#component, state);\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tconst mountOrIntro = branches[0].hasIntroMethod ? 'i' : 'm';\n\t\tconst initialMountNode = parentNode || '#target';\n\t\tconst anchorNode = parentNode ? 'null' : 'anchor';\n\n\t\tblock.builders.mount.addLine(\n\t\t\t`${if_current_block_type_index}${if_blocks}[${current_block_type_index}].${mountOrIntro}(${initialMountNode}, ${anchorNode});`\n\t\t);\n\n\t\tconst updateMountNode = this.getUpdateMountNode(anchor);\n\n\t\tconst destroyOldBlock = deindent`\n\t\t\t${name}.o(function() {\n\t\t\t\t${if_blocks}[ ${previous_block_index} ].u();\n\t\t\t\t${if_blocks}[ ${previous_block_index} ].d();\n\t\t\t\t${if_blocks}[ ${previous_block_index} ] = null;\n\t\t\t});\n\t\t`;\n\n\t\tconst createNewBlock = deindent`\n\t\t\t${name} = ${if_blocks}[${current_block_type_index}];\n\t\t\tif (!${name}) {\n\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#component, state);\n\t\t\t\t${name}.c();\n\t\t\t}\n\t\t\t${name}.${mountOrIntro}(${updateMountNode}, ${anchor});\n\t\t`;\n\n\t\tconst changeBlock = hasElse\n\t\t\t? deindent`\n\t\t\t\t${destroyOldBlock}\n\n\t\t\t\t${createNewBlock}\n\t\t\t`\n\t\t\t: deindent`\n\t\t\t\tif (${name}) {\n\t\t\t\t\t${destroyOldBlock}\n\t\t\t\t}\n\n\t\t\t\tif (~${current_block_type_index}) {\n\t\t\t\t\t${createNewBlock}\n\t\t\t\t} else {\n\t\t\t\t\t${name} = null;\n\t\t\t\t}\n\t\t\t`;\n\n\t\tif (dynamic) {\n\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\tvar ${previous_block_index} = ${current_block_type_index};\n\t\t\t\t${current_block_type_index} = ${select_block_type}(state);\n\t\t\t\tif (${current_block_type_index} === ${previous_block_index}) {\n\t\t\t\t\t${if_current_block_type_index}${if_blocks}[${current_block_type_index}].p(changed, state);\n\t\t\t\t} else {\n\t\t\t\t\t${changeBlock}\n\t\t\t\t}\n\t\t\t`);\n\t\t} else {\n\t\t\tblock.builders.update.addBlock(deindent`\n\t\t\t\tvar ${previous_block_index} = ${current_block_type_index};\n\t\t\t\t${current_block_type_index} = ${select_block_type}(state);\n\t\t\t\tif (${current_block_type_index} !== ${previous_block_index}) {\n\t\t\t\t\t${changeBlock}\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tblock.builders.destroy.addLine(deindent`\n\t\t\t${if_current_block_type_index}{\n\t\t\t\t${if_blocks}[${current_block_type_index}].u();\n\t\t\t\t${if_blocks}[${current_block_type_index}].d();\n\t\t\t}\n\t\t`);\n\t}\n\n\tbuildSimple(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string,\n\t\tbranch,\n\t\tdynamic,\n\t\t{ name, anchor, if_name }\n\t) {\n\t\tblock.builders.init.addBlock(deindent`\n\t\t\tvar ${name} = (${branch.condition}) && ${branch.block}(#component, state);\n\t\t`);\n\n\t\tconst mountOrIntro = branch.hasIntroMethod ? 'i' : 'm';\n\t\tconst initialMountNode = parentNode || '#target';\n\t\tconst anchorNode = parentNode ? 'null' : 'anchor';\n\n\t\tblock.builders.mount.addLine(\n\t\t\t`if (${name}) ${name}.${mountOrIntro}(${initialMountNode}, ${anchorNode});`\n\t\t);\n\n\t\tconst updateMountNode = this.getUpdateMountNode(anchor);\n\n\t\tconst enter = dynamic\n\t\t\t? branch.hasIntroMethod\n\t\t\t\t? deindent`\n\t\t\t\t\tif (${name}) {\n\t\t\t\t\t\t${name}.p(changed, state);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${name} = ${branch.block}(#component, state);\n\t\t\t\t\t\tif (${name}) ${name}.c();\n\t\t\t\t\t}\n\n\t\t\t\t\t${name}.i(${updateMountNode}, ${anchor});\n\t\t\t\t`\n\t\t\t\t: deindent`\n\t\t\t\t\tif (${name}) {\n\t\t\t\t\t\t${name}.p(changed, state);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${name} = ${branch.block}(#component, state);\n\t\t\t\t\t\t${name}.c();\n\t\t\t\t\t\t${name}.m(${updateMountNode}, ${anchor});\n\t\t\t\t\t}\n\t\t\t\t`\n\t\t\t: branch.hasIntroMethod\n\t\t\t\t? deindent`\n\t\t\t\t\tif (!${name}) {\n\t\t\t\t\t\t${name} = ${branch.block}(#component, state);\n\t\t\t\t\t\t${name}.c();\n\t\t\t\t\t}\n\t\t\t\t\t${name}.i(${updateMountNode}, ${anchor});\n\t\t\t\t`\n\t\t\t\t: deindent`\n\t\t\t\t\tif (!${name}) {\n\t\t\t\t\t\t${name} = ${branch.block}(#component, state);\n\t\t\t\t\t\t${name}.c();\n\t\t\t\t\t\t${name}.m(${updateMountNode}, ${anchor});\n\t\t\t\t\t}\n\t\t\t\t`;\n\n\t\t// no `p()` here — we don't want to update outroing nodes,\n\t\t// as that will typically result in glitching\n\t\tconst exit = branch.hasOutroMethod\n\t\t\t? deindent`\n\t\t\t\t${name}.o(function() {\n\t\t\t\t\t${name}.u();\n\t\t\t\t\t${name}.d();\n\t\t\t\t\t${name} = null;\n\t\t\t\t});\n\t\t\t`\n\t\t\t: deindent`\n\t\t\t\t${name}.u();\n\t\t\t\t${name}.d();\n\t\t\t\t${name} = null;\n\t\t\t`;\n\n\t\tblock.builders.update.addBlock(deindent`\n\t\t\tif (${branch.condition}) {\n\t\t\t\t${enter}\n\t\t\t} else if (${name}) {\n\t\t\t\t${exit}\n\t\t\t}\n\t\t`);\n\n\t\tblock.builders.unmount.addLine(`${if_name}${name}.u();`);\n\n\t\tblock.builders.destroy.addLine(`${if_name}${name}.d();`);\n\t}\n\n\tgetBranches(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string,\n\t\tnode: Node\n\t) {\n\t\tblock.contextualise(node.expression); // TODO remove\n\n\t\tconst branches = [\n\t\t\t{\n\t\t\t\tcondition: node.metadata.snippet,\n\t\t\t\tblock: node.block.name,\n\t\t\t\thasUpdateMethod: node.block.hasUpdateMethod,\n\t\t\t\thasIntroMethod: node.block.hasIntroMethod,\n\t\t\t\thasOutroMethod: node.block.hasOutroMethod,\n\t\t\t},\n\t\t];\n\n\t\tthis.visitChildren(block, node);\n\n\t\tif (isElseIf(node.else)) {\n\t\t\tbranches.push(\n\t\t\t\t...this.getBranches(block, parentNode, parentNodes, node.else.children[0])\n\t\t\t);\n\t\t} else {\n\t\t\tbranches.push({\n\t\t\t\tcondition: null,\n\t\t\t\tblock: node.else ? node.else.block.name : null,\n\t\t\t\thasUpdateMethod: node.else ? node.else.block.hasUpdateMethod : false,\n\t\t\t\thasIntroMethod: node.else ? node.else.block.hasIntroMethod : false,\n\t\t\t\thasOutroMethod: node.else ? node.else.block.hasOutroMethod : false,\n\t\t\t});\n\n\t\t\tif (node.else) {\n\t\t\t\tthis.visitChildren(block, node.else);\n\t\t\t}\n\t\t}\n\n\t\treturn branches;\n\t}\n\n\tvisitChildren(block: Block, node: Node) {\n\t\tnode.children.forEach((child: Node) => {\n\t\t\tchild.build(node.block, null, 'nodes');\n\t\t});\n\t}\n}","import Node from './Node';\nimport Block from '../../dom/Block';\n\nexport default class Tag extends Node {\n\trenameThisMethod(\n\t\tblock: Block,\n\t\tupdate: ((value: string) => string)\n\t) {\n\t\tconst { indexes } = block.contextualise(this.expression);\n\t\tconst { dependencies, snippet } = this.metadata;\n\n\t\tconst hasChangeableIndex = Array.from(indexes).some(index => block.changeableIndexes.get(index));\n\n\t\tconst shouldCache = (\n\t\t\tthis.expression.type !== 'Identifier' ||\n\t\t\tblock.contexts.has(this.expression.name) ||\n\t\t\thasChangeableIndex\n\t\t);\n\n\t\tconst value = shouldCache && block.getUniqueName(`${this.var}_value`);\n\t\tconst content = shouldCache ? value : snippet;\n\n\t\tif (shouldCache) block.addVariable(value, snippet);\n\n\t\tif (dependencies.length || hasChangeableIndex) {\n\t\t\tconst changedCheck = (\n\t\t\t\t(block.hasOutroMethod ? `#outroing || ` : '') +\n\t\t\t\tdependencies.map((dependency: string) => `changed.${dependency}`).join(' || ')\n\t\t\t);\n\n\t\t\tconst updateCachedValue = `${value} !== (${value} = ${snippet})`;\n\n\t\t\tconst condition = shouldCache ?\n\t\t\t\t(dependencies.length ? `(${changedCheck}) && ${updateCachedValue}` : updateCachedValue) :\n\t\t\t\tchangedCheck;\n\n\t\t\tblock.builders.update.addConditional(\n\t\t\t\tcondition,\n\t\t\t\tupdate(content)\n\t\t\t);\n\t\t}\n\n\t\treturn { init: content };\n\t}\n}","import Node from './shared/Node';\nimport Tag from './shared/Tag';\nimport Block from '../dom/Block';\n\nexport default class MustacheTag extends Tag {\n\tinit(block: Block) {\n\t\tthis.cannotUseInnerHTML();\n\t\tthis.var = block.getUniqueName('text');\n\t\tblock.addDependencies(this.metadata.dependencies);\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst { init } = this.renameThisMethod(\n\t\t\tblock,\n\t\t\tvalue => `${this.var}.data = ${value};`\n\t\t);\n\n\t\tblock.addElement(\n\t\t\tthis.var,\n\t\t\t`@createText(${init})`,\n\t\t\tparentNodes && `@claimText(${parentNodes}, ${init})`,\n\t\t\tparentNode\n\t\t);\n\t}\n\n\tremount(name: string) {\n\t\treturn `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`});`;\n\t}\n}","import Node from './shared/Node';\nimport Block from '../dom/Block';\n\nexport default class PendingBlock extends Node {\n\tblock: Block;\n\tchildren: Node[];\n}","import deindent from '../../utils/deindent';\nimport Node from './shared/Node';\nimport Tag from './shared/Tag';\nimport Block from '../dom/Block';\n\nexport default class RawMustacheTag extends Tag {\n\tinit(block: Block) {\n\t\tthis.cannotUseInnerHTML();\n\t\tthis.var = block.getUniqueName('raw');\n\t\tblock.addDependencies(this.metadata.dependencies);\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst name = this.var;\n\n\t\tconst needsAnchorBefore = this.prev ? this.prev.type !== 'Element' : !parentNode;\n\t\tconst needsAnchorAfter = this.next ? this.next.type !== 'Element' : !parentNode;\n\n\t\tconst anchorBefore = needsAnchorBefore\n\t\t\t? block.getUniqueName(`${name}_before`)\n\t\t\t: (this.prev && this.prev.var) || 'null';\n\n\t\tconst anchorAfter = needsAnchorAfter\n\t\t\t? block.getUniqueName(`${name}_after`)\n\t\t\t: (this.next && this.next.var) || 'null';\n\n\t\tlet detach: string;\n\t\tlet insert: (content: string) => string;\n\t\tlet useInnerHTML = false;\n\n\t\tif (anchorBefore === 'null' && anchorAfter === 'null') {\n\t\t\tuseInnerHTML = true;\n\t\t\tdetach = `${parentNode}.innerHTML = '';`;\n\t\t\tinsert = content => `${parentNode}.innerHTML = ${content};`;\n\t\t} else if (anchorBefore === 'null') {\n\t\t\tdetach = `@detachBefore(${anchorAfter});`;\n\t\t\tinsert = content => `${anchorAfter}.insertAdjacentHTML(\"beforebegin\", ${content});`;\n\t\t} else if (anchorAfter === 'null') {\n\t\t\tdetach = `@detachAfter(${anchorBefore});`;\n\t\t\tinsert = content => `${anchorBefore}.insertAdjacentHTML(\"afterend\", ${content});`;\n\t\t} else {\n\t\t\tdetach = `@detachBetween(${anchorBefore}, ${anchorAfter});`;\n\t\t\tinsert = content => `${anchorBefore}.insertAdjacentHTML(\"afterend\", ${content});`;\n\t\t}\n\n\t\tconst { init } = this.renameThisMethod(\n\t\t\tblock,\n\t\t\tcontent => deindent`\n\t\t\t\t${!useInnerHTML && detach}\n\t\t\t\t${insert(content)}\n\t\t\t`\n\t\t);\n\n\t\t// we would have used comments here, but the `insertAdjacentHTML` api only\n\t\t// exists for `Element`s.\n\t\tif (needsAnchorBefore) {\n\t\t\tblock.addElement(\n\t\t\t\tanchorBefore,\n\t\t\t\t`@createElement('noscript')`,\n\t\t\t\tparentNodes && `@createElement('noscript')`,\n\t\t\t\tparentNode\n\t\t\t);\n\t\t}\n\n\t\tfunction addAnchorAfter() {\n\t\t\tblock.addElement(\n\t\t\t\tanchorAfter,\n\t\t\t\t`@createElement('noscript')`,\n\t\t\t\tparentNodes && `@createElement('noscript')`,\n\t\t\t\tparentNode\n\t\t\t);\n\t\t}\n\n\t\tif (needsAnchorAfter && anchorBefore === 'null') {\n\t\t\t// anchorAfter needs to be in the DOM before we\n\t\t\t// insert the HTML...\n\t\t\taddAnchorAfter();\n\t\t}\n\n\t\tblock.builders.mount.addLine(insert(init));\n\t\tblock.builders.detachRaw.addBlock(detach);\n\n\t\tif (needsAnchorAfter && anchorBefore !== 'null') {\n\t\t\t// ...otherwise it should go afterwards\n\t\t\taddAnchorAfter();\n\t\t}\n\t}\n\n\tremount(name: string) {\n\t\treturn `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`});`;\n\t}\n}","import Node from './shared/Node';\n\nexport default class Ref extends Node {\n\tname: string;\n\tvalue: Node[]\n\texpression: Node\n}","import deindent from '../../utils/deindent';\nimport isValidIdentifier from '../../utils/isValidIdentifier';\nimport reservedNames from '../../utils/reservedNames';\nimport Node from './shared/Node';\nimport Element from './Element';\nimport Attribute from './Attribute';\nimport Block from '../dom/Block';\n\nexport default class Slot extends Element {\n\ttype: 'Element';\n\tname: string;\n\tattributes: Attribute[];\n\tchildren: Node[];\n\n\tinit(\n\t\tblock: Block,\n\t\tstripWhitespace: boolean,\n\t\tnextSibling: Node\n\t) {\n\t\tthis.cannotUseInnerHTML();\n\n\t\tthis.var = block.getUniqueName('slot');\n\n\t\tif (this.children.length) {\n\t\t\tthis.initChildren(block, stripWhitespace, nextSibling);\n\t\t}\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst { generator } = this;\n\n\t\tconst slotName = this.getStaticAttributeValue('name') || 'default';\n\t\tgenerator.slots.add(slotName);\n\n\t\tconst content_name = block.getUniqueName(`slot_content_${slotName}`);\n\t\tconst prop = !isValidIdentifier(slotName) || (generator.legacy && reservedNames.has(slotName)) ? `[\"${slotName}\"]` : `.${slotName}`;\n\t\tblock.addVariable(content_name, `#component._slotted${prop}`);\n\n\t\tconst needsAnchorBefore = this.prev ? this.prev.type !== 'Element' : !parentNode;\n\t\tconst needsAnchorAfter = this.next ? this.next.type !== 'Element' : !parentNode;\n\n\t\tconst anchorBefore = needsAnchorBefore\n\t\t\t? block.getUniqueName(`${content_name}_before`)\n\t\t\t: (this.prev && this.prev.var) || 'null';\n\n\t\tconst anchorAfter = needsAnchorAfter\n\t\t\t? block.getUniqueName(`${content_name}_after`)\n\t\t\t: (this.next && this.next.var) || 'null';\n\n\t\tif (needsAnchorBefore) block.addVariable(anchorBefore);\n\t\tif (needsAnchorAfter) block.addVariable(anchorAfter);\n\n\t\tlet mountBefore = block.builders.mount.toString();\n\t\tlet unmountBefore = block.builders.unmount.toString();\n\n\t\tblock.builders.create.pushCondition(`!${content_name}`);\n\t\tblock.builders.hydrate.pushCondition(`!${content_name}`);\n\t\tblock.builders.mount.pushCondition(`!${content_name}`);\n\t\tblock.builders.update.pushCondition(`!${content_name}`);\n\t\tblock.builders.unmount.pushCondition(`!${content_name}`);\n\t\tblock.builders.destroy.pushCondition(`!${content_name}`);\n\n\t\tthis.children.forEach((child: Node) => {\n\t\t\tchild.build(block, parentNode, parentNodes);\n\t\t});\n\n\t\tblock.builders.create.popCondition();\n\t\tblock.builders.hydrate.popCondition();\n\t\tblock.builders.mount.popCondition();\n\t\tblock.builders.update.popCondition();\n\t\tblock.builders.unmount.popCondition();\n\t\tblock.builders.destroy.popCondition();\n\n\t\tconst mountLeadin = block.builders.mount.toString() !== mountBefore\n\t\t\t? `else`\n\t\t\t: `if (${content_name})`;\n\n\t\tif (parentNode) {\n\t\t\tblock.builders.mount.addBlock(deindent`\n\t\t\t\t${mountLeadin} {\n\t\t\t\t\t${needsAnchorBefore && `@appendNode(${anchorBefore} || (${anchorBefore} = @createComment()), ${parentNode});`}\n\t\t\t\t\t@appendNode(${content_name}, ${parentNode});\n\t\t\t\t\t${needsAnchorAfter && `@appendNode(${anchorAfter} || (${anchorAfter} = @createComment()), ${parentNode});`}\n\t\t\t\t}\n\t\t\t`);\n\t\t} else {\n\t\t\tblock.builders.mount.addBlock(deindent`\n\t\t\t\t${mountLeadin} {\n\t\t\t\t\t${needsAnchorBefore && `@insertNode(${anchorBefore} || (${anchorBefore} = @createComment()), #target, anchor);`}\n\t\t\t\t\t@insertNode(${content_name}, #target, anchor);\n\t\t\t\t\t${needsAnchorAfter && `@insertNode(${anchorAfter} || (${anchorAfter} = @createComment()), #target, anchor);`}\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\t// if the slot is unmounted, move nodes back into the document fragment,\n\t\t// so that it can be reinserted later\n\t\t// TODO so that this can work with public API, component._slotted should\n\t\t// be all fragments, derived from options.slots. Not === options.slots\n\t\tconst unmountLeadin = block.builders.unmount.toString() !== unmountBefore\n\t\t\t? `else`\n\t\t\t: `if (${content_name})`;\n\n\t\tif (anchorBefore === 'null' && anchorAfter === 'null') {\n\t\t\tblock.builders.unmount.addBlock(deindent`\n\t\t\t\t${unmountLeadin} {\n\t\t\t\t\t@reinsertChildren(${parentNode}, ${content_name});\n\t\t\t\t}\n\t\t\t`);\n\t\t} else if (anchorBefore === 'null') {\n\t\t\tblock.builders.unmount.addBlock(deindent`\n\t\t\t\t${unmountLeadin} {\n\t\t\t\t\t@reinsertBefore(${anchorAfter}, ${content_name});\n\t\t\t\t}\n\t\t\t`);\n\t\t} else if (anchorAfter === 'null') {\n\t\t\tblock.builders.unmount.addBlock(deindent`\n\t\t\t\t${unmountLeadin} {\n\t\t\t\t\t@reinsertAfter(${anchorBefore}, ${content_name});\n\t\t\t\t}\n\t\t\t`);\n\t\t} else {\n\t\t\tblock.builders.unmount.addBlock(deindent`\n\t\t\t\t${unmountLeadin} {\n\t\t\t\t\t@reinsertBetween(${anchorBefore}, ${anchorAfter}, ${content_name});\n\t\t\t\t\t@detachNode(${anchorBefore});\n\t\t\t\t\t@detachNode(${anchorAfter});\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\t}\n\n\tgetStaticAttributeValue(name: string) {\n\t\tconst attribute = this.attributes.find(\n\t\t\t(attr: Node) => attr.name.toLowerCase() === name\n\t\t);\n\n\t\tif (!attribute) return null;\n\n\t\tif (attribute.value === true) return true;\n\t\tif (attribute.value.length === 0) return '';\n\n\t\tif (attribute.value.length === 1 && attribute.value[0].type === 'Text') {\n\t\t\treturn attribute.value[0].data;\n\t\t}\n\n\t\treturn null;\n\t}\n}","import { stringify } from '../../utils/stringify';\nimport Node from './shared/Node';\nimport Block from '../dom/Block';\n\n// Whitespace inside one of these elements will not result in\n// a whitespace node being created in any circumstances. (This\n// list is almost certainly very incomplete)\nconst elementsWithoutText = new Set([\n\t'audio',\n\t'datalist',\n\t'dl',\n\t'ol',\n\t'optgroup',\n\t'select',\n\t'ul',\n\t'video',\n]);\n\nfunction shouldSkip(node: Text) {\n\tif (/\\S/.test(node.data)) return false;\n\n\tconst parentElement = node.findNearest(/(?:Element|Component|Head)/);\n\tif (!parentElement) return false;\n\n\tif (parentElement.type === 'Head') return true;\n\tif (parentElement.type === 'Component') return parentElement.children.length === 1 && node === parentElement.children[0];\n\n\treturn parentElement.namespace || elementsWithoutText.has(parentElement.name);\n}\n\nexport default class Text extends Node {\n\ttype: 'Text';\n\tdata: string;\n\tshouldSkip: boolean;\n\n\tinit(block: Block) {\n\t\tconst parentElement = this.findNearest(/(?:Element|Component)/);\n\n\t\tif (shouldSkip(this)) {\n\t\t\tthis.shouldSkip = true;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.var = block.getUniqueName(`text`);\n\t}\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tif (this.shouldSkip) return;\n\n\t\tblock.addElement(\n\t\t\tthis.var,\n\t\t\t`@createText(${stringify(this.data)})`,\n\t\t\tparentNodes && `@claimText(${parentNodes}, ${stringify(this.data)})`,\n\t\t\tparentNode\n\t\t);\n\t}\n\n\tremount(name: string) {\n\t\treturn `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`});`;\n\t}\n}","import Node from './shared/Node';\nimport Block from '../dom/Block';\n\nexport default class ThenBlock extends Node {\n\tblock: Block;\n\tchildren: Node[];\n}","import { stringify } from '../../utils/stringify';\nimport getExpressionPrecedence from '../../utils/getExpressionPrecedence';\nimport Node from './shared/Node';\nimport Block from '../dom/Block';\n\nexport default class Title extends Node {\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst isDynamic = !!this.children.find(node => node.type !== 'Text');\n\n\t\tif (isDynamic) {\n\t\t\tlet value;\n\n\t\t\tconst allDependencies = new Set();\n\t\t\tlet shouldCache;\n\n\t\t\t// TODO some of this code is repeated in Tag.ts — would be good to\n\t\t\t// DRY it out if that's possible without introducing crazy indirection\n\t\t\tif (this.children.length === 1) {\n\t\t\t\t// single {{tag}} — may be a non-string\n\t\t\t\tconst { expression } = this.children[0];\n\t\t\t\tconst { indexes } = block.contextualise(expression);\n\t\t\t\tconst { dependencies, snippet } = this.children[0].metadata;\n\n\t\t\t\tvalue = snippet;\n\t\t\t\tdependencies.forEach(d => {\n\t\t\t\t\tallDependencies.add(d);\n\t\t\t\t});\n\n\t\t\t\tshouldCache = (\n\t\t\t\t\texpression.type !== 'Identifier' ||\n\t\t\t\t\tblock.contexts.has(expression.name)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// '{{foo}} {{bar}}' — treat as string concatenation\n\t\t\t\tvalue =\n\t\t\t\t\t(this.children[0].type === 'Text' ? '' : `\"\" + `) +\n\t\t\t\t\tthis.children\n\t\t\t\t\t\t.map((chunk: Node) => {\n\t\t\t\t\t\t\tif (chunk.type === 'Text') {\n\t\t\t\t\t\t\t\treturn stringify(chunk.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst { indexes } = block.contextualise(chunk.expression);\n\t\t\t\t\t\t\t\tconst { dependencies, snippet } = chunk.metadata;\n\n\t\t\t\t\t\t\t\tdependencies.forEach(d => {\n\t\t\t\t\t\t\t\t\tallDependencies.add(d);\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn getExpressionPrecedence(chunk.expression) <= 13 ? `(${snippet})` : snippet;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join(' + ');\n\n\t\t\t\tshouldCache = true;\n\t\t\t}\n\n\t\t\tconst last = shouldCache && block.getUniqueName(\n\t\t\t\t`title_value`\n\t\t\t);\n\n\t\t\tif (shouldCache) block.addVariable(last);\n\n\t\t\tlet updater;\n\t\t\tconst init = shouldCache ? `${last} = ${value}` : value;\n\n\t\t\tblock.builders.init.addLine(\n\t\t\t\t`document.title = ${init};`\n\t\t\t);\n\t\t\tupdater = `document.title = ${shouldCache ? last : value};`;\n\n\t\t\tif (allDependencies.size) {\n\t\t\t\tconst dependencies = Array.from(allDependencies);\n\t\t\t\tconst changedCheck = (\n\t\t\t\t\t( block.hasOutroMethod ? `#outroing || ` : '' ) +\n\t\t\t\t\tdependencies.map(dependency => `changed.${dependency}`).join(' || ')\n\t\t\t\t);\n\n\t\t\t\tconst updateCachedValue = `${last} !== (${last} = ${value})`;\n\n\t\t\t\tconst condition = shouldCache ?\n\t\t\t\t\t( dependencies.length ? `(${changedCheck}) && ${updateCachedValue}` : updateCachedValue ) :\n\t\t\t\t\tchangedCheck;\n\n\t\t\t\tblock.builders.update.addConditional(\n\t\t\t\t\tcondition,\n\t\t\t\t\tupdater\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst value = stringify(this.children[0].data);\n\t\t\tblock.builders.hydrate.addLine(`document.title = ${value};`);\n\t\t}\n\t}\n}","import Node from './shared/Node';\n\nexport default class Transition extends Node {\n\tname: string;\n\tvalue: Node[]\n\texpression: Node\n}","import CodeBuilder from '../../utils/CodeBuilder';\nimport deindent from '../../utils/deindent';\nimport { stringify } from '../../utils/stringify';\nimport flattenReference from '../../utils/flattenReference';\nimport isVoidElementName from '../../utils/isVoidElementName';\nimport validCalleeObjects from '../../utils/validCalleeObjects';\nimport reservedNames from '../../utils/reservedNames';\nimport Node from './shared/Node';\nimport Block from '../dom/Block';\nimport Attribute from './Attribute';\n\nconst associatedEvents = {\n\tinnerWidth: 'resize',\n\tinnerHeight: 'resize',\n\touterWidth: 'resize',\n\touterHeight: 'resize',\n\n\tscrollX: 'scroll',\n\tscrollY: 'scroll',\n};\n\nconst properties = {\n\tscrollX: 'pageXOffset',\n\tscrollY: 'pageYOffset'\n};\n\nconst readonly = new Set([\n\t'innerWidth',\n\t'innerHeight',\n\t'outerWidth',\n\t'outerHeight',\n\t'online',\n]);\n\nexport default class Window extends Node {\n\ttype: 'Window';\n\tattributes: Attribute[];\n\n\tbuild(\n\t\tblock: Block,\n\t\tparentNode: string,\n\t\tparentNodes: string\n\t) {\n\t\tconst { generator } = this;\n\n\t\tconst events = {};\n\t\tconst bindings: Record<string, string> = {};\n\n\t\tthis.attributes.forEach((attribute: Node) => {\n\t\t\tif (attribute.type === 'EventHandler') {\n\t\t\t\t// TODO verify that it's a valid callee (i.e. built-in or declared method)\n\t\t\t\tgenerator.addSourcemapLocations(attribute.expression);\n\n\t\t\t\tconst isCustomEvent = generator.events.has(attribute.name);\n\n\t\t\t\tlet usesState = false;\n\n\t\t\t\tattribute.expression.arguments.forEach((arg: Node) => {\n\t\t\t\t\tblock.contextualise(arg, null, true);\n\t\t\t\t\tconst { dependencies } = arg.metadata;\n\t\t\t\t\tif (dependencies.length) usesState = true;\n\t\t\t\t});\n\n\t\t\t\tconst flattened = flattenReference(attribute.expression.callee);\n\t\t\t\tif (flattened.name !== 'event' && flattened.name !== 'this') {\n\t\t\t\t\t// allow event.stopPropagation(), this.select() etc\n\t\t\t\t\tgenerator.code.prependRight(\n\t\t\t\t\t\tattribute.expression.start,\n\t\t\t\t\t\t`${block.alias('component')}.`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst handlerName = block.getUniqueName(`onwindow${attribute.name}`);\n\t\t\t\tconst handlerBody = deindent`\n\t\t\t\t\t${usesState && `var state = #component.get();`}\n\t\t\t\t\t[✂${attribute.expression.start}-${attribute.expression.end}✂];\n\t\t\t\t`;\n\n\t\t\t\tif (isCustomEvent) {\n\t\t\t\t\t// TODO dry this out\n\t\t\t\t\tblock.addVariable(handlerName);\n\n\t\t\t\t\tblock.builders.hydrate.addBlock(deindent`\n\t\t\t\t\t\t${handlerName} = %events-${attribute.name}.call(#component, window, function(event) {\n\t\t\t\t\t\t\t${handlerBody}\n\t\t\t\t\t\t});\n\t\t\t\t\t`);\n\n\t\t\t\t\tif (generator.options.dev) {\n\t\t\t\t\t\tblock.builders.hydrate.addBlock(deindent`\n\t\t\t\t\t\t\tif (${handlerName}.teardown) {\n\t\t\t\t\t\t\t\tconsole.warn(\"Return 'destroy()' from custom event handlers. Returning 'teardown()' has been deprecated and will be unsupported in Svelte 2\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`);\n\t\t\t\t\t}\n\n\t\t\t\t\tblock.builders.destroy.addLine(deindent`\n\t\t\t\t\t\t${handlerName}[${handlerName}.destroy ? 'destroy' : 'teardown']();\n\t\t\t\t\t`);\n\t\t\t\t} else {\n\t\t\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\t\t\tfunction ${handlerName}(event) {\n\t\t\t\t\t\t\t${handlerBody}\n\t\t\t\t\t\t}\n\t\t\t\t\t\twindow.addEventListener(\"${attribute.name}\", ${handlerName});\n\t\t\t\t\t`);\n\n\t\t\t\t\tblock.builders.destroy.addBlock(deindent`\n\t\t\t\t\t\twindow.removeEventListener(\"${attribute.name}\", ${handlerName});\n\t\t\t\t\t`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (attribute.type === 'Binding') {\n\t\t\t\t// in dev mode, throw if read-only values are written to\n\t\t\t\tif (readonly.has(attribute.name)) {\n\t\t\t\t\tgenerator.readonly.add(attribute.value.name);\n\t\t\t\t}\n\n\t\t\t\tbindings[attribute.name] = attribute.value.name;\n\n\t\t\t\t// bind:online is a special case, we need to listen for two separate events\n\t\t\t\tif (attribute.name === 'online') return;\n\n\t\t\t\tconst associatedEvent = associatedEvents[attribute.name];\n\t\t\t\tconst property = properties[attribute.name] || attribute.name;\n\n\t\t\t\tif (!events[associatedEvent]) events[associatedEvent] = [];\n\t\t\t\tevents[associatedEvent].push(\n\t\t\t\t\t`${attribute.value.name}: this.${property}`\n\t\t\t\t);\n\n\t\t\t\t// add initial value\n\t\t\t\tgenerator.metaBindings.push(\n\t\t\t\t\t`this._state.${attribute.value.name} = window.${property};`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tconst lock = block.getUniqueName(`window_updating`);\n\t\tconst clear = block.getUniqueName(`clear_window_updating`);\n\t\tconst timeout = block.getUniqueName(`window_updating_timeout`);\n\n\t\tObject.keys(events).forEach(event => {\n\t\t\tconst handlerName = block.getUniqueName(`onwindow${event}`);\n\t\t\tconst props = events[event].join(',\\n');\n\n\t\t\tif (event === 'scroll') {\n\t\t\t\t// TODO other bidirectional bindings...\n\t\t\t\tblock.addVariable(lock, 'false');\n\t\t\t\tblock.addVariable(clear, `function() { ${lock} = false; }`);\n\t\t\t\tblock.addVariable(timeout);\n\t\t\t}\n\n\t\t\tconst handlerBody = deindent`\n\t\t\t\t${event === 'scroll' && deindent`\n\t\t\t\t\tif (${lock}) return;\n\t\t\t\t\t${lock} = true;\n\t\t\t\t`}\n\t\t\t\t${generator.options.dev && `component._updatingReadonlyProperty = true;`}\n\n\t\t\t\t#component.set({\n\t\t\t\t\t${props}\n\t\t\t\t});\n\n\t\t\t\t${generator.options.dev && `component._updatingReadonlyProperty = false;`}\n\t\t\t\t${event === 'scroll' && `${lock} = false;`}\n\t\t\t`;\n\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\tfunction ${handlerName}(event) {\n\t\t\t\t\t${handlerBody}\n\t\t\t\t}\n\t\t\t\twindow.addEventListener(\"${event}\", ${handlerName});\n\t\t\t`);\n\n\t\t\tblock.builders.destroy.addBlock(deindent`\n\t\t\t\twindow.removeEventListener(\"${event}\", ${handlerName});\n\t\t\t`);\n\t\t});\n\n\t\t// special case... might need to abstract this out if we add more special cases\n\t\tif (bindings.scrollX && bindings.scrollY) {\n\t\t\tconst observerCallback = block.getUniqueName(`scrollobserver`);\n\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\tfunction ${observerCallback}() {\n\t\t\t\t\t${lock} = true;\n\t\t\t\t\tclearTimeout(${timeout});\n\t\t\t\t\tvar x = ${bindings.scrollX\n\t\t\t\t\t\t? `#component.get(\"${bindings.scrollX}\")`\n\t\t\t\t\t\t: `window.pageXOffset`};\n\t\t\t\t\tvar y = ${bindings.scrollY\n\t\t\t\t\t\t? `#component.get(\"${bindings.scrollY}\")`\n\t\t\t\t\t\t: `window.pageYOffset`};\n\t\t\t\t\twindow.scrollTo(x, y);\n\t\t\t\t\t${timeout} = setTimeout(${clear}, 100);\n\t\t\t\t}\n\t\t\t`);\n\n\t\t\tif (bindings.scrollX)\n\t\t\t\tblock.builders.init.addLine(\n\t\t\t\t\t`#component.observe(\"${bindings.scrollX}\", ${observerCallback});`\n\t\t\t\t);\n\t\t\tif (bindings.scrollY)\n\t\t\t\tblock.builders.init.addLine(\n\t\t\t\t\t`#component.observe(\"${bindings.scrollY}\", ${observerCallback});`\n\t\t\t\t);\n\t\t} else if (bindings.scrollX || bindings.scrollY) {\n\t\t\tconst isX = !!bindings.scrollX;\n\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\t#component.observe(\"${bindings.scrollX || bindings.scrollY}\", function(${isX ? 'x' : 'y'}) {\n\t\t\t\t\t${lock} = true;\n\t\t\t\t\tclearTimeout(${timeout});\n\t\t\t\t\twindow.scrollTo(${isX ? 'x, window.pageYOffset' : 'window.pageXOffset, y'});\n\t\t\t\t\t${timeout} = setTimeout(${clear}, 100);\n\t\t\t\t});\n\t\t\t`);\n\t\t}\n\n\t\t// another special case. (I'm starting to think these are all special cases.)\n\t\tif (bindings.online) {\n\t\t\tconst handlerName = block.getUniqueName(`onlinestatuschanged`);\n\t\t\tblock.builders.init.addBlock(deindent`\n\t\t\t\tfunction ${handlerName}(event) {\n\t\t\t\t\t#component.set({ ${bindings.online}: navigator.onLine });\n\t\t\t\t}\n\t\t\t\twindow.addEventListener(\"online\", ${handlerName});\n\t\t\t\twindow.addEventListener(\"offline\", ${handlerName});\n\t\t\t`);\n\n\t\t\t// add initial value\n\t\t\tgenerator.metaBindings.push(\n\t\t\t\t`this._state.${bindings.online} = navigator.onLine;`\n\t\t\t);\n\n\t\t\tblock.builders.destroy.addBlock(deindent`\n\t\t\t\twindow.removeEventListener(\"online\", ${handlerName});\n\t\t\t\twindow.removeEventListener(\"offline\", ${handlerName});\n\t\t\t`);\n\t\t}\n\t}\n}\n","import Node from './shared/Node';\nimport Attribute from './Attribute';\nimport AwaitBlock from './AwaitBlock';\nimport Action from './Action';\nimport Binding from './Binding';\nimport CatchBlock from './CatchBlock';\nimport Comment from './Comment';\nimport Component from './Component';\nimport EachBlock from './EachBlock';\nimport Element from './Element';\nimport ElseBlock from './ElseBlock';\nimport EventHandler from './EventHandler';\nimport Fragment from './Fragment';\nimport Head from './Head';\nimport IfBlock from './IfBlock';\nimport MustacheTag from './MustacheTag';\nimport PendingBlock from './PendingBlock';\nimport RawMustacheTag from './RawMustacheTag';\nimport Ref from './Ref';\nimport Slot from './Slot';\nimport Text from './Text';\nimport ThenBlock from './ThenBlock';\nimport Title from './Title';\nimport Transition from './Transition';\nimport Window from './Window';\n\nconst nodes: Record<string, any> = {\n\tAttribute,\n\tAwaitBlock,\n\tAction,\n\tBinding,\n\tCatchBlock,\n\tComment,\n\tComponent,\n\tEachBlock,\n\tElement,\n\tElseBlock,\n\tEventHandler,\n\tFragment,\n\tHead,\n\tIfBlock,\n\tMustacheTag,\n\tPendingBlock,\n\tRawMustacheTag,\n\tRef,\n\tSlot,\n\tText,\n\tThenBlock,\n\tTitle,\n\tTransition,\n\tWindow\n};\n\nexport default nodes;\n","import MagicString, { Bundle } from 'magic-string';\nimport isReference from 'is-reference';\nimport { walk, childKeys } from 'estree-walker';\nimport { getLocator } from 'locate-character';\nimport Stats from '../Stats';\nimport deindent from '../utils/deindent';\nimport CodeBuilder from '../utils/CodeBuilder';\nimport getCodeFrame from '../utils/getCodeFrame';\nimport flattenReference from '../utils/flattenReference';\nimport reservedNames from '../utils/reservedNames';\nimport namespaces from '../utils/namespaces';\nimport { removeNode, removeObjectKey } from '../utils/removeNode';\nimport nodeToString from '../utils/nodeToString';\nimport wrapModule from './wrapModule';\nimport annotateWithScopes, { Scope } from '../utils/annotateWithScopes';\nimport getName from '../utils/getName';\nimport clone from '../utils/clone';\nimport Stylesheet from '../css/Stylesheet';\nimport { test } from '../config';\nimport nodes from './nodes/index';\nimport { Node, GenerateOptions, Parsed, CompileOptions, CustomElementOptions } from '../interfaces';\n\ninterface Computation {\n\tkey: string;\n\tdeps: string[]\n}\n\nfunction detectIndentation(str: string) {\n\tconst pattern = /^[\\t\\s]{1,4}/gm;\n\tlet match;\n\n\twhile (match = pattern.exec(str)) {\n\t\tif (match[0][0] === '\\t') return '\\t';\n\t\tif (match[0].length === 2) return '  ';\n\t}\n\n\treturn '    ';\n}\n\nfunction getIndentationLevel(str: string, b: number) {\n\tlet a = b;\n\twhile (a > 0 && str[a - 1] !== '\\n') a -= 1;\n\treturn /^\\s*/.exec(str.slice(a, b))[0];\n}\n\nfunction getIndentExclusionRanges(node: Node) {\n\tconst ranges: Node[] = [];\n\twalk(node, {\n\t\tenter(node: Node) {\n\t\t\tif (node.type === 'TemplateElement') ranges.push(node);\n\t\t}\n\t});\n\treturn ranges;\n}\n\nfunction removeIndentation(\n\tcode: MagicString,\n\tstart: number,\n\tend: number,\n\tindentationLevel: string,\n\tranges: Node[]\n) {\n\tconst str = code.original.slice(start, end);\n\tconst pattern = new RegExp(`^${indentationLevel}`, 'gm');\n\tlet match;\n\n\twhile (match = pattern.exec(str)) {\n\t\t// TODO bail if we're inside an exclusion range\n\t\tcode.remove(start + match.index, start + match.index + indentationLevel.length);\n\t}\n}\n\n// We need to tell estree-walker that it should always\n// look for an `else` block, otherwise it might get\n// the wrong idea about the shape of each/if blocks\nchildKeys.EachBlock = childKeys.IfBlock = ['children', 'else'];\nchildKeys.Attribute = ['value'];\n\nexport default class Generator {\n\tstats: Stats;\n\n\tast: Parsed;\n\tparsed: Parsed;\n\tsource: string;\n\tname: string;\n\toptions: CompileOptions;\n\n\tcustomElement: CustomElementOptions;\n\ttag: string;\n\tprops: string[];\n\n\tdefaultExport: Node[];\n\timports: Node[];\n\thelpers: Set<string>;\n\tcomponents: Set<string>;\n\tevents: Set<string>;\n\ttransitions: Set<string>;\n\tactions: Set<string>;\n\timportedComponents: Map<string, string>;\n\tnamespace: string;\n\thasComponents: boolean;\n\tcomputations: Computation[];\n\ttemplateProperties: Record<string, Node>;\n\tslots: Set<string>;\n\tjavascript: string;\n\n\tcode: MagicString;\n\n\tbindingGroups: string[];\n\tindirectDependencies: Map<string, Set<string>>;\n\texpectedProperties: Set<string>;\n\tusesRefs: boolean;\n\n\tlocate: (c: number) => { line: number, column: number };\n\n\tstylesheet: Stylesheet;\n\n\tuserVars: Set<string>;\n\ttemplateVars: Map<string, string>;\n\taliases: Map<string, string>;\n\tusedNames: Set<string>;\n\n\tconstructor(\n\t\tparsed: Parsed,\n\t\tsource: string,\n\t\tname: string,\n\t\tstylesheet: Stylesheet,\n\t\toptions: CompileOptions,\n\t\tstats: Stats,\n\t\tdom: boolean\n\t) {\n\t\tstats.start('compile');\n\t\tthis.stats = stats;\n\n\t\tthis.ast = clone(parsed);\n\n\t\tthis.parsed = parsed;\n\t\tthis.source = source;\n\t\tthis.options = options;\n\n\t\tthis.imports = [];\n\t\tthis.helpers = new Set();\n\t\tthis.components = new Set();\n\t\tthis.events = new Set();\n\t\tthis.transitions = new Set();\n\t\tthis.actions = new Set();\n\t\tthis.importedComponents = new Map();\n\t\tthis.slots = new Set();\n\n\t\tthis.bindingGroups = [];\n\t\tthis.indirectDependencies = new Map();\n\n\t\tthis.locate = getLocator(this.source);\n\n\t\t// track which properties are needed, so we can provide useful info\n\t\t// in dev mode\n\t\tthis.expectedProperties = new Set();\n\n\t\tthis.code = new MagicString(source);\n\t\tthis.usesRefs = false;\n\n\t\t// styles\n\t\tthis.stylesheet = stylesheet;\n\n\t\t// allow compiler to deconflict user's `import { get } from 'whatever'` and\n\t\t// Svelte's builtin `import { get, ... } from 'svelte/shared.ts'`;\n\t\tthis.userVars = new Set();\n\t\tthis.templateVars = new Map();\n\t\tthis.aliases = new Map();\n\t\tthis.usedNames = new Set();\n\n\t\tthis.computations = [];\n\t\tthis.templateProperties = {};\n\n\t\tthis.walkJs(dom);\n\t\tthis.name = this.alias(name);\n\n\t\tif (options.customElement === true) {\n\t\t\tthis.customElement = {\n\t\t\t\ttag: this.tag,\n\t\t\t\tprops: this.props\n\t\t\t}\n\t\t} else {\n\t\t\tthis.customElement = options.customElement;\n\t\t}\n\n\t\tif (this.customElement && !this.customElement.tag) {\n\t\t\tthrow new Error(`No tag name specified`); // TODO better error\n\t\t}\n\n\t\tthis.walkTemplate();\n\t\tif (!this.customElement) this.stylesheet.reify();\n\t}\n\n\taddSourcemapLocations(node: Node) {\n\t\twalk(node, {\n\t\t\tenter: (node: Node) => {\n\t\t\t\tthis.code.addSourcemapLocation(node.start);\n\t\t\t\tthis.code.addSourcemapLocation(node.end);\n\t\t\t},\n\t\t});\n\t}\n\n\talias(name: string) {\n\t\tif (!this.aliases.has(name)) {\n\t\t\tthis.aliases.set(name, this.getUniqueName(name));\n\t\t}\n\n\t\treturn this.aliases.get(name);\n\t}\n\n\tcontextualise(\n\t\tcontexts: Map<string, string>,\n\t\tindexes: Map<string, string>,\n\t\texpression: Node,\n\t\tcontext: string,\n\t\tisEventHandler: boolean\n\t): {\n\t\tcontexts: Set<string>,\n\t\tindexes: Set<string>\n\t} {\n\t\t// this.addSourcemapLocations(expression);\n\n\t\tconst usedContexts: Set<string> = new Set();\n\t\tconst usedIndexes: Set<string> = new Set();\n\n\t\tconst { code, helpers } = this;\n\n\t\tlet scope: Scope;\n\t\tlet lexicalDepth = 0;\n\n\t\tconst self = this;\n\n\t\twalk(expression, {\n\t\t\tenter(node: Node, parent: Node, key: string) {\n\t\t\t\tif (/^Function/.test(node.type)) lexicalDepth += 1;\n\n\t\t\t\tif (node._scope) {\n\t\t\t\t\tscope = node._scope;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'ThisExpression') {\n\t\t\t\t\tif (lexicalDepth === 0 && context)\n\t\t\t\t\t\tcode.overwrite(node.start, node.end, context, {\n\t\t\t\t\t\t\tstoreName: true,\n\t\t\t\t\t\t\tcontentOnly: false,\n\t\t\t\t\t\t});\n\t\t\t\t} else if (isReference(node, parent)) {\n\t\t\t\t\tconst { name } = flattenReference(node);\n\t\t\t\t\tif (scope && scope.has(name)) return;\n\n\t\t\t\t\tif (name === 'event' && isEventHandler) {\n\t\t\t\t\t\t// noop\n\t\t\t\t\t} else if (contexts.has(name)) {\n\t\t\t\t\t\tconst contextName = contexts.get(name);\n\t\t\t\t\t\tif (contextName !== name) {\n\t\t\t\t\t\t\t// this is true for 'reserved' names like `state` and `component`,\n\t\t\t\t\t\t\t// also destructured contexts\n\t\t\t\t\t\t\tcode.overwrite(\n\t\t\t\t\t\t\t\tnode.start,\n\t\t\t\t\t\t\t\tnode.start + name.length,\n\t\t\t\t\t\t\t\tcontextName,\n\t\t\t\t\t\t\t\t{ storeName: true, contentOnly: false }\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tconst destructuredName = contextName.replace(/\\[\\d+\\]/, '');\n\t\t\t\t\t\t\tif (destructuredName !== contextName) {\n\t\t\t\t\t\t\t\t// so that hoisting the context works correctly\n\t\t\t\t\t\t\t\tusedContexts.add(destructuredName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tusedContexts.add(name);\n\t\t\t\t\t} else if (helpers.has(name)) {\n\t\t\t\t\t\tlet object = node;\n\t\t\t\t\t\twhile (object.type === 'MemberExpression') object = object.object;\n\n\t\t\t\t\t\tconst alias = self.templateVars.get(`helpers-${name}`);\n\t\t\t\t\t\tif (alias !== name) code.overwrite(object.start, object.end, alias);\n\t\t\t\t\t} else if (indexes.has(name)) {\n\t\t\t\t\t\tconst context = indexes.get(name);\n\t\t\t\t\t\tusedContexts.add(context); // TODO is this right?\n\t\t\t\t\t\tusedIndexes.add(name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle shorthand properties\n\t\t\t\t\t\tif (parent && parent.type === 'Property' && parent.shorthand) {\n\t\t\t\t\t\t\tif (key === 'key') {\n\t\t\t\t\t\t\t\tcode.appendLeft(node.start, `${name}: `);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcode.prependRight(node.start, `state.`);\n\t\t\t\t\t\tusedContexts.add('state');\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.skip();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tleave(node: Node) {\n\t\t\t\tif (/^Function/.test(node.type)) lexicalDepth -= 1;\n\t\t\t\tif (node._scope) scope = scope.parent;\n\t\t\t},\n\t\t});\n\n\t\treturn {\n\t\t\tcontexts: usedContexts,\n\t\t\tindexes: usedIndexes\n\t\t};\n\t}\n\n\tgenerate(result: string, options: CompileOptions, { banner = '', sharedPath, helpers, name, format }: GenerateOptions ) {\n\t\tconst pattern = /\\[✂(\\d+)-(\\d+)$/;\n\n\t\tconst module = wrapModule(result, format, name, options, banner, sharedPath, helpers, this.imports, this.source);\n\n\t\tconst parts = module.split('✂]');\n\t\tconst finalChunk = parts.pop();\n\n\t\tconst compiled = new Bundle({ separator: '' });\n\n\t\tfunction addString(str: string) {\n\t\t\tcompiled.addSource({\n\t\t\t\tcontent: new MagicString(str),\n\t\t\t});\n\t\t}\n\n\t\tconst { filename } = options;\n\n\t\t// special case — the source file doesn't actually get used anywhere. we need\n\t\t// to add an empty file to populate map.sources and map.sourcesContent\n\t\tif (!parts.length) {\n\t\t\tcompiled.addSource({\n\t\t\t\tfilename,\n\t\t\t\tcontent: new MagicString(this.source).remove(0, this.source.length),\n\t\t\t});\n\t\t}\n\n\t\tparts.forEach((str: string) => {\n\t\t\tconst chunk = str.replace(pattern, '');\n\t\t\tif (chunk) addString(chunk);\n\n\t\t\tconst match = pattern.exec(str);\n\n\t\t\tconst snippet = this.code.snip(+match[1], +match[2]);\n\n\t\t\tcompiled.addSource({\n\t\t\t\tfilename,\n\t\t\t\tcontent: snippet,\n\t\t\t});\n\t\t});\n\n\t\taddString(finalChunk);\n\n\t\tconst css = this.customElement ?\n\t\t\t{ code: null, map: null } :\n\t\t\tthis.stylesheet.render(options.cssOutputFilename, true);\n\n\t\tconst js = {\n\t\t\tcode: compiled.toString(),\n\t\t\tmap: compiled.generateMap({\n\t\t\t\tincludeContent: true,\n\t\t\t\tfile: options.outputFilename,\n\t\t\t})\n\t\t};\n\n\t\tObject.getOwnPropertyNames(String.prototype).forEach(name => {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(String.prototype, name);\n\t\t\tif (typeof descriptor.value === 'function') {\n\t\t\t\tObject.defineProperty(css, name, {\n\t\t\t\t\tvalue: (...args) => {\n\t\t\t\t\t\treturn css.code === null\n\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t: css.code[name].call(css.code, ...args);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.stats.stop('compile');\n\n\t\treturn {\n\t\t\tast: this.ast,\n\t\t\tjs,\n\t\t\tcss,\n\t\t\tstats: this.stats.render(this),\n\n\t\t\t// TODO deprecate\n\t\t\tcode: js.code,\n\t\t\tmap: js.map,\n\t\t\tcssMap: css.map\n\t\t};\n\t}\n\n\tgetUniqueName(name: string) {\n\t\tif (test) name = `${name}$`;\n\t\tlet alias = name;\n\t\tfor (\n\t\t\tlet i = 1;\n\t\t\treservedNames.has(alias) ||\n\t\t\tthis.userVars.has(alias) ||\n\t\t\tthis.usedNames.has(alias);\n\t\t\talias = `${name}_${i++}`\n\t\t);\n\t\tthis.usedNames.add(alias);\n\t\treturn alias;\n\t}\n\n\tgetUniqueNameMaker(names: string[]) {\n\t\tconst localUsedNames = new Set();\n\n\t\tfunction add(name: string) {\n\t\t\tlocalUsedNames.add(name);\n\t\t}\n\n\t\treservedNames.forEach(add);\n\t\tthis.userVars.forEach(add);\n\t\tnames.forEach(add);\n\n\t\treturn (name: string) => {\n\t\t\tif (test) name = `${name}$`;\n\t\t\tlet alias = name;\n\t\t\tfor (\n\t\t\t\tlet i = 1;\n\t\t\t\tthis.usedNames.has(alias) ||\n\t\t\t\tlocalUsedNames.has(alias);\n\t\t\t\talias = `${name}_${i++}`\n\t\t\t);\n\t\t\tlocalUsedNames.add(alias);\n\t\t\treturn alias;\n\t\t};\n\t}\n\n\twalkJs(dom: boolean) {\n\t\tconst {\n\t\t\tcode,\n\t\t\tsource,\n\t\t\tcomputations,\n\t\t\ttemplateProperties,\n\t\t\timports\n\t\t} = this;\n\n\t\tconst { js } = this.parsed;\n\n\t\tconst componentDefinition = new CodeBuilder();\n\n\t\tif (js) {\n\t\t\tthis.addSourcemapLocations(js.content);\n\n\t\t\tconst indentation = detectIndentation(source.slice(js.start, js.end));\n\t\t\tconst indentationLevel = getIndentationLevel(source, js.content.body[0].start);\n\t\t\tconst indentExclusionRanges = getIndentExclusionRanges(js.content);\n\n\t\t\tconst { scope, globals } = annotateWithScopes(js.content);\n\n\t\t\tscope.declarations.forEach(name => {\n\t\t\t\tthis.userVars.add(name);\n\t\t\t});\n\n\t\t\tglobals.forEach(name => {\n\t\t\t\tthis.userVars.add(name);\n\t\t\t});\n\n\t\t\tconst body = js.content.body.slice(); // slice, because we're going to be mutating the original\n\n\t\t\t// imports need to be hoisted out of the IIFE\n\t\t\tfor (let i = 0; i < body.length; i += 1) {\n\t\t\t\tconst node = body[i];\n\t\t\t\tif (node.type === 'ImportDeclaration') {\n\t\t\t\t\tremoveNode(code, js.content, node);\n\t\t\t\t\timports.push(node);\n\n\t\t\t\t\tnode.specifiers.forEach((specifier: Node) => {\n\t\t\t\t\t\tthis.userVars.add(specifier.local.name);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst defaultExport = this.defaultExport = body.find(\n\t\t\t\t(node: Node) => node.type === 'ExportDefaultDeclaration'\n\t\t\t);\n\n\t\t\tif (defaultExport) {\n\t\t\t\tdefaultExport.declaration.properties.forEach((prop: Node) => {\n\t\t\t\t\ttemplateProperties[getName(prop.key)] = prop;\n\t\t\t\t});\n\n\t\t\t\t['helpers', 'events', 'components', 'transitions', 'actions'].forEach(key => {\n\t\t\t\t\tif (templateProperties[key]) {\n\t\t\t\t\t\ttemplateProperties[key].value.properties.forEach((prop: Node) => {\n\t\t\t\t\t\t\tthis[key].add(getName(prop.key));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst addArrowFunctionExpression = (name: string, node: Node) => {\n\t\t\t\t\tconst { body, params, async } = node;\n\t\t\t\t\tconst fnKeyword = async ? 'async function' : 'function';\n\n\t\t\t\t\tconst paramString = params.length ?\n\t\t\t\t\t\t`[✂${params[0].start}-${params[params.length - 1].end}✂]` :\n\t\t\t\t\t\t``;\n\n\t\t\t\t\tif (body.type === 'BlockStatement') {\n\t\t\t\t\t\tcomponentDefinition.addBlock(deindent`\n\t\t\t\t\t\t\t${fnKeyword} ${name}(${paramString}) [✂${body.start}-${body.end}✂]\n\t\t\t\t\t\t`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomponentDefinition.addBlock(deindent`\n\t\t\t\t\t\t\t${fnKeyword} ${name}(${paramString}) {\n\t\t\t\t\t\t\t\treturn [✂${body.start}-${body.end}✂];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst addFunctionExpression = (name: string, node: Node) => {\n\t\t\t\t\tconst { async } = node;\n\t\t\t\t\tconst fnKeyword = async ? 'async function' : 'function';\n\n\t\t\t\t\tlet c = node.start;\n\t\t\t\t\twhile (this.source[c] !== '(') c += 1;\n\t\t\t\t\tcomponentDefinition.addBlock(deindent`\n\t\t\t\t\t\t${fnKeyword} ${name}[✂${c}-${node.end}✂];\n\t\t\t\t\t`);\n\t\t\t\t};\n\n\t\t\t\tconst addValue = (name: string, node: Node) => {\n\t\t\t\t\tcomponentDefinition.addBlock(deindent`\n\t\t\t\t\t\tvar ${name} = [✂${node.start}-${node.end}✂];\n\t\t\t\t\t`);\n\t\t\t\t};\n\n\t\t\t\tconst addDeclaration = (key: string, node: Node, disambiguator?: string, conflicts?: Record<string, boolean>) => {\n\t\t\t\t\tconst qualified = disambiguator ? `${disambiguator}-${key}` : key;\n\n\t\t\t\t\tif (node.type === 'Identifier' && node.name === key) {\n\t\t\t\t\t\tthis.templateVars.set(qualified, key);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet deconflicted = key;\n\t\t\t\t\tif (conflicts) while (deconflicted in conflicts) deconflicted += '_'\n\n\t\t\t\t\tlet name = this.getUniqueName(deconflicted);\n\t\t\t\t\tthis.templateVars.set(qualified, name);\n\n\t\t\t\t\t// deindent\n\t\t\t\t\tconst indentationLevel = getIndentationLevel(source, node.start);\n\t\t\t\t\tif (indentationLevel) {\n\t\t\t\t\t\tremoveIndentation(code, node.start, node.end, indentationLevel, indentExclusionRanges);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.type === 'ArrowFunctionExpression') {\n\t\t\t\t\t\taddArrowFunctionExpression(name, node);\n\t\t\t\t\t} else if (node.type === 'FunctionExpression') {\n\t\t\t\t\t\taddFunctionExpression(name, node);\n\t\t\t\t\t} else {\n\t\t\t\t\t\taddValue(name, node);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (templateProperties.components) {\n\t\t\t\t\ttemplateProperties.components.value.properties.forEach((property: Node) => {\n\t\t\t\t\t\taddDeclaration(getName(property.key), property.value, 'components');\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.computed) {\n\t\t\t\t\tconst dependencies = new Map();\n\n\t\t\t\t\ttemplateProperties.computed.value.properties.forEach((prop: Node) => {\n\t\t\t\t\t\tconst key = getName(prop.key);\n\t\t\t\t\t\tconst value = prop.value;\n\n\t\t\t\t\t\tconst deps = value.params.map(\n\t\t\t\t\t\t\t(param: Node) =>\n\t\t\t\t\t\t\t\tparam.type === 'AssignmentPattern' ? param.left.name : param.name\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdeps.forEach(dep => {\n\t\t\t\t\t\t\tthis.expectedProperties.add(dep);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdependencies.set(key, deps);\n\t\t\t\t\t});\n\n\t\t\t\t\tconst visited = new Set();\n\n\t\t\t\t\tconst visit = (key: string) => {\n\t\t\t\t\t\tif (!dependencies.has(key)) return; // not a computation\n\n\t\t\t\t\t\tif (visited.has(key)) return;\n\t\t\t\t\t\tvisited.add(key);\n\n\t\t\t\t\t\tconst deps = dependencies.get(key);\n\t\t\t\t\t\tdeps.forEach(visit);\n\n\t\t\t\t\t\tcomputations.push({ key, deps });\n\n\t\t\t\t\t\tconst prop = templateProperties.computed.value.properties.find((prop: Node) => getName(prop.key) === key);\n\n\t\t\t\t\t\taddDeclaration(key, prop.value, 'computed', {\n\t\t\t\t\t\t\tstate: true,\n\t\t\t\t\t\t\tchanged: true\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\ttemplateProperties.computed.value.properties.forEach((prop: Node) =>\n\t\t\t\t\t\tvisit(getName(prop.key))\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.data) {\n\t\t\t\t\taddDeclaration('data', templateProperties.data.value);\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.events && dom) {\n\t\t\t\t\ttemplateProperties.events.value.properties.forEach((property: Node) => {\n\t\t\t\t\t\taddDeclaration(getName(property.key), property.value, 'events');\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.helpers) {\n\t\t\t\t\ttemplateProperties.helpers.value.properties.forEach((property: Node) => {\n\t\t\t\t\t\taddDeclaration(getName(property.key), property.value, 'helpers');\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.methods && dom) {\n\t\t\t\t\taddDeclaration('methods', templateProperties.methods.value);\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.namespace) {\n\t\t\t\t\tconst ns = nodeToString(templateProperties.namespace.value);\n\t\t\t\t\tthis.namespace = namespaces[ns] || ns;\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.onrender) templateProperties.oncreate = templateProperties.onrender; // remove after v2\n\t\t\t\tif (templateProperties.oncreate && dom) {\n\t\t\t\t\taddDeclaration('oncreate', templateProperties.oncreate.value);\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.onteardown) templateProperties.ondestroy = templateProperties.onteardown; // remove after v2\n\t\t\t\tif (templateProperties.ondestroy && dom) {\n\t\t\t\t\taddDeclaration('ondestroy', templateProperties.ondestroy.value);\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.preload) {\n\t\t\t\t\taddDeclaration('preload', templateProperties.preload.value);\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.props) {\n\t\t\t\t\tthis.props = templateProperties.props.value.elements.map((element: Node) => nodeToString(element));\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.setup) {\n\t\t\t\t\taddDeclaration('setup', templateProperties.setup.value);\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.store) {\n\t\t\t\t\taddDeclaration('store', templateProperties.store.value);\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.tag) {\n\t\t\t\t\tthis.tag = nodeToString(templateProperties.tag.value);\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.transitions) {\n\t\t\t\t\ttemplateProperties.transitions.value.properties.forEach((property: Node) => {\n\t\t\t\t\t\taddDeclaration(getName(property.key), property.value, 'transitions');\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (templateProperties.actions) {\n\t\t\t\t\ttemplateProperties.actions.value.properties.forEach((property: Node) => {\n\t\t\t\t\t\taddDeclaration(getName(property.key), property.value, 'actions');\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (indentationLevel) {\n\t\t\t\tif (defaultExport) {\n\t\t\t\t\tremoveIndentation(code, js.content.start, defaultExport.start, indentationLevel, indentExclusionRanges);\n\t\t\t\t\tremoveIndentation(code, defaultExport.end, js.content.end, indentationLevel, indentExclusionRanges);\n\t\t\t\t} else {\n\t\t\t\t\tremoveIndentation(code, js.content.start, js.content.end, indentationLevel, indentExclusionRanges);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet a = js.content.start;\n\t\t\twhile (/\\s/.test(source[a])) a += 1;\n\n\t\t\tlet b = js.content.end;\n\t\t\twhile (/\\s/.test(source[b - 1])) b -= 1;\n\n\t\t\tif (defaultExport) {\n\t\t\t\tthis.javascript = '';\n\t\t\t\tif (a !== defaultExport.start) this.javascript += `[✂${a}-${defaultExport.start}✂]`;\n\t\t\t\tif (!componentDefinition.isEmpty()) this.javascript += componentDefinition;\n\t\t\t\tif (defaultExport.end !== b) this.javascript += `[✂${defaultExport.end}-${b}✂]`;\n\t\t\t} else {\n\t\t\t\tthis.javascript = a === b ? null : `[✂${a}-${b}✂]`;\n\t\t\t}\n\t\t}\n\t}\n\n\twalkTemplate() {\n\t\tconst generator = this;\n\t\tconst {\n\t\t\tcode,\n\t\t\texpectedProperties,\n\t\t\thelpers\n\t\t} = this;\n\t\tconst { html } = this.parsed;\n\n\t\tconst contextualise = (\n\t\t\tnode: Node, contextDependencies: Map<string, string[]>,\n\t\t\tindexes: Set<string>,\n\t\t\tisEventHandler: boolean\n\t\t) => {\n\t\t\tthis.addSourcemapLocations(node); // TODO this involves an additional walk — can we roll it in somewhere else?\n\t\t\tlet { scope } = annotateWithScopes(node);\n\n\t\t\tconst dependencies: Set<string> = new Set();\n\n\t\t\twalk(node, {\n\t\t\t\tenter(node: Node, parent: Node) {\n\t\t\t\t\tcode.addSourcemapLocation(node.start);\n\t\t\t\t\tcode.addSourcemapLocation(node.end);\n\n\t\t\t\t\tif (node._scope) {\n\t\t\t\t\t\tscope = node._scope;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isReference(node, parent)) {\n\t\t\t\t\t\tconst { name } = flattenReference(node);\n\t\t\t\t\t\tif (scope && scope.has(name) || helpers.has(name) || (name === 'event' && isEventHandler)) return;\n\n\t\t\t\t\t\tif (contextDependencies.has(name)) {\n\t\t\t\t\t\t\tcontextDependencies.get(name).forEach(dependency => {\n\t\t\t\t\t\t\t\tdependencies.add(dependency);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (!indexes.has(name)) {\n\t\t\t\t\t\t\tdependencies.add(name);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.skip();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tleave(node: Node, parent: Node) {\n\t\t\t\t\tif (node._scope) scope = scope.parent;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdependencies.forEach(dependency => {\n\t\t\t\texpectedProperties.add(dependency);\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tsnippet: `[✂${node.start}-${node.end}✂]`,\n\t\t\t\tdependencies: Array.from(dependencies)\n\t\t\t};\n\t\t}\n\n\t\tconst contextStack = [];\n\t\tconst indexStack = [];\n\t\tconst dependenciesStack = [];\n\n\t\tlet contextDependencies = new Map();\n\t\tconst contextDependenciesStack: Map<string, string[]>[] = [contextDependencies];\n\n\t\tlet indexes = new Set();\n\t\tconst indexesStack: Set<string>[] = [indexes];\n\n\t\tfunction parentIsHead(node) {\n\t\t\tif (!node) return false;\n\t\t\tif (node.type === 'Component' || node.type === 'Element') return false;\n\t\t\tif (node.type === 'Head') return true;\n\n\t\t\treturn parentIsHead(node.parent);\n\t\t}\n\n\t\twalk(html, {\n\t\t\tenter(node: Node, parent: Node, key: string) {\n\t\t\t\t// TODO this is hacky as hell\n\t\t\t\tif (key === 'parent') return this.skip();\n\t\t\t\tnode.parent = parent;\n\n\t\t\t\tnode.generator = generator;\n\n\t\t\t\tif (node.type === 'Element' && (node.name === ':Component' || node.name === ':Self' || generator.components.has(node.name))) {\n\t\t\t\t\tnode.type = 'Component';\n\t\t\t\t\tObject.setPrototypeOf(node, nodes.Component.prototype);\n\t\t\t\t} else if (node.type === 'Element' && node.name === 'title' && parentIsHead(parent)) { // TODO do this in parse?\n\t\t\t\t\tnode.type = 'Title';\n\t\t\t\t\tObject.setPrototypeOf(node, nodes.Title.prototype);\n\t\t\t\t} else if (node.type === 'Element' && node.name === 'slot' && !generator.customElement) {\n\t\t\t\t\tnode.type = 'Slot';\n\t\t\t\t\tObject.setPrototypeOf(node, nodes.Slot.prototype);\n\t\t\t\t} else if (node.type in nodes) {\n\t\t\t\t\tObject.setPrototypeOf(node, nodes[node.type].prototype);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'Element') {\n\t\t\t\t\tgenerator.stylesheet.apply(node);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'EachBlock') {\n\t\t\t\t\tnode.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n\n\t\t\t\t\tcontextDependencies = new Map(contextDependencies);\n\t\t\t\t\tcontextDependencies.set(node.context, node.metadata.dependencies);\n\n\t\t\t\t\tif (node.destructuredContexts) {\n\t\t\t\t\t\tnode.destructuredContexts.forEach((name: string) => {\n\t\t\t\t\t\t\tcontextDependencies.set(name, node.metadata.dependencies);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tcontextDependenciesStack.push(contextDependencies);\n\n\t\t\t\t\tif (node.index) {\n\t\t\t\t\t\tindexes = new Set(indexes);\n\t\t\t\t\t\tindexes.add(node.index);\n\t\t\t\t\t\tindexesStack.push(indexes);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'AwaitBlock') {\n\t\t\t\t\tnode.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n\n\t\t\t\t\tcontextDependencies = new Map(contextDependencies);\n\t\t\t\t\tcontextDependencies.set(node.value, node.metadata.dependencies);\n\t\t\t\t\tcontextDependencies.set(node.error, node.metadata.dependencies);\n\n\t\t\t\t\tcontextDependenciesStack.push(contextDependencies);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'IfBlock') {\n\t\t\t\t\tnode.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'MustacheTag' || node.type === 'RawMustacheTag' || node.type === 'AttributeShorthand') {\n\t\t\t\t\tnode.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n\t\t\t\t\tthis.skip();\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'Binding') {\n\t\t\t\t\tnode.metadata = contextualise(node.value, contextDependencies, indexes, false);\n\t\t\t\t\tthis.skip();\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'EventHandler' && node.expression) {\n\t\t\t\t\tnode.expression.arguments.forEach((arg: Node) => {\n\t\t\t\t\t\targ.metadata = contextualise(arg, contextDependencies, indexes, true);\n\t\t\t\t\t});\n\t\t\t\t\tthis.skip();\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'Transition' && node.expression) {\n\t\t\t\t\tnode.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n\t\t\t\t\tthis.skip();\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'Action' && node.expression) {\n\t\t\t\t\tnode.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n\t\t\t\t\tif (node.expression.type === 'CallExpression') {\n\t\t\t\t\t\tnode.expression.arguments.forEach((arg: Node) => {\n\t\t\t\t\t\t\targ.metadata = contextualise(arg, contextDependencies, indexes, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tthis.skip();\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'Component' && node.name === ':Component') {\n\t\t\t\t\tnode.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'Spread') {\n\t\t\t\t\tnode.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tleave(node: Node, parent: Node) {\n\t\t\t\tif (node.type === 'EachBlock') {\n\t\t\t\t\tcontextDependenciesStack.pop();\n\t\t\t\t\tcontextDependencies = contextDependenciesStack[contextDependenciesStack.length - 1];\n\n\t\t\t\t\tif (node.index) {\n\t\t\t\t\t\tindexesStack.pop();\n\t\t\t\t\t\tindexes = indexesStack[indexesStack.length - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'Element' && node.name === 'option') {\n\t\t\t\t\t// Special case — treat these the same way:\n\t\t\t\t\t//   <option>{{foo}}</option>\n\t\t\t\t\t//   <option value='{{foo}}'>{{foo}}</option>\n\t\t\t\t\tconst valueAttribute = node.attributes.find((attribute: Node) => attribute.name === 'value');\n\n\t\t\t\t\tif (!valueAttribute) {\n\t\t\t\t\t\tnode.attributes.push(new nodes.Attribute({\n\t\t\t\t\t\t\tgenerator,\n\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\tvalue: node.children,\n\t\t\t\t\t\t\tparent: node\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n","import MagicString from 'magic-string';\nimport isReference from 'is-reference';\nimport { parseExpressionAt } from 'acorn';\nimport annotateWithScopes from '../../utils/annotateWithScopes';\nimport { walk } from 'estree-walker';\nimport deindent from '../../utils/deindent';\nimport { stringify, escape } from '../../utils/stringify';\nimport CodeBuilder from '../../utils/CodeBuilder';\nimport globalWhitelist from '../../utils/globalWhitelist';\nimport reservedNames from '../../utils/reservedNames';\nimport shared from './shared';\nimport Generator from '../Generator';\nimport Stylesheet from '../../css/Stylesheet';\nimport Stats from '../../Stats';\nimport Block from './Block';\nimport { test } from '../../config';\nimport { Parsed, CompileOptions, Node } from '../../interfaces';\n\nexport class DomGenerator extends Generator {\n\tblocks: (Block|string)[];\n\treadonly: Set<string>;\n\tmetaBindings: string[];\n\n\thydratable: boolean;\n\tlegacy: boolean;\n\n\thasIntroTransitions: boolean;\n\thasOutroTransitions: boolean;\n\thasComplexBindings: boolean;\n\n\tneedsEncapsulateHelper: boolean;\n\n\tconstructor(\n\t\tparsed: Parsed,\n\t\tsource: string,\n\t\tname: string,\n\t\tstylesheet: Stylesheet,\n\t\toptions: CompileOptions,\n\t\tstats: Stats\n\t) {\n\t\tsuper(parsed, source, name, stylesheet, options, stats, true);\n\t\tthis.blocks = [];\n\n\t\tthis.readonly = new Set();\n\n\t\tthis.hydratable = options.hydratable;\n\t\tthis.legacy = options.legacy;\n\t\tthis.needsEncapsulateHelper = false;\n\n\t\t// initial values for e.g. window.innerWidth, if there's a <:Window> meta tag\n\t\tthis.metaBindings = [];\n\t}\n}\n\nexport default function dom(\n\tparsed: Parsed,\n\tsource: string,\n\tstylesheet: Stylesheet,\n\toptions: CompileOptions,\n\tstats: Stats\n) {\n\tconst format = options.format || 'es';\n\n\tconst generator = new DomGenerator(parsed, source, options.name || 'SvelteComponent', stylesheet, options, stats);\n\n\tconst {\n\t\tcomputations,\n\t\tname,\n\t\ttemplateProperties,\n\t\tnamespace,\n\t} = generator;\n\n\tparsed.html.build();\n\tconst { block } = parsed.html;\n\n\t// prevent fragment being created twice (#1063)\n\tif (options.customElement) block.builders.create.addLine(`this.c = @noop;`);\n\n\tgenerator.stylesheet.warnOnUnusedSelectors(options.onwarn);\n\n\tconst builder = new CodeBuilder();\n\tconst computationBuilder = new CodeBuilder();\n\tconst computationDeps = new Set();\n\n\tif (computations.length) {\n\t\tcomputations.forEach(({ key, deps }) => {\n\t\t\tdeps.forEach(dep => {\n\t\t\t\tcomputationDeps.add(dep);\n\t\t\t});\n\n\t\t\tif (generator.readonly.has(key)) {\n\t\t\t\t// <:Window> bindings\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot have a computed value '${key}' that clashes with a read-only property`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tgenerator.readonly.add(key);\n\n\t\t\tconst condition = `${deps.map(dep => `changed.${dep}`).join(' || ')}`;\n\n\t\t\tconst statement = `if (this._differs(state.${key}, (state.${key} = %computed-${key}(${deps\n\t\t\t\t.map(dep => `state.${dep}`)\n\t\t\t\t.join(', ')})))) changed.${key} = true;`;\n\n\t\t\tcomputationBuilder.addConditional(condition, statement);\n\t\t});\n\t}\n\n\tif (generator.javascript) {\n\t\tbuilder.addBlock(generator.javascript);\n\t}\n\n\tconst css = generator.stylesheet.render(options.filename, !generator.customElement);\n\tconst styles = generator.stylesheet.hasStyles && stringify(options.dev ?\n\t\t`${css.code}\\n/*# sourceMappingURL=${css.map.toUrl()} */` :\n\t\tcss.code, { onlyEscapeAtSymbol: true });\n\n\tif (styles && generator.options.css !== false && !generator.customElement) {\n\t\tbuilder.addBlock(deindent`\n\t\t\tfunction @add_css() {\n\t\t\t\tvar style = @createElement(\"style\");\n\t\t\t\tstyle.id = '${generator.stylesheet.id}-style';\n\t\t\t\tstyle.textContent = ${styles};\n\t\t\t\t@appendNode(style, document.head);\n\t\t\t}\n\t\t`);\n\t}\n\n\tgenerator.blocks.forEach(block => {\n\t\tbuilder.addBlock(block.toString());\n\t});\n\n\tconst sharedPath: string = options.shared === true\n\t\t? 'svelte/shared.js'\n\t\t: options.shared || '';\n\n\tlet prototypeBase = `${name}.prototype`;\n\ttemplateProperties.methods && (prototypeBase = `@assign(${prototypeBase}, %methods)`);\n\n\tconst proto = sharedPath\n\t\t? `@proto`\n\t\t: deindent`\n\t\t{\n\t\t\t${['destroy', 'get', 'fire', 'observe', 'on', 'set', 'teardown', '_set', '_mount', '_unmount', '_differs']\n\t\t\t\t.map(n => `${n}: @${n === 'teardown' ? 'destroy' : n}`)\n\t\t\t\t.join(',\\n')}\n\t\t}`;\n\n\tconst debugName = `<${generator.customElement ? generator.tag : name}>`;\n\n\t// generate initial state object\n\tconst expectedProperties = Array.from(generator.expectedProperties);\n\tconst globals = expectedProperties.filter(prop => globalWhitelist.has(prop));\n\tconst storeProps = options.store || templateProperties.store ? expectedProperties.filter(prop => prop[0] === '$') : [];\n\tconst initialState = [];\n\n\tif (globals.length > 0) {\n\t\tinitialState.push(`{ ${globals.map(prop => `${prop} : ${prop}`).join(', ')} }`);\n\t}\n\n\tif (storeProps.length > 0) {\n\t\tinitialState.push(`this.store._init([${storeProps.map(prop => `\"${prop.slice(1)}\"`)}])`);\n\t}\n\n\tif (templateProperties.data) {\n\t\tinitialState.push(`%data()`);\n\t} else if (globals.length === 0 && storeProps.length === 0) {\n\t\tinitialState.push('{}');\n\t}\n\n\tinitialState.push(`options.data`);\n\n\tconst constructorBody = deindent`\n\t\t${options.dev && `this._debugName = '${debugName}';`}\n\t\t${options.dev && !generator.customElement &&\n\t\t\t`if (!options || (!options.target && !options.root)) throw new Error(\"'target' is a required option\");`}\n\t\t@init(this, options);\n\t\t${templateProperties.store && `this.store = %store();`}\n\t\t${generator.usesRefs && `this.refs = {};`}\n\t\tthis._state = ${initialState.reduce((state, piece) => `@assign(${state}, ${piece})`)};\n\t\t${storeProps.length > 0 && `this.store._add(this, [${storeProps.map(prop => `\"${prop.slice(1)}\"`)}]);`}\n\t\t${generator.metaBindings}\n\t\t${computations.length && `this._recompute({ ${Array.from(computationDeps).map(dep => `${dep}: 1`).join(', ')} }, this._state);`}\n\t\t${options.dev &&\n\t\t\tArray.from(generator.expectedProperties).map(prop => {\n\t\t\t\tif (globalWhitelist.has(prop)) return;\n\t\t\t\tif (computations.find(c => c.key === prop)) return;\n\n\t\t\t\tconst message = generator.components.has(prop) ?\n\t\t\t\t\t`${debugName} expected to find '${prop}' in \\`data\\`, but found it in \\`components\\` instead` :\n\t\t\t\t\t`${debugName} was created without expected data property '${prop}'`;\n\n\t\t\t\tconst conditions = [`!('${prop}' in this._state)`];\n\t\t\t\tif (generator.customElement) conditions.push(`!('${prop}' in this.attributes)`);\n\n\t\t\t\treturn `if (${conditions.join(' && ')}) console.warn(\"${message}\");`\n\t\t\t})}\n\t\t${generator.bindingGroups.length &&\n\t\t\t`this._bindingGroups = [${Array(generator.bindingGroups.length).fill('[]').join(', ')}];`}\n\n\t\t${(templateProperties.ondestroy || storeProps.length) && (\n\t\t\t`this._handlers.destroy = [${\n\t\t\t\t[templateProperties.ondestroy && `%ondestroy`, storeProps.length && `@removeFromStore`].filter(Boolean).join(', ')\n\t\t\t}];`\n\t\t)}\n\n\t\t${generator.slots.size && `this._slotted = options.slots || {};`}\n\n\t\t${generator.customElement ?\n\t\t\tdeindent`\n\t\t\t\tthis.attachShadow({ mode: 'open' });\n\t\t\t\t${css.code && `this.shadowRoot.innerHTML = \\`<style>${escape(css.code, { onlyEscapeAtSymbol: true }).replace(/\\\\/g, '\\\\\\\\')}${options.dev ? `\\n/*# sourceMappingURL=${css.map.toUrl()} */` : ''}</style>\\`;`}\n\t\t\t` :\n\t\t\t(generator.stylesheet.hasStyles && options.css !== false &&\n\t\t\t`if (!document.getElementById(\"${generator.stylesheet.id}-style\")) @add_css();`)\n\t\t}\n\n\t\t${templateProperties.oncreate && `var _oncreate = %oncreate.bind(this);`}\n\n\t\t${(templateProperties.oncreate || generator.hasComponents || generator.hasComplexBindings || generator.hasIntroTransitions) && deindent`\n\t\t\tif (!options.root) {\n\t\t\t\tthis._oncreate = [];\n\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings) && `this._beforecreate = [];`}\n\t\t\t\t${(generator.hasComponents || generator.hasIntroTransitions) && `this._aftercreate = [];`}\n\t\t\t}\n\t\t`}\n\n\t\t${generator.slots.size && `this.slots = {};`}\n\n\t\tthis._fragment = @create_main_fragment(this, this._state);\n\n\t\t${(templateProperties.oncreate) && deindent`\n\t\t\tthis.root._oncreate.push(_oncreate);\n\t\t`}\n\n\t\t${generator.customElement ? deindent`\n\t\t\tthis._fragment.c();\n\t\t\tthis._fragment.${block.hasIntroMethod ? 'i' : 'm'}(this.shadowRoot, null);\n\n\t\t\tif (options.target) this._mount(options.target, options.anchor);\n\t\t` : deindent`\n\t\t\tif (options.target) {\n\t\t\t\t${generator.hydratable\n\t\t\t\t\t? deindent`\n\t\t\t\t\t\tvar nodes = @children(options.target);\n\t\t\t\t\t\toptions.hydrate ? this._fragment.l(nodes) : this._fragment.c();\n\t\t\t\t\t\tnodes.forEach(@detachNode);\n\t\t\t\t\t` :\n\t\t\t\t\tdeindent`\n\t\t\t\t\t\t${options.dev && `if (options.hydrate) throw new Error(\"options.hydrate only works if the component was compiled with the \\`hydratable: true\\` option\");`}\n\t\t\t\t\t\tthis._fragment.c();\n\t\t\t\t\t`}\n\t\t\t\tthis._mount(options.target, options.anchor);\n\n\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings || templateProperties.oncreate || generator.hasIntroTransitions) && deindent`\n\t\t\t\t\t${generator.hasComponents && `this._lock = true;`}\n\t\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings) && `@callAll(this._beforecreate);`}\n\t\t\t\t\t${(generator.hasComponents || templateProperties.oncreate) && `@callAll(this._oncreate);`}\n\t\t\t\t\t${(generator.hasComponents || generator.hasIntroTransitions) && `@callAll(this._aftercreate);`}\n\t\t\t\t\t${generator.hasComponents && `this._lock = false;`}\n\t\t\t\t`}\n\t\t\t}\n\t\t`}\n\t`;\n\n\tif (generator.customElement) {\n\t\tconst props = generator.props || Array.from(generator.expectedProperties);\n\n\t\tbuilder.addBlock(deindent`\n\t\t\tclass ${name} extends HTMLElement {\n\t\t\t\tconstructor(options = {}) {\n\t\t\t\t\tsuper();\n\t\t\t\t\t${constructorBody}\n\t\t\t\t}\n\n\t\t\t\tstatic get observedAttributes() {\n\t\t\t\t\treturn ${JSON.stringify(props)};\n\t\t\t\t}\n\n\t\t\t\t${props.map(prop => deindent`\n\t\t\t\t\tget ${prop}() {\n\t\t\t\t\t\treturn this.get('${prop}');\n\t\t\t\t\t}\n\n\t\t\t\t\tset ${prop}(value) {\n\t\t\t\t\t\tthis.set({ ${prop}: value });\n\t\t\t\t\t}\n\t\t\t\t`).join('\\n\\n')}\n\n\t\t\t\t${generator.slots.size && deindent`\n\t\t\t\t\tconnectedCallback() {\n\t\t\t\t\t\tObject.keys(this._slotted).forEach(key => {\n\t\t\t\t\t\t\tthis.appendChild(this._slotted[key]);\n\t\t\t\t\t\t});\n\t\t\t\t\t}`}\n\n\t\t\t\tattributeChangedCallback(attr, oldValue, newValue) {\n\t\t\t\t\tthis.set({ [attr]: newValue });\n\t\t\t\t}\n\n\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings || templateProperties.oncreate || generator.hasIntroTransitions) && deindent`\n\t\t\t\t\tconnectedCallback() {\n\t\t\t\t\t\t${generator.hasComponents && `this._lock = true;`}\n\t\t\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings) && `@callAll(this._beforecreate);`}\n\t\t\t\t\t\t${(generator.hasComponents || templateProperties.oncreate) && `@callAll(this._oncreate);`}\n\t\t\t\t\t\t${(generator.hasComponents || generator.hasIntroTransitions) && `@callAll(this._aftercreate);`}\n\t\t\t\t\t\t${generator.hasComponents && `this._lock = false;`}\n\t\t\t\t\t}\n\t\t\t\t`}\n\t\t\t}\n\n\t\t\tcustomElements.define(\"${generator.tag}\", ${name});\n\t\t\t@assign(@assign(${prototypeBase}, ${proto}), {\n\t\t\t\t_mount(target, anchor) {\n\t\t\t\t\ttarget.insertBefore(this, anchor);\n\t\t\t\t},\n\n\t\t\t\t_unmount() {\n\t\t\t\t\tthis.parentNode.removeChild(this);\n\t\t\t\t}\n\t\t\t});\n\t\t`);\n\t} else {\n\t\tbuilder.addBlock(deindent`\n\t\t\tfunction ${name}(options) {\n\t\t\t\t${constructorBody}\n\t\t\t}\n\n\t\t\t@assign(${prototypeBase}, ${proto});\n\t\t`);\n\t}\n\n\tconst immutable = templateProperties.immutable ? templateProperties.immutable.value.value : options.immutable;\n\n\tbuilder.addBlock(deindent`\n\t\t${options.dev && deindent`\n\t\t\t${name}.prototype._checkReadOnly = function _checkReadOnly(newState) {\n\t\t\t\t${Array.from(generator.readonly).map(\n\t\t\t\t\tprop =>\n\t\t\t\t\t\t`if ('${prop}' in newState && !this._updatingReadonlyProperty) throw new Error(\"${debugName}: Cannot set read-only property '${prop}'\");`\n\t\t\t\t)}\n\t\t\t};\n\t\t`}\n\n\t\t${computations.length ? deindent`\n\t\t\t${name}.prototype._recompute = function _recompute(changed, state) {\n\t\t\t\t${computationBuilder}\n\t\t\t}\n\t\t` : (!sharedPath && `${name}.prototype._recompute = @noop;`)}\n\n\t\t${templateProperties.setup && `%setup(${name});`}\n\n\t\t${templateProperties.preload && `${name}.preload = %preload;`}\n\n\t\t${immutable && `${name}.prototype._differs = @_differsImmutable;`}\n\t`);\n\n\tconst usedHelpers = new Set();\n\n\tlet result = builder\n\t\t.toString()\n\t\t.replace(/(%+|@+)(\\w*(?:-\\w*)?)/g, (match: string, sigil: string, name: string) => {\n\t\t\tif (sigil === '@') {\n\t\t\t\tif (name in shared) {\n\t\t\t\t\tif (options.dev && `${name}Dev` in shared) name = `${name}Dev`;\n\t\t\t\t\tusedHelpers.add(name);\n\t\t\t\t}\n\n\t\t\t\treturn generator.alias(name);\n\t\t\t}\n\n\t\t\tif (sigil === '%') {\n\t\t\t\treturn generator.templateVars.get(name);\n\t\t\t}\n\n\t\t\treturn sigil.slice(1) + name;\n\t\t});\n\n\tlet helpers;\n\n\tif (sharedPath) {\n\t\tif (format !== 'es' && format !== 'cjs') {\n\t\t\tthrow new Error(`Components with shared helpers must be compiled with \\`format: 'es'\\` or \\`format: 'cjs'\\``);\n\t\t}\n\t\tconst used = Array.from(usedHelpers).sort();\n\t\thelpers = used.map(name => {\n\t\t\tconst alias = generator.alias(name);\n\t\t\treturn { name, alias };\n\t\t});\n\t} else {\n\t\tlet inlineHelpers = '';\n\n\t\tusedHelpers.forEach(key => {\n\t\t\tconst str = shared[key];\n\t\t\tconst code = new MagicString(str);\n\t\t\tconst expression = parseExpressionAt(str, 0);\n\n\t\t\tlet { scope } = annotateWithScopes(expression);\n\n\t\t\twalk(expression, {\n\t\t\t\tenter(node: Node, parent: Node) {\n\t\t\t\t\tif (node._scope) scope = node._scope;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode.type === 'Identifier' &&\n\t\t\t\t\t\tisReference(node, parent) &&\n\t\t\t\t\t\t!scope.has(node.name)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (node.name in shared) {\n\t\t\t\t\t\t\t// this helper function depends on another one\n\t\t\t\t\t\t\tconst dependency = node.name;\n\t\t\t\t\t\t\tusedHelpers.add(dependency);\n\n\t\t\t\t\t\t\tconst alias = generator.alias(dependency);\n\t\t\t\t\t\t\tif (alias !== node.name)\n\t\t\t\t\t\t\t\tcode.overwrite(node.start, node.end, alias);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tleave(node: Node) {\n\t\t\t\t\tif (node._scope) scope = scope.parent;\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (key === 'transitionManager') {\n\t\t\t\t// special case\n\t\t\t\tconst global = `_svelteTransitionManager`;\n\n\t\t\t\tinlineHelpers += `\\n\\nvar ${generator.alias('transitionManager')} = window.${global} || (window.${global} = ${code});\\n\\n`;\n\t\t\t} else {\n\t\t\t\tconst alias = generator.alias(expression.id.name);\n\t\t\t\tif (alias !== expression.id.name)\n\t\t\t\t\tcode.overwrite(expression.id.start, expression.id.end, alias);\n\n\t\t\t\tinlineHelpers += `\\n\\n${code}`;\n\t\t\t}\n\t\t});\n\n\t\tresult += inlineHelpers;\n\t}\n\n\tconst filename = options.filename && (\n\t\ttypeof process !== 'undefined' ? options.filename.replace(process.cwd(), '').replace(/^[\\/\\\\]/, '') : options.filename\n\t);\n\n\treturn generator.generate(result, options, {\n\t\tbanner: `/* ${filename ? `${filename} ` : ``}generated by Svelte v${\"__VERSION__\"} */`,\n\t\tsharedPath,\n\t\thelpers,\n\t\tname,\n\t\tformat,\n\t});\n}\n","import deindent from '../../utils/deindent';\nimport flattenReference from '../../utils/flattenReference';\nimport { SsrGenerator } from './index';\nimport { Node } from '../../interfaces';\nimport getObject from '../../utils/getObject';\n\ninterface BlockOptions {\n\t// TODO\n}\n\nexport default class Block {\n\tgenerator: SsrGenerator;\n\tconditions: string[];\n\n\tcontexts: Map<string, string>;\n\tindexes: Map<string, string>;\n\tcontextDependencies: Map<string, string[]>;\n\n\tconstructor(options: BlockOptions) {\n\t\tObject.assign(this, options);\n\t}\n\n\taddBinding(binding: Node, name: string) {\n\t\tconst conditions = [`!('${binding.name}' in state)`].concat(\n\t\t\t// TODO handle contextual bindings...\n\t\t\tthis.conditions.map(c => `(${c})`)\n\t\t);\n\n\t\tconst { name: prop } = getObject(binding.value);\n\n\t\tthis.generator.bindings.push(deindent`\n\t\t\tif (${conditions.join('&&')}) {\n\t\t\t\ttmp = ${name}.data();\n\t\t\t\tif ('${prop}' in tmp) {\n\t\t\t\t\tstate.${binding.name} = tmp.${prop};\n\t\t\t\t\tsettled = false;\n\t\t\t\t}\n\t\t\t}\n\t\t`);\n\t}\n\n\tchild(options: BlockOptions) {\n\t\treturn new Block(Object.assign({}, this, options, { parent: this }));\n\t}\n\n\tcontextualise(expression: Node, context?: string, isEventHandler?: boolean) {\n\t\treturn this.generator.contextualise(this.contexts, this.indexes, expression, context, isEventHandler);\n\t}\n}\n","import visit from '../visit';\nimport { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { Node } from '../../../interfaces';\n\nexport default function visitAwaitBlock(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tblock.contextualise(node.expression);\n\tconst { dependencies, snippet } = node.metadata;\n\n\t// TODO should this be the generator's job? It's duplicated between\n\t// here and the equivalent DOM compiler visitor\n\tconst contexts = new Map(block.contexts);\n\tcontexts.set(node.value, '__value');\n\n\tconst contextDependencies = new Map(block.contextDependencies);\n\tcontextDependencies.set(node.value, dependencies);\n\n\tconst childBlock = block.child({\n\t\tcontextDependencies,\n\t\tcontexts\n\t});\n\n\tgenerator.append('${(function(__value) { if(__isPromise(__value)) return `');\n\n\tnode.pending.children.forEach((child: Node) => {\n\t\tvisit(generator, childBlock, child);\n\t});\n\n\tgenerator.append('`; return `');\n\n\tnode.then.children.forEach((child: Node) => {\n\t\tvisit(generator, childBlock, child);\n\t});\n\n\tgenerator.append(`\\`;}(${snippet})) }`);\n}\n","import { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { Node } from '../../../interfaces';\n\nexport default function visitComment(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\t// Allow option to preserve comments, otherwise ignore\n\tif (generator && generator.options && generator.options.preserveComments) {\n\t\tgenerator.append(`<!--${node.data}-->`);\n\t}\n}\n","import flattenReference from '../../../utils/flattenReference';\nimport visit from '../visit';\nimport { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { AppendTarget } from '../interfaces';\nimport { Node } from '../../../interfaces';\nimport getObject from '../../../utils/getObject';\nimport getTailSnippet from '../../../utils/getTailSnippet';\nimport { escape, escapeTemplate, stringify } from '../../../utils/stringify';\n\nexport default function visitComponent(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tfunction stringifyAttribute(chunk: Node) {\n\t\tif (chunk.type === 'Text') {\n\t\t\treturn escapeTemplate(escape(chunk.data));\n\t\t}\n\t\tif (chunk.type === 'MustacheTag') {\n\t\t\tblock.contextualise(chunk.expression);\n\t\t\tconst { snippet } = chunk.metadata;\n\t\t\treturn '${__escape( ' + snippet + ')}';\n\t\t}\n\t}\n\n\tconst attributes: Node[] = [];\n\tconst bindings: Node[] = [];\n\n\tlet usesSpread;\n\n\tnode.attributes.forEach((attribute: Node) => {\n\t\tif (attribute.type === 'Attribute' || attribute.type === 'Spread') {\n\t\t\tif (attribute.type === 'Spread') usesSpread = true;\n\t\t\tattributes.push(attribute);\n\t\t} else if (attribute.type === 'Binding') {\n\t\t\tbindings.push(attribute);\n\t\t}\n\t});\n\n\tconst bindingProps = bindings.map(binding => {\n\t\tconst { name } = getObject(binding.value);\n\t\tconst tail = binding.value.type === 'MemberExpression'\n\t\t\t? getTailSnippet(binding.value)\n\t\t\t: '';\n\n\t\tconst keypath = block.contexts.has(name)\n\t\t\t? `${name}${tail}`\n\t\t\t: `state.${name}${tail}`;\n\t\treturn `${binding.name}: ${keypath}`;\n\t});\n\n\tfunction getAttributeValue(attribute) {\n\t\tif (attribute.value === true) return `true`;\n\t\tif (attribute.value.length === 0) return `''`;\n\n\t\tif (attribute.value.length === 1) {\n\t\t\tconst chunk = attribute.value[0];\n\t\t\tif (chunk.type === 'Text') {\n\t\t\t\treturn isNaN(chunk.data) ? stringify(chunk.data) : chunk.data;\n\t\t\t}\n\n\t\t\tblock.contextualise(chunk.expression);\n\t\t\tconst { snippet } = chunk.metadata;\n\t\t\treturn snippet;\n\t\t}\n\n\t\treturn '`' + attribute.value.map(stringifyAttribute).join('') + '`';\n\t}\n\n\tconst props = usesSpread\n\t\t? `Object.assign(${\n\t\t\tattributes\n\t\t\t\t.map(attribute => {\n\t\t\t\t\tif (attribute.type === 'Spread') {\n\t\t\t\t\t\tblock.contextualise(attribute.expression);\n\t\t\t\t\t\treturn attribute.metadata.snippet;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn `{ ${attribute.name}: ${getAttributeValue(attribute)} }`;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.concat(bindingProps.map(p => `{ ${p} }`))\n\t\t\t\t.join(', ')\n\t\t})`\n\t\t: `{ ${attributes\n\t\t\t.map(attribute => `${attribute.name}: ${getAttributeValue(attribute)}`)\n\t\t\t.concat(bindingProps)\n\t\t\t.join(', ')} }`;\n\n\tconst isDynamicComponent = node.name === ':Component';\n\tif (isDynamicComponent) block.contextualise(node.expression);\n\n\tconst expression = (\n\t\tnode.name === ':Self' ? generator.name :\n\t\tisDynamicComponent ? `((${node.metadata.snippet}) || __missingComponent)` :\n\t\t`%components-${node.name}`\n\t);\n\n\tbindings.forEach(binding => {\n\t\tblock.addBinding(binding, expression);\n\t});\n\n\tlet open = `\\${${expression}._render(__result, ${props}`;\n\n\tconst options = [];\n\tif (generator.options.store) {\n\t\toptions.push(`store: options.store`);\n\t}\n\n\tif (node.children.length) {\n\t\tconst appendTarget: AppendTarget = {\n\t\t\tslots: { default: '' },\n\t\t\tslotStack: ['default']\n\t\t};\n\n\t\tgenerator.appendTargets.push(appendTarget);\n\n\t\tnode.children.forEach((child: Node) => {\n\t\t\tvisit(generator, block, child);\n\t\t});\n\n\t\tconst slotted = Object.keys(appendTarget.slots)\n\t\t\t.map(name => `${name}: () => \\`${appendTarget.slots[name]}\\``)\n\t\t\t.join(', ');\n\n\t\toptions.push(`slotted: { ${slotted} }`);\n\n\t\tgenerator.appendTargets.pop();\n\t}\n\n\tif (options.length) {\n\t\topen += `, { ${options.join(', ')} }`;\n\t}\n\n\tgenerator.append(open);\n\tgenerator.append(')}');\n}\n","import visit from '../visit';\nimport { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { Node } from '../../../interfaces';\n\nexport default function visitEachBlock(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tblock.contextualise(node.expression);\n\tconst { dependencies, snippet } = node.metadata;\n\n\tconst open = `\\${ ${node.else ? `${snippet}.length ? ` : ''}${snippet}.map(${node.index ? `(${node.context}, ${node.index})` : `(${node.context})`} => \\``;\n\tgenerator.append(open);\n\n\t// TODO should this be the generator's job? It's duplicated between\n\t// here and the equivalent DOM compiler visitor\n\tconst contexts = new Map(block.contexts);\n\tcontexts.set(node.context, node.context);\n\n\tconst indexes = new Map(block.indexes);\n\tif (node.index) indexes.set(node.index, node.context);\n\n\tconst contextDependencies = new Map(block.contextDependencies);\n\tcontextDependencies.set(node.context, dependencies);\n\n\tif (node.destructuredContexts) {\n\t\tfor (let i = 0; i < node.destructuredContexts.length; i += 1) {\n\t\t\tcontexts.set(node.destructuredContexts[i], `${node.context}[${i}]`);\n\t\t\tcontextDependencies.set(node.destructuredContexts[i], dependencies);\n\t\t}\n\t}\n\n\tconst childBlock = block.child({\n\t\tcontexts,\n\t\tindexes,\n\t\tcontextDependencies,\n\t});\n\n\tnode.children.forEach((child: Node) => {\n\t\tvisit(generator, childBlock, child);\n\t});\n\n\tconst close = `\\`).join(\"\")`;\n\tgenerator.append(close);\n\n\tif (node.else) {\n\t\tgenerator.append(` : \\``);\n\t\tnode.else.children.forEach((child: Node) => {\n\t\t\tvisit(generator, block, child);\n\t\t});\n\t\tgenerator.append(`\\``);\n\t}\n\n\tgenerator.append('}');\n}\n","import visit from '../visit';\nimport { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { Node } from '../../../interfaces';\n\nexport default function visitSlot(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tconst name = node.attributes.find((attribute: Node) => attribute.name);\n\tconst slotName = name && name.value[0].data || 'default';\n\n\tgenerator.append(`\\${options && options.slotted && options.slotted.${slotName} ? options.slotted.${slotName}() : \\``);\n\n\tnode.children.forEach((child: Node) => {\n\t\tvisit(generator, block, child);\n\t});\n\n\tgenerator.append(`\\`}`);\n}\n","import Block from '../../Block';\nimport { escape, escapeTemplate } from '../../../../utils/stringify';\nimport { Node } from '../../../../interfaces';\n\nexport default function stringifyAttributeValue(block: Block, chunks: Node[]) {\n\treturn chunks\n\t\t.map((chunk: Node) => {\n\t\t\tif (chunk.type === 'Text') {\n\t\t\t\treturn escapeTemplate(escape(chunk.data).replace(/\"/g, '&quot;'));\n\t\t\t}\n\n\t\t\tblock.contextualise(chunk.expression);\n\t\t\tconst { snippet } = chunk.metadata;\n\t\t\treturn '${__escape(' + snippet + ')}';\n\t\t})\n\t\t.join('');\n}","import visitComponent from './Component';\nimport visitSlot from './Slot';\nimport isVoidElementName from '../../../utils/isVoidElementName';\nimport quoteIfNecessary from '../../../utils/quoteIfNecessary';\nimport visit from '../visit';\nimport { SsrGenerator } from '../index';\nimport Element from '../../nodes/Element';\nimport Block from '../Block';\nimport { Node } from '../../../interfaces';\nimport stringifyAttributeValue from './shared/stringifyAttributeValue';\nimport { escape } from '../../../utils/stringify';\n\n// source: https://gist.github.com/ArjanSchouten/0b8574a6ad7f5065a5e7\nconst booleanAttributes = new Set('async autocomplete autofocus autoplay border challenge checked compact contenteditable controls default defer disabled formnovalidate frameborder hidden indeterminate ismap loop multiple muted nohref noresize noshade novalidate nowrap open readonly required reversed scoped scrolling seamless selected sortable spellcheck translate'.split(' '));\n\nexport default function visitElement(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Element\n) {\n\tif (node.name === 'slot') {\n\t\tvisitSlot(generator, block, node);\n\t\treturn;\n\t}\n\n\tlet openingTag = `<${node.name}`;\n\tlet textareaContents; // awkward special case\n\n\tconst slot = node.getStaticAttributeValue('slot');\n\tif (slot && node.hasAncestor('Component')) {\n\t\tconst slot = node.attributes.find((attribute: Node) => attribute.name === 'slot');\n\t\tconst slotName = slot.value[0].data;\n\t\tconst appendTarget = generator.appendTargets[generator.appendTargets.length - 1];\n\t\tappendTarget.slotStack.push(slotName);\n\t\tappendTarget.slots[slotName] = '';\n\t}\n\n\tif (node.attributes.find(attr => attr.type === 'Spread')) {\n\t\t// TODO dry this out\n\t\tconst args = [];\n\t\tnode.attributes.forEach((attribute: Node) => {\n\t\t\tif (attribute.type === 'Spread') {\n\t\t\t\tblock.contextualise(attribute.expression);\n\t\t\t\targs.push(attribute.metadata.snippet);\n\t\t\t} else if (attribute.type === 'Attribute') {\n\t\t\t\tif (attribute.name === 'value' && node.name === 'textarea') {\n\t\t\t\t\ttextareaContents = stringifyAttributeValue(block, attribute.value);\n\t\t\t\t} else if (attribute.value === true) {\n\t\t\t\t\targs.push(`{ ${quoteIfNecessary(attribute.name)}: true }`);\n\t\t\t\t} else if (\n\t\t\t\t\tbooleanAttributes.has(attribute.name) &&\n\t\t\t\t\tattribute.value.length === 1 &&\n\t\t\t\t\tattribute.value[0].type !== 'Text'\n\t\t\t\t) {\n\t\t\t\t\t// a boolean attribute with one non-Text chunk\n\t\t\t\t\tblock.contextualise(attribute.value[0].expression);\n\t\t\t\t\targs.push(`{ ${quoteIfNecessary(attribute.name)}: ${attribute.value[0].metadata.snippet} }`);\n\t\t\t\t} else {\n\t\t\t\t\targs.push(`{ ${quoteIfNecessary(attribute.name)}: \\`${stringifyAttributeValue(block, attribute.value)}\\` }`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\topeningTag += \"${__spread([\" + args.join(', ') + \"])}\";\n\t} else {\n\t\tnode.attributes.forEach((attribute: Node) => {\n\t\t\tif (attribute.type !== 'Attribute') return;\n\n\t\t\tif (attribute.name === 'value' && node.name === 'textarea') {\n\t\t\t\ttextareaContents = stringifyAttributeValue(block, attribute.value);\n\t\t\t} else if (attribute.value === true) {\n\t\t\t\topeningTag += ` ${attribute.name}`;\n\t\t\t} else if (\n\t\t\t\tbooleanAttributes.has(attribute.name) &&\n\t\t\t\tattribute.value.length === 1 &&\n\t\t\t\tattribute.value[0].type !== 'Text'\n\t\t\t) {\n\t\t\t\t// a boolean attribute with one non-Text chunk\n\t\t\t\tblock.contextualise(attribute.value[0].expression);\n\t\t\t\topeningTag += '${' + attribute.value[0].metadata.snippet + ' ? \" ' + attribute.name + '\" : \"\" }';\n\t\t\t} else {\n\t\t\t\topeningTag += ` ${attribute.name}=\"${stringifyAttributeValue(block, attribute.value)}\"`;\n\t\t\t}\n\t\t});\n\t}\n\n\tif (node._cssRefAttribute) {\n\t\topeningTag += ` svelte-ref-${node._cssRefAttribute}`;\n\t}\n\n\topeningTag += '>';\n\n\tgenerator.append(openingTag);\n\n\tif (node.name === 'textarea' && textareaContents !== undefined) {\n\t\tgenerator.append(textareaContents);\n\t} else {\n\t\tnode.children.forEach((child: Node) => {\n\t\t\tvisit(generator, block, child);\n\t\t});\n\t}\n\n\tif (!isVoidElementName(node.name)) {\n\t\tgenerator.append(`</${node.name}>`);\n\t}\n}\n","import { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { Node } from '../../../interfaces';\nimport stringifyAttributeValue from './shared/stringifyAttributeValue';\nimport visit from '../visit';\n\nexport default function visitDocument(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tgenerator.append('${(__result.head += `');\n\n\tnode.children.forEach((child: Node) => {\n\t\tvisit(generator, block, child);\n\t});\n\n\tgenerator.append('`, \"\")}');\n}","import visit from '../visit';\nimport { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { Node } from '../../../interfaces';\n\nexport default function visitIfBlock(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tblock.contextualise(node.expression);\n\tconst { snippet } = node.metadata;\n\n\tgenerator.append('${ ' + snippet + ' ? `');\n\n\tconst childBlock = block.child({\n\t\tconditions: block.conditions.concat(snippet),\n\t});\n\n\tnode.children.forEach((child: Node) => {\n\t\tvisit(generator, childBlock, child);\n\t});\n\n\tgenerator.append('` : `');\n\n\tif (node.else) {\n\t\tnode.else.children.forEach((child: Node) => {\n\t\t\tvisit(generator, childBlock, child);\n\t\t});\n\t}\n\n\tgenerator.append('` }');\n}\n","import { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { Node } from '../../../interfaces';\n\nexport default function visitMustacheTag(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tblock.contextualise(node.expression);\n\tconst { snippet } = node.metadata;\n\n\tgenerator.append(\n\t\tnode.parent &&\n\t\tnode.parent.type === 'Element' &&\n\t\tnode.parent.name === 'style'\n\t\t\t? '${' + snippet + '}'\n\t\t\t: '${__escape(' + snippet + ')}'\n\t);\n}\n","import { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { Node } from '../../../interfaces';\n\nexport default function visitRawMustacheTag(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tblock.contextualise(node.expression);\n\tconst { snippet } = node.metadata;\n\n\tgenerator.append('${' + snippet + '}');\n}\n","import { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { escape, escapeHTML, escapeTemplate } from '../../../utils/stringify';\nimport { Node } from '../../../interfaces';\n\nexport default function visitText(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tlet text = node.data;\n\tif (\n\t\t!node.parent ||\n\t\tnode.parent.type !== 'Element' ||\n\t\t(node.parent.name !== 'script' && node.parent.name !== 'style')\n\t) {\n\t\t// unless this Text node is inside a <script> or <style> element, escape &,<,>\n\t\ttext = escapeHTML(text);\n\t}\n\tgenerator.append(escape(escapeTemplate(text)));\n}\n","import { SsrGenerator } from '../index';\nimport Block from '../Block';\nimport { escape } from '../../../utils/stringify';\nimport visit from '../visit';\nimport { Node } from '../../../interfaces';\n\nexport default function visitTitle(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tgenerator.append(`<title>`);\n\n\tnode.children.forEach((child: Node) => {\n\t\tvisit(generator, block, child);\n\t});\n\n\tgenerator.append(`</title>`);\n}\n","export default function visitWindow() {\n\t// noop\n}\n","import AwaitBlock from './AwaitBlock';\nimport Comment from './Comment';\nimport Component from './Component';\nimport EachBlock from './EachBlock';\nimport Element from './Element';\nimport Head from './Head';\nimport IfBlock from './IfBlock';\nimport MustacheTag from './MustacheTag';\nimport RawMustacheTag from './RawMustacheTag';\nimport Slot from './Slot';\nimport Text from './Text';\nimport Title from './Title';\nimport Window from './Window';\n\nexport default {\n\tAwaitBlock,\n\tComment,\n\tComponent,\n\tEachBlock,\n\tElement,\n\tHead,\n\tIfBlock,\n\tMustacheTag,\n\tRawMustacheTag,\n\tSlot,\n\tText,\n\tTitle,\n\tWindow\n};\n","import visitors from './visitors/index';\nimport { SsrGenerator } from './index';\nimport Block from './Block';\nimport { Node } from '../../interfaces';\n\nexport default function visit(\n\tgenerator: SsrGenerator,\n\tblock: Block,\n\tnode: Node\n) {\n\tconst visitor = visitors[node.type];\n\tvisitor(generator, block, node);\n}\n","import deindent from '../../utils/deindent';\nimport Generator from '../Generator';\nimport Stats from '../../Stats';\nimport Stylesheet from '../../css/Stylesheet';\nimport Block from './Block';\nimport visit from './visit';\nimport { removeNode, removeObjectKey } from '../../utils/removeNode';\nimport getName from '../../utils/getName';\nimport globalWhitelist from '../../utils/globalWhitelist';\nimport { Parsed, Node, CompileOptions } from '../../interfaces';\nimport { AppendTarget } from './interfaces';\nimport { stringify } from '../../utils/stringify';\n\nexport class SsrGenerator extends Generator {\n\tbindings: string[];\n\trenderCode: string;\n\tappendTargets: AppendTarget[];\n\n\tconstructor(\n\t\tparsed: Parsed,\n\t\tsource: string,\n\t\tname: string,\n\t\tstylesheet: Stylesheet,\n\t\toptions: CompileOptions,\n\t\tstats: Stats\n\t) {\n\t\tsuper(parsed, source, name, stylesheet, options, stats, false);\n\t\tthis.bindings = [];\n\t\tthis.renderCode = '';\n\t\tthis.appendTargets = [];\n\n\t\tthis.stylesheet.warnOnUnusedSelectors(options.onwarn);\n\t}\n\n\tappend(code: string) {\n\t\tif (this.appendTargets.length) {\n\t\t\tconst appendTarget = this.appendTargets[this.appendTargets.length - 1];\n\t\t\tconst slotName = appendTarget.slotStack[appendTarget.slotStack.length - 1];\n\t\t\tappendTarget.slots[slotName] += code;\n\t\t} else {\n\t\t\tthis.renderCode += code;\n\t\t}\n\t}\n}\n\nexport default function ssr(\n\tparsed: Parsed,\n\tsource: string,\n\tstylesheet: Stylesheet,\n\toptions: CompileOptions,\n\tstats: Stats\n) {\n\tconst format = options.format || 'cjs';\n\n\tconst generator = new SsrGenerator(parsed, source, options.name || 'SvelteComponent', stylesheet, options, stats);\n\n\tconst { computations, name, templateProperties } = generator;\n\n\t// create main render() function\n\tconst mainBlock = new Block({\n\t\tgenerator,\n\t\tcontexts: new Map(),\n\t\tindexes: new Map(),\n\t\tconditions: [],\n\t});\n\n\ttrim(parsed.html.children).forEach((node: Node) => {\n\t\tvisit(generator, mainBlock, node);\n\t});\n\n\tconst css = generator.customElement ?\n\t\t{ code: null, map: null } :\n\t\tgenerator.stylesheet.render(options.filename, true);\n\n\t// generate initial state object\n\tconst expectedProperties = Array.from(generator.expectedProperties);\n\tconst globals = expectedProperties.filter(prop => globalWhitelist.has(prop));\n\tconst storeProps = options.store || templateProperties.store ? expectedProperties.filter(prop => prop[0] === '$') : [];\n\n\tconst initialState = [];\n\tif (globals.length > 0) {\n\t\tinitialState.push(`{ ${globals.map(prop => `${prop} : ${prop}`).join(', ')} }`);\n\t}\n\n\tif (storeProps.length > 0) {\n\t\tconst initialize = `_init([${storeProps.map(prop => `\"${prop.slice(1)}\"`)}])`\n\t\tif (options.store || templateProperties.store) {\n\t\t\tinitialState.push(`options.store.${initialize}`);\n\t\t}\n\t}\n\n\tif (templateProperties.data) {\n\t\tinitialState.push(`%data()`);\n\t} else if (globals.length === 0 && storeProps.length === 0) {\n\t\tinitialState.push('{}');\n\t}\n\n\tinitialState.push('state');\n\n\t// TODO concatenate CSS maps\n\tconst result = deindent`\n\t\t${generator.javascript}\n\n\t\tvar ${name} = {};\n\n\t\t${options.filename && `${name}.filename = ${stringify(options.filename)}`};\n\n\t\t${name}.data = function() {\n\t\t\treturn ${templateProperties.data ? `%data()` : `{}`};\n\t\t};\n\n\t\t${name}.render = function(state, options = {}) {\n\t\t\tvar components = new Set();\n\n\t\t\tfunction addComponent(component) {\n\t\t\t\tcomponents.add(component);\n\t\t\t}\n\n\t\t\tvar result = { head: '', addComponent };\n\t\t\tvar html = ${name}._render(result, state, options);\n\n\t\t\tvar cssCode = Array.from(components).map(c => c.css && c.css.code).filter(Boolean).join('\\\\n');\n\n\t\t\treturn {\n\t\t\t\thtml,\n\t\t\t\thead: result.head,\n\t\t\t\tcss: { code: cssCode, map: null },\n\t\t\t\ttoString() {\n\t\t\t\t\treturn html;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t${name}._render = function(__result, state, options) {\n\t\t\t${templateProperties.store && `options.store = %store();`}\n\t\t\t__result.addComponent(${name});\n\n\t\t\tstate = Object.assign(${initialState.join(', ')});\n\n\t\t\t${computations.map(\n\t\t\t\t({ key, deps }) =>\n\t\t\t\t\t`state.${key} = %computed-${key}(${deps.map(dep => `state.${dep}`).join(', ')});`\n\t\t\t)}\n\n\t\t\t${generator.bindings.length &&\n\t\t\t\tdeindent`\n\t\t\t\tvar settled = false;\n\t\t\t\tvar tmp;\n\n\t\t\t\twhile (!settled) {\n\t\t\t\t\tsettled = true;\n\n\t\t\t\t\t${generator.bindings.join('\\n\\n')}\n\t\t\t\t}\n\t\t\t`}\n\n\t\t\treturn \\`${generator.renderCode}\\`;\n\t\t};\n\n\t\t${name}.css = {\n\t\t\tcode: ${css.code ? stringify(css.code) : `''`},\n\t\t\tmap: ${css.map ? stringify(css.map.toString()) : 'null'}\n\t\t};\n\n\t\tvar warned = false;\n\t\t${name}.renderCss = function() {\n\t\t\tif (!warned) {\n\t\t\t\tconsole.error('Component.renderCss(...) is deprecated and will be removed in v2 — use Component.render(...).css instead');\n\t\t\t\twarned = true;\n\t\t\t}\n\n\t\t\tvar components = [];\n\n\t\t\t${generator.stylesheet.hasStyles &&\n\t\t\t\tdeindent`\n\t\t\t\tcomponents.push({\n\t\t\t\t\tfilename: ${name}.filename,\n\t\t\t\t\tcss: ${name}.css && ${name}.css.code,\n\t\t\t\t\tmap: ${name}.css && ${name}.css.map\n\t\t\t\t});\n\t\t\t`}\n\n\t\t\t${templateProperties.components &&\n\t\t\t\tdeindent`\n\t\t\t\tvar seen = {};\n\n\t\t\t\tfunction addComponent(component) {\n\t\t\t\t\tvar result = component.renderCss();\n\t\t\t\t\tresult.components.forEach(x => {\n\t\t\t\t\t\tif (seen[x.filename]) return;\n\t\t\t\t\t\tseen[x.filename] = true;\n\t\t\t\t\t\tcomponents.push(x);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t${templateProperties.components.value.properties.map((prop: Node) => {\n\t\t\t\t\treturn `addComponent(%components-${getName(prop.key)});`;\n\t\t\t\t})}\n\t\t\t`}\n\n\t\t\treturn {\n\t\t\t\tcss: components.map(x => x.css).join('\\\\n'),\n\t\t\t\tmap: null,\n\t\t\t\tcomponents\n\t\t\t};\n\t\t};\n\n\t\t${templateProperties.preload && `${name}.preload = %preload;`}\n\n\t\t${\n\t\t\t// TODO this is a bit hacky\n\t\t\t/__escape/.test(generator.renderCode) && deindent`\n\t\t\t\tvar escaped = {\n\t\t\t\t\t'\"': '&quot;',\n\t\t\t\t\t\"'\": '&##39;',\n\t\t\t\t\t'&': '&amp;',\n\t\t\t\t\t'<': '&lt;',\n\t\t\t\t\t'>': '&gt;'\n\t\t\t\t};\n\n\t\t\t\tfunction __escape(html) {\n\t\t\t\t\treturn String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n\t\t\t\t}\n\t\t\t`\n\t\t}\n\n\t\t${\n\t\t\t/__isPromise/.test(generator.renderCode) && deindent`\n\t\t\t\tfunction __isPromise(value) {\n\t\t\t\t\treturn value && typeof value.then === 'function';\n\t\t\t\t}\n\t\t\t`\n\t\t}\n\n\t\t${\n\t\t\t/__missingComponent/.test(generator.renderCode) && deindent`\n\t\t\t\tvar __missingComponent = {\n\t\t\t\t\t_render: () => ''\n\t\t\t\t};\n\t\t\t`\n\t\t}\n\n\t\t${\n\t\t\t/__spread/.test(generator.renderCode) && deindent`\n\t\t\t\tfunction __spread(args) {\n\t\t\t\t\tconst attributes = Object.assign({}, ...args);\n\t\t\t\t\tlet str = '';\n\n\t\t\t\t\tObject.keys(attributes).forEach(name => {\n\t\t\t\t\t\tconst value = attributes[name];\n\t\t\t\t\t\tif (value === undefined) return;\n\t\t\t\t\t\tif (value === true) str += \" \" + name;\n\t\t\t\t\t\tstr += \" \" + name + \"=\" + JSON.stringify(value);\n\t\t\t\t\t});\n\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t`\n\t\t}\n\t`.replace(/(@+|#+|%+)(\\w*(?:-\\w*)?)/g, (match: string, sigil: string, name: string) => {\n\t\tif (sigil === '@') return generator.alias(name);\n\t\tif (sigil === '%') return generator.templateVars.get(name);\n\t\treturn sigil.slice(1) + name;\n\t});\n\n\treturn generator.generate(result, options, { name, format });\n}\n\nfunction trim(nodes) {\n\tlet start = 0;\n\tfor (; start < nodes.length; start += 1) {\n\t\tconst node = nodes[start];\n\t\tif (node.type !== 'Text') break;\n\n\t\tnode.data = node.data.replace(/^\\s+/, '');\n\t\tif (node.data) break;\n\t}\n\n\tlet end = nodes.length;\n\tfor (; end > start; end -= 1) {\n\t\tconst node = nodes[end - 1];\n\t\tif (node.type !== 'Text') break;\n\n\t\tnode.data = node.data.replace(/\\s+$/, '');\n\t\tif (node.data) break;\n\t}\n\n\treturn nodes.slice(start, end);\n}\n","import { Node, Warning } from './interfaces';\nimport Generator from './generators/Generator';\n\nconst now = (typeof process !== 'undefined' && process.hrtime)\n\t? () => {\n\t\tconst t = process.hrtime();\n\t\treturn t[0] * 1e3 + t[1] / 1e6;\n\t}\n\t: () => window.performance.now();\n\ntype Timing = {\n\tlabel: string;\n\tstart: number;\n\tend: number;\n\tchildren: Timing[];\n}\n\nfunction collapseTimings(timings) {\n\tconst result = {};\n\ttimings.forEach(timing => {\n\t\tresult[timing.label] = Object.assign({\n\t\t\ttotal: timing.end - timing.start\n\t\t}, timing.children && collapseTimings(timing.children));\n\t});\n\treturn result;\n}\n\nexport default class Stats {\n\tstartTime: number;\n\tcurrentTiming: Timing;\n\tcurrentChildren: Timing[];\n\ttimings: Timing[];\n\tstack: Timing[];\n\twarnings: Warning[];\n\n\tconstructor() {\n\t\tthis.startTime = now();\n\t\tthis.stack = [];\n\t\tthis.currentChildren = this.timings = [];\n\n\t\tthis.warnings = [];\n\t}\n\n\tstart(label) {\n\t\tconst timing = {\n\t\t\tlabel,\n\t\t\tstart: now(),\n\t\t\tend: null,\n\t\t\tchildren: []\n\t\t};\n\n\t\tthis.currentChildren.push(timing);\n\t\tthis.stack.push(timing);\n\n\t\tthis.currentTiming = timing;\n\t\tthis.currentChildren = timing.children;\n\t}\n\n\tstop(label) {\n\t\tif (label !== this.currentTiming.label) {\n\t\t\tthrow new Error(`Mismatched timing labels`);\n\t\t}\n\n\t\tthis.currentTiming.end = now();\n\t\tthis.stack.pop();\n\t\tthis.currentTiming = this.stack[this.stack.length - 1];\n\t\tthis.currentChildren = this.currentTiming ? this.currentTiming.children : this.timings;\n\t}\n\n\trender(generator: Generator) {\n\t\tconst timings = Object.assign({\n\t\t\ttotal: now() - this.startTime\n\t\t}, collapseTimings(this.timings));\n\n\t\tconst imports = generator.imports.map(node => {\n\t\t\treturn {\n\t\t\t\tsource: node.source.value,\n\t\t\t\tspecifiers: node.specifiers.map(specifier => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: (\n\t\t\t\t\t\t\tspecifier.type === 'ImportDefaultSpecifier' ? 'default' :\n\t\t\t\t\t\t\tspecifier.type === 'ImportNamespaceSpecifier' ? '*' :\n\t\t\t\t\t\t\tspecifier.imported.name\n\t\t\t\t\t\t),\n\t\t\t\t\t\tas: specifier.local.name\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t}\n\t\t});\n\n\t\tconst hooks: Record<string, boolean> = {};\n\t\tif (generator.templateProperties.oncreate) hooks.oncreate = true;\n\t\tif (generator.templateProperties.ondestroy) hooks.ondestroy = true;\n\n\t\treturn {\n\t\t\ttimings,\n\t\t\twarnings: this.warnings,\n\t\t\timports,\n\t\t\thooks\n\t\t};\n\t}\n}","export function noop() {}\n\nexport function assign(tar, src) {\n\tfor (var k in src) tar[k] = src[k];\n\treturn tar;\n}\n","import { Node } from '../interfaces';\n\nexport const UNKNOWN = {};\n\nexport function gatherPossibleValues(node: Node, set: Set<string|{}>) {\n\tif (node.type === 'Literal') {\n\t\tset.add(node.value);\n\t}\n\n\telse if (node.type === 'ConditionalExpression') {\n\t\tgatherPossibleValues(node.consequent, set);\n\t\tgatherPossibleValues(node.alternate, set);\n\t}\n\n\telse {\n\t\tset.add(UNKNOWN);\n\t}\n}","import MagicString from 'magic-string';\nimport Stylesheet from './Stylesheet';\nimport { gatherPossibleValues, UNKNOWN } from './gatherPossibleValues';\nimport { Validator } from '../validate/index';\nimport { Node } from '../interfaces';\n\nexport default class Selector {\n\tnode: Node;\n\tstylesheet: Stylesheet;\n\tblocks: Block[];\n\tlocalBlocks: Block[];\n\tused: boolean;\n\n\tconstructor(node: Node, stylesheet: Stylesheet) {\n\t\tthis.node = node;\n\t\tthis.stylesheet = stylesheet;\n\n\t\tthis.blocks = groupSelectors(node);\n\n\t\t// take trailing :global(...) selectors out of consideration\n\t\tlet i = this.blocks.length;\n\t\twhile (i > 0) {\n\t\t\tif (!this.blocks[i - 1].global) break;\n\t\t\ti -= 1;\n\t\t}\n\n\t\tthis.localBlocks = this.blocks.slice(0, i);\n\t\tthis.used = this.blocks[0].global;\n\t}\n\n\tapply(node: Node, stack: Node[]) {\n\t\tconst toEncapsulate: Node[] = [];\n\t\tapplySelector(this.localBlocks.slice(), node, stack.slice(), toEncapsulate);\n\n\t\tif (toEncapsulate.length > 0) {\n\t\t\ttoEncapsulate.filter((_, i) => i === 0 || i === toEncapsulate.length - 1).forEach(({ node, block }) => {\n\t\t\t\tthis.stylesheet.nodesWithCssClass.add(node);\n\t\t\t\tblock.shouldEncapsulate = true;\n\t\t\t});\n\n\t\t\tthis.used = true;\n\t\t}\n\t}\n\n\tminify(code: MagicString) {\n\t\tlet c: number = null;\n\t\tthis.blocks.forEach((block, i) => {\n\t\t\tif (i > 0) {\n\t\t\t\tif (block.start - c > 1) {\n\t\t\t\t\tcode.overwrite(c, block.start, block.combinator.name || ' ');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc = block.end;\n\t\t});\n\t}\n\n\ttransform(code: MagicString, attr: string) {\n\t\tfunction encapsulateBlock(block: Block) {\n\t\t\tlet i = block.selectors.length;\n\t\t\twhile (i--) {\n\t\t\t\tconst selector = block.selectors[i];\n\t\t\t\tif (selector.type === 'PseudoElementSelector' || selector.type === 'PseudoClassSelector') continue;\n\n\t\t\t\tif (selector.type === 'TypeSelector' && selector.name === '*') {\n\t\t\t\t\tcode.overwrite(selector.start, selector.end, attr);\n\t\t\t\t} else {\n\t\t\t\t\tcode.appendLeft(selector.end, attr);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ti = block.selectors.length;\n\t\t\twhile (i--) {\n\t\t\t\tconst selector = block.selectors[i];\n\n\t\t\t\tif (selector.type === 'RefSelector') {\n\t\t\t\t\tcode.overwrite(selector.start, selector.end, `[svelte-ref-${selector.name}]`, {\n\t\t\t\t\t\tcontentOnly: true,\n\t\t\t\t\t\tstoreName: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.blocks.forEach((block, i) => {\n\t\t\tif (block.global) {\n\t\t\t\tconst selector = block.selectors[0];\n\t\t\t\tconst first = selector.children[0];\n\t\t\t\tconst last = selector.children[selector.children.length - 1];\n\t\t\t\tcode.remove(selector.start, first.start).remove(last.end, selector.end);\n\t\t\t}\n\n\t\t\tif (block.shouldEncapsulate) encapsulateBlock(block);\n\t\t});\n\t}\n\n\tvalidate(validator: Validator) {\n\t\tthis.blocks.forEach((block) => {\n\t\t\tlet i = block.selectors.length;\n\t\t\twhile (i-- > 1) {\n\t\t\t\tconst selector = block.selectors[i];\n\t\t\t\tif (selector.type === 'PseudoClassSelector' && selector.name === 'global') {\n\t\t\t\t\tvalidator.error(`:global(...) must be the first element in a compound selector`, selector);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tlet start = 0;\n\t\tlet end = this.blocks.length;\n\n\t\tfor (; start < end; start += 1) {\n\t\t\tif (!this.blocks[start].global) break;\n\t\t}\n\n\t\tfor (; end > start; end -= 1) {\n\t\t\tif (!this.blocks[end - 1].global) break;\n\t\t}\n\n\t\tfor (let i = start; i < end; i += 1) {\n\t\t\tif (this.blocks[i].global) {\n\t\t\t\tvalidator.error(`:global(...) can be at the start or end of a selector sequence, but not in the middle`, this.blocks[i].selectors[0]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction isDescendantSelector(selector: Node) {\n\treturn selector.type === 'WhiteSpace' || selector.type === 'Combinator';\n}\n\nfunction applySelector(blocks: Block[], node: Node, stack: Node[], toEncapsulate: any[]): boolean {\n\tconst block = blocks.pop();\n\tif (!block) return false;\n\n\tif (!node) {\n\t\treturn blocks.every(block => block.global);\n\t}\n\n\tlet i = block.selectors.length;\n\tlet j = stack.length;\n\n\twhile (i--) {\n\t\tconst selector = block.selectors[i];\n\n\t\tif (selector.type === 'PseudoClassSelector' && selector.name === 'global') {\n\t\t\t// TODO shouldn't see this here... maybe we should enforce that :global(...)\n\t\t\t// cannot be sandwiched between non-global selectors?\n\t\t\treturn false;\n\t\t}\n\n\t\tif (selector.type === 'PseudoClassSelector' || selector.type === 'PseudoElementSelector') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (selector.type === 'ClassSelector') {\n\t\t\tif (!attributeMatches(node, 'class', selector.name, '~=', false)) return false;\n\t\t}\n\n\t\telse if (selector.type === 'IdSelector') {\n\t\t\tif (!attributeMatches(node, 'id', selector.name, '=', false)) return false;\n\t\t}\n\n\t\telse if (selector.type === 'AttributeSelector') {\n\t\t\tif (!attributeMatches(node, selector.name.name, selector.value && unquote(selector.value), selector.matcher, selector.flags)) return false;\n\t\t}\n\n\t\telse if (selector.type === 'TypeSelector') {\n\t\t\t// remove toLowerCase() in v2, when uppercase elements will be forbidden\n\t\t\tif (node.name.toLowerCase() !== selector.name.toLowerCase() && selector.name !== '*') return false;\n\t\t}\n\n\t\telse if (selector.type === 'RefSelector') {\n\t\t\tif (node.attributes.some((attr: Node) => attr.type === 'Ref' && attr.name === selector.name)) {\n\t\t\t\tnode._cssRefAttribute = selector.name;\n\t\t\t\ttoEncapsulate.push({ node, block });\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\telse {\n\t\t\t// bail. TODO figure out what these could be\n\t\t\ttoEncapsulate.push({ node, block });\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tif (block.combinator) {\n\t\tif (block.combinator.type === 'WhiteSpace') {\n\t\t\twhile (stack.length) {\n\t\t\t\tif (applySelector(blocks.slice(), stack.pop(), stack, toEncapsulate)) {\n\t\t\t\t\ttoEncapsulate.push({ node, block });\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t} else if (block.combinator.name === '>') {\n\t\t\tif (applySelector(blocks, stack.pop(), stack, toEncapsulate)) {\n\t\t\t\ttoEncapsulate.push({ node, block });\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// TODO other combinators\n\t\ttoEncapsulate.push({ node, block });\n\t\treturn true;\n\t}\n\n\ttoEncapsulate.push({ node, block });\n\treturn true;\n}\n\nconst operators = {\n\t'=' : (value: string, flags: string) => new RegExp(`^${value}$`, flags),\n\t'~=': (value: string, flags: string) => new RegExp(`\\\\b${value}\\\\b`, flags),\n\t'|=': (value: string, flags: string) => new RegExp(`^${value}(-.+)?$`, flags),\n\t'^=': (value: string, flags: string) => new RegExp(`^${value}`, flags),\n\t'$=': (value: string, flags: string) => new RegExp(`${value}$`, flags),\n\t'*=': (value: string, flags: string) => new RegExp(value, flags)\n};\n\nfunction attributeMatches(node: Node, name: string, expectedValue: string, operator: string, caseInsensitive: boolean) {\n\tconst spread = node.attributes.find(attr => attr.type === 'Spread');\n\tif (spread) return true;\n\n\tconst attr = node.attributes.find((attr: Node) => attr.name === name);\n\tif (!attr) return false;\n\tif (attr.value === true) return operator === null;\n\tif (attr.value.length > 1) return true;\n\tif (!expectedValue) return true;\n\n\tconst pattern = operators[operator](expectedValue, caseInsensitive ? 'i' : '');\n\tconst value = attr.value[0];\n\n\tif (!value) return false;\n\tif (value.type === 'Text') return pattern.test(value.data);\n\n\tconst possibleValues = new Set();\n\tgatherPossibleValues(value.expression, possibleValues);\n\tif (possibleValues.has(UNKNOWN)) return true;\n\n\tfor (const x of Array.from(possibleValues)) { // TypeScript for-of is slightly unlike JS\n\t\tif (pattern.test(x)) return true;\n\t}\n\n\treturn false;\n}\n\nfunction isDynamic(value: Node) {\n\treturn value.length > 1 || value[0].type !== 'Text';\n}\n\nfunction unquote(value: Node) {\n\tif (value.type === 'Identifier') return value.name;\n\tconst str = value.value;\n\tif (str[0] === str[str.length - 1] && str[0] === \"'\" || str[0] === '\"') {\n\t\treturn str.slice(1, str.length - 1);\n\t}\n\treturn str;\n}\n\nclass Block {\n\tglobal: boolean;\n\tcombinator: Node;\n\tselectors: Node[]\n\tstart: number;\n\tend: number;\n\tshouldEncapsulate: boolean;\n\n\tconstructor(combinator: Node) {\n\t\tthis.combinator = combinator;\n\t\tthis.global = false;\n\t\tthis.selectors = [];\n\n\t\tthis.start = null;\n\t\tthis.end = null;\n\n\t\tthis.shouldEncapsulate = false;\n\t}\n\n\tadd(selector: Node) {\n\t\tif (this.selectors.length === 0) {\n\t\t\tthis.start = selector.start;\n\t\t\tthis.global = selector.type === 'PseudoClassSelector' && selector.name === 'global';\n\t\t}\n\n\t\tthis.selectors.push(selector);\n\t\tthis.end = selector.end;\n\t}\n}\n\nfunction groupSelectors(selector: Node) {\n\tlet block: Block = new Block(null);\n\n\tconst blocks = [block];\n\n\tselector.children.forEach((child: Node, i: number) => {\n\t\tif (child.type === 'WhiteSpace' || child.type === 'Combinator') {\n\t\t\tblock = new Block(child);\n\t\t\tblocks.push(block);\n\t\t} else {\n\t\t\tblock.add(child);\n\t\t}\n\t});\n\n\treturn blocks;\n}\n","import MagicString from 'magic-string';\nimport { walk } from 'estree-walker';\nimport { getLocator } from 'locate-character';\nimport Selector from './Selector';\nimport getCodeFrame from '../utils/getCodeFrame';\nimport hash from '../utils/hash';\nimport Element from '../generators/nodes/Element';\nimport { Validator } from '../validate/index';\nimport { Node, Parsed, Warning } from '../interfaces';\n\nclass Rule {\n\tselectors: Selector[];\n\tdeclarations: Declaration[];\n\tnode: Node;\n\tparent: Atrule;\n\n\tconstructor(node: Node, stylesheet, parent?: Atrule) {\n\t\tthis.node = node;\n\t\tthis.parent = parent;\n\t\tthis.selectors = node.selector.children.map((node: Node) => new Selector(node, stylesheet));\n\t\tthis.declarations = node.block.children.map((node: Node) => new Declaration(node));\n\t}\n\n\tapply(node: Element, stack: Element[]) {\n\t\tthis.selectors.forEach(selector => selector.apply(node, stack)); // TODO move the logic in here?\n\t}\n\n\tisUsed(dev: boolean) {\n\t\tif (this.parent && this.parent.node.type === 'Atrule' && this.parent.node.name === 'keyframes') return true;\n\t\tif (this.declarations.length === 0) return dev;\n\t\treturn this.selectors.some(s => s.used);\n\t}\n\n\tminify(code: MagicString, cascade: boolean, dev: boolean) {\n\t\tlet c = this.node.start;\n\t\tlet started = false;\n\n\t\tthis.selectors.forEach((selector, i) => {\n\t\t\tif (cascade || selector.used) {\n\t\t\t\tconst separator = started ? ',' : '';\n\t\t\t\tif ((selector.node.start - c) > separator.length) {\n\t\t\t\t\tcode.overwrite(c, selector.node.start, separator);\n\t\t\t\t}\n\n\t\t\t\tif (!cascade) selector.minify(code);\n\t\t\t\tc = selector.node.end;\n\n\t\t\t\tstarted = true;\n\t\t\t}\n\t\t});\n\n\t\tcode.remove(c, this.node.block.start);\n\n\t\tc = this.node.block.start + 1;\n\t\tthis.declarations.forEach((declaration, i) => {\n\t\t\tconst separator = i > 0 ? ';' : '';\n\t\t\tif ((declaration.node.start - c) > separator.length) {\n\t\t\t\tcode.overwrite(c, declaration.node.start, separator);\n\t\t\t}\n\n\t\t\tdeclaration.minify(code);\n\n\t\t\tc = declaration.node.end;\n\t\t});\n\n\t\tcode.remove(c, this.node.block.end - 1);\n\t}\n\n\ttransform(code: MagicString, id: string, keyframes: Map<string, string>, cascade: boolean) {\n\t\tif (this.parent && this.parent.node.type === 'Atrule' && this.parent.node.name === 'keyframes') return true;\n\n\t\tconst attr = `.${id}`;\n\n\t\tif (cascade) {\n\t\t\tthis.selectors.forEach(selector => {\n\t\t\t\t// TODO disable cascading (without :global(...)) in v2\n\t\t\t\tconst { start, end, children } = selector.node;\n\n\t\t\t\tconst css = code.original;\n\t\t\t\tconst selectorString = css.slice(start, end);\n\n\t\t\t\tconst firstToken = children[0];\n\n\t\t\t\tlet transformed;\n\n\t\t\t\tif (firstToken.type === 'TypeSelector') {\n\t\t\t\t\tconst insert = firstToken.end;\n\t\t\t\t\tconst head = firstToken.name === '*' ? '' : css.slice(start, insert);\n\t\t\t\t\tconst tail = css.slice(insert, end);\n\n\t\t\t\t\ttransformed = `${head}${attr}${tail},${attr} ${selectorString}`;\n\t\t\t\t} else {\n\t\t\t\t\ttransformed = `${attr}${selectorString},${attr} ${selectorString}`;\n\t\t\t\t}\n\n\t\t\t\tcode.overwrite(start, end, transformed);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.selectors.forEach(selector => selector.transform(code, attr));\n\t\t}\n\n\t\tthis.declarations.forEach(declaration => declaration.transform(code, keyframes));\n\t}\n\n\tvalidate(validator: Validator) {\n\t\tthis.selectors.forEach(selector => {\n\t\t\tselector.validate(validator);\n\t\t});\n\t}\n\n\twarnOnUnusedSelector(handler: (selector: Selector) => void) {\n\t\tthis.selectors.forEach(selector => {\n\t\t\tif (!selector.used) handler(selector);\n\t\t});\n\t}\n}\n\nclass Declaration {\n\tnode: Node;\n\n\tconstructor(node: Node) {\n\t\tthis.node = node;\n\t}\n\n\ttransform(code: MagicString, keyframes: Map<string, string>) {\n\t\tconst property = this.node.property && this.node.property.toLowerCase();\n\t\tif (property === 'animation' || property === 'animation-name') {\n\t\t\tthis.node.value.children.forEach((block: Node) => {\n\t\t\t\tif (block.type === 'Identifier') {\n\t\t\t\t\tconst name = block.name;\n\t\t\t\t\tif (keyframes.has(name)) {\n\t\t\t\t\t\tcode.overwrite(block.start, block.end, keyframes.get(name));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tminify(code: MagicString) {\n\t\tif (!this.node.property) return; // @apply, and possibly other weird cases?\n\n\t\tconst c = this.node.start + this.node.property.length;\n\t\tconst first = this.node.value.children  ?\n\t\t\tthis.node.value.children[0] :\n\t\t\tthis.node.value;\n\n\t\tlet start = first.start;\n\t\twhile (/\\s/.test(code.original[start])) start += 1;\n\n\t\tif (start - c > 1) {\n\t\t\tcode.overwrite(c, start, ':');\n\t\t}\n\t}\n}\n\nclass Atrule {\n\tnode: Node;\n\tchildren: (Atrule|Rule)[];\n\n\tconstructor(node: Node) {\n\t\tthis.node = node;\n\t\tthis.children = [];\n\t}\n\n\tapply(node: Element, stack: Element[]) {\n\t\tif (this.node.name === 'media' || this.node.name === 'supports') {\n\t\t\tthis.children.forEach(child => {\n\t\t\t\tchild.apply(node, stack);\n\t\t\t});\n\t\t}\n\n\t\telse if (this.node.name === 'keyframes') {\n\t\t\tthis.children.forEach((rule: Rule) => {\n\t\t\t\trule.selectors.forEach(selector => {\n\t\t\t\t\tselector.used = true;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tisUsed(dev: boolean) {\n\t\treturn true; // TODO\n\t}\n\n\tminify(code: MagicString, cascade: boolean, dev: boolean) {\n\t\tif (this.node.name === 'media') {\n\t\t\tconst expressionChar = code.original[this.node.expression.start];\n\t\t\tlet c = this.node.start + (expressionChar === '(' ? 6 : 7);\n\t\t\tif (this.node.expression.start > c) code.remove(c, this.node.expression.start);\n\n\t\t\tthis.node.expression.children.forEach((query: Node) => {\n\t\t\t\t// TODO minify queries\n\t\t\t\tc = query.end;\n\t\t\t});\n\n\t\t\tcode.remove(c, this.node.block.start);\n\t\t} else if (this.node.name === 'keyframes') {\n\t\t\tlet c = this.node.start + 10;\n\t\t\tif (this.node.expression.start - c > 1) code.overwrite(c, this.node.expression.start, ' ');\n\t\t\tc = this.node.expression.end;\n\t\t\tif (this.node.block.start - c > 0) code.remove(c, this.node.block.start);\n\t\t} else if (this.node.name === 'supports') {\n\t\t\tlet c = this.node.start + 9;\n\t\t\tif (this.node.expression.start - c > 1) code.overwrite(c, this.node.expression.start, ' ');\n\t\t\tthis.node.expression.children.forEach((query: Node) => {\n\t\t\t\t// TODO minify queries\n\t\t\t\tc = query.end;\n\t\t\t});\n\t\t\tcode.remove(c, this.node.block.start);\n\t\t}\n\n\t\t// TODO other atrules\n\n\t\tif (this.node.block) {\n\t\t\tlet c = this.node.block.start + 1;\n\n\t\t\tthis.children.forEach(child => {\n\t\t\t\tif (cascade || child.isUsed(dev)) {\n\t\t\t\t\tcode.remove(c, child.node.start);\n\t\t\t\t\tchild.minify(code, cascade, dev);\n\t\t\t\t\tc = child.node.end;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcode.remove(c, this.node.block.end - 1);\n\t\t}\n\t}\n\n\ttransform(code: MagicString, id: string, keyframes: Map<string, string>, cascade: boolean) {\n\t\tif (this.node.name === 'keyframes') {\n\t\t\tthis.node.expression.children.forEach(({ type, name, start, end }: Node) => {\n\t\t\t\tif (type === 'Identifier') {\n\t\t\t\t\tif (name.startsWith('-global-')) {\n\t\t\t\t\t\tcode.remove(start, start + 8);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.overwrite(start, end, keyframes.get(name));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.children.forEach(child => {\n\t\t\tchild.transform(code, id, keyframes, cascade);\n\t\t})\n\t}\n\n\tvalidate(validator: Validator) {\n\t\tthis.children.forEach(child => {\n\t\t\tchild.validate(validator);\n\t\t});\n\t}\n\n\twarnOnUnusedSelector(handler: (selector: Selector) => void) {\n\t\tif (this.node.name !== 'media') return;\n\n\t\tthis.children.forEach(child => {\n\t\t\tchild.warnOnUnusedSelector(handler);\n\t\t});\n\t}\n}\n\nconst keys = {};\n\nexport default class Stylesheet {\n\tsource: string;\n\tparsed: Parsed;\n\tcascade: boolean;\n\tfilename: string;\n\tdev: boolean;\n\n\thasStyles: boolean;\n\tid: string;\n\n\tchildren: (Rule|Atrule)[];\n\tkeyframes: Map<string, string>;\n\n\tnodesWithCssClass: Set<Node>;\n\n\tconstructor(source: string, parsed: Parsed, filename: string, cascade: boolean, dev: boolean) {\n\t\tthis.source = source;\n\t\tthis.parsed = parsed;\n\t\tthis.cascade = cascade;\n\t\tthis.filename = filename;\n\t\tthis.dev = dev;\n\n\t\tthis.children = [];\n\t\tthis.keyframes = new Map();\n\n\t\tthis.nodesWithCssClass = new Set();\n\n\t\tif (parsed.css && parsed.css.children.length) {\n\t\t\tthis.id = `svelte-${hash(parsed.css.content.styles)}`;\n\n\t\t\tthis.hasStyles = true;\n\n\t\t\tconst stack: (Rule | Atrule)[] = [];\n\t\t\tlet currentAtrule: Atrule = null;\n\n\t\t\twalk(this.parsed.css, {\n\t\t\t\tenter: (node: Node) => {\n\t\t\t\t\tif (node.type === 'Atrule') {\n\t\t\t\t\t\tconst last = stack[stack.length - 1];\n\n\t\t\t\t\t\tconst atrule = new Atrule(node);\n\t\t\t\t\t\tstack.push(atrule);\n\n\t\t\t\t\t\t// this is an awkward special case — @apply (and\n\t\t\t\t\t\t// possibly other future constructs)\n\t\t\t\t\t\tif (last && !(last instanceof Atrule)) return;\n\n\t\t\t\t\t\tif (currentAtrule) {\n\t\t\t\t\t\t\tcurrentAtrule.children.push(atrule);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.children.push(atrule);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (node.name === 'keyframes') {\n\t\t\t\t\t\t\tnode.expression.children.forEach((expression: Node) => {\n\t\t\t\t\t\t\t\tif (expression.type === 'Identifier' && !expression.name.startsWith('-global-')) {\n\t\t\t\t\t\t\t\t\tthis.keyframes.set(expression.name, `${this.id}-${expression.name}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentAtrule = atrule;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.type === 'Rule') {\n\t\t\t\t\t\tconst rule = new Rule(node, this, currentAtrule);\n\t\t\t\t\t\tstack.push(rule);\n\n\t\t\t\t\t\tif (currentAtrule) {\n\t\t\t\t\t\t\tcurrentAtrule.children.push(rule);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.children.push(rule);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tleave: (node: Node) => {\n\t\t\t\t\tif (node.type === 'Rule' || node.type === 'Atrule') stack.pop();\n\t\t\t\t\tif (node.type === 'Atrule') currentAtrule = <Atrule>stack[stack.length - 1];\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis.hasStyles = false;\n\t\t}\n\t}\n\n\tapply(node: Element) {\n\t\tif (!this.hasStyles) return;\n\n\t\tconst stack: Element[] = [];\n\t\tlet parent: Node = node;\n\t\twhile (parent = parent.parent) {\n\t\t\tif (parent.type === 'Element') stack.unshift(<Element>parent);\n\t\t}\n\n\t\tif (this.cascade) {\n\t\t\tif (stack.length === 0) this.nodesWithCssClass.add(node);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = 0; i < this.children.length; i += 1) {\n\t\t\tconst child = this.children[i];\n\t\t\tchild.apply(node, stack);\n\t\t}\n\t}\n\n\treify() {\n\t\tthis.nodesWithCssClass.forEach((node: Node) => {\n\t\t\tnode.addCssClass();\n\t\t});\n\t}\n\n\trender(cssOutputFilename: string, shouldTransformSelectors: boolean) {\n\t\tif (!this.hasStyles) {\n\t\t\treturn { code: null, map: null };\n\t\t}\n\n\t\tconst code = new MagicString(this.source);\n\n\t\twalk(this.parsed.css, {\n\t\t\tenter: (node: Node) => {\n\t\t\t\tcode.addSourcemapLocation(node.start);\n\t\t\t\tcode.addSourcemapLocation(node.end);\n\t\t\t}\n\t\t});\n\n\t\tif (shouldTransformSelectors) {\n\t\t\tthis.children.forEach((child: (Atrule|Rule)) => {\n\t\t\t\tchild.transform(code, this.id, this.keyframes, this.cascade);\n\t\t\t});\n\t\t}\n\n\t\tlet c = 0;\n\t\tthis.children.forEach(child => {\n\t\t\tif (this.cascade || child.isUsed(this.dev)) {\n\t\t\t\tcode.remove(c, child.node.start);\n\t\t\t\tchild.minify(code, this.cascade, this.dev);\n\t\t\t\tc = child.node.end;\n\t\t\t}\n\t\t});\n\n\t\tcode.remove(c, this.source.length);\n\n\t\treturn {\n\t\t\tcode: code.toString(),\n\t\t\tmap: code.generateMap({\n\t\t\t\tincludeContent: true,\n\t\t\t\tsource: this.filename,\n\t\t\t\tfile: cssOutputFilename\n\t\t\t})\n\t\t};\n\t}\n\n\tvalidate(validator: Validator) {\n\t\tthis.children.forEach(child => {\n\t\t\tchild.validate(validator);\n\t\t});\n\t}\n\n\twarnOnUnusedSelectors(onwarn: (warning: Warning) => void) {\n\t\tif (this.cascade) return;\n\n\t\tlet locator;\n\n\t\tconst handler = (selector: Selector) => {\n\t\t\tconst pos = selector.node.start;\n\n\t\t\tif (!locator) locator = getLocator(this.source);\n\t\t\tconst { line, column } = locator(pos);\n\n\t\t\tconst frame = getCodeFrame(this.source, line, column);\n\t\t\tconst message = `Unused CSS selector`;\n\n\t\t\tonwarn({\n\t\t\t\tmessage,\n\t\t\t\tframe,\n\t\t\t\tloc: { line: line + 1, column },\n\t\t\t\tpos,\n\t\t\t\tfilename: this.filename,\n\t\t\t\ttoString: () => `${message} (${line + 1}:${column})\\n${frame}`,\n\t\t\t});\n\t\t};\n\n\t\tthis.children.forEach(child => {\n\t\t\tchild.warnOnUnusedSelector(handler);\n\t\t});\n\t}\n}\n","import parse from './parse/index';\nimport validate from './validate/index';\nimport generate from './generators/dom/index';\nimport generateSSR from './generators/server-side-rendering/index';\nimport Stats from './Stats';\nimport { assign } from './shared/index.js';\nimport Stylesheet from './css/Stylesheet';\nimport { Parsed, CompileOptions, Warning, PreprocessOptions, Preprocessor } from './interfaces';\nimport { SourceMap } from 'magic-string';\n\nconst version = '__VERSION__';\n\nfunction normalizeOptions(options: CompileOptions): CompileOptions {\n\tlet normalizedOptions = assign({ generate: 'dom' }, options);\n\tconst { onwarn, onerror } = normalizedOptions;\n\tnormalizedOptions.onwarn = onwarn\n\t\t? (warning: Warning) => onwarn(warning, defaultOnwarn)\n\t\t: defaultOnwarn;\n\tnormalizedOptions.onerror = onerror\n\t\t? (error: Error) => onerror(error, defaultOnerror)\n\t\t: defaultOnerror;\n\treturn normalizedOptions;\n}\n\nfunction defaultOnwarn(warning: Warning) {\n\tif (warning.loc) {\n\t\tconsole.warn(\n\t\t\t`(${warning.loc.line}:${warning.loc.column}) – ${warning.message}`\n\t\t); // eslint-disable-line no-console\n\t} else {\n\t\tconsole.warn(warning.message); // eslint-disable-line no-console\n\t}\n}\n\nfunction defaultOnerror(error: Error) {\n\tthrow error;\n}\n\nfunction parseAttributeValue(value: string) {\n\treturn /^['\"]/.test(value) ?\n\t\tvalue.slice(1, -1) :\n\t\tvalue;\n}\n\nfunction parseAttributes(str: string) {\n\tconst attrs = {};\n\tstr.split(/\\s+/).filter(Boolean).forEach(attr => {\n\t\tconst [name, value] = attr.split('=');\n\t\tattrs[name] = value ? parseAttributeValue(value) : true;\n\t});\n\treturn attrs;\n}\n\nasync function replaceTagContents(source, type: 'script' | 'style', preprocessor: Preprocessor, options: PreprocessOptions) {\n\tconst exp = new RegExp(`<${type}([\\\\S\\\\s]*?)>([\\\\S\\\\s]*?)<\\\\/${type}>`, 'ig');\n\tconst match = exp.exec(source);\n\n\tif (match) {\n\t\tconst attributes: Record<string, string | boolean> = parseAttributes(match[1]);\n\t\tconst content: string = match[2];\n\t\tconst processed: { code: string, map?: SourceMap | string } = await preprocessor({\n\t\t\tcontent,\n\t\t\tattributes,\n\t\t\tfilename : options.filename\n\t\t});\n\n\t\tif (processed && processed.code) {\n\t\t\treturn (\n\t\t\t\tsource.slice(0, match.index) +\n\t\t\t\t`<${type}>${processed.code}</${type}>` +\n\t\t\t\tsource.slice(match.index + match[0].length)\n\t\t\t);\n\t\t}\n\t}\n\n\treturn source;\n}\n\nexport async function preprocess(source: string, options: PreprocessOptions) {\n\tconst { markup, style, script } = options;\n\tif (!!markup) {\n\t\tconst processed: { code: string, map?: SourceMap | string } = await markup({\n\t\t\tcontent: source,\n\t\t\tfilename: options.filename\n\t\t});\n\t\tsource = processed.code;\n\t}\n\n\tif (!!style) {\n\t\tsource = await replaceTagContents(source, 'style', style, options);\n\t}\n\n\tif (!!script) {\n\t\tsource = await replaceTagContents(source, 'script', script, options);\n\t}\n\n\treturn {\n\t\t// TODO return separated output, in future version where svelte.compile supports it:\n\t\t// style: { code: styleCode, map: styleMap },\n\t\t// script { code: scriptCode, map: scriptMap },\n\t\t// markup { code: markupCode, map: markupMap },\n\n\t\ttoString() {\n\t\t\treturn source;\n\t\t}\n\t};\n}\n\nexport function compile(source: string, _options: CompileOptions) {\n\tconst options = normalizeOptions(_options);\n\tlet parsed: Parsed;\n\n\tconst stats = new Stats();\n\n\ttry {\n\t\tstats.start('parse');\n\t\tparsed = parse(source, options);\n\t\tstats.stop('parse');\n\t} catch (err) {\n\t\toptions.onerror(err);\n\t\treturn;\n\t}\n\n\tstats.start('stylesheet');\n\tconst stylesheet = new Stylesheet(source, parsed, options.filename, options.cascade !== false, options.dev);\n\tstats.stop('stylesheet');\n\n\tstats.start('validate');\n\t// TODO remove this when we remove svelte.validate from public API — we\n\t// can use the stats object instead\n\tconst onwarn = options.onwarn;\n\toptions.onwarn = warning => {\n\t\tstats.warnings.push(warning);\n\t\tonwarn(warning);\n\t};\n\n\tvalidate(parsed, source, stylesheet, options);\n\tstats.stop('validate');\n\n\tconst compiler = options.generate === 'ssr' ? generateSSR : generate;\n\n\treturn compiler(parsed, source, stylesheet, options, stats);\n};\n\nexport function create(source: string, _options: CompileOptions = {}) {\n\t_options.format = 'eval';\n\n\tconst compiled = compile(source, _options);\n\n\tif (!compiled || !compiled.code) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\treturn (0, eval)(compiled.code);\n\t} catch (err) {\n\t\tif (_options.onerror) {\n\t\t\t_options.onerror(err);\n\t\t\treturn;\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport { parse, validate, Stylesheet, version as VERSION };\n"],"names":["acorn.parse","PUNCTUATION","constants","STOP_URL_RAW","TYPE","PUNCTUATOR","TAB","N","F","R","SPACE","NAME","SYMBOL_TYPE","firstCharOffset","cmpStr","isNumber","findLastNonSpaceLocation","findWhiteSpaceEnd","findCommentEnd","findStringEnd","findNumberEnd","findIdentifierEnd","findUrlRawEnd","WHITESPACE","IDENTIFIER","NUMBER","STRING","COMMENT","CDO","CDC","ATRULE","FUNCTION","URL","RAW","FULLSTOP","PLUSSIGN","HYPHENMINUS","SafeUint32Array","CssSyntaxError","require$$0","List","Tokenizer","cmpChar","LEFTPARENTHESIS","LEFTSQUAREBRACKET","NUMBERSIGN","SOLIDUS","ASTERISK","GREATERTHANSIGN","COMMA","EXCLAMATIONMARK","require$$1","require$$2","require$$3","LEFTCURLYBRACKET","COLON","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","SEMICOLON","RIGHTCURLYBRACKET","consumeRaw","RIGHTSQUAREBRACKET","VERTICALLINE","TILDE","DOLLARSIGN","RIGHTPARENTHESIS","isHex","PERCENTSIGN","endsWith","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","require$$24","require$$25","require$$26","require$$27","require$$28","require$$29","require$$30","require$$31","require$$32","require$$33","require$$34","require$$35","require$$36","require$$37","require$$38","require$$39","createParser","config","toString","isArray","parse","readExpression","readSequence","error","Parser","getName","namespaces.validNamespaces","disallowed","data","tag","flattenReference","list","svg","namespaces.svg","validateEventHandler","toString$1","getLocator","isDynamic","Node","isComputed","events","Block","shouldSkip","Comment","MagicString","html","visit","stringifyAttributeValue","AwaitBlock","Component","EachBlock","Element","Head","IfBlock","MustacheTag","RawMustacheTag","Slot","Text","Title","Window","assign","Selector","Declaration","Atrule","Rule","version","Stats","generateSSR","generate"],"mappings":"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AAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAG7lC,IAAI,qBAAqB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,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c,EAAE,KAAK;IACrB,cAAc,EAAE,KAAK;IACrB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,KAAK;IACrB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,IAAI;IACnB,aAAa,EAAE,IAAI;IACnB,aAAa,E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;IACd,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,GAAG;IACd,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,GAAG;IACd,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,GAAG;IACd,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,KAAK;IAChB,SAAS,EAAE,GAAG;IACd,SAAS,EAAE,KAAK;IAChB,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,KAAK;IAChB,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,KAAK;IAChB,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,KAAK;IAChB,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,GAAG;IACb,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,GAAG;IACb,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,GAAG;IACb,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,IAAI;IACd,QAAQ,EAAE,GAAG;IACb,QAAQ,EAAE,GAAG;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,GAAG;IACZ,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,GAAG;IACZ,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,EAAE;IACX,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,GAAG;IACZ,OAAO,EAAE,GAAG;IACZ,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,GAAG;IACZ,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,GAAG;IACZ,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,GAAG;IACZ,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,GAAG;IACZ,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,GAAG;IACZ,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,IAAI;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,MAAM,EAAE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"}
\ No newline at end of file
diff --git a/node_modules/svelte/easing.d.ts b/node_modules/svelte/easing.d.ts
new file mode 100644
index 0000000..9af6dd9
--- /dev/null
+++ b/node_modules/svelte/easing.d.ts
@@ -0,0 +1 @@
+export * from './types/easing';
diff --git a/node_modules/svelte/easing.js b/node_modules/svelte/easing.js
new file mode 100644
index 0000000..9796688
--- /dev/null
+++ b/node_modules/svelte/easing.js
@@ -0,0 +1,178 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var internal = require('./internal');
+
+/*
+Adapted from https://github.com/mattdesl
+Distributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md
+*/
+function backInOut(t) {
+    const s = 1.70158 * 1.525;
+    if ((t *= 2) < 1)
+        return 0.5 * (t * t * ((s + 1) * t - s));
+    return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);
+}
+function backIn(t) {
+    const s = 1.70158;
+    return t * t * ((s + 1) * t - s);
+}
+function backOut(t) {
+    const s = 1.70158;
+    return --t * t * ((s + 1) * t + s) + 1;
+}
+function bounceOut(t) {
+    const a = 4.0 / 11.0;
+    const b = 8.0 / 11.0;
+    const c = 9.0 / 10.0;
+    const ca = 4356.0 / 361.0;
+    const cb = 35442.0 / 1805.0;
+    const cc = 16061.0 / 1805.0;
+    const t2 = t * t;
+    return t < a
+        ? 7.5625 * t2
+        : t < b
+            ? 9.075 * t2 - 9.9 * t + 3.4
+            : t < c
+                ? ca * t2 - cb * t + cc
+                : 10.8 * t * t - 20.52 * t + 10.72;
+}
+function bounceInOut(t) {
+    return t < 0.5
+        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
+        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
+}
+function bounceIn(t) {
+    return 1.0 - bounceOut(1.0 - t);
+}
+function circInOut(t) {
+    if ((t *= 2) < 1)
+        return -0.5 * (Math.sqrt(1 - t * t) - 1);
+    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
+}
+function circIn(t) {
+    return 1.0 - Math.sqrt(1.0 - t * t);
+}
+function circOut(t) {
+    return Math.sqrt(1 - --t * t);
+}
+function cubicInOut(t) {
+    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
+}
+function cubicIn(t) {
+    return t * t * t;
+}
+function cubicOut(t) {
+    const f = t - 1.0;
+    return f * f * f + 1.0;
+}
+function elasticInOut(t) {
+    return t < 0.5
+        ? 0.5 *
+            Math.sin(((+13.0 * Math.PI) / 2) * 2.0 * t) *
+            Math.pow(2.0, 10.0 * (2.0 * t - 1.0))
+        : 0.5 *
+            Math.sin(((-13.0 * Math.PI) / 2) * (2.0 * t - 1.0 + 1.0)) *
+            Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) +
+            1.0;
+}
+function elasticIn(t) {
+    return Math.sin((13.0 * t * Math.PI) / 2) * Math.pow(2.0, 10.0 * (t - 1.0));
+}
+function elasticOut(t) {
+    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);
+}
+function expoInOut(t) {
+    return t === 0.0 || t === 1.0
+        ? t
+        : t < 0.5
+            ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)
+            : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;
+}
+function expoIn(t) {
+    return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));
+}
+function expoOut(t) {
+    return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);
+}
+function quadInOut(t) {
+    t /= 0.5;
+    if (t < 1)
+        return 0.5 * t * t;
+    t--;
+    return -0.5 * (t * (t - 2) - 1);
+}
+function quadIn(t) {
+    return t * t;
+}
+function quadOut(t) {
+    return -t * (t - 2.0);
+}
+function quartInOut(t) {
+    return t < 0.5
+        ? +8.0 * Math.pow(t, 4.0)
+        : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0;
+}
+function quartIn(t) {
+    return Math.pow(t, 4.0);
+}
+function quartOut(t) {
+    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
+}
+function quintInOut(t) {
+    if ((t *= 2) < 1)
+        return 0.5 * t * t * t * t * t;
+    return 0.5 * ((t -= 2) * t * t * t * t + 2);
+}
+function quintIn(t) {
+    return t * t * t * t * t;
+}
+function quintOut(t) {
+    return --t * t * t * t * t + 1;
+}
+function sineInOut(t) {
+    return -0.5 * (Math.cos(Math.PI * t) - 1);
+}
+function sineIn(t) {
+    const v = Math.cos(t * Math.PI * 0.5);
+    if (Math.abs(v) < 1e-14)
+        return 1;
+    else
+        return 1 - v;
+}
+function sineOut(t) {
+    return Math.sin((t * Math.PI) / 2);
+}
+
+exports.linear = internal.identity;
+exports.backInOut = backInOut;
+exports.backIn = backIn;
+exports.backOut = backOut;
+exports.bounceOut = bounceOut;
+exports.bounceInOut = bounceInOut;
+exports.bounceIn = bounceIn;
+exports.circInOut = circInOut;
+exports.circIn = circIn;
+exports.circOut = circOut;
+exports.cubicInOut = cubicInOut;
+exports.cubicIn = cubicIn;
+exports.cubicOut = cubicOut;
+exports.elasticInOut = elasticInOut;
+exports.elasticIn = elasticIn;
+exports.elasticOut = elasticOut;
+exports.expoInOut = expoInOut;
+exports.expoIn = expoIn;
+exports.expoOut = expoOut;
+exports.quadInOut = quadInOut;
+exports.quadIn = quadIn;
+exports.quadOut = quadOut;
+exports.quartInOut = quartInOut;
+exports.quartIn = quartIn;
+exports.quartOut = quartOut;
+exports.quintInOut = quintInOut;
+exports.quintIn = quintIn;
+exports.quintOut = quintOut;
+exports.sineInOut = sineInOut;
+exports.sineIn = sineIn;
+exports.sineOut = sineOut;
diff --git a/node_modules/svelte/easing.mjs b/node_modules/svelte/easing.mjs
new file mode 100644
index 0000000..73a39ff
--- /dev/null
+++ b/node_modules/svelte/easing.mjs
@@ -0,0 +1,144 @@
+export { identity as linear } from './internal';
+
+/*
+Adapted from https://github.com/mattdesl
+Distributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md
+*/
+function backInOut(t) {
+    const s = 1.70158 * 1.525;
+    if ((t *= 2) < 1)
+        return 0.5 * (t * t * ((s + 1) * t - s));
+    return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);
+}
+function backIn(t) {
+    const s = 1.70158;
+    return t * t * ((s + 1) * t - s);
+}
+function backOut(t) {
+    const s = 1.70158;
+    return --t * t * ((s + 1) * t + s) + 1;
+}
+function bounceOut(t) {
+    const a = 4.0 / 11.0;
+    const b = 8.0 / 11.0;
+    const c = 9.0 / 10.0;
+    const ca = 4356.0 / 361.0;
+    const cb = 35442.0 / 1805.0;
+    const cc = 16061.0 / 1805.0;
+    const t2 = t * t;
+    return t < a
+        ? 7.5625 * t2
+        : t < b
+            ? 9.075 * t2 - 9.9 * t + 3.4
+            : t < c
+                ? ca * t2 - cb * t + cc
+                : 10.8 * t * t - 20.52 * t + 10.72;
+}
+function bounceInOut(t) {
+    return t < 0.5
+        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
+        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
+}
+function bounceIn(t) {
+    return 1.0 - bounceOut(1.0 - t);
+}
+function circInOut(t) {
+    if ((t *= 2) < 1)
+        return -0.5 * (Math.sqrt(1 - t * t) - 1);
+    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
+}
+function circIn(t) {
+    return 1.0 - Math.sqrt(1.0 - t * t);
+}
+function circOut(t) {
+    return Math.sqrt(1 - --t * t);
+}
+function cubicInOut(t) {
+    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
+}
+function cubicIn(t) {
+    return t * t * t;
+}
+function cubicOut(t) {
+    const f = t - 1.0;
+    return f * f * f + 1.0;
+}
+function elasticInOut(t) {
+    return t < 0.5
+        ? 0.5 *
+            Math.sin(((+13.0 * Math.PI) / 2) * 2.0 * t) *
+            Math.pow(2.0, 10.0 * (2.0 * t - 1.0))
+        : 0.5 *
+            Math.sin(((-13.0 * Math.PI) / 2) * (2.0 * t - 1.0 + 1.0)) *
+            Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) +
+            1.0;
+}
+function elasticIn(t) {
+    return Math.sin((13.0 * t * Math.PI) / 2) * Math.pow(2.0, 10.0 * (t - 1.0));
+}
+function elasticOut(t) {
+    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);
+}
+function expoInOut(t) {
+    return t === 0.0 || t === 1.0
+        ? t
+        : t < 0.5
+            ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)
+            : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;
+}
+function expoIn(t) {
+    return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));
+}
+function expoOut(t) {
+    return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);
+}
+function quadInOut(t) {
+    t /= 0.5;
+    if (t < 1)
+        return 0.5 * t * t;
+    t--;
+    return -0.5 * (t * (t - 2) - 1);
+}
+function quadIn(t) {
+    return t * t;
+}
+function quadOut(t) {
+    return -t * (t - 2.0);
+}
+function quartInOut(t) {
+    return t < 0.5
+        ? +8.0 * Math.pow(t, 4.0)
+        : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0;
+}
+function quartIn(t) {
+    return Math.pow(t, 4.0);
+}
+function quartOut(t) {
+    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
+}
+function quintInOut(t) {
+    if ((t *= 2) < 1)
+        return 0.5 * t * t * t * t * t;
+    return 0.5 * ((t -= 2) * t * t * t * t + 2);
+}
+function quintIn(t) {
+    return t * t * t * t * t;
+}
+function quintOut(t) {
+    return --t * t * t * t * t + 1;
+}
+function sineInOut(t) {
+    return -0.5 * (Math.cos(Math.PI * t) - 1);
+}
+function sineIn(t) {
+    const v = Math.cos(t * Math.PI * 0.5);
+    if (Math.abs(v) < 1e-14)
+        return 1;
+    else
+        return 1 - v;
+}
+function sineOut(t) {
+    return Math.sin((t * Math.PI) / 2);
+}
+
+export { backInOut, backIn, backOut, bounceOut, bounceInOut, bounceIn, circInOut, circIn, circOut, cubicInOut, cubicIn, cubicOut, elasticInOut, elasticIn, elasticOut, expoInOut, expoIn, expoOut, quadInOut, quadIn, quadOut, quartInOut, quartIn, quartOut, quintInOut, quintIn, quintOut, sineInOut, sineIn, sineOut };
diff --git a/node_modules/svelte/index.d.ts b/node_modules/svelte/index.d.ts
new file mode 100644
index 0000000..a3d3b4a
--- /dev/null
+++ b/node_modules/svelte/index.d.ts
@@ -0,0 +1 @@
+export * from './types/index';
diff --git a/node_modules/svelte/index.js b/node_modules/svelte/index.js
new file mode 100644
index 0000000..a286b96
--- /dev/null
+++ b/node_modules/svelte/index.js
@@ -0,0 +1,16 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var internal = require('./internal');
+
+
+
+exports.onMount = internal.onMount;
+exports.onDestroy = internal.onDestroy;
+exports.beforeUpdate = internal.beforeUpdate;
+exports.afterUpdate = internal.afterUpdate;
+exports.setContext = internal.setContext;
+exports.getContext = internal.getContext;
+exports.tick = internal.tick;
+exports.createEventDispatcher = internal.createEventDispatcher;
diff --git a/node_modules/svelte/index.mjs b/node_modules/svelte/index.mjs
new file mode 100644
index 0000000..9f05075
--- /dev/null
+++ b/node_modules/svelte/index.mjs
@@ -0,0 +1 @@
+export { onMount, onDestroy, beforeUpdate, afterUpdate, setContext, getContext, tick, createEventDispatcher } from './internal';
diff --git a/node_modules/svelte/internal.d.ts b/node_modules/svelte/internal.d.ts
new file mode 100644
index 0000000..135ffe7
--- /dev/null
+++ b/node_modules/svelte/internal.d.ts
@@ -0,0 +1 @@
+export * from './types/internal';
diff --git a/node_modules/svelte/internal.js b/node_modules/svelte/internal.js
new file mode 100644
index 0000000..714b026
--- /dev/null
+++ b/node_modules/svelte/internal.js
@@ -0,0 +1,1372 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+function noop() { }
+const identity = x => x;
+function assign(tar, src) {
+    for (const k in src)
+        tar[k] = src[k];
+    return tar;
+}
+function is_promise(value) {
+    return value && typeof value.then === 'function';
+}
+function add_location(element, file, line, column, char) {
+    element.__svelte_meta = {
+        loc: { file, line, column, char }
+    };
+}
+function run(fn) {
+    return fn();
+}
+function blank_object() {
+    return Object.create(null);
+}
+function run_all(fns) {
+    fns.forEach(run);
+}
+function is_function(thing) {
+    return typeof thing === 'function';
+}
+function safe_not_equal(a, b) {
+    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
+}
+function not_equal(a, b) {
+    return a != a ? b == b : a !== b;
+}
+function validate_store(store, name) {
+    if (!store || typeof store.subscribe !== 'function') {
+        throw new Error(`'${name}' is not a store with a 'subscribe' method`);
+    }
+}
+function subscribe(component, store, callback) {
+    const unsub = store.subscribe(callback);
+    component.$$.on_destroy.push(unsub.unsubscribe
+        ? () => unsub.unsubscribe()
+        : unsub);
+}
+function create_slot(definition, ctx, fn) {
+    if (definition) {
+        const slot_ctx = get_slot_context(definition, ctx, fn);
+        return definition[0](slot_ctx);
+    }
+}
+function get_slot_context(definition, ctx, fn) {
+    return definition[1]
+        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))
+        : ctx.$$scope.ctx;
+}
+function get_slot_changes(definition, ctx, changed, fn) {
+    return definition[1]
+        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))
+        : ctx.$$scope.changed || {};
+}
+function exclude_internal_props(props) {
+    const result = {};
+    for (const k in props)
+        if (k[0] !== '$')
+            result[k] = props[k];
+    return result;
+}
+const is_client = typeof window !== 'undefined';
+exports.now = is_client
+    ? () => window.performance.now()
+    : () => Date.now();
+exports.raf = is_client ? requestAnimationFrame : noop;
+// used internally for testing
+function set_now(fn) {
+    exports.now = fn;
+}
+function set_raf(fn) {
+    exports.raf = fn;
+}
+
+const tasks = new Set();
+let running = false;
+function run_tasks() {
+    tasks.forEach(task => {
+        if (!task[0](exports.now())) {
+            tasks.delete(task);
+            task[1]();
+        }
+    });
+    running = tasks.size > 0;
+    if (running)
+        exports.raf(run_tasks);
+}
+function clear_loops() {
+    // for testing...
+    tasks.forEach(task => tasks.delete(task));
+    running = false;
+}
+function loop(fn) {
+    let task;
+    if (!running) {
+        running = true;
+        exports.raf(run_tasks);
+    }
+    return {
+        promise: new Promise(fulfil => {
+            tasks.add(task = [fn, fulfil]);
+        }),
+        abort() {
+            tasks.delete(task);
+        }
+    };
+}
+
+function append(target, node) {
+    target.appendChild(node);
+}
+function insert(target, node, anchor) {
+    target.insertBefore(node, anchor || null);
+}
+function detach(node) {
+    node.parentNode.removeChild(node);
+}
+function detach_between(before, after) {
+    while (before.nextSibling && before.nextSibling !== after) {
+        before.parentNode.removeChild(before.nextSibling);
+    }
+}
+function detach_before(after) {
+    while (after.previousSibling) {
+        after.parentNode.removeChild(after.previousSibling);
+    }
+}
+function detach_after(before) {
+    while (before.nextSibling) {
+        before.parentNode.removeChild(before.nextSibling);
+    }
+}
+function destroy_each(iterations, detaching) {
+    for (let i = 0; i < iterations.length; i += 1) {
+        if (iterations[i])
+            iterations[i].d(detaching);
+    }
+}
+function element(name) {
+    return document.createElement(name);
+}
+function object_without_properties(obj, exclude) {
+    const target = {};
+    for (const k in obj) {
+        if (Object.prototype.hasOwnProperty.call(obj, k)
+            // @ts-ignore
+            && exclude.indexOf(k) === -1) {
+            // @ts-ignore
+            target[k] = obj[k];
+        }
+    }
+    return target;
+}
+function svg_element(name) {
+    return document.createElementNS('http://www.w3.org/2000/svg', name);
+}
+function text(data) {
+    return document.createTextNode(data);
+}
+function space() {
+    return text(' ');
+}
+function empty() {
+    return text('');
+}
+function listen(node, event, handler, options) {
+    node.addEventListener(event, handler, options);
+    return () => node.removeEventListener(event, handler, options);
+}
+function prevent_default(fn) {
+    return function (event) {
+        event.preventDefault();
+        // @ts-ignore
+        return fn.call(this, event);
+    };
+}
+function stop_propagation(fn) {
+    return function (event) {
+        event.stopPropagation();
+        // @ts-ignore
+        return fn.call(this, event);
+    };
+}
+function attr(node, attribute, value) {
+    if (value == null)
+        node.removeAttribute(attribute);
+    else
+        node.setAttribute(attribute, value);
+}
+function set_attributes(node, attributes) {
+    for (const key in attributes) {
+        if (key === 'style') {
+            node.style.cssText = attributes[key];
+        }
+        else if (key in node) {
+            node[key] = attributes[key];
+        }
+        else {
+            attr(node, key, attributes[key]);
+        }
+    }
+}
+function set_custom_element_data(node, prop, value) {
+    if (prop in node) {
+        node[prop] = value;
+    }
+    else {
+        attr(node, prop, value);
+    }
+}
+function xlink_attr(node, attribute, value) {
+    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
+}
+function get_binding_group_value(group) {
+    const value = [];
+    for (let i = 0; i < group.length; i += 1) {
+        if (group[i].checked)
+            value.push(group[i].__value);
+    }
+    return value;
+}
+function to_number(value) {
+    return value === '' ? undefined : +value;
+}
+function time_ranges_to_array(ranges) {
+    const array = [];
+    for (let i = 0; i < ranges.length; i += 1) {
+        array.push({ start: ranges.start(i), end: ranges.end(i) });
+    }
+    return array;
+}
+function children(element) {
+    return Array.from(element.childNodes);
+}
+function claim_element(nodes, name, attributes, svg) {
+    for (let i = 0; i < nodes.length; i += 1) {
+        const node = nodes[i];
+        if (node.nodeName === name) {
+            for (let j = 0; j < node.attributes.length; j += 1) {
+                const attribute = node.attributes[j];
+                if (!attributes[attribute.name])
+                    node.removeAttribute(attribute.name);
+            }
+            return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes
+        }
+    }
+    return svg ? svg_element(name) : element(name);
+}
+function claim_text(nodes, data) {
+    for (let i = 0; i < nodes.length; i += 1) {
+        const node = nodes[i];
+        if (node.nodeType === 3) {
+            node.data = data;
+            return nodes.splice(i, 1)[0];
+        }
+    }
+    return text(data);
+}
+function set_data(text, data) {
+    data = '' + data;
+    if (text.data !== data)
+        text.data = data;
+}
+function set_input_type(input, type) {
+    try {
+        input.type = type;
+    }
+    catch (e) {
+        // do nothing
+    }
+}
+function set_style(node, key, value) {
+    node.style.setProperty(key, value);
+}
+function select_option(select, value) {
+    for (let i = 0; i < select.options.length; i += 1) {
+        const option = select.options[i];
+        if (option.__value === value) {
+            option.selected = true;
+            return;
+        }
+    }
+}
+function select_options(select, value) {
+    for (let i = 0; i < select.options.length; i += 1) {
+        const option = select.options[i];
+        option.selected = ~value.indexOf(option.__value);
+    }
+}
+function select_value(select) {
+    const selected_option = select.querySelector(':checked') || select.options[0];
+    return selected_option && selected_option.__value;
+}
+function select_multiple_value(select) {
+    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);
+}
+function add_resize_listener(element, fn) {
+    if (getComputedStyle(element).position === 'static') {
+        element.style.position = 'relative';
+    }
+    const object = document.createElement('object');
+    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');
+    object.type = 'text/html';
+    let win;
+    object.onload = () => {
+        win = object.contentDocument.defaultView;
+        win.addEventListener('resize', fn);
+    };
+    if (/Trident/.test(navigator.userAgent)) {
+        element.appendChild(object);
+        object.data = 'about:blank';
+    }
+    else {
+        object.data = 'about:blank';
+        element.appendChild(object);
+    }
+    return {
+        cancel: () => {
+            win && win.removeEventListener && win.removeEventListener('resize', fn);
+            element.removeChild(object);
+        }
+    };
+}
+function toggle_class(element, name, toggle) {
+    element.classList[toggle ? 'add' : 'remove'](name);
+}
+function custom_event(type, detail) {
+    const e = document.createEvent('CustomEvent');
+    e.initCustomEvent(type, false, false, detail);
+    return e;
+}
+
+let stylesheet;
+let active = 0;
+let current_rules = {};
+// https://github.com/darkskyapp/string-hash/blob/master/index.js
+function hash(str) {
+    let hash = 5381;
+    let i = str.length;
+    while (i--)
+        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
+    return hash >>> 0;
+}
+function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
+    const step = 16.666 / duration;
+    let keyframes = '{\n';
+    for (let p = 0; p <= 1; p += step) {
+        const t = a + (b - a) * ease(p);
+        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
+    }
+    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
+    const name = `__svelte_${hash(rule)}_${uid}`;
+    if (!current_rules[name]) {
+        if (!stylesheet) {
+            const style = element('style');
+            document.head.appendChild(style);
+            stylesheet = style.sheet;
+        }
+        current_rules[name] = true;
+        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
+    }
+    const animation = node.style.animation || '';
+    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
+    active += 1;
+    return name;
+}
+function delete_rule(node, name) {
+    node.style.animation = (node.style.animation || '')
+        .split(', ')
+        .filter(name
+        ? anim => anim.indexOf(name) < 0 // remove specific animation
+        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
+    )
+        .join(', ');
+    if (name && !--active)
+        clear_rules();
+}
+function clear_rules() {
+    exports.raf(() => {
+        if (active)
+            return;
+        let i = stylesheet.cssRules.length;
+        while (i--)
+            stylesheet.deleteRule(i);
+        current_rules = {};
+    });
+}
+
+function create_animation(node, from, fn, params) {
+    if (!from)
+        return noop;
+    const to = node.getBoundingClientRect();
+    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
+        return noop;
+    const { delay = 0, duration = 300, easing = identity, start: start_time = exports.now() + delay, end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);
+    let running = true;
+    let started = false;
+    let name;
+    function start() {
+        if (css) {
+            name = create_rule(node, 0, 1, duration, delay, easing, css);
+        }
+        if (!delay) {
+            started = true;
+        }
+    }
+    function stop() {
+        if (css)
+            delete_rule(node, name);
+        running = false;
+    }
+    loop(now => {
+        if (!started && now >= start_time) {
+            started = true;
+        }
+        if (started && now >= end) {
+            tick(1, 0);
+            stop();
+        }
+        if (!running) {
+            return false;
+        }
+        if (started) {
+            const p = now - start_time;
+            const t = 0 + 1 * easing(p / duration);
+            tick(t, 1 - t);
+        }
+        return true;
+    });
+    start();
+    tick(0, 1);
+    return stop;
+}
+function fix_position(node) {
+    const style = getComputedStyle(node);
+    if (style.position !== 'absolute' && style.position !== 'fixed') {
+        const { width, height } = style;
+        const a = node.getBoundingClientRect();
+        node.style.position = 'absolute';
+        node.style.width = width;
+        node.style.height = height;
+        const b = node.getBoundingClientRect();
+        if (a.left !== b.left || a.top !== b.top) {
+            const style = getComputedStyle(node);
+            const transform = style.transform === 'none' ? '' : style.transform;
+            node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
+        }
+    }
+}
+
+function set_current_component(component) {
+    exports.current_component = component;
+}
+function get_current_component() {
+    if (!exports.current_component)
+        throw new Error(`Function called outside component initialization`);
+    return exports.current_component;
+}
+function beforeUpdate(fn) {
+    get_current_component().$$.before_render.push(fn);
+}
+function onMount(fn) {
+    get_current_component().$$.on_mount.push(fn);
+}
+function afterUpdate(fn) {
+    get_current_component().$$.after_render.push(fn);
+}
+function onDestroy(fn) {
+    get_current_component().$$.on_destroy.push(fn);
+}
+function createEventDispatcher() {
+    const component = exports.current_component;
+    return (type, detail) => {
+        const callbacks = component.$$.callbacks[type];
+        if (callbacks) {
+            // TODO are there situations where events could be dispatched
+            // in a server (non-DOM) environment?
+            const event = custom_event(type, detail);
+            callbacks.slice().forEach(fn => {
+                fn.call(component, event);
+            });
+        }
+    };
+}
+function setContext(key, context) {
+    get_current_component().$$.context.set(key, context);
+}
+function getContext(key) {
+    return get_current_component().$$.context.get(key);
+}
+// TODO figure out if we still want to support
+// shorthand events, or if we want to implement
+// a real bubbling mechanism
+function bubble(component, event) {
+    const callbacks = component.$$.callbacks[event.type];
+    if (callbacks) {
+        callbacks.slice().forEach(fn => fn(event));
+    }
+}
+
+const dirty_components = [];
+const intros = { enabled: false };
+const resolved_promise = Promise.resolve();
+let update_scheduled = false;
+const binding_callbacks = [];
+const render_callbacks = [];
+const flush_callbacks = [];
+function schedule_update() {
+    if (!update_scheduled) {
+        update_scheduled = true;
+        resolved_promise.then(flush);
+    }
+}
+function tick() {
+    schedule_update();
+    return resolved_promise;
+}
+function add_binding_callback(fn) {
+    binding_callbacks.push(fn);
+}
+function add_render_callback(fn) {
+    render_callbacks.push(fn);
+}
+function add_flush_callback(fn) {
+    flush_callbacks.push(fn);
+}
+function flush() {
+    const seen_callbacks = new Set();
+    do {
+        // first, call beforeUpdate functions
+        // and update components
+        while (dirty_components.length) {
+            const component = dirty_components.shift();
+            set_current_component(component);
+            update(component.$$);
+        }
+        while (binding_callbacks.length)
+            binding_callbacks.shift()();
+        // then, once components are updated, call
+        // afterUpdate functions. This may cause
+        // subsequent updates...
+        while (render_callbacks.length) {
+            const callback = render_callbacks.pop();
+            if (!seen_callbacks.has(callback)) {
+                callback();
+                // ...so guard against infinite loops
+                seen_callbacks.add(callback);
+            }
+        }
+    } while (dirty_components.length);
+    while (flush_callbacks.length) {
+        flush_callbacks.pop()();
+    }
+    update_scheduled = false;
+}
+function update($$) {
+    if ($$.fragment) {
+        $$.update($$.dirty);
+        run_all($$.before_render);
+        $$.fragment.p($$.dirty, $$.ctx);
+        $$.dirty = null;
+        $$.after_render.forEach(add_render_callback);
+    }
+}
+
+let promise;
+function wait() {
+    if (!promise) {
+        promise = Promise.resolve();
+        promise.then(() => {
+            promise = null;
+        });
+    }
+    return promise;
+}
+function dispatch(node, direction, kind) {
+    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
+}
+let outros;
+function group_outros() {
+    outros = {
+        remaining: 0,
+        callbacks: []
+    };
+}
+function check_outros() {
+    if (!outros.remaining) {
+        run_all(outros.callbacks);
+    }
+}
+function on_outro(callback) {
+    outros.callbacks.push(callback);
+}
+function create_in_transition(node, fn, params) {
+    let config = fn(node, params);
+    let running = false;
+    let animation_name;
+    let task;
+    let uid = 0;
+    function cleanup() {
+        if (animation_name)
+            delete_rule(node, animation_name);
+    }
+    function go() {
+        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;
+        if (css)
+            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
+        tick$$1(0, 1);
+        const start_time = exports.now() + delay;
+        const end_time = start_time + duration;
+        if (task)
+            task.abort();
+        running = true;
+        task = loop(now => {
+            if (running) {
+                if (now >= end_time) {
+                    tick$$1(1, 0);
+                    cleanup();
+                    return running = false;
+                }
+                if (now >= start_time) {
+                    const t = easing((now - start_time) / duration);
+                    tick$$1(t, 1 - t);
+                }
+            }
+            return running;
+        });
+    }
+    let started = false;
+    return {
+        start() {
+            if (started)
+                return;
+            delete_rule(node);
+            if (typeof config === 'function') {
+                config = config();
+                wait().then(go);
+            }
+            else {
+                go();
+            }
+        },
+        invalidate() {
+            started = false;
+        },
+        end() {
+            if (running) {
+                cleanup();
+                running = false;
+            }
+        }
+    };
+}
+function create_out_transition(node, fn, params) {
+    let config = fn(node, params);
+    let running = true;
+    let animation_name;
+    const group = outros;
+    group.remaining += 1;
+    function go() {
+        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;
+        if (css)
+            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
+        const start_time = exports.now() + delay;
+        const end_time = start_time + duration;
+        loop(now => {
+            if (running) {
+                if (now >= end_time) {
+                    tick$$1(0, 1);
+                    if (!--group.remaining) {
+                        // this will result in `end()` being called,
+                        // so we don't need to clean up here
+                        run_all(group.callbacks);
+                    }
+                    return false;
+                }
+                if (now >= start_time) {
+                    const t = easing((now - start_time) / duration);
+                    tick$$1(1 - t, t);
+                }
+            }
+            return running;
+        });
+    }
+    if (typeof config === 'function') {
+        wait().then(() => {
+            config = config();
+            go();
+        });
+    }
+    else {
+        go();
+    }
+    return {
+        end(reset) {
+            if (reset && config.tick) {
+                config.tick(1, 0);
+            }
+            if (running) {
+                if (animation_name)
+                    delete_rule(node, animation_name);
+                running = false;
+            }
+        }
+    };
+}
+function create_bidirectional_transition(node, fn, params, intro) {
+    let config = fn(node, params);
+    let t = intro ? 0 : 1;
+    let running_program = null;
+    let pending_program = null;
+    let animation_name = null;
+    function clear_animation() {
+        if (animation_name)
+            delete_rule(node, animation_name);
+    }
+    function init(program, duration) {
+        const d = program.b - t;
+        duration *= Math.abs(d);
+        return {
+            a: t,
+            b: program.b,
+            d,
+            duration,
+            start: program.start,
+            end: program.start + duration,
+            group: program.group
+        };
+    }
+    function go(b) {
+        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;
+        const program = {
+            start: exports.now() + delay,
+            b
+        };
+        if (!b) {
+            // @ts-ignore todo: improve typings
+            program.group = outros;
+            outros.remaining += 1;
+        }
+        if (running_program) {
+            pending_program = program;
+        }
+        else {
+            // if this is an intro, and there's a delay, we need to do
+            // an initial tick and/or apply CSS animation immediately
+            if (css) {
+                clear_animation();
+                animation_name = create_rule(node, t, b, duration, delay, easing, css);
+            }
+            if (b)
+                tick$$1(0, 1);
+            running_program = init(program, duration);
+            add_render_callback(() => dispatch(node, b, 'start'));
+            loop(now => {
+                if (pending_program && now > pending_program.start) {
+                    running_program = init(pending_program, duration);
+                    pending_program = null;
+                    dispatch(node, running_program.b, 'start');
+                    if (css) {
+                        clear_animation();
+                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
+                    }
+                }
+                if (running_program) {
+                    if (now >= running_program.end) {
+                        tick$$1(t = running_program.b, 1 - t);
+                        dispatch(node, running_program.b, 'end');
+                        if (!pending_program) {
+                            // we're done
+                            if (running_program.b) {
+                                // intro — we can tidy up immediately
+                                clear_animation();
+                            }
+                            else {
+                                // outro — needs to be coordinated
+                                if (!--running_program.group.remaining)
+                                    run_all(running_program.group.callbacks);
+                            }
+                        }
+                        running_program = null;
+                    }
+                    else if (now >= running_program.start) {
+                        const p = now - running_program.start;
+                        t = running_program.a + running_program.d * easing(p / running_program.duration);
+                        tick$$1(t, 1 - t);
+                    }
+                }
+                return !!(running_program || pending_program);
+            });
+        }
+    }
+    return {
+        run(b) {
+            if (typeof config === 'function') {
+                wait().then(() => {
+                    config = config();
+                    go(b);
+                });
+            }
+            else {
+                go(b);
+            }
+        },
+        end() {
+            clear_animation();
+            running_program = pending_program = null;
+        }
+    };
+}
+
+function handle_promise(promise, info) {
+    const token = info.token = {};
+    function update(type, index, key, value) {
+        if (info.token !== token)
+            return;
+        info.resolved = key && { [key]: value };
+        const child_ctx = assign(assign({}, info.ctx), info.resolved);
+        const block = type && (info.current = type)(child_ctx);
+        if (info.block) {
+            if (info.blocks) {
+                info.blocks.forEach((block, i) => {
+                    if (i !== index && block) {
+                        group_outros();
+                        on_outro(() => {
+                            block.d(1);
+                            info.blocks[i] = null;
+                        });
+                        block.o(1);
+                        check_outros();
+                    }
+                });
+            }
+            else {
+                info.block.d(1);
+            }
+            block.c();
+            if (block.i)
+                block.i(1);
+            block.m(info.mount(), info.anchor);
+            flush();
+        }
+        info.block = block;
+        if (info.blocks)
+            info.blocks[index] = block;
+    }
+    if (is_promise(promise)) {
+        promise.then(value => {
+            update(info.then, 1, info.value, value);
+        }, error => {
+            update(info.catch, 2, info.error, error);
+        });
+        // if we previously had a then/catch block, destroy it
+        if (info.current !== info.pending) {
+            update(info.pending, 0);
+            return true;
+        }
+    }
+    else {
+        if (info.current !== info.then) {
+            update(info.then, 1, info.value, promise);
+            return true;
+        }
+        info.resolved = { [info.value]: promise };
+    }
+}
+
+function destroy_block(block, lookup) {
+    block.d(1);
+    lookup.delete(block.key);
+}
+function outro_and_destroy_block(block, lookup) {
+    on_outro(() => {
+        destroy_block(block, lookup);
+    });
+    block.o(1);
+}
+function fix_and_outro_and_destroy_block(block, lookup) {
+    block.f();
+    outro_and_destroy_block(block, lookup);
+}
+function update_keyed_each(old_blocks, changed, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
+    let o = old_blocks.length;
+    let n = list.length;
+    let i = o;
+    const old_indexes = {};
+    while (i--)
+        old_indexes[old_blocks[i].key] = i;
+    const new_blocks = [];
+    const new_lookup = new Map();
+    const deltas = new Map();
+    i = n;
+    while (i--) {
+        const child_ctx = get_context(ctx, list, i);
+        const key = get_key(child_ctx);
+        let block = lookup.get(key);
+        if (!block) {
+            block = create_each_block(key, child_ctx);
+            block.c();
+        }
+        else if (dynamic) {
+            block.p(changed, child_ctx);
+        }
+        new_lookup.set(key, new_blocks[i] = block);
+        if (key in old_indexes)
+            deltas.set(key, Math.abs(i - old_indexes[key]));
+    }
+    const will_move = new Set();
+    const did_move = new Set();
+    function insert(block) {
+        if (block.i)
+            block.i(1);
+        block.m(node, next);
+        lookup.set(block.key, block);
+        next = block.first;
+        n--;
+    }
+    while (o && n) {
+        const new_block = new_blocks[n - 1];
+        const old_block = old_blocks[o - 1];
+        const new_key = new_block.key;
+        const old_key = old_block.key;
+        if (new_block === old_block) {
+            // do nothing
+            next = new_block.first;
+            o--;
+            n--;
+        }
+        else if (!new_lookup.has(old_key)) {
+            // remove old block
+            destroy(old_block, lookup);
+            o--;
+        }
+        else if (!lookup.has(new_key) || will_move.has(new_key)) {
+            insert(new_block);
+        }
+        else if (did_move.has(old_key)) {
+            o--;
+        }
+        else if (deltas.get(new_key) > deltas.get(old_key)) {
+            did_move.add(new_key);
+            insert(new_block);
+        }
+        else {
+            will_move.add(old_key);
+            o--;
+        }
+    }
+    while (o--) {
+        const old_block = old_blocks[o];
+        if (!new_lookup.has(old_block.key))
+            destroy(old_block, lookup);
+    }
+    while (n)
+        insert(new_blocks[n - 1]);
+    return new_blocks;
+}
+function measure(blocks) {
+    const rects = {};
+    let i = blocks.length;
+    while (i--)
+        rects[blocks[i].key] = blocks[i].node.getBoundingClientRect();
+    return rects;
+}
+
+function get_spread_update(levels, updates) {
+    const update = {};
+    const to_null_out = {};
+    const accounted_for = { $$scope: 1 };
+    let i = levels.length;
+    while (i--) {
+        const o = levels[i];
+        const n = updates[i];
+        if (n) {
+            for (const key in o) {
+                if (!(key in n))
+                    to_null_out[key] = 1;
+            }
+            for (const key in n) {
+                if (!accounted_for[key]) {
+                    update[key] = n[key];
+                    accounted_for[key] = 1;
+                }
+            }
+            levels[i] = n;
+        }
+        else {
+            for (const key in o) {
+                accounted_for[key] = 1;
+            }
+        }
+    }
+    for (const key in to_null_out) {
+        if (!(key in update))
+            update[key] = undefined;
+    }
+    return update;
+}
+
+const invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
+// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
+// https://infra.spec.whatwg.org/#noncharacter
+function spread(args) {
+    const attributes = Object.assign({}, ...args);
+    let str = '';
+    Object.keys(attributes).forEach(name => {
+        if (invalid_attribute_name_character.test(name))
+            return;
+        const value = attributes[name];
+        if (value === undefined)
+            return;
+        if (value === true)
+            str += " " + name;
+        const escaped = String(value)
+            .replace(/"/g, '&#34;')
+            .replace(/'/g, '&#39;');
+        str += " " + name + "=" + JSON.stringify(escaped);
+    });
+    return str;
+}
+const escaped = {
+    '"': '&quot;',
+    "'": '&#39;',
+    '&': '&amp;',
+    '<': '&lt;',
+    '>': '&gt;'
+};
+function escape(html) {
+    return String(html).replace(/["'&<>]/g, match => escaped[match]);
+}
+function each(items, fn) {
+    let str = '';
+    for (let i = 0; i < items.length; i += 1) {
+        str += fn(items[i], i);
+    }
+    return str;
+}
+const missing_component = {
+    $$render: () => ''
+};
+function validate_component(component, name) {
+    if (!component || !component.$$render) {
+        if (name === 'svelte:component')
+            name += ' this={...}';
+        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
+    }
+    return component;
+}
+function debug(file, line, column, values) {
+    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console
+    console.log(values); // eslint-disable-line no-console
+    return '';
+}
+let on_destroy;
+function create_ssr_component(fn) {
+    function $$render(result, props, bindings, slots) {
+        const parent_component = exports.current_component;
+        const $$ = {
+            on_destroy,
+            context: new Map(parent_component ? parent_component.$$.context : []),
+            // these will be immediately discarded
+            on_mount: [],
+            before_render: [],
+            after_render: [],
+            callbacks: blank_object()
+        };
+        set_current_component({ $$ });
+        const html = fn(result, props, bindings, slots);
+        set_current_component(parent_component);
+        return html;
+    }
+    return {
+        render: (props = {}, options = {}) => {
+            on_destroy = [];
+            const result = { head: '', css: new Set() };
+            const html = $$render(result, props, {}, options);
+            run_all(on_destroy);
+            return {
+                html,
+                css: {
+                    code: Array.from(result.css).map(css => css.code).join('\n'),
+                    map: null // TODO
+                },
+                head: result.head
+            };
+        },
+        $$render
+    };
+}
+function get_store_value(store) {
+    let value;
+    store.subscribe(_ => value = _)();
+    return value;
+}
+
+function bind(component, name, callback) {
+    if (component.$$.props.indexOf(name) === -1)
+        return;
+    component.$$.bound[name] = callback;
+    callback(component.$$.ctx[name]);
+}
+function mount_component(component, target, anchor) {
+    const { fragment, on_mount, on_destroy, after_render } = component.$$;
+    fragment.m(target, anchor);
+    // onMount happens after the initial afterUpdate. Because
+    // afterUpdate callbacks happen in reverse order (inner first)
+    // we schedule onMount callbacks before afterUpdate callbacks
+    add_render_callback(() => {
+        const new_on_destroy = on_mount.map(run).filter(is_function);
+        if (on_destroy) {
+            on_destroy.push(...new_on_destroy);
+        }
+        else {
+            // Edge case - component was destroyed immediately,
+            // most likely as a result of a binding initialising
+            run_all(new_on_destroy);
+        }
+        component.$$.on_mount = [];
+    });
+    after_render.forEach(add_render_callback);
+}
+function destroy(component, detaching) {
+    if (component.$$) {
+        run_all(component.$$.on_destroy);
+        component.$$.fragment.d(detaching);
+        // TODO null out other refs, including component.$$ (but need to
+        // preserve final state?)
+        component.$$.on_destroy = component.$$.fragment = null;
+        component.$$.ctx = {};
+    }
+}
+function make_dirty(component, key) {
+    if (!component.$$.dirty) {
+        dirty_components.push(component);
+        schedule_update();
+        component.$$.dirty = blank_object();
+    }
+    component.$$.dirty[key] = true;
+}
+function init(component, options, instance, create_fragment, not_equal$$1, prop_names) {
+    const parent_component = exports.current_component;
+    set_current_component(component);
+    const props = options.props || {};
+    const $$ = component.$$ = {
+        fragment: null,
+        ctx: null,
+        // state
+        props: prop_names,
+        update: noop,
+        not_equal: not_equal$$1,
+        bound: blank_object(),
+        // lifecycle
+        on_mount: [],
+        on_destroy: [],
+        before_render: [],
+        after_render: [],
+        context: new Map(parent_component ? parent_component.$$.context : []),
+        // everything else
+        callbacks: blank_object(),
+        dirty: null
+    };
+    let ready = false;
+    $$.ctx = instance
+        ? instance(component, props, (key, value) => {
+            if ($$.ctx && not_equal$$1($$.ctx[key], $$.ctx[key] = value)) {
+                if ($$.bound[key])
+                    $$.bound[key](value);
+                if (ready)
+                    make_dirty(component, key);
+            }
+        })
+        : props;
+    $$.update();
+    ready = true;
+    run_all($$.before_render);
+    $$.fragment = create_fragment($$.ctx);
+    if (options.target) {
+        if (options.hydrate) {
+            $$.fragment.l(children(options.target));
+        }
+        else {
+            $$.fragment.c();
+        }
+        if (options.intro && component.$$.fragment.i)
+            component.$$.fragment.i();
+        mount_component(component, options.target, options.anchor);
+        flush();
+    }
+    set_current_component(parent_component);
+}
+if (typeof HTMLElement !== 'undefined') {
+    exports.SvelteElement = class extends HTMLElement {
+        constructor() {
+            super();
+            this.attachShadow({ mode: 'open' });
+        }
+        connectedCallback() {
+            // @ts-ignore todo: improve typings
+            for (const key in this.$$.slotted) {
+                // @ts-ignore todo: improve typings
+                this.appendChild(this.$$.slotted[key]);
+            }
+        }
+        attributeChangedCallback(attr$$1, oldValue, newValue) {
+            this[attr$$1] = newValue;
+        }
+        $destroy() {
+            destroy(this, true);
+            this.$destroy = noop;
+        }
+        $on(type, callback) {
+            // TODO should this delegate to addEventListener?
+            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
+            callbacks.push(callback);
+            return () => {
+                const index = callbacks.indexOf(callback);
+                if (index !== -1)
+                    callbacks.splice(index, 1);
+            };
+        }
+        $set() {
+            // overridden by instance, if it has props
+        }
+    };
+}
+class SvelteComponent {
+    $destroy() {
+        destroy(this, true);
+        this.$destroy = noop;
+    }
+    $on(type, callback) {
+        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
+        callbacks.push(callback);
+        return () => {
+            const index = callbacks.indexOf(callback);
+            if (index !== -1)
+                callbacks.splice(index, 1);
+        };
+    }
+    $set() {
+        // overridden by instance, if it has props
+    }
+}
+class SvelteComponentDev extends SvelteComponent {
+    constructor(options) {
+        if (!options || (!options.target && !options.$$inline)) {
+            throw new Error(`'target' is a required option`);
+        }
+        super();
+    }
+    $destroy() {
+        super.$destroy();
+        this.$destroy = () => {
+            console.warn(`Component was already destroyed`); // eslint-disable-line no-console
+        };
+    }
+}
+
+exports.create_animation = create_animation;
+exports.fix_position = fix_position;
+exports.handle_promise = handle_promise;
+exports.append = append;
+exports.insert = insert;
+exports.detach = detach;
+exports.detach_between = detach_between;
+exports.detach_before = detach_before;
+exports.detach_after = detach_after;
+exports.destroy_each = destroy_each;
+exports.element = element;
+exports.object_without_properties = object_without_properties;
+exports.svg_element = svg_element;
+exports.text = text;
+exports.space = space;
+exports.empty = empty;
+exports.listen = listen;
+exports.prevent_default = prevent_default;
+exports.stop_propagation = stop_propagation;
+exports.attr = attr;
+exports.set_attributes = set_attributes;
+exports.set_custom_element_data = set_custom_element_data;
+exports.xlink_attr = xlink_attr;
+exports.get_binding_group_value = get_binding_group_value;
+exports.to_number = to_number;
+exports.time_ranges_to_array = time_ranges_to_array;
+exports.children = children;
+exports.claim_element = claim_element;
+exports.claim_text = claim_text;
+exports.set_data = set_data;
+exports.set_input_type = set_input_type;
+exports.set_style = set_style;
+exports.select_option = select_option;
+exports.select_options = select_options;
+exports.select_value = select_value;
+exports.select_multiple_value = select_multiple_value;
+exports.add_resize_listener = add_resize_listener;
+exports.toggle_class = toggle_class;
+exports.custom_event = custom_event;
+exports.destroy_block = destroy_block;
+exports.outro_and_destroy_block = outro_and_destroy_block;
+exports.fix_and_outro_and_destroy_block = fix_and_outro_and_destroy_block;
+exports.update_keyed_each = update_keyed_each;
+exports.measure = measure;
+exports.set_current_component = set_current_component;
+exports.beforeUpdate = beforeUpdate;
+exports.onMount = onMount;
+exports.afterUpdate = afterUpdate;
+exports.onDestroy = onDestroy;
+exports.createEventDispatcher = createEventDispatcher;
+exports.setContext = setContext;
+exports.getContext = getContext;
+exports.bubble = bubble;
+exports.clear_loops = clear_loops;
+exports.loop = loop;
+exports.dirty_components = dirty_components;
+exports.intros = intros;
+exports.schedule_update = schedule_update;
+exports.tick = tick;
+exports.add_binding_callback = add_binding_callback;
+exports.add_render_callback = add_render_callback;
+exports.add_flush_callback = add_flush_callback;
+exports.flush = flush;
+exports.get_spread_update = get_spread_update;
+exports.invalid_attribute_name_character = invalid_attribute_name_character;
+exports.spread = spread;
+exports.escaped = escaped;
+exports.escape = escape;
+exports.each = each;
+exports.missing_component = missing_component;
+exports.validate_component = validate_component;
+exports.debug = debug;
+exports.create_ssr_component = create_ssr_component;
+exports.get_store_value = get_store_value;
+exports.group_outros = group_outros;
+exports.check_outros = check_outros;
+exports.on_outro = on_outro;
+exports.create_in_transition = create_in_transition;
+exports.create_out_transition = create_out_transition;
+exports.create_bidirectional_transition = create_bidirectional_transition;
+exports.noop = noop;
+exports.identity = identity;
+exports.assign = assign;
+exports.is_promise = is_promise;
+exports.add_location = add_location;
+exports.run = run;
+exports.blank_object = blank_object;
+exports.run_all = run_all;
+exports.is_function = is_function;
+exports.safe_not_equal = safe_not_equal;
+exports.not_equal = not_equal;
+exports.validate_store = validate_store;
+exports.subscribe = subscribe;
+exports.create_slot = create_slot;
+exports.get_slot_context = get_slot_context;
+exports.get_slot_changes = get_slot_changes;
+exports.exclude_internal_props = exclude_internal_props;
+exports.set_now = set_now;
+exports.set_raf = set_raf;
+exports.bind = bind;
+exports.mount_component = mount_component;
+exports.init = init;
+exports.SvelteComponent = SvelteComponent;
+exports.SvelteComponentDev = SvelteComponentDev;
diff --git a/node_modules/svelte/internal.mjs b/node_modules/svelte/internal.mjs
new file mode 100644
index 0000000..ffcab27
--- /dev/null
+++ b/node_modules/svelte/internal.mjs
@@ -0,0 +1,1269 @@
+function noop() { }
+const identity = x => x;
+function assign(tar, src) {
+    for (const k in src)
+        tar[k] = src[k];
+    return tar;
+}
+function is_promise(value) {
+    return value && typeof value.then === 'function';
+}
+function add_location(element, file, line, column, char) {
+    element.__svelte_meta = {
+        loc: { file, line, column, char }
+    };
+}
+function run(fn) {
+    return fn();
+}
+function blank_object() {
+    return Object.create(null);
+}
+function run_all(fns) {
+    fns.forEach(run);
+}
+function is_function(thing) {
+    return typeof thing === 'function';
+}
+function safe_not_equal(a, b) {
+    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
+}
+function not_equal(a, b) {
+    return a != a ? b == b : a !== b;
+}
+function validate_store(store, name) {
+    if (!store || typeof store.subscribe !== 'function') {
+        throw new Error(`'${name}' is not a store with a 'subscribe' method`);
+    }
+}
+function subscribe(component, store, callback) {
+    const unsub = store.subscribe(callback);
+    component.$$.on_destroy.push(unsub.unsubscribe
+        ? () => unsub.unsubscribe()
+        : unsub);
+}
+function create_slot(definition, ctx, fn) {
+    if (definition) {
+        const slot_ctx = get_slot_context(definition, ctx, fn);
+        return definition[0](slot_ctx);
+    }
+}
+function get_slot_context(definition, ctx, fn) {
+    return definition[1]
+        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))
+        : ctx.$$scope.ctx;
+}
+function get_slot_changes(definition, ctx, changed, fn) {
+    return definition[1]
+        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))
+        : ctx.$$scope.changed || {};
+}
+function exclude_internal_props(props) {
+    const result = {};
+    for (const k in props)
+        if (k[0] !== '$')
+            result[k] = props[k];
+    return result;
+}
+const is_client = typeof window !== 'undefined';
+let now = is_client
+    ? () => window.performance.now()
+    : () => Date.now();
+let raf = is_client ? requestAnimationFrame : noop;
+// used internally for testing
+function set_now(fn) {
+    now = fn;
+}
+function set_raf(fn) {
+    raf = fn;
+}
+
+const tasks = new Set();
+let running = false;
+function run_tasks() {
+    tasks.forEach(task => {
+        if (!task[0](now())) {
+            tasks.delete(task);
+            task[1]();
+        }
+    });
+    running = tasks.size > 0;
+    if (running)
+        raf(run_tasks);
+}
+function clear_loops() {
+    // for testing...
+    tasks.forEach(task => tasks.delete(task));
+    running = false;
+}
+function loop(fn) {
+    let task;
+    if (!running) {
+        running = true;
+        raf(run_tasks);
+    }
+    return {
+        promise: new Promise(fulfil => {
+            tasks.add(task = [fn, fulfil]);
+        }),
+        abort() {
+            tasks.delete(task);
+        }
+    };
+}
+
+function append(target, node) {
+    target.appendChild(node);
+}
+function insert(target, node, anchor) {
+    target.insertBefore(node, anchor || null);
+}
+function detach(node) {
+    if (node.parentNode) {
+        node.parentNode.removeChild(node);
+    }
+}
+function detach_between(before, after) {
+    while (before.nextSibling && before.nextSibling !== after) {
+        before.parentNode.removeChild(before.nextSibling);
+    }
+}
+function detach_before(after) {
+    while (after.previousSibling) {
+        after.parentNode.removeChild(after.previousSibling);
+    }
+}
+function detach_after(before) {
+    while (before.nextSibling) {
+        before.parentNode.removeChild(before.nextSibling);
+    }
+}
+function destroy_each(iterations, detaching) {
+    for (let i = 0; i < iterations.length; i += 1) {
+        if (iterations[i])
+            iterations[i].d(detaching);
+    }
+}
+function element(name) {
+    return document.createElement(name);
+}
+function object_without_properties(obj, exclude) {
+    const target = {};
+    for (const k in obj) {
+        if (Object.prototype.hasOwnProperty.call(obj, k)
+            // @ts-ignore
+            && exclude.indexOf(k) === -1) {
+            // @ts-ignore
+            target[k] = obj[k];
+        }
+    }
+    return target;
+}
+function svg_element(name) {
+    return document.createElementNS('http://www.w3.org/2000/svg', name);
+}
+function text(data) {
+    return document.createTextNode(data);
+}
+function space() {
+    return text(' ');
+}
+function empty() {
+    return text('');
+}
+function listen(node, event, handler, options) {
+    node.addEventListener(event, handler, options);
+    return () => node.removeEventListener(event, handler, options);
+}
+function prevent_default(fn) {
+    return function (event) {
+        event.preventDefault();
+        // @ts-ignore
+        return fn.call(this, event);
+    };
+}
+function stop_propagation(fn) {
+    return function (event) {
+        event.stopPropagation();
+        // @ts-ignore
+        return fn.call(this, event);
+    };
+}
+function attr(node, attribute, value) {
+    if (value == null)
+        node.removeAttribute(attribute);
+    else
+        node.setAttribute(attribute, value);
+}
+function set_attributes(node, attributes) {
+    for (const key in attributes) {
+        if (key === 'style') {
+            node.style.cssText = attributes[key];
+        }
+        else if (key in node) {
+            node[key] = attributes[key];
+        }
+        else {
+            attr(node, key, attributes[key]);
+        }
+    }
+}
+function set_custom_element_data(node, prop, value) {
+    if (prop in node) {
+        node[prop] = value;
+    }
+    else {
+        attr(node, prop, value);
+    }
+}
+function xlink_attr(node, attribute, value) {
+    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
+}
+function get_binding_group_value(group) {
+    const value = [];
+    for (let i = 0; i < group.length; i += 1) {
+        if (group[i].checked)
+            value.push(group[i].__value);
+    }
+    return value;
+}
+function to_number(value) {
+    return value === '' ? undefined : +value;
+}
+function time_ranges_to_array(ranges) {
+    const array = [];
+    for (let i = 0; i < ranges.length; i += 1) {
+        array.push({ start: ranges.start(i), end: ranges.end(i) });
+    }
+    return array;
+}
+function children(element) {
+    return Array.from(element.childNodes);
+}
+function claim_element(nodes, name, attributes, svg) {
+    for (let i = 0; i < nodes.length; i += 1) {
+        const node = nodes[i];
+        if (node.nodeName === name) {
+            for (let j = 0; j < node.attributes.length; j += 1) {
+                const attribute = node.attributes[j];
+                if (!attributes[attribute.name])
+                    node.removeAttribute(attribute.name);
+            }
+            return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes
+        }
+    }
+    return svg ? svg_element(name) : element(name);
+}
+function claim_text(nodes, data) {
+    for (let i = 0; i < nodes.length; i += 1) {
+        const node = nodes[i];
+        if (node.nodeType === 3) {
+            node.data = data;
+            return nodes.splice(i, 1)[0];
+        }
+    }
+    return text(data);
+}
+function set_data(text, data) {
+    data = '' + data;
+    if (text.data !== data)
+        text.data = data;
+}
+function set_input_type(input, type) {
+    try {
+        input.type = type;
+    }
+    catch (e) {
+        // do nothing
+    }
+}
+function set_style(node, key, value) {
+    node.style.setProperty(key, value);
+}
+function select_option(select, value) {
+    for (let i = 0; i < select.options.length; i += 1) {
+        const option = select.options[i];
+        if (option.__value === value) {
+            option.selected = true;
+            return;
+        }
+    }
+}
+function select_options(select, value) {
+    for (let i = 0; i < select.options.length; i += 1) {
+        const option = select.options[i];
+        option.selected = ~value.indexOf(option.__value);
+    }
+}
+function select_value(select) {
+    const selected_option = select.querySelector(':checked') || select.options[0];
+    return selected_option && selected_option.__value;
+}
+function select_multiple_value(select) {
+    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);
+}
+function add_resize_listener(element, fn) {
+    if (getComputedStyle(element).position === 'static') {
+        element.style.position = 'relative';
+    }
+    const object = document.createElement('object');
+    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');
+    object.type = 'text/html';
+    let win;
+    object.onload = () => {
+        win = object.contentDocument.defaultView;
+        win.addEventListener('resize', fn);
+    };
+    if (/Trident/.test(navigator.userAgent)) {
+        element.appendChild(object);
+        object.data = 'about:blank';
+    }
+    else {
+        object.data = 'about:blank';
+        element.appendChild(object);
+    }
+    return {
+        cancel: () => {
+            win && win.removeEventListener && win.removeEventListener('resize', fn);
+            element.removeChild(object);
+        }
+    };
+}
+function toggle_class(element, name, toggle) {
+    element.classList[toggle ? 'add' : 'remove'](name);
+}
+function custom_event(type, detail) {
+    const e = document.createEvent('CustomEvent');
+    e.initCustomEvent(type, false, false, detail);
+    return e;
+}
+
+let stylesheet;
+let active = 0;
+let current_rules = {};
+// https://github.com/darkskyapp/string-hash/blob/master/index.js
+function hash(str) {
+    let hash = 5381;
+    let i = str.length;
+    while (i--)
+        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
+    return hash >>> 0;
+}
+function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
+    const step = 16.666 / duration;
+    let keyframes = '{\n';
+    for (let p = 0; p <= 1; p += step) {
+        const t = a + (b - a) * ease(p);
+        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
+    }
+    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
+    const name = `__svelte_${hash(rule)}_${uid}`;
+    if (!current_rules[name]) {
+        if (!stylesheet) {
+            const style = element('style');
+            document.head.appendChild(style);
+            stylesheet = style.sheet;
+        }
+        current_rules[name] = true;
+        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
+    }
+    const animation = node.style.animation || '';
+    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
+    active += 1;
+    return name;
+}
+function delete_rule(node, name) {
+    node.style.animation = (node.style.animation || '')
+        .split(', ')
+        .filter(name
+        ? anim => anim.indexOf(name) < 0 // remove specific animation
+        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
+    )
+        .join(', ');
+    if (name && !--active)
+        clear_rules();
+}
+function clear_rules() {
+    raf(() => {
+        if (active)
+            return;
+        let i = stylesheet.cssRules.length;
+        while (i--)
+            stylesheet.deleteRule(i);
+        current_rules = {};
+    });
+}
+
+function create_animation(node, from, fn, params) {
+    if (!from)
+        return noop;
+    const to = node.getBoundingClientRect();
+    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
+        return noop;
+    const { delay = 0, duration = 300, easing = identity, start: start_time = now() + delay, end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);
+    let running = true;
+    let started = false;
+    let name;
+    function start() {
+        if (css) {
+            name = create_rule(node, 0, 1, duration, delay, easing, css);
+        }
+        if (!delay) {
+            started = true;
+        }
+    }
+    function stop() {
+        if (css)
+            delete_rule(node, name);
+        running = false;
+    }
+    loop(now$$1 => {
+        if (!started && now$$1 >= start_time) {
+            started = true;
+        }
+        if (started && now$$1 >= end) {
+            tick(1, 0);
+            stop();
+        }
+        if (!running) {
+            return false;
+        }
+        if (started) {
+            const p = now$$1 - start_time;
+            const t = 0 + 1 * easing(p / duration);
+            tick(t, 1 - t);
+        }
+        return true;
+    });
+    start();
+    tick(0, 1);
+    return stop;
+}
+function fix_position(node) {
+    const style = getComputedStyle(node);
+    if (style.position !== 'absolute' && style.position !== 'fixed') {
+        const { width, height } = style;
+        const a = node.getBoundingClientRect();
+        node.style.position = 'absolute';
+        node.style.width = width;
+        node.style.height = height;
+        const b = node.getBoundingClientRect();
+        if (a.left !== b.left || a.top !== b.top) {
+            const style = getComputedStyle(node);
+            const transform = style.transform === 'none' ? '' : style.transform;
+            node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
+        }
+    }
+}
+
+let current_component;
+function set_current_component(component) {
+    current_component = component;
+}
+function get_current_component() {
+    if (!current_component)
+        throw new Error(`Function called outside component initialization`);
+    return current_component;
+}
+function beforeUpdate(fn) {
+    get_current_component().$$.before_render.push(fn);
+}
+function onMount(fn) {
+    get_current_component().$$.on_mount.push(fn);
+}
+function afterUpdate(fn) {
+    get_current_component().$$.after_render.push(fn);
+}
+function onDestroy(fn) {
+    get_current_component().$$.on_destroy.push(fn);
+}
+function createEventDispatcher() {
+    const component = current_component;
+    return (type, detail) => {
+        const callbacks = component.$$.callbacks[type];
+        if (callbacks) {
+            // TODO are there situations where events could be dispatched
+            // in a server (non-DOM) environment?
+            const event = custom_event(type, detail);
+            callbacks.slice().forEach(fn => {
+                fn.call(component, event);
+            });
+        }
+    };
+}
+function setContext(key, context) {
+    get_current_component().$$.context.set(key, context);
+}
+function getContext(key) {
+    return get_current_component().$$.context.get(key);
+}
+// TODO figure out if we still want to support
+// shorthand events, or if we want to implement
+// a real bubbling mechanism
+function bubble(component, event) {
+    const callbacks = component.$$.callbacks[event.type];
+    if (callbacks) {
+        callbacks.slice().forEach(fn => fn(event));
+    }
+}
+
+const dirty_components = [];
+const intros = { enabled: false };
+const resolved_promise = Promise.resolve();
+let update_scheduled = false;
+const binding_callbacks = [];
+const render_callbacks = [];
+const flush_callbacks = [];
+function schedule_update() {
+    if (!update_scheduled) {
+        update_scheduled = true;
+        resolved_promise.then(flush);
+    }
+}
+function tick() {
+    schedule_update();
+    return resolved_promise;
+}
+function add_binding_callback(fn) {
+    binding_callbacks.push(fn);
+}
+function add_render_callback(fn) {
+    render_callbacks.push(fn);
+}
+function add_flush_callback(fn) {
+    flush_callbacks.push(fn);
+}
+function flush() {
+    const seen_callbacks = new Set();
+    do {
+        // first, call beforeUpdate functions
+        // and update components
+        while (dirty_components.length) {
+            const component = dirty_components.shift();
+            set_current_component(component);
+            update(component.$$);
+        }
+        while (binding_callbacks.length)
+            binding_callbacks.shift()();
+        // then, once components are updated, call
+        // afterUpdate functions. This may cause
+        // subsequent updates...
+        while (render_callbacks.length) {
+            const callback = render_callbacks.pop();
+            if (!seen_callbacks.has(callback)) {
+                callback();
+                // ...so guard against infinite loops
+                seen_callbacks.add(callback);
+            }
+        }
+    } while (dirty_components.length);
+    while (flush_callbacks.length) {
+        flush_callbacks.pop()();
+    }
+    update_scheduled = false;
+}
+function update($$) {
+    if ($$.fragment) {
+        $$.update($$.dirty);
+        run_all($$.before_render);
+        $$.fragment.p($$.dirty, $$.ctx);
+        $$.dirty = null;
+        $$.after_render.forEach(add_render_callback);
+    }
+}
+
+let promise;
+function wait() {
+    if (!promise) {
+        promise = Promise.resolve();
+        promise.then(() => {
+            promise = null;
+        });
+    }
+    return promise;
+}
+function dispatch(node, direction, kind) {
+    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
+}
+let outros;
+function group_outros() {
+    outros = {
+        remaining: 0,
+        callbacks: []
+    };
+}
+function check_outros() {
+    if (!outros.remaining) {
+        run_all(outros.callbacks);
+    }
+}
+function on_outro(callback) {
+    outros.callbacks.push(callback);
+}
+function create_in_transition(node, fn, params) {
+    let config = fn(node, params);
+    let running = false;
+    let animation_name;
+    let task;
+    let uid = 0;
+    function cleanup() {
+        if (animation_name)
+            delete_rule(node, animation_name);
+    }
+    function go() {
+        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;
+        if (css)
+            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
+        tick$$1(0, 1);
+        const start_time = now() + delay;
+        const end_time = start_time + duration;
+        if (task)
+            task.abort();
+        running = true;
+        task = loop(now$$1 => {
+            if (running) {
+                if (now$$1 >= end_time) {
+                    tick$$1(1, 0);
+                    cleanup();
+                    return running = false;
+                }
+                if (now$$1 >= start_time) {
+                    const t = easing((now$$1 - start_time) / duration);
+                    tick$$1(t, 1 - t);
+                }
+            }
+            return running;
+        });
+    }
+    let started = false;
+    return {
+        start() {
+            if (started)
+                return;
+            delete_rule(node);
+            if (typeof config === 'function') {
+                config = config();
+                wait().then(go);
+            }
+            else {
+                go();
+            }
+        },
+        invalidate() {
+            started = false;
+        },
+        end() {
+            if (running) {
+                cleanup();
+                running = false;
+            }
+        }
+    };
+}
+function create_out_transition(node, fn, params) {
+    let config = fn(node, params);
+    let running = true;
+    let animation_name;
+    const group = outros;
+    group.remaining += 1;
+    function go() {
+        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;
+        if (css)
+            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
+        const start_time = now() + delay;
+        const end_time = start_time + duration;
+        loop(now$$1 => {
+            if (running) {
+                if (now$$1 >= end_time) {
+                    tick$$1(0, 1);
+                    if (!--group.remaining) {
+                        // this will result in `end()` being called,
+                        // so we don't need to clean up here
+                        run_all(group.callbacks);
+                    }
+                    return false;
+                }
+                if (now$$1 >= start_time) {
+                    const t = easing((now$$1 - start_time) / duration);
+                    tick$$1(1 - t, t);
+                }
+            }
+            return running;
+        });
+    }
+    if (typeof config === 'function') {
+        wait().then(() => {
+            config = config();
+            go();
+        });
+    }
+    else {
+        go();
+    }
+    return {
+        end(reset) {
+            if (reset && config.tick) {
+                config.tick(1, 0);
+            }
+            if (running) {
+                if (animation_name)
+                    delete_rule(node, animation_name);
+                running = false;
+            }
+        }
+    };
+}
+function create_bidirectional_transition(node, fn, params, intro) {
+    let config = fn(node, params);
+    let t = intro ? 0 : 1;
+    let running_program = null;
+    let pending_program = null;
+    let animation_name = null;
+    function clear_animation() {
+        if (animation_name)
+            delete_rule(node, animation_name);
+    }
+    function init(program, duration) {
+        const d = program.b - t;
+        duration *= Math.abs(d);
+        return {
+            a: t,
+            b: program.b,
+            d,
+            duration,
+            start: program.start,
+            end: program.start + duration,
+            group: program.group
+        };
+    }
+    function go(b) {
+        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;
+        const program = {
+            start: now() + delay,
+            b
+        };
+        if (!b) {
+            // @ts-ignore todo: improve typings
+            program.group = outros;
+            outros.remaining += 1;
+        }
+        if (running_program) {
+            pending_program = program;
+        }
+        else {
+            // if this is an intro, and there's a delay, we need to do
+            // an initial tick and/or apply CSS animation immediately
+            if (css) {
+                clear_animation();
+                animation_name = create_rule(node, t, b, duration, delay, easing, css);
+            }
+            if (b)
+                tick$$1(0, 1);
+            running_program = init(program, duration);
+            add_render_callback(() => dispatch(node, b, 'start'));
+            loop(now$$1 => {
+                if (pending_program && now$$1 > pending_program.start) {
+                    running_program = init(pending_program, duration);
+                    pending_program = null;
+                    dispatch(node, running_program.b, 'start');
+                    if (css) {
+                        clear_animation();
+                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
+                    }
+                }
+                if (running_program) {
+                    if (now$$1 >= running_program.end) {
+                        tick$$1(t = running_program.b, 1 - t);
+                        dispatch(node, running_program.b, 'end');
+                        if (!pending_program) {
+                            // we're done
+                            if (running_program.b) {
+                                // intro — we can tidy up immediately
+                                clear_animation();
+                            }
+                            else {
+                                // outro — needs to be coordinated
+                                if (!--running_program.group.remaining)
+                                    run_all(running_program.group.callbacks);
+                            }
+                        }
+                        running_program = null;
+                    }
+                    else if (now$$1 >= running_program.start) {
+                        const p = now$$1 - running_program.start;
+                        t = running_program.a + running_program.d * easing(p / running_program.duration);
+                        tick$$1(t, 1 - t);
+                    }
+                }
+                return !!(running_program || pending_program);
+            });
+        }
+    }
+    return {
+        run(b) {
+            if (typeof config === 'function') {
+                wait().then(() => {
+                    config = config();
+                    go(b);
+                });
+            }
+            else {
+                go(b);
+            }
+        },
+        end() {
+            clear_animation();
+            running_program = pending_program = null;
+        }
+    };
+}
+
+function handle_promise(promise, info) {
+    const token = info.token = {};
+    function update(type, index, key, value) {
+        if (info.token !== token)
+            return;
+        info.resolved = key && { [key]: value };
+        const child_ctx = assign(assign({}, info.ctx), info.resolved);
+        const block = type && (info.current = type)(child_ctx);
+        if (info.block) {
+            if (info.blocks) {
+                info.blocks.forEach((block, i) => {
+                    if (i !== index && block) {
+                        group_outros();
+                        on_outro(() => {
+                            block.d(1);
+                            info.blocks[i] = null;
+                        });
+                        block.o(1);
+                        check_outros();
+                    }
+                });
+            }
+            else {
+                info.block.d(1);
+            }
+            block.c();
+            if (block.i)
+                block.i(1);
+            block.m(info.mount(), info.anchor);
+            flush();
+        }
+        info.block = block;
+        if (info.blocks)
+            info.blocks[index] = block;
+    }
+    if (is_promise(promise)) {
+        promise.then(value => {
+            update(info.then, 1, info.value, value);
+        }, error => {
+            update(info.catch, 2, info.error, error);
+        });
+        // if we previously had a then/catch block, destroy it
+        if (info.current !== info.pending) {
+            update(info.pending, 0);
+            return true;
+        }
+    }
+    else {
+        if (info.current !== info.then) {
+            update(info.then, 1, info.value, promise);
+            return true;
+        }
+        info.resolved = { [info.value]: promise };
+    }
+}
+
+function destroy_block(block, lookup) {
+    block.d(1);
+    lookup.delete(block.key);
+}
+function outro_and_destroy_block(block, lookup) {
+    on_outro(() => {
+        destroy_block(block, lookup);
+    });
+    block.o(1);
+}
+function fix_and_outro_and_destroy_block(block, lookup) {
+    block.f();
+    outro_and_destroy_block(block, lookup);
+}
+function update_keyed_each(old_blocks, changed, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
+    let o = old_blocks.length;
+    let n = list.length;
+    let i = o;
+    const old_indexes = {};
+    while (i--)
+        old_indexes[old_blocks[i].key] = i;
+    const new_blocks = [];
+    const new_lookup = new Map();
+    const deltas = new Map();
+    i = n;
+    while (i--) {
+        const child_ctx = get_context(ctx, list, i);
+        const key = get_key(child_ctx);
+        let block = lookup.get(key);
+        if (!block) {
+            block = create_each_block(key, child_ctx);
+            block.c();
+        }
+        else if (dynamic) {
+            block.p(changed, child_ctx);
+        }
+        new_lookup.set(key, new_blocks[i] = block);
+        if (key in old_indexes)
+            deltas.set(key, Math.abs(i - old_indexes[key]));
+    }
+    const will_move = new Set();
+    const did_move = new Set();
+    function insert(block) {
+        if (block.i)
+            block.i(1);
+        block.m(node, next);
+        lookup.set(block.key, block);
+        next = block.first;
+        n--;
+    }
+    while (o && n) {
+        const new_block = new_blocks[n - 1];
+        const old_block = old_blocks[o - 1];
+        const new_key = new_block.key;
+        const old_key = old_block.key;
+        if (new_block === old_block) {
+            // do nothing
+            next = new_block.first;
+            o--;
+            n--;
+        }
+        else if (!new_lookup.has(old_key)) {
+            // remove old block
+            destroy(old_block, lookup);
+            o--;
+        }
+        else if (!lookup.has(new_key) || will_move.has(new_key)) {
+            insert(new_block);
+        }
+        else if (did_move.has(old_key)) {
+            o--;
+        }
+        else if (deltas.get(new_key) > deltas.get(old_key)) {
+            did_move.add(new_key);
+            insert(new_block);
+        }
+        else {
+            will_move.add(old_key);
+            o--;
+        }
+    }
+    while (o--) {
+        const old_block = old_blocks[o];
+        if (!new_lookup.has(old_block.key))
+            destroy(old_block, lookup);
+    }
+    while (n)
+        insert(new_blocks[n - 1]);
+    return new_blocks;
+}
+function measure(blocks) {
+    const rects = {};
+    let i = blocks.length;
+    while (i--)
+        rects[blocks[i].key] = blocks[i].node.getBoundingClientRect();
+    return rects;
+}
+
+function get_spread_update(levels, updates) {
+    const update = {};
+    const to_null_out = {};
+    const accounted_for = { $$scope: 1 };
+    let i = levels.length;
+    while (i--) {
+        const o = levels[i];
+        const n = updates[i];
+        if (n) {
+            for (const key in o) {
+                if (!(key in n))
+                    to_null_out[key] = 1;
+            }
+            for (const key in n) {
+                if (!accounted_for[key]) {
+                    update[key] = n[key];
+                    accounted_for[key] = 1;
+                }
+            }
+            levels[i] = n;
+        }
+        else {
+            for (const key in o) {
+                accounted_for[key] = 1;
+            }
+        }
+    }
+    for (const key in to_null_out) {
+        if (!(key in update))
+            update[key] = undefined;
+    }
+    return update;
+}
+
+const invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
+// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
+// https://infra.spec.whatwg.org/#noncharacter
+function spread(args) {
+    const attributes = Object.assign({}, ...args);
+    let str = '';
+    Object.keys(attributes).forEach(name => {
+        if (invalid_attribute_name_character.test(name))
+            return;
+        const value = attributes[name];
+        if (value === undefined)
+            return;
+        if (value === true)
+            str += " " + name;
+        const escaped = String(value)
+            .replace(/"/g, '&#34;')
+            .replace(/'/g, '&#39;');
+        str += " " + name + "=" + JSON.stringify(escaped);
+    });
+    return str;
+}
+const escaped = {
+    '"': '&quot;',
+    "'": '&#39;',
+    '&': '&amp;',
+    '<': '&lt;',
+    '>': '&gt;'
+};
+function escape(html) {
+    return String(html).replace(/["'&<>]/g, match => escaped[match]);
+}
+function each(items, fn) {
+    let str = '';
+    for (let i = 0; i < items.length; i += 1) {
+        str += fn(items[i], i);
+    }
+    return str;
+}
+const missing_component = {
+    $$render: () => ''
+};
+function validate_component(component, name) {
+    if (!component || !component.$$render) {
+        if (name === 'svelte:component')
+            name += ' this={...}';
+        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
+    }
+    return component;
+}
+function debug(file, line, column, values) {
+    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console
+    console.log(values); // eslint-disable-line no-console
+    return '';
+}
+let on_destroy;
+function create_ssr_component(fn) {
+    function $$render(result, props, bindings, slots) {
+        const parent_component = current_component;
+        const $$ = {
+            on_destroy,
+            context: new Map(parent_component ? parent_component.$$.context : []),
+            // these will be immediately discarded
+            on_mount: [],
+            before_render: [],
+            after_render: [],
+            callbacks: blank_object()
+        };
+        set_current_component({ $$ });
+        const html = fn(result, props, bindings, slots);
+        set_current_component(parent_component);
+        return html;
+    }
+    return {
+        render: (props = {}, options = {}) => {
+            on_destroy = [];
+            const result = { head: '', css: new Set() };
+            const html = $$render(result, props, {}, options);
+            run_all(on_destroy);
+            return {
+                html,
+                css: {
+                    code: Array.from(result.css).map(css => css.code).join('\n'),
+                    map: null // TODO
+                },
+                head: result.head
+            };
+        },
+        $$render
+    };
+}
+function get_store_value(store) {
+    let value;
+    store.subscribe(_ => value = _)();
+    return value;
+}
+
+function bind(component, name, callback) {
+    if (component.$$.props.indexOf(name) === -1)
+        return;
+    component.$$.bound[name] = callback;
+    callback(component.$$.ctx[name]);
+}
+function mount_component(component, target, anchor) {
+    const { fragment, on_mount, on_destroy, after_render } = component.$$;
+    fragment.m(target, anchor);
+    // onMount happens after the initial afterUpdate. Because
+    // afterUpdate callbacks happen in reverse order (inner first)
+    // we schedule onMount callbacks before afterUpdate callbacks
+    add_render_callback(() => {
+        const new_on_destroy = on_mount.map(run).filter(is_function);
+        if (on_destroy) {
+            on_destroy.push(...new_on_destroy);
+        }
+        else {
+            // Edge case - component was destroyed immediately,
+            // most likely as a result of a binding initialising
+            run_all(new_on_destroy);
+        }
+        component.$$.on_mount = [];
+    });
+    after_render.forEach(add_render_callback);
+}
+function destroy(component, detaching) {
+    if (component.$$) {
+        run_all(component.$$.on_destroy);
+        component.$$.fragment.d(detaching);
+        // TODO null out other refs, including component.$$ (but need to
+        // preserve final state?)
+        component.$$.on_destroy = component.$$.fragment = null;
+        component.$$.ctx = {};
+    }
+}
+function make_dirty(component, key) {
+    if (!component.$$.dirty) {
+        dirty_components.push(component);
+        schedule_update();
+        component.$$.dirty = blank_object();
+    }
+    component.$$.dirty[key] = true;
+}
+function init(component, options, instance, create_fragment, not_equal$$1, prop_names) {
+    const parent_component = current_component;
+    set_current_component(component);
+    const props = options.props || {};
+    const $$ = component.$$ = {
+        fragment: null,
+        ctx: null,
+        // state
+        props: prop_names,
+        update: noop,
+        not_equal: not_equal$$1,
+        bound: blank_object(),
+        // lifecycle
+        on_mount: [],
+        on_destroy: [],
+        before_render: [],
+        after_render: [],
+        context: new Map(parent_component ? parent_component.$$.context : []),
+        // everything else
+        callbacks: blank_object(),
+        dirty: null
+    };
+    let ready = false;
+    $$.ctx = instance
+        ? instance(component, props, (key, value) => {
+            if ($$.ctx && not_equal$$1($$.ctx[key], $$.ctx[key] = value)) {
+                if ($$.bound[key])
+                    $$.bound[key](value);
+                if (ready)
+                    make_dirty(component, key);
+            }
+        })
+        : props;
+    $$.update();
+    ready = true;
+    run_all($$.before_render);
+    $$.fragment = create_fragment($$.ctx);
+    if (options.target) {
+        if (options.hydrate) {
+            $$.fragment.l(children(options.target));
+        }
+        else {
+            $$.fragment.c();
+        }
+        if (options.intro && component.$$.fragment.i)
+            component.$$.fragment.i();
+        mount_component(component, options.target, options.anchor);
+        flush();
+    }
+    set_current_component(parent_component);
+}
+let SvelteElement;
+if (typeof HTMLElement !== 'undefined') {
+    SvelteElement = class extends HTMLElement {
+        constructor() {
+            super();
+            this.attachShadow({ mode: 'open' });
+        }
+        connectedCallback() {
+            // @ts-ignore todo: improve typings
+            for (const key in this.$$.slotted) {
+                // @ts-ignore todo: improve typings
+                this.appendChild(this.$$.slotted[key]);
+            }
+        }
+        attributeChangedCallback(attr$$1, oldValue, newValue) {
+            this[attr$$1] = newValue;
+        }
+        $destroy() {
+            destroy(this, true);
+            this.$destroy = noop;
+        }
+        $on(type, callback) {
+            // TODO should this delegate to addEventListener?
+            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
+            callbacks.push(callback);
+            return () => {
+                const index = callbacks.indexOf(callback);
+                if (index !== -1)
+                    callbacks.splice(index, 1);
+            };
+        }
+        $set() {
+            // overridden by instance, if it has props
+        }
+    };
+}
+class SvelteComponent {
+    $destroy() {
+        destroy(this, true);
+        this.$destroy = noop;
+    }
+    $on(type, callback) {
+        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
+        callbacks.push(callback);
+        return () => {
+            const index = callbacks.indexOf(callback);
+            if (index !== -1)
+                callbacks.splice(index, 1);
+        };
+    }
+    $set() {
+        // overridden by instance, if it has props
+    }
+}
+class SvelteComponentDev extends SvelteComponent {
+    constructor(options) {
+        if (!options || (!options.target && !options.$$inline)) {
+            throw new Error(`'target' is a required option`);
+        }
+        super();
+    }
+    $destroy() {
+        super.$destroy();
+        this.$destroy = () => {
+            console.warn(`Component was already destroyed`); // eslint-disable-line no-console
+        };
+    }
+}
+
+export { create_animation, fix_position, handle_promise, append, insert, detach, detach_between, detach_before, detach_after, destroy_each, element, object_without_properties, svg_element, text, space, empty, listen, prevent_default, stop_propagation, attr, set_attributes, set_custom_element_data, xlink_attr, get_binding_group_value, to_number, time_ranges_to_array, children, claim_element, claim_text, set_data, set_input_type, set_style, select_option, select_options, select_value, select_multiple_value, add_resize_listener, toggle_class, custom_event, destroy_block, outro_and_destroy_block, fix_and_outro_and_destroy_block, update_keyed_each, measure, current_component, set_current_component, beforeUpdate, onMount, afterUpdate, onDestroy, createEventDispatcher, setContext, getContext, bubble, clear_loops, loop, dirty_components, intros, schedule_update, tick, add_binding_callback, add_render_callback, add_flush_callback, flush, get_spread_update, invalid_attribute_name_character, spread, escaped, escape, each, missing_component, validate_component, debug, create_ssr_component, get_store_value, group_outros, check_outros, on_outro, create_in_transition, create_out_transition, create_bidirectional_transition, noop, identity, assign, is_promise, add_location, run, blank_object, run_all, is_function, safe_not_equal, not_equal, validate_store, subscribe, create_slot, get_slot_context, get_slot_changes, exclude_internal_props, now, raf, set_now, set_raf, bind, mount_component, init, SvelteElement, SvelteComponent, SvelteComponentDev };
diff --git a/node_modules/svelte/motion.d.ts b/node_modules/svelte/motion.d.ts
new file mode 100644
index 0000000..4cc764a
--- /dev/null
+++ b/node_modules/svelte/motion.d.ts
@@ -0,0 +1 @@
+export * from './types/motion';
diff --git a/node_modules/svelte/motion.js b/node_modules/svelte/motion.js
new file mode 100644
index 0000000..3584c68
--- /dev/null
+++ b/node_modules/svelte/motion.js
@@ -0,0 +1,195 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var store = require('./store');
+var internal = require('./internal');
+var easing = require('./easing');
+
+function is_date(obj) {
+    return Object.prototype.toString.call(obj) === '[object Date]';
+}
+
+function tick_spring(ctx, last_value, current_value, target_value) {
+    if (typeof current_value === 'number' || is_date(current_value)) {
+        const delta = target_value - current_value;
+        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
+        const spring = ctx.opts.stiffness * delta;
+        const damper = ctx.opts.damping * velocity;
+        const acceleration = (spring - damper) * ctx.inv_mass;
+        const d = (velocity + acceleration) * ctx.dt;
+        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
+            return target_value; // settled
+        }
+        else {
+            ctx.settled = false; // signal loop to keep ticking
+            return is_date(current_value) ?
+                new Date(current_value.getTime() + d) : current_value + d;
+        }
+    }
+    else if (Array.isArray(current_value)) {
+        return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
+    }
+    else if (typeof current_value === 'object') {
+        const next_value = {};
+        for (const k in current_value)
+            next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
+        return next_value;
+    }
+    else {
+        throw new Error(`Cannot spring ${typeof current_value} values`);
+    }
+}
+function spring(value, opts = {}) {
+    const store$$1 = store.writable(value);
+    const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
+    let last_time;
+    let task;
+    let current_token;
+    let last_value = value;
+    let target_value = value;
+    let inv_mass = 1;
+    let inv_mass_recovery_rate = 0;
+    let cancel_task = false;
+    function set(new_value, opts = {}) {
+        target_value = new_value;
+        const token = current_token = {};
+        if (opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {
+            cancel_task = true; // cancel any running animation
+            last_time = internal.now();
+            last_value = value;
+            store$$1.set(value = target_value);
+            return new Promise(f => f()); // fulfil immediately
+        }
+        else if (opts.soft) {
+            const rate = opts.soft === true ? .5 : +opts.soft;
+            inv_mass_recovery_rate = 1 / (rate * 60);
+            inv_mass = 0; // infinite mass, unaffected by spring forces
+        }
+        if (!task) {
+            last_time = internal.now();
+            cancel_task = false;
+            task = internal.loop(now => {
+                if (cancel_task) {
+                    cancel_task = false;
+                    task = null;
+                    return false;
+                }
+                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
+                const ctx = {
+                    inv_mass,
+                    opts: spring,
+                    settled: true,
+                    dt: (now - last_time) * 60 / 1000
+                };
+                const next_value = tick_spring(ctx, last_value, value, target_value);
+                last_time = now;
+                last_value = value;
+                store$$1.set(value = next_value);
+                if (ctx.settled)
+                    task = null;
+                return !ctx.settled;
+            });
+        }
+        return new Promise(fulfil => {
+            task.promise.then(() => {
+                if (token === current_token)
+                    fulfil();
+            });
+        });
+    }
+    const spring = {
+        set,
+        update: (fn, opts) => set(fn(target_value, value), opts),
+        subscribe: store$$1.subscribe,
+        stiffness,
+        damping,
+        precision
+    };
+    return spring;
+}
+
+function get_interpolator(a, b) {
+    if (a === b || a !== a)
+        return () => a;
+    const type = typeof a;
+    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
+        throw new Error('Cannot interpolate values of different type');
+    }
+    if (Array.isArray(a)) {
+        const arr = b.map((bi, i) => {
+            return get_interpolator(a[i], bi);
+        });
+        return t => arr.map(fn => fn(t));
+    }
+    if (type === 'object') {
+        if (!a || !b)
+            throw new Error('Object cannot be null');
+        if (is_date(a) && is_date(b)) {
+            a = a.getTime();
+            b = b.getTime();
+            const delta = b - a;
+            return t => new Date(a + t * delta);
+        }
+        const keys = Object.keys(b);
+        const interpolators = {};
+        keys.forEach(key => {
+            interpolators[key] = get_interpolator(a[key], b[key]);
+        });
+        return t => {
+            const result = {};
+            keys.forEach(key => {
+                result[key] = interpolators[key](t);
+            });
+            return result;
+        };
+    }
+    if (type === 'number') {
+        const delta = b - a;
+        return t => a + t * delta;
+    }
+    throw new Error(`Cannot interpolate ${type} values`);
+}
+function tweened(value, defaults = {}) {
+    const store$$1 = store.writable(value);
+    let task;
+    let target_value = value;
+    function set(new_value, opts) {
+        target_value = new_value;
+        let previous_task = task;
+        let started = false;
+        let { delay = 0, duration = 400, easing: easing$$1 = easing.linear, interpolate = get_interpolator } = internal.assign(internal.assign({}, defaults), opts);
+        const start = internal.now() + delay;
+        let fn;
+        task = internal.loop(now => {
+            if (now < start)
+                return true;
+            if (!started) {
+                fn = interpolate(value, new_value);
+                if (typeof duration === 'function')
+                    duration = duration(value, new_value);
+                started = true;
+            }
+            if (previous_task) {
+                previous_task.abort();
+                previous_task = null;
+            }
+            const elapsed = now - start;
+            if (elapsed > duration) {
+                store$$1.set(value = new_value);
+                return false;
+            }
+            store$$1.set(value = fn(easing$$1(elapsed / duration)));
+            return true;
+        });
+        return task.promise;
+    }
+    return {
+        set,
+        update: (fn, opts) => set(fn(target_value, value), opts),
+        subscribe: store$$1.subscribe
+    };
+}
+
+exports.spring = spring;
+exports.tweened = tweened;
diff --git a/node_modules/svelte/motion.mjs b/node_modules/svelte/motion.mjs
new file mode 100644
index 0000000..ecc1ae2
--- /dev/null
+++ b/node_modules/svelte/motion.mjs
@@ -0,0 +1,190 @@
+import { writable } from './store';
+import { now, loop, assign } from './internal';
+import { linear } from './easing';
+
+function is_date(obj) {
+    return Object.prototype.toString.call(obj) === '[object Date]';
+}
+
+function tick_spring(ctx, last_value, current_value, target_value) {
+    if (typeof current_value === 'number' || is_date(current_value)) {
+        const delta = target_value - current_value;
+        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
+        const spring = ctx.opts.stiffness * delta;
+        const damper = ctx.opts.damping * velocity;
+        const acceleration = (spring - damper) * ctx.inv_mass;
+        const d = (velocity + acceleration) * ctx.dt;
+        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
+            return target_value; // settled
+        }
+        else {
+            ctx.settled = false; // signal loop to keep ticking
+            return is_date(current_value) ?
+                new Date(current_value.getTime() + d) : current_value + d;
+        }
+    }
+    else if (Array.isArray(current_value)) {
+        return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
+    }
+    else if (typeof current_value === 'object') {
+        const next_value = {};
+        for (const k in current_value)
+            next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
+        return next_value;
+    }
+    else {
+        throw new Error(`Cannot spring ${typeof current_value} values`);
+    }
+}
+function spring(value, opts = {}) {
+    const store = writable(value);
+    const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
+    let last_time;
+    let task;
+    let current_token;
+    let last_value = value;
+    let target_value = value;
+    let inv_mass = 1;
+    let inv_mass_recovery_rate = 0;
+    let cancel_task = false;
+    function set(new_value, opts = {}) {
+        target_value = new_value;
+        const token = current_token = {};
+        if (opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {
+            cancel_task = true; // cancel any running animation
+            last_time = now();
+            last_value = value;
+            store.set(value = target_value);
+            return new Promise(f => f()); // fulfil immediately
+        }
+        else if (opts.soft) {
+            const rate = opts.soft === true ? .5 : +opts.soft;
+            inv_mass_recovery_rate = 1 / (rate * 60);
+            inv_mass = 0; // infinite mass, unaffected by spring forces
+        }
+        if (!task) {
+            last_time = now();
+            cancel_task = false;
+            task = loop(now$$1 => {
+                if (cancel_task) {
+                    cancel_task = false;
+                    task = null;
+                    return false;
+                }
+                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
+                const ctx = {
+                    inv_mass,
+                    opts: spring,
+                    settled: true,
+                    dt: (now$$1 - last_time) * 60 / 1000
+                };
+                const next_value = tick_spring(ctx, last_value, value, target_value);
+                last_time = now$$1;
+                last_value = value;
+                store.set(value = next_value);
+                if (ctx.settled)
+                    task = null;
+                return !ctx.settled;
+            });
+        }
+        return new Promise(fulfil => {
+            task.promise.then(() => {
+                if (token === current_token)
+                    fulfil();
+            });
+        });
+    }
+    const spring = {
+        set,
+        update: (fn, opts) => set(fn(target_value, value), opts),
+        subscribe: store.subscribe,
+        stiffness,
+        damping,
+        precision
+    };
+    return spring;
+}
+
+function get_interpolator(a, b) {
+    if (a === b || a !== a)
+        return () => a;
+    const type = typeof a;
+    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
+        throw new Error('Cannot interpolate values of different type');
+    }
+    if (Array.isArray(a)) {
+        const arr = b.map((bi, i) => {
+            return get_interpolator(a[i], bi);
+        });
+        return t => arr.map(fn => fn(t));
+    }
+    if (type === 'object') {
+        if (!a || !b)
+            throw new Error('Object cannot be null');
+        if (is_date(a) && is_date(b)) {
+            a = a.getTime();
+            b = b.getTime();
+            const delta = b - a;
+            return t => new Date(a + t * delta);
+        }
+        const keys = Object.keys(b);
+        const interpolators = {};
+        keys.forEach(key => {
+            interpolators[key] = get_interpolator(a[key], b[key]);
+        });
+        return t => {
+            const result = {};
+            keys.forEach(key => {
+                result[key] = interpolators[key](t);
+            });
+            return result;
+        };
+    }
+    if (type === 'number') {
+        const delta = b - a;
+        return t => a + t * delta;
+    }
+    throw new Error(`Cannot interpolate ${type} values`);
+}
+function tweened(value, defaults = {}) {
+    const store = writable(value);
+    let task;
+    let target_value = value;
+    function set(new_value, opts) {
+        target_value = new_value;
+        let previous_task = task;
+        let started = false;
+        let { delay = 0, duration = 400, easing = linear, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
+        const start = now() + delay;
+        let fn;
+        task = loop(now$$1 => {
+            if (now$$1 < start)
+                return true;
+            if (!started) {
+                fn = interpolate(value, new_value);
+                if (typeof duration === 'function')
+                    duration = duration(value, new_value);
+                started = true;
+            }
+            if (previous_task) {
+                previous_task.abort();
+                previous_task = null;
+            }
+            const elapsed = now$$1 - start;
+            if (elapsed > duration) {
+                store.set(value = new_value);
+                return false;
+            }
+            store.set(value = fn(easing(elapsed / duration)));
+            return true;
+        });
+        return task.promise;
+    }
+    return {
+        set,
+        update: (fn, opts) => set(fn(target_value, value), opts),
+        subscribe: store.subscribe
+    };
+}
+
+export { spring, tweened };
diff --git a/node_modules/svelte/register.js b/node_modules/svelte/register.js
new file mode 100644
index 0000000..f5cbeb5
--- /dev/null
+++ b/node_modules/svelte/register.js
@@ -0,0 +1,49 @@
+const fs = require('fs');
+const path = require('path');
+const { compile } = require('./compiler.js');
+
+const extensions = ['.svelte', '.html'];
+let compileOptions = {};
+
+function capitalise(name) {
+	return name[0].toUpperCase() + name.slice(1);
+}
+
+function register(options = {}) {
+	if (options.extensions) {
+		extensions.forEach(deregisterExtension);
+		options.extensions.forEach(registerExtension);
+	}
+
+	compileOptions = Object.assign({}, options);
+	delete compileOptions.extensions;
+}
+
+function deregisterExtension(extension) {
+	delete require.extensions[extension];
+}
+
+function registerExtension(extension) {
+	require.extensions[extension] = function(module, filename) {
+		const name = path.basename(filename)
+			.slice(0, -path.extname(filename).length)
+			.replace(/^\d/, '_$&')
+			.replace(/[^a-zA-Z0-9_$]/g, '');
+
+		const options = Object.assign({}, compileOptions, {
+			filename,
+			name: capitalise(name),
+			generate: 'ssr',
+			format: 'cjs'
+		});
+
+		const { js } = compile(fs.readFileSync(filename, 'utf-8'), options);
+
+		return module._compile(js.code, filename);
+	};
+}
+
+registerExtension('.svelte');
+registerExtension('.html');
+
+module.exports = register;
\ No newline at end of file
diff --git a/node_modules/svelte/shared.js b/node_modules/svelte/shared.js
deleted file mode 100644
index b7dcb94..0000000
--- a/node_modules/svelte/shared.js
+++ /dev/null
@@ -1,780 +0,0 @@
-function noop() {}
-
-function assign(tar, src) {
-	for (var k in src) tar[k] = src[k];
-	return tar;
-}
-
-function appendNode(node, target) {
-	target.appendChild(node);
-}
-
-function insertNode(node, target, anchor) {
-	target.insertBefore(node, anchor);
-}
-
-function detachNode(node) {
-	node.parentNode.removeChild(node);
-}
-
-function detachBetween(before, after) {
-	while (before.nextSibling && before.nextSibling !== after) {
-		before.parentNode.removeChild(before.nextSibling);
-	}
-}
-
-function detachBefore(after) {
-	while (after.previousSibling) {
-		after.parentNode.removeChild(after.previousSibling);
-	}
-}
-
-function detachAfter(before) {
-	while (before.nextSibling) {
-		before.parentNode.removeChild(before.nextSibling);
-	}
-}
-
-function reinsertBetween(before, after, target) {
-	while (before.nextSibling && before.nextSibling !== after) {
-		target.appendChild(before.parentNode.removeChild(before.nextSibling));
-	}
-}
-
-function reinsertChildren(parent, target) {
-	while (parent.firstChild) target.appendChild(parent.firstChild);
-}
-
-function reinsertAfter(before, target) {
-	while (before.nextSibling) target.appendChild(before.nextSibling);
-}
-
-function reinsertBefore(after, target) {
-	var parent = after.parentNode;
-	while (parent.firstChild !== after) target.appendChild(parent.firstChild);
-}
-
-function destroyEach(iterations) {
-	for (var i = 0; i < iterations.length; i += 1) {
-		if (iterations[i]) iterations[i].d();
-	}
-}
-
-function createFragment() {
-	return document.createDocumentFragment();
-}
-
-function createElement(name) {
-	return document.createElement(name);
-}
-
-function createSvgElement(name) {
-	return document.createElementNS('http://www.w3.org/2000/svg', name);
-}
-
-function createText(data) {
-	return document.createTextNode(data);
-}
-
-function createComment() {
-	return document.createComment('');
-}
-
-function addListener(node, event, handler) {
-	node.addEventListener(event, handler, false);
-}
-
-function removeListener(node, event, handler) {
-	node.removeEventListener(event, handler, false);
-}
-
-function setAttribute(node, attribute, value) {
-	node.setAttribute(attribute, value);
-}
-
-function setAttributes(node, attributes) {
-	for (var key in attributes) {
-		if (key in node) {
-			node[key] = attributes[key];
-		} else {
-			if (attributes[key] === undefined) removeAttribute(node, key);
-			else setAttribute(node, key, attributes[key]);
-		}
-	}
-}
-
-function removeAttribute(node, attribute) {
-	node.removeAttribute(attribute);
-}
-
-function setXlinkAttribute(node, attribute, value) {
-	node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
-}
-
-function getBindingGroupValue(group) {
-	var value = [];
-	for (var i = 0; i < group.length; i += 1) {
-		if (group[i].checked) value.push(group[i].__value);
-	}
-	return value;
-}
-
-function toNumber(value) {
-	return value === '' ? undefined : +value;
-}
-
-function timeRangesToArray(ranges) {
-	var array = [];
-	for (var i = 0; i < ranges.length; i += 1) {
-		array.push({ start: ranges.start(i), end: ranges.end(i) });
-	}
-	return array;
-}
-
-function children (element) {
-	return Array.from(element.childNodes);
-}
-
-function claimElement (nodes, name, attributes, svg) {
-	for (var i = 0; i < nodes.length; i += 1) {
-		var node = nodes[i];
-		if (node.nodeName === name) {
-			for (var j = 0; j < node.attributes.length; j += 1) {
-				var attribute = node.attributes[j];
-				if (!attributes[attribute.name]) node.removeAttribute(attribute.name);
-			}
-			return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes
-		}
-	}
-
-	return svg ? createSvgElement(name) : createElement(name);
-}
-
-function claimText (nodes, data) {
-	for (var i = 0; i < nodes.length; i += 1) {
-		var node = nodes[i];
-		if (node.nodeType === 3) {
-			node.data = data;
-			return nodes.splice(i, 1)[0];
-		}
-	}
-
-	return createText(data);
-}
-
-function setInputType(input, type) {
-	try {
-		input.type = type;
-	} catch (e) {}
-}
-
-function setStyle(node, key, value) {
-	node.style.setProperty(key, value);
-}
-
-function selectOption(select, value) {
-	for (var i = 0; i < select.options.length; i += 1) {
-		var option = select.options[i];
-
-		if (option.__value === value) {
-			option.selected = true;
-			return;
-		}
-	}
-}
-
-function selectOptions(select, value) {
-	for (var i = 0; i < select.options.length; i += 1) {
-		var option = select.options[i];
-		option.selected = ~value.indexOf(option.__value);
-	}
-}
-
-function selectValue(select) {
-	var selectedOption = select.querySelector(':checked') || select.options[0];
-	return selectedOption && selectedOption.__value;
-}
-
-function selectMultipleValue(select) {
-	return [].map.call(select.querySelectorAll(':checked'), function(option) {
-		return option.__value;
-	});
-}
-
-function destroyBlock(block, lookup) {
-	block.u();
-	block.d();
-	lookup[block.key] = null;
-}
-
-function outroAndDestroyBlock(block, lookup) {
-	block.o(function() {
-		destroyBlock(block, lookup);
-	});
-}
-
-function updateKeyedEach(old_blocks, component, changed, key_prop, dynamic, list, lookup, node, has_outro, create_each_block, intro_method, next, get_context) {
-	var o = old_blocks.length;
-	var n = list.length;
-
-	var i = o;
-	var old_indexes = {};
-	while (i--) old_indexes[old_blocks[i].key] = i;
-
-	var new_blocks = [];
-	var new_lookup = {};
-	var deltas = {};
-
-	var i = n;
-	while (i--) {
-		var key = list[i][key_prop];
-		var block = lookup[key];
-
-		if (!block) {
-			block = create_each_block(component, key, get_context(i));
-			block.c();
-		} else if (dynamic) {
-			block.p(changed, get_context(i));
-		}
-
-		new_blocks[i] = new_lookup[key] = block;
-
-		if (key in old_indexes) deltas[key] = Math.abs(i - old_indexes[key]);
-	}
-
-	var will_move = {};
-	var did_move = {};
-
-	var destroy = has_outro ? outroAndDestroyBlock : destroyBlock;
-
-	function insert(block) {
-		block[intro_method](node, next);
-		lookup[block.key] = block;
-		next = block.first;
-		n--;
-	}
-
-	while (o && n) {
-		var new_block = new_blocks[n - 1];
-		var old_block = old_blocks[o - 1];
-		var new_key = new_block.key;
-		var old_key = old_block.key;
-
-		if (new_block === old_block) {
-			// do nothing
-			next = new_block.first;
-			o--;
-			n--;
-		}
-
-		else if (!new_lookup[old_key]) {
-			// remove old block
-			destroy(old_block, lookup);
-			o--;
-		}
-
-		else if (!lookup[new_key] || will_move[new_key]) {
-			insert(new_block);
-		}
-
-		else if (did_move[old_key]) {
-			o--;
-
-		} else if (deltas[new_key] > deltas[old_key]) {
-			did_move[new_key] = true;
-			insert(new_block);
-
-		} else {
-			will_move[old_key] = true;
-			o--;
-		}
-	}
-
-	while (o--) {
-		var old_block = old_blocks[o];
-		if (!new_lookup[old_block.key]) destroy(old_block, lookup);
-	}
-
-	while (n) insert(new_blocks[n - 1]);
-
-	return new_blocks;
-}
-
-function getSpreadUpdate(levels, updates) {
-	var update = {};
-
-	var to_null_out = {};
-	var accounted_for = {};
-
-	var i = levels.length;
-	while (i--) {
-		var o = levels[i];
-		var n = updates[i];
-
-		if (n) {
-			for (var key in o) {
-				if (!(key in n)) to_null_out[key] = 1;
-			}
-
-			for (var key in n) {
-				if (!accounted_for[key]) {
-					update[key] = n[key];
-					accounted_for[key] = 1;
-				}
-			}
-
-			levels[i] = n;
-		} else {
-			for (var key in o) {
-				accounted_for[key] = 1;
-			}
-		}
-	}
-
-	for (var key in to_null_out) {
-		if (!(key in update)) update[key] = undefined;
-	}
-
-	return update;
-}
-
-function linear(t) {
-	return t;
-}
-
-function generateRule(
-	a,
-	b,
-	delta,
-	duration,
-	ease,
-	fn
-) {
-	var keyframes = '{\n';
-
-	for (var p = 0; p <= 1; p += 16.666 / duration) {
-		var t = a + delta * ease(p);
-		keyframes += p * 100 + '%{' + fn(t) + '}\n';
-	}
-
-	return keyframes + '100% {' + fn(b) + '}\n}';
-}
-
-// https://github.com/darkskyapp/string-hash/blob/master/index.js
-function hash(str) {
-	var hash = 5381;
-	var i = str.length;
-
-	while (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
-	return hash >>> 0;
-}
-
-function wrapTransition(component, node, fn, params, intro, outgroup) {
-	var obj = fn(node, params);
-	var duration = obj.duration || 300;
-	var ease = obj.easing || linear;
-	var cssText;
-
-	// TODO share <style> tag between all transitions?
-	if (obj.css && !transitionManager.stylesheet) {
-		var style = createElement('style');
-		document.head.appendChild(style);
-		transitionManager.stylesheet = style.sheet;
-	}
-
-	if (intro) {
-		if (obj.css && obj.delay) {
-			cssText = node.style.cssText;
-			node.style.cssText += obj.css(0);
-		}
-
-		if (obj.tick) obj.tick(0);
-	}
-
-	return {
-		t: intro ? 0 : 1,
-		running: false,
-		program: null,
-		pending: null,
-		run: function(intro, callback) {
-			var program = {
-				start: window.performance.now() + (obj.delay || 0),
-				intro: intro,
-				callback: callback
-			};
-
-			if (obj.delay) {
-				this.pending = program;
-			} else {
-				this.start(program);
-			}
-
-			if (!this.running) {
-				this.running = true;
-				transitionManager.add(this);
-			}
-		},
-		start: function(program) {
-			component.fire(program.intro ? 'intro.start' : 'outro.start', { node: node });
-
-			program.a = this.t;
-			program.b = program.intro ? 1 : 0;
-			program.delta = program.b - program.a;
-			program.duration = duration * Math.abs(program.b - program.a);
-			program.end = program.start + program.duration;
-
-			if (obj.css) {
-				if (obj.delay) node.style.cssText = cssText;
-
-				program.rule = generateRule(
-					program.a,
-					program.b,
-					program.delta,
-					program.duration,
-					ease,
-					obj.css
-				);
-
-				transitionManager.addRule(program.rule, program.name = '__svelte_' + hash(program.rule));
-
-				node.style.animation = (node.style.animation || '')
-					.split(', ')
-					.filter(function(anim) {
-						// when introing, discard old animations if there are any
-						return anim && (program.delta < 0 || !/__svelte/.test(anim));
-					})
-					.concat(program.name + ' ' + program.duration + 'ms linear 1 forwards')
-					.join(', ');
-			}
-
-			this.program = program;
-			this.pending = null;
-		},
-		update: function(now) {
-			var program = this.program;
-			if (!program) return;
-
-			var p = now - program.start;
-			this.t = program.a + program.delta * ease(p / program.duration);
-			if (obj.tick) obj.tick(this.t);
-		},
-		done: function() {
-			var program = this.program;
-			this.t = program.b;
-			if (obj.tick) obj.tick(this.t);
-			if (obj.css) transitionManager.deleteRule(node, program.name);
-			program.callback();
-			program = null;
-			this.running = !!this.pending;
-		},
-		abort: function() {
-			if (obj.tick) obj.tick(1);
-			if (obj.css) transitionManager.deleteRule(node, this.program.name);
-			this.program = this.pending = null;
-			this.running = false;
-		}
-	};
-}
-
-var transitionManager = {
-	running: false,
-	transitions: [],
-	bound: null,
-	stylesheet: null,
-	activeRules: {},
-
-	add: function(transition) {
-		this.transitions.push(transition);
-
-		if (!this.running) {
-			this.running = true;
-			requestAnimationFrame(this.bound || (this.bound = this.next.bind(this)));
-		}
-	},
-
-	addRule: function(rule, name) {
-		if (!this.activeRules[name]) {
-			this.activeRules[name] = true;
-			this.stylesheet.insertRule('@keyframes ' + name + ' ' + rule, this.stylesheet.cssRules.length);
-		}
-	},
-
-	next: function() {
-		this.running = false;
-
-		var now = window.performance.now();
-		var i = this.transitions.length;
-
-		while (i--) {
-			var transition = this.transitions[i];
-
-			if (transition.program && now >= transition.program.end) {
-				transition.done();
-			}
-
-			if (transition.pending && now >= transition.pending.start) {
-				transition.start(transition.pending);
-			}
-
-			if (transition.running) {
-				transition.update(now);
-				this.running = true;
-			} else if (!transition.pending) {
-				this.transitions.splice(i, 1);
-			}
-		}
-
-		if (this.running) {
-			requestAnimationFrame(this.bound);
-		} else if (this.stylesheet) {
-			var i = this.stylesheet.cssRules.length;
-			while (i--) this.stylesheet.deleteRule(i);
-			this.activeRules = {};
-		}
-	},
-
-	deleteRule: function(node, name) {
-		node.style.animation = node.style.animation
-			.split(', ')
-			.filter(function(anim) {
-				return anim.indexOf(name) === -1;
-			})
-			.join(', ');
-	}
-};
-
-function blankObject() {
-	return Object.create(null);
-}
-
-function destroy(detach) {
-	this.destroy = noop;
-	this.fire('destroy');
-	this.set = this.get = noop;
-
-	if (detach !== false) this._fragment.u();
-	this._fragment.d();
-	this._fragment = this._state = null;
-}
-
-function destroyDev(detach) {
-	destroy.call(this, detach);
-	this.destroy = function() {
-		console.warn('Component was already destroyed');
-	};
-}
-
-function _differs(a, b) {
-	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
-}
-
-function _differsImmutable(a, b) {
-	return a != a ? b == b : a !== b;
-}
-
-function dispatchObservers(component, group, changed, newState, oldState) {
-	for (var key in group) {
-		if (!changed[key]) continue;
-
-		var newValue = newState[key];
-		var oldValue = oldState[key];
-
-		var callbacks = group[key];
-		if (!callbacks) continue;
-
-		for (var i = 0; i < callbacks.length; i += 1) {
-			var callback = callbacks[i];
-			if (callback.__calling) continue;
-
-			callback.__calling = true;
-			callback.call(component, newValue, oldValue);
-			callback.__calling = false;
-		}
-	}
-}
-
-function fire(eventName, data) {
-	var handlers =
-		eventName in this._handlers && this._handlers[eventName].slice();
-	if (!handlers) return;
-
-	for (var i = 0; i < handlers.length; i += 1) {
-		handlers[i].call(this, data);
-	}
-}
-
-function get(key) {
-	return key ? this._state[key] : this._state;
-}
-
-function init(component, options) {
-	component._observers = { pre: blankObject(), post: blankObject() };
-	component._handlers = blankObject();
-	component._bind = options._bind;
-
-	component.options = options;
-	component.root = options.root || component;
-	component.store = component.root.store || options.store;
-}
-
-function observe(key, callback, options) {
-	var group = options && options.defer
-		? this._observers.post
-		: this._observers.pre;
-
-	(group[key] || (group[key] = [])).push(callback);
-
-	if (!options || options.init !== false) {
-		callback.__calling = true;
-		callback.call(this, this._state[key]);
-		callback.__calling = false;
-	}
-
-	return {
-		cancel: function() {
-			var index = group[key].indexOf(callback);
-			if (~index) group[key].splice(index, 1);
-		}
-	};
-}
-
-function observeDev(key, callback, options) {
-	var c = (key = '' + key).search(/[.[]/);
-	if (c > -1) {
-		var message =
-			'The first argument to component.observe(...) must be the name of a top-level property';
-		if (c > 0)
-			message += ", i.e. '" + key.slice(0, c) + "' rather than '" + key + "'";
-
-		throw new Error(message);
-	}
-
-	return observe.call(this, key, callback, options);
-}
-
-function on(eventName, handler) {
-	if (eventName === 'teardown') return this.on('destroy', handler);
-
-	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
-	handlers.push(handler);
-
-	return {
-		cancel: function() {
-			var index = handlers.indexOf(handler);
-			if (~index) handlers.splice(index, 1);
-		}
-	};
-}
-
-function onDev(eventName, handler) {
-	if (eventName === 'teardown') {
-		console.warn(
-			"Use component.on('destroy', ...) instead of component.on('teardown', ...) which has been deprecated and will be unsupported in Svelte 2"
-		);
-		return this.on('destroy', handler);
-	}
-
-	return on.call(this, eventName, handler);
-}
-
-function run(fn) {
-	fn();
-}
-
-function set(newState) {
-	this._set(assign({}, newState));
-	if (this.root._lock) return;
-	this.root._lock = true;
-	callAll(this.root._beforecreate);
-	callAll(this.root._oncreate);
-	callAll(this.root._aftercreate);
-	this.root._lock = false;
-}
-
-function _set(newState) {
-	var oldState = this._state,
-		changed = {},
-		dirty = false;
-
-	for (var key in newState) {
-		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
-	}
-	if (!dirty) return;
-
-	this._state = assign(assign({}, oldState), newState);
-	this._recompute(changed, this._state);
-	if (this._bind) this._bind(changed, this._state);
-
-	if (this._fragment) {
-		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
-		this._fragment.p(changed, this._state);
-		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
-	}
-}
-
-function setDev(newState) {
-	if (typeof newState !== 'object') {
-		throw new Error(
-			this._debugName + '.set was called without an object of data key-values to update.'
-		);
-	}
-
-	this._checkReadOnly(newState);
-	set.call(this, newState);
-}
-
-function callAll(fns) {
-	while (fns && fns.length) fns.shift()();
-}
-
-function _mount(target, anchor) {
-	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
-}
-
-function _unmount() {
-	if (this._fragment) this._fragment.u();
-}
-
-function isPromise(value) {
-	return value && typeof value.then === 'function';
-}
-
-var PENDING = {};
-var SUCCESS = {};
-var FAILURE = {};
-
-function removeFromStore() {
-	this.store._remove(this);
-}
-
-var proto = {
-	destroy: destroy,
-	get: get,
-	fire: fire,
-	observe: observe,
-	on: on,
-	set: set,
-	teardown: destroy,
-	_recompute: noop,
-	_set: _set,
-	_mount: _mount,
-	_unmount: _unmount,
-	_differs: _differs
-};
-
-var protoDev = {
-	destroy: destroyDev,
-	get: get,
-	fire: fire,
-	observe: observeDev,
-	on: onDev,
-	set: setDev,
-	teardown: destroyDev,
-	_recompute: noop,
-	_set: _set,
-	_mount: _mount,
-	_unmount: _unmount,
-	_differs: _differs
-};
-
-export { blankObject, destroy, destroyDev, _differs, _differsImmutable, dispatchObservers, fire, get, init, observe, observeDev, on, onDev, run, set, _set, setDev, callAll, _mount, _unmount, isPromise, PENDING, SUCCESS, FAILURE, removeFromStore, proto, protoDev, appendNode, insertNode, detachNode, detachBetween, detachBefore, detachAfter, reinsertBetween, reinsertChildren, reinsertAfter, reinsertBefore, destroyEach, createFragment, createElement, createSvgElement, createText, createComment, addListener, removeListener, setAttribute, setAttributes, removeAttribute, setXlinkAttribute, getBindingGroupValue, toNumber, timeRangesToArray, children, claimElement, claimText, setInputType, setStyle, selectOption, selectOptions, selectValue, selectMultipleValue, destroyBlock, outroAndDestroyBlock, updateKeyedEach, getSpreadUpdate, linear, generateRule, hash, wrapTransition, transitionManager, noop, assign };
diff --git a/node_modules/svelte/ssr/register.js b/node_modules/svelte/ssr/register.js
deleted file mode 100644
index 3a9f54f..0000000
--- a/node_modules/svelte/ssr/register.js
+++ /dev/null
@@ -1,52 +0,0 @@
-'use strict';
-
-var fs = require('fs');
-var path = require('path');
-var index_ts = require('../compiler/svelte.js');
-
-let compileOptions = {};
-
-function capitalise(name) {
-	return name[0].toUpperCase() + name.slice(1);
-}
-
-function register(options) {
-	var extensions = options.extensions;
-
-	if (extensions) {
-		_deregister('.html');
-		extensions.forEach(_register);
-	}
-
-	// TODO make this the default and remove in v2
-	if (options) { compileOptions = options; }
-}
-
-function _deregister(extension) {
-	delete require.extensions[extension];
-}
-
-function _register(extension) {
-	require.extensions[extension] = function(module, filename) {
-		const name = path.basename(filename)
-			.slice(0, -path.extname(filename).length)
-			.replace(/^\d/, '_$&')
-			.replace(/[^a-zA-Z0-9_$]/g, '');
-
-		const options = Object.assign({}, compileOptions, {
-			filename,
-			name: capitalise(name),
-			generate: 'ssr'
-		});
-
-		var ref = index_ts.compile(fs.readFileSync(filename, 'utf-8'), options);
-		var code = ref.code;
-
-		return module._compile(code, filename);
-	};
-}
-
-_register('.html');
-
-module.exports = register;
-//# sourceMappingURL=register.js.map
diff --git a/node_modules/svelte/ssr/register.js.map b/node_modules/svelte/ssr/register.js.map
deleted file mode 100644
index 674f234..0000000
--- a/node_modules/svelte/ssr/register.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"register.js","sources":["../src/server-side-rendering/register.js"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { compile } from '../index.ts';\n\nlet compileOptions = {};\n\nfunction capitalise(name) {\n\treturn name[0].toUpperCase() + name.slice(1);\n}\n\nexport default function register(options) {\n\tconst { extensions } = options;\n\n\tif (extensions) {\n\t\t_deregister('.html');\n\t\textensions.forEach(_register);\n\t}\n\n\t// TODO make this the default and remove in v2\n\tif (options) compileOptions = options;\n}\n\nfunction _deregister(extension) {\n\tdelete require.extensions[extension];\n}\n\nfunction _register(extension) {\n\trequire.extensions[extension] = function(module, filename) {\n\t\tconst name = path.basename(filename)\n\t\t\t.slice(0, -path.extname(filename).length)\n\t\t\t.replace(/^\\d/, '_$&')\n\t\t\t.replace(/[^a-zA-Z0-9_$]/g, '');\n\n\t\tconst options = Object.assign({}, compileOptions, {\n\t\t\tfilename,\n\t\t\tname: capitalise(name),\n\t\t\tgenerate: 'ssr'\n\t\t});\n\n\t\tconst {code} = compile(fs.readFileSync(filename, 'utf-8'), options);\n\n\t\treturn module._compile(code, filename);\n\t};\n}\n\n_register('.html');\n"],"names":["path.basename","path.extname","compile","fs.readFileSync"],"mappings":";;;;;;AAIA,IAAI,cAAc,GAAG,EAAE,CAAC;;AAExB,SAAS,UAAU,CAAC,IAAI,EAAE;CACzB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;CAC7C;;AAED,AAAe,SAAS,QAAQ,CAAC,OAAO,EAAE;CACzC,IAAQ,UAAU,sBAAZ;;CAEN,IAAI,UAAU,EAAE;EACf,WAAW,CAAC,OAAO,CAAC,CAAC;EACrB,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;EAC9B;;;CAGD,IAAI,OAAO,EAAE,EAAA,cAAc,GAAG,OAAO,CAAC,EAAA;CACtC;;AAED,SAAS,WAAW,CAAC,SAAS,EAAE;CAC/B,OAAO,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;CACrC;;AAED,SAAS,SAAS,CAAC,SAAS,EAAE;CAC7B,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,SAAS,MAAM,EAAE,QAAQ,EAAE;EAC1D,MAAM,IAAI,GAAGA,aAAa,CAAC,QAAQ,CAAC;IAClC,KAAK,CAAC,CAAC,EAAE,CAACC,YAAY,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;IACxC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;IACrB,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;;EAEjC,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE;GACjD,QAAQ;GACR,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC;GACtB,QAAQ,EAAE,KAAK;GACf,CAAC,CAAC;;EAEH,OAAY,GAAGC,gBAAO,CAACC,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC;EAA5D,IAAA,IAAI,YAAL;;EAEN,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;EACvC,CAAC;CACF;;AAED,SAAS,CAAC,OAAO,CAAC,CAAC;;;;"}
\ No newline at end of file
diff --git a/node_modules/svelte/store.d.ts b/node_modules/svelte/store.d.ts
new file mode 100644
index 0000000..6d345dc
--- /dev/null
+++ b/node_modules/svelte/store.d.ts
@@ -0,0 +1 @@
+export * from './types/store';
diff --git a/node_modules/svelte/store.js b/node_modules/svelte/store.js
index 52acd34..e7539e1 100644
--- a/node_modules/svelte/store.js
+++ b/node_modules/svelte/store.js
@@ -1,169 +1,118 @@
-import {
-	assign,
-	blankObject,
-	_differs,
-	_differsImmutable,
-	dispatchObservers,
-	get,
-	observe
-} from './shared.js';
+'use strict';
 
-function Store(state, options) {
-	this._observers = { pre: blankObject(), post: blankObject() };
-	this._changeHandlers = [];
-	this._dependents = [];
+Object.defineProperty(exports, '__esModule', { value: true });
 
-	this._computed = blankObject();
-	this._sortedComputedProperties = [];
+var internal = require('./internal');
 
-	this._state = assign({}, state);
-	this._differs = options && options.immutable ? _differsImmutable : _differs;
+/**
+ * Creates a `Readable` store that allows reading by subscription.
+ * @param value initial value
+ * @param {StartStopNotifier}start start and stop notifications for subscriptions
+ */
+function readable(value, start) {
+    return {
+        subscribe: writable(value, start).subscribe,
+    };
+}
+/**
+ * Create a `Writable` store that allows both updating and reading by subscription.
+ * @param {*=}value initial value
+ * @param {StartStopNotifier=}start start and stop notifications for subscriptions
+ */
+function writable(value, start = internal.noop) {
+    let stop;
+    const subscribers = [];
+    function set(new_value) {
+        if (internal.safe_not_equal(value, new_value)) {
+            value = new_value;
+            if (!stop) {
+                return; // not ready
+            }
+            subscribers.forEach((s) => s[1]());
+            subscribers.forEach((s) => s[0](value));
+        }
+    }
+    function update(fn) {
+        set(fn(value));
+    }
+    function subscribe(run, invalidate = internal.noop) {
+        const subscriber = [run, invalidate];
+        subscribers.push(subscriber);
+        if (subscribers.length === 1) {
+            stop = start(set) || internal.noop;
+        }
+        run(value);
+        return () => {
+            const index = subscribers.indexOf(subscriber);
+            if (index !== -1) {
+                subscribers.splice(index, 1);
+            }
+            if (subscribers.length === 0) {
+                stop();
+            }
+        };
+    }
+    return { set, update, subscribe };
+}
+/**
+ * Derived value store by synchronizing one or more readable stores and
+ * applying an aggregation function over its input values.
+ * @param {Stores} stores input stores
+ * @param {function(Stores=, function(*)=):*}fn function callback that aggregates the values
+ * @param {*=}initial_value when used asynchronously
+ */
+function derived(stores, fn, initial_value) {
+    const single = !Array.isArray(stores);
+    const stores_array = single
+        ? [stores]
+        : stores;
+    const auto = fn.length < 2;
+    return readable(initial_value, (set) => {
+        let inited = false;
+        const values = [];
+        let pending = 0;
+        let cleanup = internal.noop;
+        const sync = () => {
+            if (pending) {
+                return;
+            }
+            cleanup();
+            const result = fn(single ? values[0] : values, set);
+            if (auto) {
+                set(result);
+            }
+            else {
+                cleanup = internal.is_function(result) ? result : internal.noop;
+            }
+        };
+        const unsubscribers = stores_array.map((store, i) => store.subscribe((value) => {
+            values[i] = value;
+            pending &= ~(1 << i);
+            if (inited) {
+                sync();
+            }
+        }, () => {
+            pending |= (1 << i);
+        }));
+        inited = true;
+        sync();
+        return function stop() {
+            internal.run_all(unsubscribers);
+            cleanup();
+        };
+    });
+}
+/**
+ * Get the current value from a store by subscribing and immediately unsubscribing.
+ * @param store readable
+ */
+function get(store) {
+    let value;
+    store.subscribe((_) => value = _)();
+    return value;
 }
 
-assign(Store.prototype, {
-	_add: function(component, props) {
-		this._dependents.push({
-			component: component,
-			props: props
-		});
-	},
-
-	_init: function(props) {
-		var state = {};
-		for (var i = 0; i < props.length; i += 1) {
-			var prop = props[i];
-			state['$' + prop] = this._state[prop];
-		}
-		return state;
-	},
-
-	_remove: function(component) {
-		var i = this._dependents.length;
-		while (i--) {
-			if (this._dependents[i].component === component) {
-				this._dependents.splice(i, 1);
-				return;
-			}
-		}
-	},
-
-	_sortComputedProperties: function() {
-		var computed = this._computed;
-		var sorted = this._sortedComputedProperties = [];
-		var cycles;
-		var visited = blankObject();
-
-		function visit(key) {
-			if (cycles[key]) {
-				throw new Error('Cyclical dependency detected');
-			}
-
-			if (visited[key]) return;
-			visited[key] = true;
-
-			var c = computed[key];
-
-			if (c) {
-				cycles[key] = true;
-				c.deps.forEach(visit);
-				sorted.push(c);
-			}
-		}
-
-		for (var key in this._computed) {
-			cycles = blankObject();
-			visit(key);
-		}
-	},
-
-	compute: function(key, deps, fn) {
-		var store = this;
-		var value;
-
-		var c = {
-			deps: deps,
-			update: function(state, changed, dirty) {
-				var values = deps.map(function(dep) {
-					if (dep in changed) dirty = true;
-					return state[dep];
-				});
-
-				if (dirty) {
-					var newValue = fn.apply(null, values);
-					if (store._differs(newValue, value)) {
-						value = newValue;
-						changed[key] = true;
-						state[key] = value;
-					}
-				}
-			}
-		};
-
-		c.update(this._state, {}, true);
-
-		this._computed[key] = c;
-		this._sortComputedProperties();
-	},
-
-	get: get,
-
-	observe: observe,
-
-	onchange: function(callback) {
-		this._changeHandlers.push(callback);
-
-		var store = this;
-
-		return {
-			cancel: function() {
-				var index = store._changeHandlers.indexOf(callback);
-				if (~index) store._changeHandlers.splice(index, 1);
-			}
-		};
-	},
-
-	set: function(newState) {
-		var oldState = this._state,
-			changed = this._changed = {},
-			dirty = false;
-
-		for (var key in newState) {
-			if (this._computed[key]) throw new Error("'" + key + "' is a read-only property");
-			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
-		}
-		if (!dirty) return;
-
-		this._state = assign(assign({}, oldState), newState);
-
-		for (var i = 0; i < this._sortedComputedProperties.length; i += 1) {
-			this._sortedComputedProperties[i].update(this._state, changed);
-		}
-
-		for (var i = 0; i < this._changeHandlers.length; i += 1) {
-			this._changeHandlers[i](this._state, changed);
-		}
-
-		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
-
-		var dependents = this._dependents.slice(); // guard against mutations
-		for (var i = 0; i < dependents.length; i += 1) {
-			var dependent = dependents[i];
-			var componentState = {};
-			dirty = false;
-
-			for (var j = 0; j < dependent.props.length; j += 1) {
-				var prop = dependent.props[j];
-				if (prop in changed) {
-					componentState['$' + prop] = this._state[prop];
-					dirty = true;
-				}
-			}
-
-			if (dirty) dependent.component.set(componentState);
-		}
-
-		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
-	}
-});
-
-export { Store };
+exports.readable = readable;
+exports.writable = writable;
+exports.derived = derived;
+exports.get = get;
diff --git a/node_modules/svelte/store.mjs b/node_modules/svelte/store.mjs
new file mode 100644
index 0000000..126cdbd
--- /dev/null
+++ b/node_modules/svelte/store.mjs
@@ -0,0 +1,111 @@
+import { noop, safe_not_equal, run_all, is_function } from './internal';
+
+/**
+ * Creates a `Readable` store that allows reading by subscription.
+ * @param value initial value
+ * @param {StartStopNotifier}start start and stop notifications for subscriptions
+ */
+function readable(value, start) {
+    return {
+        subscribe: writable(value, start).subscribe,
+    };
+}
+/**
+ * Create a `Writable` store that allows both updating and reading by subscription.
+ * @param {*=}value initial value
+ * @param {StartStopNotifier=}start start and stop notifications for subscriptions
+ */
+function writable(value, start = noop) {
+    let stop;
+    const subscribers = [];
+    function set(new_value) {
+        if (safe_not_equal(value, new_value)) {
+            value = new_value;
+            if (!stop) {
+                return; // not ready
+            }
+            subscribers.forEach((s) => s[1]());
+            subscribers.forEach((s) => s[0](value));
+        }
+    }
+    function update(fn) {
+        set(fn(value));
+    }
+    function subscribe(run, invalidate = noop) {
+        const subscriber = [run, invalidate];
+        subscribers.push(subscriber);
+        if (subscribers.length === 1) {
+            stop = start(set) || noop;
+        }
+        run(value);
+        return () => {
+            const index = subscribers.indexOf(subscriber);
+            if (index !== -1) {
+                subscribers.splice(index, 1);
+            }
+            if (subscribers.length === 0) {
+                stop();
+            }
+        };
+    }
+    return { set, update, subscribe };
+}
+/**
+ * Derived value store by synchronizing one or more readable stores and
+ * applying an aggregation function over its input values.
+ * @param {Stores} stores input stores
+ * @param {function(Stores=, function(*)=):*}fn function callback that aggregates the values
+ * @param {*=}initial_value when used asynchronously
+ */
+function derived(stores, fn, initial_value) {
+    const single = !Array.isArray(stores);
+    const stores_array = single
+        ? [stores]
+        : stores;
+    const auto = fn.length < 2;
+    return readable(initial_value, (set) => {
+        let inited = false;
+        const values = [];
+        let pending = 0;
+        let cleanup = noop;
+        const sync = () => {
+            if (pending) {
+                return;
+            }
+            cleanup();
+            const result = fn(single ? values[0] : values, set);
+            if (auto) {
+                set(result);
+            }
+            else {
+                cleanup = is_function(result) ? result : noop;
+            }
+        };
+        const unsubscribers = stores_array.map((store, i) => store.subscribe((value) => {
+            values[i] = value;
+            pending &= ~(1 << i);
+            if (inited) {
+                sync();
+            }
+        }, () => {
+            pending |= (1 << i);
+        }));
+        inited = true;
+        sync();
+        return function stop() {
+            run_all(unsubscribers);
+            cleanup();
+        };
+    });
+}
+/**
+ * Get the current value from a store by subscribing and immediately unsubscribing.
+ * @param store readable
+ */
+function get(store) {
+    let value;
+    store.subscribe((_) => value = _)();
+    return value;
+}
+
+export { readable, writable, derived, get };
diff --git a/node_modules/svelte/store.umd.js b/node_modules/svelte/store.umd.js
deleted file mode 100644
index 8760077..0000000
--- a/node_modules/svelte/store.umd.js
+++ /dev/null
@@ -1,232 +0,0 @@
-(function (global, factory) {
-	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
-	typeof define === 'function' && define.amd ? define(['exports'], factory) :
-	(factory((global.svelte = global.svelte || {})));
-}(this, (function (exports) { 'use strict';
-
-function assign(tar, src) {
-	for (var k in src) tar[k] = src[k];
-	return tar;
-}
-
-function blankObject() {
-	return Object.create(null);
-}
-
-function _differs(a, b) {
-	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
-}
-
-function _differsImmutable(a, b) {
-	return a != a ? b == b : a !== b;
-}
-
-function dispatchObservers(component, group, changed, newState, oldState) {
-	for (var key in group) {
-		if (!changed[key]) continue;
-
-		var newValue = newState[key];
-		var oldValue = oldState[key];
-
-		var callbacks = group[key];
-		if (!callbacks) continue;
-
-		for (var i = 0; i < callbacks.length; i += 1) {
-			var callback = callbacks[i];
-			if (callback.__calling) continue;
-
-			callback.__calling = true;
-			callback.call(component, newValue, oldValue);
-			callback.__calling = false;
-		}
-	}
-}
-
-function get(key) {
-	return key ? this._state[key] : this._state;
-}
-
-function observe(key, callback, options) {
-	var group = options && options.defer
-		? this._observers.post
-		: this._observers.pre;
-
-	(group[key] || (group[key] = [])).push(callback);
-
-	if (!options || options.init !== false) {
-		callback.__calling = true;
-		callback.call(this, this._state[key]);
-		callback.__calling = false;
-	}
-
-	return {
-		cancel: function() {
-			var index = group[key].indexOf(callback);
-			if (~index) group[key].splice(index, 1);
-		}
-	};
-}
-
-function Store(state, options) {
-	this._observers = { pre: blankObject(), post: blankObject() };
-	this._changeHandlers = [];
-	this._dependents = [];
-
-	this._computed = blankObject();
-	this._sortedComputedProperties = [];
-
-	this._state = assign({}, state);
-	this._differs = options && options.immutable ? _differsImmutable : _differs;
-}
-
-assign(Store.prototype, {
-	_add: function(component, props) {
-		this._dependents.push({
-			component: component,
-			props: props
-		});
-	},
-
-	_init: function(props) {
-		var state = {};
-		for (var i = 0; i < props.length; i += 1) {
-			var prop = props[i];
-			state['$' + prop] = this._state[prop];
-		}
-		return state;
-	},
-
-	_remove: function(component) {
-		var i = this._dependents.length;
-		while (i--) {
-			if (this._dependents[i].component === component) {
-				this._dependents.splice(i, 1);
-				return;
-			}
-		}
-	},
-
-	_sortComputedProperties: function() {
-		var computed = this._computed;
-		var sorted = this._sortedComputedProperties = [];
-		var cycles;
-		var visited = blankObject();
-
-		function visit(key) {
-			if (cycles[key]) {
-				throw new Error('Cyclical dependency detected');
-			}
-
-			if (visited[key]) return;
-			visited[key] = true;
-
-			var c = computed[key];
-
-			if (c) {
-				cycles[key] = true;
-				c.deps.forEach(visit);
-				sorted.push(c);
-			}
-		}
-
-		for (var key in this._computed) {
-			cycles = blankObject();
-			visit(key);
-		}
-	},
-
-	compute: function(key, deps, fn) {
-		var store = this;
-		var value;
-
-		var c = {
-			deps: deps,
-			update: function(state, changed, dirty) {
-				var values = deps.map(function(dep) {
-					if (dep in changed) dirty = true;
-					return state[dep];
-				});
-
-				if (dirty) {
-					var newValue = fn.apply(null, values);
-					if (store._differs(newValue, value)) {
-						value = newValue;
-						changed[key] = true;
-						state[key] = value;
-					}
-				}
-			}
-		};
-
-		c.update(this._state, {}, true);
-
-		this._computed[key] = c;
-		this._sortComputedProperties();
-	},
-
-	get: get,
-
-	observe: observe,
-
-	onchange: function(callback) {
-		this._changeHandlers.push(callback);
-
-		var store = this;
-
-		return {
-			cancel: function() {
-				var index = store._changeHandlers.indexOf(callback);
-				if (~index) store._changeHandlers.splice(index, 1);
-			}
-		};
-	},
-
-	set: function(newState) {
-		var oldState = this._state,
-			changed = this._changed = {},
-			dirty = false;
-
-		for (var key in newState) {
-			if (this._computed[key]) throw new Error("'" + key + "' is a read-only property");
-			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
-		}
-		if (!dirty) return;
-
-		this._state = assign(assign({}, oldState), newState);
-
-		for (var i = 0; i < this._sortedComputedProperties.length; i += 1) {
-			this._sortedComputedProperties[i].update(this._state, changed);
-		}
-
-		for (var i = 0; i < this._changeHandlers.length; i += 1) {
-			this._changeHandlers[i](this._state, changed);
-		}
-
-		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
-
-		var dependents = this._dependents.slice(); // guard against mutations
-		for (var i = 0; i < dependents.length; i += 1) {
-			var dependent = dependents[i];
-			var componentState = {};
-			dirty = false;
-
-			for (var j = 0; j < dependent.props.length; j += 1) {
-				var prop = dependent.props[j];
-				if (prop in changed) {
-					componentState['$' + prop] = this._state[prop];
-					dirty = true;
-				}
-			}
-
-			if (dirty) dependent.component.set(componentState);
-		}
-
-		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
-	}
-});
-
-exports.Store = Store;
-
-Object.defineProperty(exports, '__esModule', { value: true });
-
-})));
diff --git a/node_modules/svelte/transition.d.ts b/node_modules/svelte/transition.d.ts
new file mode 100644
index 0000000..58f51d9
--- /dev/null
+++ b/node_modules/svelte/transition.d.ts
@@ -0,0 +1 @@
+export * from './types/transition';
diff --git a/node_modules/svelte/transition.js b/node_modules/svelte/transition.js
new file mode 100644
index 0000000..9807f10
--- /dev/null
+++ b/node_modules/svelte/transition.js
@@ -0,0 +1,169 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var easing = require('./easing');
+var internal = require('./internal');
+
+/*! *****************************************************************************
+Copyright (c) Microsoft Corporation. All rights reserved.
+Licensed under the Apache License, Version 2.0 (the "License"); you may not use
+this file except in compliance with the License. You may obtain a copy of the
+License at http://www.apache.org/licenses/LICENSE-2.0
+
+THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+MERCHANTABLITY OR NON-INFRINGEMENT.
+
+See the Apache Version 2.0 License for specific language governing permissions
+and limitations under the License.
+***************************************************************************** */
+
+function __rest(s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+}
+
+function fade(node, { delay = 0, duration = 400 }) {
+    const o = +getComputedStyle(node).opacity;
+    return {
+        delay,
+        duration,
+        css: t => `opacity: ${t * o}`
+    };
+}
+function fly(node, { delay = 0, duration = 400, easing: easing$$1 = easing.cubicOut, x = 0, y = 0, opacity = 0 }) {
+    const style = getComputedStyle(node);
+    const target_opacity = +style.opacity;
+    const transform = style.transform === 'none' ? '' : style.transform;
+    const od = target_opacity * (1 - opacity);
+    return {
+        delay,
+        duration,
+        easing: easing$$1,
+        css: (t, u) => `
+			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
+			opacity: ${target_opacity - (od * u)}`
+    };
+}
+function slide(node, { delay = 0, duration = 400, easing: easing$$1 = easing.cubicOut }) {
+    const style = getComputedStyle(node);
+    const opacity = +style.opacity;
+    const height = parseFloat(style.height);
+    const padding_top = parseFloat(style.paddingTop);
+    const padding_bottom = parseFloat(style.paddingBottom);
+    const margin_top = parseFloat(style.marginTop);
+    const margin_bottom = parseFloat(style.marginBottom);
+    const border_top_width = parseFloat(style.borderTopWidth);
+    const border_bottom_width = parseFloat(style.borderBottomWidth);
+    return {
+        delay,
+        duration,
+        easing: easing$$1,
+        css: t => `overflow: hidden;` +
+            `opacity: ${Math.min(t * 20, 1) * opacity};` +
+            `height: ${t * height}px;` +
+            `padding-top: ${t * padding_top}px;` +
+            `padding-bottom: ${t * padding_bottom}px;` +
+            `margin-top: ${t * margin_top}px;` +
+            `margin-bottom: ${t * margin_bottom}px;` +
+            `border-top-width: ${t * border_top_width}px;` +
+            `border-bottom-width: ${t * border_bottom_width}px;`
+    };
+}
+function scale(node, { delay = 0, duration = 400, easing: easing$$1 = easing.cubicOut, start = 0, opacity = 0 }) {
+    const style = getComputedStyle(node);
+    const target_opacity = +style.opacity;
+    const transform = style.transform === 'none' ? '' : style.transform;
+    const sd = 1 - start;
+    const od = target_opacity * (1 - opacity);
+    return {
+        delay,
+        duration,
+        easing: easing$$1,
+        css: (t, u) => `
+			transform: ${transform} scale(${1 - (sd * u)});
+			opacity: ${target_opacity - (od * u)}
+		`
+    };
+}
+function draw(node, { delay = 0, speed, duration, easing: easing$$1 = easing.cubicInOut }) {
+    const len = node.getTotalLength();
+    if (duration === undefined) {
+        if (speed === undefined) {
+            duration = 800;
+        }
+        else {
+            duration = len / speed;
+        }
+    }
+    else if (typeof duration === 'function') {
+        duration = duration(len);
+    }
+    return {
+        delay,
+        duration,
+        easing: easing$$1,
+        css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`
+    };
+}
+function crossfade(_a) {
+    var { fallback } = _a, defaults = __rest(_a, ["fallback"]);
+    const to_receive = new Map();
+    const to_send = new Map();
+    function crossfade(from, node, params) {
+        const { delay = 0, duration = d => Math.sqrt(d) * 30, easing: easing$$1 = easing.cubicOut } = internal.assign(internal.assign({}, defaults), params);
+        const to = node.getBoundingClientRect();
+        const dx = from.left - to.left;
+        const dy = from.top - to.top;
+        const d = Math.sqrt(dx * dx + dy * dy);
+        const style = getComputedStyle(node);
+        const transform = style.transform === 'none' ? '' : style.transform;
+        const opacity = +style.opacity;
+        return {
+            delay,
+            duration: internal.is_function(duration) ? duration(d) : duration,
+            easing: easing$$1,
+            css: (t, u) => `
+				opacity: ${t * opacity};
+				transform: ${transform} translate(${u * dx}px,${u * dy}px);
+			`
+        };
+    }
+    function transition(items, counterparts, intro) {
+        return (node, params) => {
+            items.set(params.key, {
+                rect: node.getBoundingClientRect()
+            });
+            return () => {
+                if (counterparts.has(params.key)) {
+                    const { rect } = counterparts.get(params.key);
+                    counterparts.delete(params.key);
+                    return crossfade(rect, node, params);
+                }
+                // if the node is disappearing altogether
+                // (i.e. wasn't claimed by the other list)
+                // then we need to supply an outro
+                items.delete(params.key);
+                return fallback && fallback(node, params, intro);
+            };
+        };
+    }
+    return [
+        transition(to_send, to_receive, false),
+        transition(to_receive, to_send, true)
+    ];
+}
+
+exports.fade = fade;
+exports.fly = fly;
+exports.slide = slide;
+exports.scale = scale;
+exports.draw = draw;
+exports.crossfade = crossfade;
diff --git a/node_modules/svelte/transition.mjs b/node_modules/svelte/transition.mjs
new file mode 100644
index 0000000..024c709
--- /dev/null
+++ b/node_modules/svelte/transition.mjs
@@ -0,0 +1,160 @@
+import { cubicOut, cubicInOut } from './easing';
+import { is_function, assign } from './internal';
+
+/*! *****************************************************************************
+Copyright (c) Microsoft Corporation. All rights reserved.
+Licensed under the Apache License, Version 2.0 (the "License"); you may not use
+this file except in compliance with the License. You may obtain a copy of the
+License at http://www.apache.org/licenses/LICENSE-2.0
+
+THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+MERCHANTABLITY OR NON-INFRINGEMENT.
+
+See the Apache Version 2.0 License for specific language governing permissions
+and limitations under the License.
+***************************************************************************** */
+
+function __rest(s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+}
+
+function fade(node, { delay = 0, duration = 400 }) {
+    const o = +getComputedStyle(node).opacity;
+    return {
+        delay,
+        duration,
+        css: t => `opacity: ${t * o}`
+    };
+}
+function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 }) {
+    const style = getComputedStyle(node);
+    const target_opacity = +style.opacity;
+    const transform = style.transform === 'none' ? '' : style.transform;
+    const od = target_opacity * (1 - opacity);
+    return {
+        delay,
+        duration,
+        easing,
+        css: (t, u) => `
+			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
+			opacity: ${target_opacity - (od * u)}`
+    };
+}
+function slide(node, { delay = 0, duration = 400, easing = cubicOut }) {
+    const style = getComputedStyle(node);
+    const opacity = +style.opacity;
+    const height = parseFloat(style.height);
+    const padding_top = parseFloat(style.paddingTop);
+    const padding_bottom = parseFloat(style.paddingBottom);
+    const margin_top = parseFloat(style.marginTop);
+    const margin_bottom = parseFloat(style.marginBottom);
+    const border_top_width = parseFloat(style.borderTopWidth);
+    const border_bottom_width = parseFloat(style.borderBottomWidth);
+    return {
+        delay,
+        duration,
+        easing,
+        css: t => `overflow: hidden;` +
+            `opacity: ${Math.min(t * 20, 1) * opacity};` +
+            `height: ${t * height}px;` +
+            `padding-top: ${t * padding_top}px;` +
+            `padding-bottom: ${t * padding_bottom}px;` +
+            `margin-top: ${t * margin_top}px;` +
+            `margin-bottom: ${t * margin_bottom}px;` +
+            `border-top-width: ${t * border_top_width}px;` +
+            `border-bottom-width: ${t * border_bottom_width}px;`
+    };
+}
+function scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 }) {
+    const style = getComputedStyle(node);
+    const target_opacity = +style.opacity;
+    const transform = style.transform === 'none' ? '' : style.transform;
+    const sd = 1 - start;
+    const od = target_opacity * (1 - opacity);
+    return {
+        delay,
+        duration,
+        easing,
+        css: (t, u) => `
+			transform: ${transform} scale(${1 - (sd * u)});
+			opacity: ${target_opacity - (od * u)}
+		`
+    };
+}
+function draw(node, { delay = 0, speed, duration, easing = cubicInOut }) {
+    const len = node.getTotalLength();
+    if (duration === undefined) {
+        if (speed === undefined) {
+            duration = 800;
+        }
+        else {
+            duration = len / speed;
+        }
+    }
+    else if (typeof duration === 'function') {
+        duration = duration(len);
+    }
+    return {
+        delay,
+        duration,
+        easing,
+        css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`
+    };
+}
+function crossfade(_a) {
+    var { fallback } = _a, defaults = __rest(_a, ["fallback"]);
+    const to_receive = new Map();
+    const to_send = new Map();
+    function crossfade(from, node, params) {
+        const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);
+        const to = node.getBoundingClientRect();
+        const dx = from.left - to.left;
+        const dy = from.top - to.top;
+        const d = Math.sqrt(dx * dx + dy * dy);
+        const style = getComputedStyle(node);
+        const transform = style.transform === 'none' ? '' : style.transform;
+        const opacity = +style.opacity;
+        return {
+            delay,
+            duration: is_function(duration) ? duration(d) : duration,
+            easing,
+            css: (t, u) => `
+				opacity: ${t * opacity};
+				transform: ${transform} translate(${u * dx}px,${u * dy}px);
+			`
+        };
+    }
+    function transition(items, counterparts, intro) {
+        return (node, params) => {
+            items.set(params.key, {
+                rect: node.getBoundingClientRect()
+            });
+            return () => {
+                if (counterparts.has(params.key)) {
+                    const { rect } = counterparts.get(params.key);
+                    counterparts.delete(params.key);
+                    return crossfade(rect, node, params);
+                }
+                // if the node is disappearing altogether
+                // (i.e. wasn't claimed by the other list)
+                // then we need to supply an outro
+                items.delete(params.key);
+                return fallback && fallback(node, params, intro);
+            };
+        };
+    }
+    return [
+        transition(to_send, to_receive, false),
+        transition(to_receive, to_send, true)
+    ];
+}
+
+export { fade, fly, slide, scale, draw, crossfade };
diff --git a/node_modules/svelte/types/Stats.d.ts b/node_modules/svelte/types/Stats.d.ts
new file mode 100644
index 0000000..6389e32
--- /dev/null
+++ b/node_modules/svelte/types/Stats.d.ts
@@ -0,0 +1,22 @@
+declare type Timing = {
+    label: string;
+    start: number;
+    end: number;
+    children: Timing[];
+};
+export default class Stats {
+    start_time: number;
+    current_timing: Timing;
+    current_children: Timing[];
+    timings: Timing[];
+    stack: Timing[];
+    constructor();
+    start(label: any): void;
+    stop(label: any): void;
+    render(): {
+        timings: {
+            total: number;
+        };
+    };
+}
+export {};
diff --git a/node_modules/svelte/types/animate.d.ts b/node_modules/svelte/types/animate.d.ts
new file mode 100644
index 0000000..87f12d7
--- /dev/null
+++ b/node_modules/svelte/types/animate.d.ts
@@ -0,0 +1,6 @@
+export declare function flip(node: any, animation: any, params: any): {
+    delay: any;
+    duration: any;
+    easing: any;
+    css: (t: any, u: any) => string;
+};
diff --git a/node_modules/svelte/types/compile/Component.d.ts b/node_modules/svelte/types/compile/Component.d.ts
new file mode 100644
index 0000000..9f3ceb1
--- /dev/null
+++ b/node_modules/svelte/types/compile/Component.d.ts
@@ -0,0 +1,125 @@
+import MagicString from 'magic-string';
+import Stats from '../Stats';
+import { Scope } from './utils/scope';
+import Stylesheet from './css/Stylesheet';
+import Fragment from './nodes/Fragment';
+import { Node, Ast, CompileOptions, Var, Warning } from '../interfaces';
+import TemplateScope from './nodes/shared/TemplateScope';
+import Slot from './nodes/Slot';
+declare type ComponentOptions = {
+    namespace?: string;
+    tag?: string;
+    immutable?: boolean;
+    accessors?: boolean;
+    preserveWhitespace?: boolean;
+};
+export default class Component {
+    stats: Stats;
+    warnings: Warning[];
+    ast: Ast;
+    source: string;
+    code: MagicString;
+    name: string;
+    compile_options: CompileOptions;
+    fragment: Fragment;
+    module_scope: Scope;
+    instance_scope: Scope;
+    instance_scope_map: WeakMap<Node, Scope>;
+    component_options: ComponentOptions;
+    namespace: string;
+    tag: string;
+    accessors: boolean;
+    vars: Var[];
+    var_lookup: Map<string, Var>;
+    imports: Node[];
+    module_javascript: string;
+    javascript: string;
+    hoistable_nodes: Set<Node>;
+    node_for_declaration: Map<string, Node>;
+    partly_hoisted: string[];
+    fully_hoisted: string[];
+    reactive_declarations: Array<{
+        assignees: Set<string>;
+        dependencies: Set<string>;
+        node: Node;
+        declaration: Node;
+    }>;
+    reactive_declaration_nodes: Set<Node>;
+    has_reactive_assignments: boolean;
+    injected_reactive_declaration_vars: Set<string>;
+    helpers: Set<string>;
+    indirect_dependencies: Map<string, Set<string>>;
+    file: string;
+    locate: (c: number) => {
+        line: number;
+        column: number;
+    };
+    locator: (search: number, startIndex?: number) => {
+        line: number;
+        column: number;
+    };
+    stylesheet: Stylesheet;
+    aliases: Map<string, string>;
+    used_names: Set<string>;
+    globally_used_names: Set<string>;
+    slots: Map<string, Slot>;
+    slot_outlets: Set<string>;
+    constructor(ast: Ast, source: string, name: string, compile_options: CompileOptions, stats: Stats, warnings: Warning[]);
+    add_var(variable: Var): void;
+    add_reference(name: string): void;
+    add_sourcemap_locations(node: Node): void;
+    alias(name: string): string;
+    helper(name: string): string;
+    generate(result: string): {
+        js: any;
+        css: any;
+        ast: Ast;
+        warnings: Warning[];
+        vars: {
+            name: string;
+            export_name: string;
+            injected: boolean;
+            module: boolean;
+            mutated: boolean;
+            reassigned: boolean;
+            referenced: boolean;
+            writable: boolean;
+        }[];
+        stats: {
+            timings: {
+                total: number;
+            };
+        };
+    };
+    get_unique_name(name: string): string;
+    get_unique_name_maker(): (name: string) => string;
+    error(pos: {
+        start: number;
+        end: number;
+    }, e: {
+        code: string;
+        message: string;
+    }): void;
+    warn(pos: {
+        start: number;
+        end: number;
+    }, warning: {
+        code: string;
+        message: string;
+    }): void;
+    extract_imports(content: any): void;
+    extract_exports(content: any): void;
+    extract_javascript(script: any): string;
+    walk_module_js(): void;
+    walk_instance_js_pre_template(): void;
+    walk_instance_js_post_template(): void;
+    track_mutations(): void;
+    extract_reactive_store_references(): void;
+    invalidate(name: any, value?: any): any;
+    rewrite_props(get_insert: (variable: Var) => string): void;
+    hoist_instance_declarations(): void;
+    extract_reactive_declarations(): void;
+    qualify(name: any): any;
+    warn_if_undefined(name: string, node: any, template_scope: TemplateScope): void;
+}
+export {};
diff --git a/node_modules/svelte/types/compile/create_module.d.ts b/node_modules/svelte/types/compile/create_module.d.ts
new file mode 100644
index 0000000..5df4a88
--- /dev/null
+++ b/node_modules/svelte/types/compile/create_module.d.ts
@@ -0,0 +1,10 @@
+import { ModuleFormat, Node } from '../interfaces';
+declare type Export = {
+    name: string;
+    as: string;
+};
+export default function create_module(code: string, format: ModuleFormat, name: string, banner: string, sveltePath: string, helpers: {
+    name: string;
+    alias: string;
+}[], imports: Node[], module_exports: Export[], source: string): string;
+export {};
diff --git a/node_modules/svelte/types/compile/css/Selector.d.ts b/node_modules/svelte/types/compile/css/Selector.d.ts
new file mode 100644
index 0000000..1429fdb
--- /dev/null
+++ b/node_modules/svelte/types/compile/css/Selector.d.ts
@@ -0,0 +1,27 @@
+import MagicString from 'magic-string';
+import Stylesheet from './Stylesheet';
+import { Node } from '../../interfaces';
+import Component from '../Component';
+export default class Selector {
+    node: Node;
+    stylesheet: Stylesheet;
+    blocks: Block[];
+    local_blocks: Block[];
+    used: boolean;
+    constructor(node: Node, stylesheet: Stylesheet);
+    apply(node: Node, stack: Node[]): void;
+    minify(code: MagicString): void;
+    transform(code: MagicString, attr: string): void;
+    validate(component: Component): void;
+}
+declare class Block {
+    global: boolean;
+    combinator: Node;
+    selectors: Node[];
+    start: number;
+    end: number;
+    should_encapsulate: boolean;
+    constructor(combinator: Node);
+    add(selector: Node): void;
+}
+export {};
diff --git a/node_modules/svelte/types/compile/css/Stylesheet.d.ts b/node_modules/svelte/types/compile/css/Stylesheet.d.ts
new file mode 100644
index 0000000..68d488b
--- /dev/null
+++ b/node_modules/svelte/types/compile/css/Stylesheet.d.ts
@@ -0,0 +1,56 @@
+import MagicString from 'magic-string';
+import Selector from './Selector';
+import Element from '../nodes/Element';
+import { Node, Ast } from '../../interfaces';
+import Component from '../Component';
+declare class Rule {
+    selectors: Selector[];
+    declarations: Declaration[];
+    node: Node;
+    parent: Atrule;
+    constructor(node: Node, stylesheet: any, parent?: Atrule);
+    apply(node: Element, stack: Element[]): void;
+    is_used(dev: boolean): boolean;
+    minify(code: MagicString, dev: boolean): void;
+    transform(code: MagicString, id: string, keyframes: Map<string, string>): boolean;
+    validate(component: Component): void;
+    warn_on_unused_selector(handler: (selector: Selector) => void): void;
+}
+declare class Declaration {
+    node: Node;
+    constructor(node: Node);
+    transform(code: MagicString, keyframes: Map<string, string>): void;
+    minify(code: MagicString): void;
+}
+declare class Atrule {
+    node: Node;
+    children: (Atrule | Rule)[];
+    constructor(node: Node);
+    apply(node: Element, stack: Element[]): void;
+    is_used(dev: boolean): boolean;
+    minify(code: MagicString, dev: boolean): void;
+    transform(code: MagicString, id: string, keyframes: Map<string, string>): void;
+    validate(component: Component): void;
+    warn_on_unused_selector(handler: (selector: Selector) => void): void;
+}
+export default class Stylesheet {
+    source: string;
+    ast: Ast;
+    filename: string;
+    dev: boolean;
+    has_styles: boolean;
+    id: string;
+    children: (Rule | Atrule)[];
+    keyframes: Map<string, string>;
+    nodes_with_css_class: Set<Node>;
+    constructor(source: string, ast: Ast, filename: string, dev: boolean);
+    apply(node: Element): void;
+    reify(): void;
+    render(file: string, should_transform_selectors: boolean): {
+        code: string;
+        map: import("magic-string").SourceMap;
+    };
+    validate(component: Component): void;
+    warn_on_unused_selectors(component: Component): void;
+}
+export {};
diff --git a/node_modules/svelte/types/compile/css/gather_possible_values.d.ts b/node_modules/svelte/types/compile/css/gather_possible_values.d.ts
new file mode 100644
index 0000000..f77bca7
--- /dev/null
+++ b/node_modules/svelte/types/compile/css/gather_possible_values.d.ts
@@ -0,0 +1,3 @@
+import { Node } from '../../interfaces';
+export declare const UNKNOWN: {};
+export declare function gather_possible_values(node: Node, set: Set<string | {}>): void;
diff --git a/node_modules/svelte/types/compile/index.d.ts b/node_modules/svelte/types/compile/index.d.ts
new file mode 100644
index 0000000..b78fdc3
--- /dev/null
+++ b/node_modules/svelte/types/compile/index.d.ts
@@ -0,0 +1,22 @@
+import { CompileOptions, Ast, Warning } from '../interfaces';
+export default function compile(source: string, options?: CompileOptions): {
+    js: any;
+    css: any;
+    ast: Ast;
+    warnings: Warning[];
+    vars: {
+        name: string;
+        export_name: string;
+        injected: boolean;
+        module: boolean;
+        mutated: boolean;
+        reassigned: boolean;
+        referenced: boolean;
+        writable: boolean;
+    }[];
+    stats: {
+        timings: {
+            total: number;
+        };
+    };
+};
diff --git a/node_modules/svelte/types/compile/internal-exports.d.ts b/node_modules/svelte/types/compile/internal-exports.d.ts
new file mode 100644
index 0000000..1829c31
--- /dev/null
+++ b/node_modules/svelte/types/compile/internal-exports.d.ts
@@ -0,0 +1,2 @@
+declare const _default: Set<string>;
+export default _default;
diff --git a/node_modules/svelte/types/compile/nodes/Action.d.ts b/node_modules/svelte/types/compile/nodes/Action.d.ts
new file mode 100644
index 0000000..a27e8fa
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Action.d.ts
@@ -0,0 +1,10 @@
+import Node from './shared/Node';
+import Expression from './shared/Expression';
+import Component from '../Component';
+export default class Action extends Node {
+    type: 'Action';
+    name: string;
+    expression: Expression;
+    uses_context: boolean;
+    constructor(component: Component, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Animation.d.ts b/node_modules/svelte/types/compile/nodes/Animation.d.ts
new file mode 100644
index 0000000..c0e1aaf
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Animation.d.ts
@@ -0,0 +1,9 @@
+import Node from './shared/Node';
+import Expression from './shared/Expression';
+import Component from '../Component';
+export default class Animation extends Node {
+    type: 'Animation';
+    name: string;
+    expression: Expression;
+    constructor(component: Component, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Attribute.d.ts b/node_modules/svelte/types/compile/nodes/Attribute.d.ts
new file mode 100644
index 0000000..da172c0
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Attribute.d.ts
@@ -0,0 +1,26 @@
+import Component from '../Component';
+import Node from './shared/Node';
+import Element from './Element';
+import Text from './Text';
+import Expression from './shared/Expression';
+export default class Attribute extends Node {
+    type: 'Attribute';
+    start: number;
+    end: number;
+    component: Component;
+    parent: Element;
+    name: string;
+    is_spread: boolean;
+    is_true: boolean;
+    is_dynamic: boolean;
+    is_static: boolean;
+    is_synthetic: boolean;
+    should_cache: boolean;
+    expression?: Expression;
+    chunks: (Text | Expression)[];
+    dependencies: Set<string>;
+    constructor(component: any, parent: any, scope: any, info: any);
+    get_dependencies(): any[];
+    get_value(block: any): any;
+    get_static_value(): string | true;
+}
diff --git a/node_modules/svelte/types/compile/nodes/AwaitBlock.d.ts b/node_modules/svelte/types/compile/nodes/AwaitBlock.d.ts
new file mode 100644
index 0000000..515fcbf
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/AwaitBlock.d.ts
@@ -0,0 +1,15 @@
+import Node from './shared/Node';
+import PendingBlock from './PendingBlock';
+import ThenBlock from './ThenBlock';
+import CatchBlock from './CatchBlock';
+import Expression from './shared/Expression';
+export default class AwaitBlock extends Node {
+    type: 'AwaitBlock';
+    expression: Expression;
+    value: string;
+    error: string;
+    pending: PendingBlock;
+    then: ThenBlock;
+    catch: CatchBlock;
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Binding.d.ts b/node_modules/svelte/types/compile/nodes/Binding.d.ts
new file mode 100644
index 0000000..e240c79
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Binding.d.ts
@@ -0,0 +1,15 @@
+import Node from './shared/Node';
+import Expression from './shared/Expression';
+import Component from '../Component';
+import TemplateScope from './shared/TemplateScope';
+export default class Binding extends Node {
+    type: 'Binding';
+    name: string;
+    expression: Expression;
+    is_contextual: boolean;
+    obj: string;
+    prop: string;
+    is_readonly: boolean;
+    constructor(component: Component, parent: any, scope: TemplateScope, info: any);
+    is_readonly_media_attribute(): boolean;
+}
diff --git a/node_modules/svelte/types/compile/nodes/Body.d.ts b/node_modules/svelte/types/compile/nodes/Body.d.ts
new file mode 100644
index 0000000..0b28b46
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Body.d.ts
@@ -0,0 +1,7 @@
+import Node from './shared/Node';
+import EventHandler from './EventHandler';
+export default class Body extends Node {
+    type: 'Body';
+    handlers: EventHandler[];
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/CatchBlock.d.ts b/node_modules/svelte/types/compile/nodes/CatchBlock.d.ts
new file mode 100644
index 0000000..e05166e
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/CatchBlock.d.ts
@@ -0,0 +1,7 @@
+import TemplateScope from './shared/TemplateScope';
+import AbstractBlock from './shared/AbstractBlock';
+export default class CatchBlock extends AbstractBlock {
+    type: 'CatchBlock';
+    scope: TemplateScope;
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Class.d.ts b/node_modules/svelte/types/compile/nodes/Class.d.ts
new file mode 100644
index 0000000..8d26435
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Class.d.ts
@@ -0,0 +1,8 @@
+import Node from './shared/Node';
+import Expression from './shared/Expression';
+export default class Class extends Node {
+    type: 'Class';
+    name: string;
+    expression: Expression;
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Comment.d.ts b/node_modules/svelte/types/compile/nodes/Comment.d.ts
new file mode 100644
index 0000000..b28cd3f
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Comment.d.ts
@@ -0,0 +1,6 @@
+import Node from './shared/Node';
+export default class Comment extends Node {
+    type: 'Comment';
+    data: string;
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/DebugTag.d.ts b/node_modules/svelte/types/compile/nodes/DebugTag.d.ts
new file mode 100644
index 0000000..bc7591a
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/DebugTag.d.ts
@@ -0,0 +1,7 @@
+import Node from './shared/Node';
+import Expression from './shared/Expression';
+export default class DebugTag extends Node {
+    type: 'DebugTag';
+    expressions: Expression[];
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/EachBlock.d.ts b/node_modules/svelte/types/compile/nodes/EachBlock.d.ts
new file mode 100644
index 0000000..d2383dc
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/EachBlock.d.ts
@@ -0,0 +1,27 @@
+import Node from './shared/Node';
+import ElseBlock from './ElseBlock';
+import Expression from './shared/Expression';
+import TemplateScope from './shared/TemplateScope';
+import AbstractBlock from './shared/AbstractBlock';
+import { Node as INode } from '../../interfaces';
+declare type Context = {
+    key: INode;
+    name?: string;
+    tail: string;
+};
+export default class EachBlock extends AbstractBlock {
+    type: 'EachBlock';
+    expression: Expression;
+    context_node: Node;
+    iterations: string;
+    index: string;
+    context: string;
+    key: Expression;
+    scope: TemplateScope;
+    contexts: Array<Context>;
+    has_animation: boolean;
+    has_binding: boolean;
+    else?: ElseBlock;
+    constructor(component: any, parent: any, scope: any, info: any);
+}
+export {};
diff --git a/node_modules/svelte/types/compile/nodes/Element.d.ts b/node_modules/svelte/types/compile/nodes/Element.d.ts
new file mode 100644
index 0000000..ffd0da6
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Element.d.ts
@@ -0,0 +1,35 @@
+import Node from './shared/Node';
+import Attribute from './Attribute';
+import Binding from './Binding';
+import EventHandler from './EventHandler';
+import Transition from './Transition';
+import Animation from './Animation';
+import Action from './Action';
+import Class from './Class';
+import Let from './Let';
+import TemplateScope from './shared/TemplateScope';
+import { INode } from './interfaces';
+export default class Element extends Node {
+    type: 'Element';
+    name: string;
+    scope: TemplateScope;
+    attributes: Attribute[];
+    actions: Action[];
+    bindings: Binding[];
+    classes: Class[];
+    handlers: EventHandler[];
+    lets: Let[];
+    intro?: Transition;
+    outro?: Transition;
+    animation?: Animation;
+    children: INode[];
+    namespace: string;
+    constructor(component: any, parent: any, scope: any, info: any);
+    validate(): void;
+    validate_attributes(): void;
+    validate_bindings(): void;
+    validate_content(): void;
+    validate_event_handlers(): void;
+    is_media_node(): boolean;
+    add_css_class(class_name?: string): void;
+}
diff --git a/node_modules/svelte/types/compile/nodes/ElseBlock.d.ts b/node_modules/svelte/types/compile/nodes/ElseBlock.d.ts
new file mode 100644
index 0000000..2feacc5
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/ElseBlock.d.ts
@@ -0,0 +1,6 @@
+import AbstractBlock from './shared/AbstractBlock';
+import Component from '../Component';
+export default class ElseBlock extends AbstractBlock {
+    type: 'ElseBlock';
+    constructor(component: Component, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/EventHandler.d.ts b/node_modules/svelte/types/compile/nodes/EventHandler.d.ts
new file mode 100644
index 0000000..2d07e37
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/EventHandler.d.ts
@@ -0,0 +1,15 @@
+import Node from './shared/Node';
+import Expression from './shared/Expression';
+import Component from '../Component';
+import Block from '../render-dom/Block';
+export default class EventHandler extends Node {
+    type: 'EventHandler';
+    name: string;
+    modifiers: Set<string>;
+    expression: Expression;
+    handler_name: string;
+    uses_context: boolean;
+    can_make_passive: boolean;
+    constructor(component: Component, parent: any, template_scope: any, info: any);
+    render(block: Block): string;
+}
diff --git a/node_modules/svelte/types/compile/nodes/Fragment.d.ts b/node_modules/svelte/types/compile/nodes/Fragment.d.ts
new file mode 100644
index 0000000..410f0e7
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Fragment.d.ts
@@ -0,0 +1,12 @@
+import Node from './shared/Node';
+import Component from '../Component';
+import Block from '../render-dom/Block';
+import TemplateScope from './shared/TemplateScope';
+import { INode } from './interfaces';
+export default class Fragment extends Node {
+    type: 'Fragment';
+    block: Block;
+    children: INode[];
+    scope: TemplateScope;
+    constructor(component: Component, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Head.d.ts b/node_modules/svelte/types/compile/nodes/Head.d.ts
new file mode 100644
index 0000000..1d34405
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Head.d.ts
@@ -0,0 +1,6 @@
+import Node from './shared/Node';
+export default class Head extends Node {
+    type: 'Head';
+    children: any[];
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/IfBlock.d.ts b/node_modules/svelte/types/compile/nodes/IfBlock.d.ts
new file mode 100644
index 0000000..942a7f8
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/IfBlock.d.ts
@@ -0,0 +1,9 @@
+import ElseBlock from './ElseBlock';
+import Expression from './shared/Expression';
+import AbstractBlock from './shared/AbstractBlock';
+export default class IfBlock extends AbstractBlock {
+    type: 'IfBlock';
+    expression: Expression;
+    else: ElseBlock;
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/InlineComponent.d.ts b/node_modules/svelte/types/compile/nodes/InlineComponent.d.ts
new file mode 100644
index 0000000..4722e31
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/InlineComponent.d.ts
@@ -0,0 +1,21 @@
+import Node from './shared/Node';
+import Attribute from './Attribute';
+import Binding from './Binding';
+import EventHandler from './EventHandler';
+import Expression from './shared/Expression';
+import Component from '../Component';
+import Let from './Let';
+import TemplateScope from './shared/TemplateScope';
+import { INode } from './interfaces';
+export default class InlineComponent extends Node {
+    type: 'InlineComponent';
+    name: string;
+    expression: Expression;
+    attributes: Attribute[];
+    bindings: Binding[];
+    handlers: EventHandler[];
+    lets: Let[];
+    children: INode[];
+    scope: TemplateScope;
+    constructor(component: Component, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Let.d.ts b/node_modules/svelte/types/compile/nodes/Let.d.ts
new file mode 100644
index 0000000..4d9e870
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Let.d.ts
@@ -0,0 +1,9 @@
+import Node from './shared/Node';
+import Component from '../Component';
+export default class Let extends Node {
+    type: 'Let';
+    name: string;
+    value: string;
+    names: string[];
+    constructor(component: Component, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/MustacheTag.d.ts b/node_modules/svelte/types/compile/nodes/MustacheTag.d.ts
new file mode 100644
index 0000000..f659e3d
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/MustacheTag.d.ts
@@ -0,0 +1,4 @@
+import Tag from './shared/Tag';
+export default class MustacheTag extends Tag {
+    type: 'MustacheTag';
+}
diff --git a/node_modules/svelte/types/compile/nodes/Options.d.ts b/node_modules/svelte/types/compile/nodes/Options.d.ts
new file mode 100644
index 0000000..d114122
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Options.d.ts
@@ -0,0 +1,4 @@
+import Node from './shared/Node';
+export default class Options extends Node {
+    type: 'Options';
+}
diff --git a/node_modules/svelte/types/compile/nodes/PendingBlock.d.ts b/node_modules/svelte/types/compile/nodes/PendingBlock.d.ts
new file mode 100644
index 0000000..cc8091d
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/PendingBlock.d.ts
@@ -0,0 +1,5 @@
+import AbstractBlock from './shared/AbstractBlock';
+export default class PendingBlock extends AbstractBlock {
+    type: 'PendingBlock';
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/RawMustacheTag.d.ts b/node_modules/svelte/types/compile/nodes/RawMustacheTag.d.ts
new file mode 100644
index 0000000..98b279d
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/RawMustacheTag.d.ts
@@ -0,0 +1,4 @@
+import Tag from './shared/Tag';
+export default class RawMustacheTag extends Tag {
+    type: 'RawMustacheTag';
+}
diff --git a/node_modules/svelte/types/compile/nodes/Slot.d.ts b/node_modules/svelte/types/compile/nodes/Slot.d.ts
new file mode 100644
index 0000000..5b96830
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Slot.d.ts
@@ -0,0 +1,13 @@
+import Element from './Element';
+import Attribute from './Attribute';
+import Component from '../Component';
+import TemplateScope from './shared/TemplateScope';
+import { INode } from './interfaces';
+export default class Slot extends Element {
+    type: 'Element';
+    name: string;
+    children: INode[];
+    slot_name: string;
+    values: Map<string, Attribute>;
+    constructor(component: Component, parent: INode, scope: TemplateScope, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Text.d.ts b/node_modules/svelte/types/compile/nodes/Text.d.ts
new file mode 100644
index 0000000..c10d1c3
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Text.d.ts
@@ -0,0 +1,10 @@
+import Node from './shared/Node';
+import Component from '../Component';
+import TemplateScope from './shared/TemplateScope';
+import { INode } from './interfaces';
+export default class Text extends Node {
+    type: 'Text';
+    data: string;
+    use_space: boolean;
+    constructor(component: Component, parent: INode, scope: TemplateScope, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/ThenBlock.d.ts b/node_modules/svelte/types/compile/nodes/ThenBlock.d.ts
new file mode 100644
index 0000000..06c917d
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/ThenBlock.d.ts
@@ -0,0 +1,7 @@
+import TemplateScope from './shared/TemplateScope';
+import AbstractBlock from './shared/AbstractBlock';
+export default class ThenBlock extends AbstractBlock {
+    type: 'ThenBlock';
+    scope: TemplateScope;
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Title.d.ts b/node_modules/svelte/types/compile/nodes/Title.d.ts
new file mode 100644
index 0000000..bb4e969
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Title.d.ts
@@ -0,0 +1,9 @@
+import Node from './shared/Node';
+import { Children } from './shared/map_children';
+import Component from '../Component';
+export default class Title extends Node {
+    type: 'Title';
+    children: Children;
+    should_cache: boolean;
+    constructor(component: Component, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Transition.d.ts b/node_modules/svelte/types/compile/nodes/Transition.d.ts
new file mode 100644
index 0000000..b0fba36
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Transition.d.ts
@@ -0,0 +1,11 @@
+import Node from './shared/Node';
+import Expression from './shared/Expression';
+import Component from '../Component';
+export default class Transition extends Node {
+    type: 'Transition';
+    name: string;
+    directive: string;
+    expression: Expression;
+    is_local: boolean;
+    constructor(component: Component, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/Window.d.ts b/node_modules/svelte/types/compile/nodes/Window.d.ts
new file mode 100644
index 0000000..b9de1f3
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/Window.d.ts
@@ -0,0 +1,11 @@
+import Node from './shared/Node';
+import Binding from './Binding';
+import EventHandler from './EventHandler';
+import Action from './Action';
+export default class Window extends Node {
+    type: 'Window';
+    handlers: EventHandler[];
+    bindings: Binding[];
+    actions: Action[];
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/interfaces.d.ts b/node_modules/svelte/types/compile/nodes/interfaces.d.ts
new file mode 100644
index 0000000..9dc11db
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/interfaces.d.ts
@@ -0,0 +1,31 @@
+import Tag from './shared/Tag';
+import Action from './Action';
+import Animation from './Animation';
+import Attribute from './Attribute';
+import AwaitBlock from './AwaitBlock';
+import Binding from './Binding';
+import Body from './Body';
+import CatchBlock from './CatchBlock';
+import Class from './Class';
+import Comment from './Comment';
+import DebugTag from './DebugTag';
+import EachBlock from './EachBlock';
+import Element from './Element';
+import ElseBlock from './ElseBlock';
+import EventHandler from './EventHandler';
+import Fragment from './Fragment';
+import Head from './Head';
+import IfBlock from './IfBlock';
+import InlineComponent from './InlineComponent';
+import Let from './Let';
+import MustacheTag from './MustacheTag';
+import Options from './Options';
+import PendingBlock from './PendingBlock';
+import RawMustacheTag from './RawMustacheTag';
+import Slot from './Slot';
+import Text from './Text';
+import ThenBlock from './ThenBlock';
+import Title from './Title';
+import Transition from './Transition';
+import Window from './Window';
+export declare type INode = Action | Animation | Attribute | AwaitBlock | Binding | Body | CatchBlock | Class | Comment | DebugTag | EachBlock | Element | ElseBlock | EventHandler | Fragment | Head | IfBlock | InlineComponent | Let | MustacheTag | Options | PendingBlock | RawMustacheTag | Slot | Tag | Text | ThenBlock | Title | Transition | Window;
diff --git a/node_modules/svelte/types/compile/nodes/shared/AbstractBlock.d.ts b/node_modules/svelte/types/compile/nodes/shared/AbstractBlock.d.ts
new file mode 100644
index 0000000..2332202
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/shared/AbstractBlock.d.ts
@@ -0,0 +1,10 @@
+import Block from '../../render-dom/Block';
+import Component from './../../Component';
+import Node from './Node';
+import { INode } from '../interfaces';
+export default class AbstractBlock extends Node {
+    block: Block;
+    children: INode[];
+    constructor(component: Component, parent: any, scope: any, info: any);
+    warn_if_empty_block(): void;
+}
diff --git a/node_modules/svelte/types/compile/nodes/shared/Expression.d.ts b/node_modules/svelte/types/compile/nodes/shared/Expression.d.ts
new file mode 100644
index 0000000..f0cdfe0
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/shared/Expression.d.ts
@@ -0,0 +1,30 @@
+import Component from '../../Component';
+import { Scope } from '../../utils/scope';
+import { Node } from '../../../interfaces';
+import Wrapper from '../../render-dom/wrappers/shared/Wrapper';
+import TemplateScope from './TemplateScope';
+import Block from '../../render-dom/Block';
+import { INode } from '../interfaces';
+declare type Owner = Wrapper | INode;
+export default class Expression {
+    type: 'Expression';
+    component: Component;
+    owner: Owner;
+    node: any;
+    snippet: string;
+    references: Set<string>;
+    dependencies: Set<string>;
+    contextual_dependencies: Set<string>;
+    template_scope: TemplateScope;
+    scope: Scope;
+    scope_map: WeakMap<Node, Scope>;
+    is_synthetic: boolean;
+    declarations: string[];
+    uses_context: boolean;
+    rendered: string;
+    constructor(component: Component, owner: Owner, template_scope: TemplateScope, info: any);
+    dynamic_dependencies(): string[];
+    get_precedence(): number;
+    render(block?: Block): string;
+}
+export {};
diff --git a/node_modules/svelte/types/compile/nodes/shared/Node.d.ts b/node_modules/svelte/types/compile/nodes/shared/Node.d.ts
new file mode 100644
index 0000000..be28e55
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/shared/Node.d.ts
@@ -0,0 +1,20 @@
+import Attribute from './../Attribute';
+import Component from './../../Component';
+import { INode } from '../interfaces';
+export default class Node {
+    readonly start: number;
+    readonly end: number;
+    readonly component: Component;
+    readonly parent: INode;
+    readonly type: string;
+    prev?: INode;
+    next?: INode;
+    can_use_innerhtml: boolean;
+    var: string;
+    attributes: Attribute[];
+    constructor(component: Component, parent: any, scope: any, info: any);
+    cannot_use_innerhtml(): void;
+    find_nearest(selector: RegExp): any;
+    get_static_attribute_value(name: string): string | true;
+    has_ancestor(type: string): any;
+}
diff --git a/node_modules/svelte/types/compile/nodes/shared/Tag.d.ts b/node_modules/svelte/types/compile/nodes/shared/Tag.d.ts
new file mode 100644
index 0000000..8c5db18
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/shared/Tag.d.ts
@@ -0,0 +1,8 @@
+import Node from './Node';
+import Expression from './Expression';
+export default class Tag extends Node {
+    type: 'MustacheTag' | 'RawMustacheTag';
+    expression: Expression;
+    should_cache: boolean;
+    constructor(component: any, parent: any, scope: any, info: any);
+}
diff --git a/node_modules/svelte/types/compile/nodes/shared/TemplateScope.d.ts b/node_modules/svelte/types/compile/nodes/shared/TemplateScope.d.ts
new file mode 100644
index 0000000..78c6755
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/shared/TemplateScope.d.ts
@@ -0,0 +1,19 @@
+import EachBlock from '../EachBlock';
+import ThenBlock from '../ThenBlock';
+import CatchBlock from '../CatchBlock';
+import InlineComponent from '../InlineComponent';
+import Element from '../Element';
+declare type NodeWithScope = EachBlock | ThenBlock | CatchBlock | InlineComponent | Element;
+export default class TemplateScope {
+    names: Set<string>;
+    dependencies_for_name: Map<string, Set<string>>;
+    owners: Map<string, NodeWithScope>;
+    parent?: TemplateScope;
+    constructor(parent?: TemplateScope);
+    add(name: any, dependencies: Set<string>, owner: any): this;
+    child(): TemplateScope;
+    is_top_level(name: string): any;
+    get_owner(name: string): NodeWithScope;
+    is_let(name: string): boolean;
+}
+export {};
diff --git a/node_modules/svelte/types/compile/nodes/shared/map_children.d.ts b/node_modules/svelte/types/compile/nodes/shared/map_children.d.ts
new file mode 100644
index 0000000..028de8f
--- /dev/null
+++ b/node_modules/svelte/types/compile/nodes/shared/map_children.d.ts
@@ -0,0 +1,18 @@
+import AwaitBlock from '../AwaitBlock';
+import Body from '../Body';
+import Comment from '../Comment';
+import EachBlock from '../EachBlock';
+import Element from '../Element';
+import Head from '../Head';
+import IfBlock from '../IfBlock';
+import InlineComponent from '../InlineComponent';
+import MustacheTag from '../MustacheTag';
+import Options from '../Options';
+import RawMustacheTag from '../RawMustacheTag';
+import DebugTag from '../DebugTag';
+import Text from '../Text';
+import Title from '../Title';
+import Window from '../Window';
+import { Node } from '../../../interfaces';
+export declare type Children = ReturnType<typeof map_children>;
+export default function map_children(component: any, parent: any, scope: any, children: Node[]): (AwaitBlock | Body | Comment | DebugTag | EachBlock | Element | Head | IfBlock | InlineComponent | MustacheTag | Options | RawMustacheTag | Text | Title | Window)[];
diff --git a/node_modules/svelte/types/compile/render-dom/Block.d.ts b/node_modules/svelte/types/compile/render-dom/Block.d.ts
new file mode 100644
index 0000000..2538c68
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/Block.d.ts
@@ -0,0 +1,71 @@
+import CodeBuilder from '../utils/CodeBuilder';
+import Renderer from './Renderer';
+import Wrapper from './wrappers/shared/Wrapper';
+export interface BlockOptions {
+    parent?: Block;
+    name: string;
+    renderer?: Renderer;
+    comment?: string;
+    key?: string;
+    bindings?: Map<string, {
+        object: string;
+        property: string;
+        snippet: string;
+    }>;
+    dependencies?: Set<string>;
+}
+export default class Block {
+    parent?: Block;
+    renderer: Renderer;
+    name: string;
+    comment?: string;
+    wrappers: Wrapper[];
+    key: string;
+    first: string;
+    dependencies: Set<string>;
+    bindings: Map<string, {
+        object: string;
+        property: string;
+        snippet: string;
+    }>;
+    builders: {
+        init: CodeBuilder;
+        create: CodeBuilder;
+        claim: CodeBuilder;
+        hydrate: CodeBuilder;
+        mount: CodeBuilder;
+        measure: CodeBuilder;
+        fix: CodeBuilder;
+        animate: CodeBuilder;
+        intro: CodeBuilder;
+        update: CodeBuilder;
+        outro: CodeBuilder;
+        destroy: CodeBuilder;
+    };
+    event_listeners: string[];
+    maintain_context: boolean;
+    has_animation: boolean;
+    has_intros: boolean;
+    has_outros: boolean;
+    has_intro_method: boolean;
+    has_outro_method: boolean;
+    outros: number;
+    aliases: Map<string, string>;
+    variables: Map<string, string>;
+    get_unique_name: (name: string) => string;
+    has_update_method: boolean;
+    autofocus: string;
+    constructor(options: BlockOptions);
+    assign_variable_names(): void;
+    add_dependencies(dependencies: Set<string>): void;
+    add_element(name: string, render_statement: string, claim_statement: string, parent_node: string, no_detach?: boolean): void;
+    add_intro(local?: boolean): void;
+    add_outro(local?: boolean): void;
+    add_animation(): void;
+    add_variable(name: string, init?: string): void;
+    alias(name: string): string;
+    child(options: BlockOptions): Block;
+    get_contents(local_key?: string): string;
+    render_listeners(chunk?: string): void;
+    toString(): string;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/Renderer.d.ts b/node_modules/svelte/types/compile/render-dom/Renderer.d.ts
new file mode 100644
index 0000000..3c88a40
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/Renderer.d.ts
@@ -0,0 +1,21 @@
+import Block from './Block';
+import { CompileOptions } from '../../interfaces';
+import Component from '../Component';
+import FragmentWrapper from './wrappers/Fragment';
+import CodeBuilder from '../utils/CodeBuilder';
+export default class Renderer {
+    component: Component;
+    options: CompileOptions;
+    blocks: (Block | string)[];
+    readonly: Set<string>;
+    meta_bindings: CodeBuilder;
+    binding_groups: string[];
+    block: Block;
+    fragment: FragmentWrapper;
+    file_var: string;
+    locate: (c: number) => {
+        line: number;
+        column: number;
+    };
+    constructor(component: Component, options: CompileOptions);
+}
diff --git a/node_modules/svelte/types/compile/render-dom/index.d.ts b/node_modules/svelte/types/compile/render-dom/index.d.ts
new file mode 100644
index 0000000..d2f2617
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/index.d.ts
@@ -0,0 +1,3 @@
+import Component from '../Component';
+import { CompileOptions } from '../../interfaces';
+export default function dom(component: Component, options: CompileOptions): string;
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/AwaitBlock.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/AwaitBlock.d.ts
new file mode 100644
index 0000000..8cea183
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/AwaitBlock.d.ts
@@ -0,0 +1,26 @@
+import Wrapper from './shared/Wrapper';
+import Renderer from '../Renderer';
+import Block from '../Block';
+import AwaitBlock from '../../nodes/AwaitBlock';
+import FragmentWrapper from './Fragment';
+import PendingBlock from '../../nodes/PendingBlock';
+import ThenBlock from '../../nodes/ThenBlock';
+import CatchBlock from '../../nodes/CatchBlock';
+declare class AwaitBlockBranch extends Wrapper {
+    node: PendingBlock | ThenBlock | CatchBlock;
+    block: Block;
+    fragment: FragmentWrapper;
+    is_dynamic: boolean;
+    var: any;
+    constructor(status: string, renderer: Renderer, block: Block, parent: Wrapper, node: AwaitBlock, strip_whitespace: boolean, next_sibling: Wrapper);
+}
+export default class AwaitBlockWrapper extends Wrapper {
+    node: AwaitBlock;
+    pending: AwaitBlockBranch;
+    then: AwaitBlockBranch;
+    catch: AwaitBlockBranch;
+    var: string;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: AwaitBlock, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
+export {};
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Body.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Body.d.ts
new file mode 100644
index 0000000..232a2d0
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Body.d.ts
@@ -0,0 +1,7 @@
+import Block from '../Block';
+import Wrapper from './shared/Wrapper';
+import Body from '../../nodes/Body';
+export default class BodyWrapper extends Wrapper {
+    node: Body;
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/DebugTag.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/DebugTag.d.ts
new file mode 100644
index 0000000..2df1895
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/DebugTag.d.ts
@@ -0,0 +1,9 @@
+import Renderer from '../Renderer';
+import Wrapper from './shared/Wrapper';
+import Block from '../Block';
+import DebugTag from '../../nodes/DebugTag';
+export default class DebugTagWrapper extends Wrapper {
+    node: DebugTag;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: DebugTag, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/EachBlock.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/EachBlock.d.ts
new file mode 100644
index 0000000..0ec18a8
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/EachBlock.d.ts
@@ -0,0 +1,38 @@
+import Renderer from '../Renderer';
+import Block from '../Block';
+import Wrapper from './shared/Wrapper';
+import EachBlock from '../../nodes/EachBlock';
+import FragmentWrapper from './Fragment';
+import ElseBlock from '../../nodes/ElseBlock';
+export declare class ElseBlockWrapper extends Wrapper {
+    node: ElseBlock;
+    block: Block;
+    fragment: FragmentWrapper;
+    is_dynamic: boolean;
+    var: any;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: ElseBlock, strip_whitespace: boolean, next_sibling: Wrapper);
+}
+export default class EachBlockWrapper extends Wrapper {
+    block: Block;
+    node: EachBlock;
+    fragment: FragmentWrapper;
+    else?: ElseBlockWrapper;
+    vars: {
+        anchor: string;
+        create_each_block: string;
+        each_block_value: string;
+        get_each_context: string;
+        iterations: string;
+        fixed_length: number;
+        data_length: string;
+        view_length: string;
+        length: string;
+    };
+    context_props: string[];
+    index_name: string;
+    var: string;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: EachBlock, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+    render_keyed(block: Block, parent_node: string, parent_nodes: string, snippet: string): void;
+    render_unkeyed(block: Block, parent_node: string, parent_nodes: string, snippet: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Element/Attribute.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Element/Attribute.d.ts
new file mode 100644
index 0000000..6c629ab
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Element/Attribute.d.ts
@@ -0,0 +1,10 @@
+import Attribute from '../../../nodes/Attribute';
+import Block from '../../Block';
+import ElementWrapper from './index';
+export default class AttributeWrapper {
+    node: Attribute;
+    parent: ElementWrapper;
+    constructor(parent: ElementWrapper, block: Block, node: Attribute);
+    render(block: Block): void;
+    stringify(): string;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Element/Binding.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Element/Binding.d.ts
new file mode 100644
index 0000000..f128a8c
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Element/Binding.d.ts
@@ -0,0 +1,21 @@
+import Binding from '../../../nodes/Binding';
+import ElementWrapper from '.';
+import Block from '../../Block';
+export default class BindingWrapper {
+    node: Binding;
+    parent: ElementWrapper;
+    object: string;
+    handler: {
+        uses_context: boolean;
+        mutation: string;
+        contextual_dependencies: Set<string>;
+        snippet?: string;
+    };
+    snippet: string;
+    is_readonly: boolean;
+    needs_lock: boolean;
+    constructor(block: Block, node: Binding, parent: ElementWrapper);
+    get_dependencies(): Set<string>;
+    is_readonly_media_attribute(): boolean;
+    render(block: Block, lock: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Element/StyleAttribute.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Element/StyleAttribute.d.ts
new file mode 100644
index 0000000..9ddae2a
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Element/StyleAttribute.d.ts
@@ -0,0 +1,15 @@
+import Attribute from '../../../nodes/Attribute';
+import Block from '../../Block';
+import AttributeWrapper from './Attribute';
+import ElementWrapper from '.';
+import Expression from '../../../nodes/shared/Expression';
+import Text from '../../../nodes/Text';
+export interface StyleProp {
+    key: string;
+    value: (Text | Expression)[];
+}
+export default class StyleAttributeWrapper extends AttributeWrapper {
+    node: Attribute;
+    parent: ElementWrapper;
+    render(block: Block): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Element/fix_attribute_casing.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Element/fix_attribute_casing.d.ts
new file mode 100644
index 0000000..fb7c2f6
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Element/fix_attribute_casing.d.ts
@@ -0,0 +1 @@
+export default function fix_attribute_casing(name: any): any;
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Element/index.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Element/index.d.ts
new file mode 100644
index 0000000..291c04e
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Element/index.d.ts
@@ -0,0 +1,29 @@
+import Renderer from '../../Renderer';
+import Element from '../../../nodes/Element';
+import Wrapper from '../shared/Wrapper';
+import Block from '../../Block';
+import FragmentWrapper from '../Fragment';
+import AttributeWrapper from './Attribute';
+import Binding from './Binding';
+export default class ElementWrapper extends Wrapper {
+    node: Element;
+    fragment: FragmentWrapper;
+    attributes: AttributeWrapper[];
+    bindings: Binding[];
+    class_dependencies: string[];
+    slot_block: Block;
+    select_binding_dependencies?: Set<string>;
+    var: string;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: Element, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+    get_render_statement(): string;
+    get_claim_statement(nodes: string): string;
+    add_bindings(block: Block): void;
+    add_attributes(block: Block): void;
+    add_spread_attributes(block: Block): void;
+    add_event_handlers(block: Block): void;
+    add_transitions(block: Block): void;
+    add_animation(block: Block): void;
+    add_actions(block: Block): void;
+    add_classes(block: Block): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Fragment.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Fragment.d.ts
new file mode 100644
index 0000000..e8ecb2a
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Fragment.d.ts
@@ -0,0 +1,9 @@
+import Wrapper from './shared/Wrapper';
+import { INode } from '../../nodes/interfaces';
+import Renderer from '../Renderer';
+import Block from '../Block';
+export default class FragmentWrapper {
+    nodes: Wrapper[];
+    constructor(renderer: Renderer, block: Block, nodes: INode[], parent: Wrapper, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Head.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Head.d.ts
new file mode 100644
index 0000000..a481bf5
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Head.d.ts
@@ -0,0 +1,10 @@
+import Wrapper from './shared/Wrapper';
+import Renderer from '../Renderer';
+import Block from '../Block';
+import Head from '../../nodes/Head';
+import FragmentWrapper from './Fragment';
+export default class HeadWrapper extends Wrapper {
+    fragment: FragmentWrapper;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: Head, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/IfBlock.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/IfBlock.d.ts
new file mode 100644
index 0000000..0abd1d0
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/IfBlock.d.ts
@@ -0,0 +1,42 @@
+import Wrapper from './shared/Wrapper';
+import Renderer from '../Renderer';
+import Block from '../Block';
+import EachBlock from '../../nodes/EachBlock';
+import IfBlock from '../../nodes/IfBlock';
+import ElseBlock from '../../nodes/ElseBlock';
+import FragmentWrapper from './Fragment';
+declare class IfBlockBranch extends Wrapper {
+    block: Block;
+    fragment: FragmentWrapper;
+    condition: string;
+    is_dynamic: boolean;
+    var: any;
+    constructor(renderer: Renderer, block: Block, parent: IfBlockWrapper, node: IfBlock | ElseBlock, strip_whitespace: boolean, next_sibling: Wrapper);
+}
+export default class IfBlockWrapper extends Wrapper {
+    node: IfBlock;
+    branches: IfBlockBranch[];
+    var: string;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: EachBlock, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+    render_compound(block: Block, parent_node: string, parent_nodes: string, dynamic: any, { name, anchor, has_else, if_name, has_transitions }: {
+        name: any;
+        anchor: any;
+        has_else: any;
+        if_name: any;
+        has_transitions: any;
+    }, detaching: any): void;
+    render_compound_with_outros(block: Block, parent_node: string, parent_nodes: string, dynamic: any, { name, anchor, has_else, has_transitions }: {
+        name: any;
+        anchor: any;
+        has_else: any;
+        has_transitions: any;
+    }, detaching: any): void;
+    render_simple(block: Block, parent_node: string, parent_nodes: string, dynamic: any, { name, anchor, if_name, has_transitions }: {
+        name: any;
+        anchor: any;
+        if_name: any;
+        has_transitions: any;
+    }, detaching: any): void;
+}
+export {};
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/InlineComponent/index.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/InlineComponent/index.d.ts
new file mode 100644
index 0000000..7848b9a
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/InlineComponent/index.d.ts
@@ -0,0 +1,18 @@
+import Wrapper from '../shared/Wrapper';
+import Renderer from '../../Renderer';
+import Block from '../../Block';
+import InlineComponent from '../../../nodes/InlineComponent';
+import FragmentWrapper from '../Fragment';
+import TemplateScope from '../../../nodes/shared/TemplateScope';
+export default class InlineComponentWrapper extends Wrapper {
+    var: string;
+    slots: Map<string, {
+        block: Block;
+        scope: TemplateScope;
+        fn?: string;
+    }>;
+    node: InlineComponent;
+    fragment: FragmentWrapper;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: InlineComponent, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/MustacheTag.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/MustacheTag.d.ts
new file mode 100644
index 0000000..7c0a748
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/MustacheTag.d.ts
@@ -0,0 +1,11 @@
+import Renderer from '../Renderer';
+import Block from '../Block';
+import Tag from './shared/Tag';
+import Wrapper from './shared/Wrapper';
+import MustacheTag from '../../nodes/MustacheTag';
+import RawMustacheTag from '../../nodes/RawMustacheTag';
+export default class MustacheTagWrapper extends Tag {
+    var: string;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: MustacheTag | RawMustacheTag);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/RawMustacheTag.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/RawMustacheTag.d.ts
new file mode 100644
index 0000000..b88322d
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/RawMustacheTag.d.ts
@@ -0,0 +1,11 @@
+import Renderer from '../Renderer';
+import Block from '../Block';
+import Tag from './shared/Tag';
+import Wrapper from './shared/Wrapper';
+import MustacheTag from '../../nodes/MustacheTag';
+import RawMustacheTag from '../../nodes/RawMustacheTag';
+export default class RawMustacheTagWrapper extends Tag {
+    var: string;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: MustacheTag | RawMustacheTag);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Slot.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Slot.d.ts
new file mode 100644
index 0000000..47ced5c
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Slot.d.ts
@@ -0,0 +1,13 @@
+import Wrapper from './shared/Wrapper';
+import Renderer from '../Renderer';
+import Block from '../Block';
+import Slot from '../../nodes/Slot';
+import FragmentWrapper from './Fragment';
+export default class SlotWrapper extends Wrapper {
+    node: Slot;
+    fragment: FragmentWrapper;
+    var: string;
+    dependencies: Set<string>;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: Slot, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Text.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Text.d.ts
new file mode 100644
index 0000000..74a87bc
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Text.d.ts
@@ -0,0 +1,12 @@
+import Renderer from '../Renderer';
+import Block from '../Block';
+import Text from '../../nodes/Text';
+import Wrapper from './shared/Wrapper';
+export default class TextWrapper extends Wrapper {
+    node: Text;
+    data: string;
+    skip: boolean;
+    var: string;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: Text, data: string);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Title.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Title.d.ts
new file mode 100644
index 0000000..9a10451
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Title.d.ts
@@ -0,0 +1,9 @@
+import Wrapper from './shared/Wrapper';
+import Renderer from '../Renderer';
+import Block from '../Block';
+import Title from '../../nodes/Title';
+export default class TitleWrapper extends Wrapper {
+    node: Title;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: Title, strip_whitespace: boolean, next_sibling: Wrapper);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/Window.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/Window.d.ts
new file mode 100644
index 0000000..1a26e3a
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/Window.d.ts
@@ -0,0 +1,10 @@
+import Renderer from '../Renderer';
+import Block from '../Block';
+import Wrapper from './shared/Wrapper';
+import Window from '../../nodes/Window';
+import { INode } from '../../nodes/interfaces';
+export default class WindowWrapper extends Wrapper {
+    node: Window;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: INode);
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/shared/Tag.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/shared/Tag.d.ts
new file mode 100644
index 0000000..8453021
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/shared/Tag.d.ts
@@ -0,0 +1,12 @@
+import Wrapper from './Wrapper';
+import Renderer from '../../Renderer';
+import Block from '../../Block';
+import MustacheTag from '../../../nodes/MustacheTag';
+import RawMustacheTag from '../../../nodes/RawMustacheTag';
+export default class Tag extends Wrapper {
+    node: MustacheTag | RawMustacheTag;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: MustacheTag | RawMustacheTag);
+    rename_this_method(block: Block, update: ((value: string) => string)): {
+        init: string;
+    };
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/shared/Wrapper.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/shared/Wrapper.d.ts
new file mode 100644
index 0000000..f69f5ec
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/shared/Wrapper.d.ts
@@ -0,0 +1,18 @@
+import Renderer from '../../Renderer';
+import Block from '../../Block';
+import { INode } from '../../../nodes/interfaces';
+export default class Wrapper {
+    renderer: Renderer;
+    parent: Wrapper;
+    node: INode;
+    prev: Wrapper | null;
+    next: Wrapper | null;
+    var: string;
+    can_use_innerhtml: boolean;
+    constructor(renderer: Renderer, block: Block, parent: Wrapper, node: INode);
+    cannot_use_innerhtml(): void;
+    get_or_create_anchor(block: Block, parent_node: string, parent_nodes: string): string;
+    get_update_mount_node(anchor: string): string;
+    is_dom_node(): boolean;
+    render(block: Block, parent_node: string, parent_nodes: string): void;
+}
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/shared/add_actions.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/shared/add_actions.d.ts
new file mode 100644
index 0000000..6630ff8
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/shared/add_actions.d.ts
@@ -0,0 +1,4 @@
+import Block from '../../Block';
+import Action from '../../../nodes/Action';
+import Component from '../../../Component';
+export default function add_actions(component: Component, block: Block, target: string, actions: Action[]): void;
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/shared/add_event_handlers.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/shared/add_event_handlers.d.ts
new file mode 100644
index 0000000..2d00d70
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/shared/add_event_handlers.d.ts
@@ -0,0 +1,3 @@
+import Block from '../../Block';
+import EventHandler from '../../../nodes/EventHandler';
+export default function add_event_handlers(block: Block, target: string, handlers: EventHandler[]): void;
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/shared/create_debugging_comment.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/shared/create_debugging_comment.d.ts
new file mode 100644
index 0000000..a8155e0
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/shared/create_debugging_comment.d.ts
@@ -0,0 +1,3 @@
+import Component from '../../../Component';
+import { INode } from '../../../nodes/interfaces';
+export default function create_debugging_comment(node: INode, component: Component): string;
diff --git a/node_modules/svelte/types/compile/render-dom/wrappers/shared/get_context_merger.d.ts b/node_modules/svelte/types/compile/render-dom/wrappers/shared/get_context_merger.d.ts
new file mode 100644
index 0000000..b6ba550
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-dom/wrappers/shared/get_context_merger.d.ts
@@ -0,0 +1,2 @@
+import Let from '../../../nodes/Let';
+export declare function get_context_merger(lets: Let[]): string;
diff --git a/node_modules/svelte/types/compile/render-ssr/Renderer.d.ts b/node_modules/svelte/types/compile/render-ssr/Renderer.d.ts
new file mode 100644
index 0000000..a5c8c6a
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/Renderer.d.ts
@@ -0,0 +1,15 @@
+import { AppendTarget, CompileOptions } from '../../interfaces';
+import { INode } from '../nodes/interfaces';
+export interface RenderOptions extends CompileOptions {
+    locate: (c: number) => {
+        line: number;
+        column: number;
+    };
+}
+export default class Renderer {
+    has_bindings: boolean;
+    code: string;
+    targets: AppendTarget[];
+    append(code: string): void;
+    render(nodes: INode[], options: RenderOptions): void;
+}
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/AwaitBlock.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/AwaitBlock.d.ts
new file mode 100644
index 0000000..9ac74d6
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/AwaitBlock.d.ts
@@ -0,0 +1,3 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import AwaitBlock from '../../nodes/AwaitBlock';
+export default function (node: AwaitBlock, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/Comment.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/Comment.d.ts
new file mode 100644
index 0000000..3ceb965
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/Comment.d.ts
@@ -0,0 +1,3 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import Comment from '../../nodes/Comment';
+export default function (node: Comment, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/DebugTag.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/DebugTag.d.ts
new file mode 100644
index 0000000..737c104
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/DebugTag.d.ts
@@ -0,0 +1,3 @@
+import DebugTag from '../../nodes/DebugTag';
+import Renderer, { RenderOptions } from '../Renderer';
+export default function (node: DebugTag, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/EachBlock.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/EachBlock.d.ts
new file mode 100644
index 0000000..5ecd859
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/EachBlock.d.ts
@@ -0,0 +1,3 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import EachBlock from '../../nodes/EachBlock';
+export default function (node: EachBlock, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/Element.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/Element.d.ts
new file mode 100644
index 0000000..43ac0f4
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/Element.d.ts
@@ -0,0 +1,5 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import Element from '../../nodes/Element';
+export default function (node: Element, renderer: Renderer, options: RenderOptions & {
+    slot_scopes: Map<any, any>;
+}): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/Head.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/Head.d.ts
new file mode 100644
index 0000000..add6c17
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/Head.d.ts
@@ -0,0 +1,3 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import Head from '../../nodes/Head';
+export default function (node: Head, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/HtmlTag.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/HtmlTag.d.ts
new file mode 100644
index 0000000..c86d6e8
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/HtmlTag.d.ts
@@ -0,0 +1,3 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import RawMustacheTag from '../../nodes/RawMustacheTag';
+export default function (node: RawMustacheTag, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/IfBlock.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/IfBlock.d.ts
new file mode 100644
index 0000000..c5be3d0
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/IfBlock.d.ts
@@ -0,0 +1,3 @@
+import IfBlock from '../../nodes/IfBlock';
+import Renderer, { RenderOptions } from '../Renderer';
+export default function (node: IfBlock, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/InlineComponent.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/InlineComponent.d.ts
new file mode 100644
index 0000000..fd52d3a
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/InlineComponent.d.ts
@@ -0,0 +1,3 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import InlineComponent from '../../nodes/InlineComponent';
+export default function (node: InlineComponent, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/Slot.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/Slot.d.ts
new file mode 100644
index 0000000..5872cb6
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/Slot.d.ts
@@ -0,0 +1,3 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import Slot from '../../nodes/Slot';
+export default function (node: Slot, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/Tag.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/Tag.d.ts
new file mode 100644
index 0000000..09966c6
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/Tag.d.ts
@@ -0,0 +1,2 @@
+import Renderer, { RenderOptions } from '../Renderer';
+export default function (node: any, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/Text.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/Text.d.ts
new file mode 100644
index 0000000..3075bbd
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/Text.d.ts
@@ -0,0 +1,3 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import Text from '../../nodes/Text';
+export default function (node: Text, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/Title.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/Title.d.ts
new file mode 100644
index 0000000..14d4b2d
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/Title.d.ts
@@ -0,0 +1,3 @@
+import Renderer, { RenderOptions } from '../Renderer';
+import Title from '../../nodes/Title';
+export default function (node: Title, renderer: Renderer, options: RenderOptions): void;
diff --git a/node_modules/svelte/types/compile/render-ssr/handlers/shared/get_slot_scope.d.ts b/node_modules/svelte/types/compile/render-ssr/handlers/shared/get_slot_scope.d.ts
new file mode 100644
index 0000000..2661745
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/handlers/shared/get_slot_scope.d.ts
@@ -0,0 +1,2 @@
+import Let from '../../../nodes/Let';
+export declare function get_slot_scope(lets: Let[]): string;
diff --git a/node_modules/svelte/types/compile/render-ssr/index.d.ts b/node_modules/svelte/types/compile/render-ssr/index.d.ts
new file mode 100644
index 0000000..a38d6ab
--- /dev/null
+++ b/node_modules/svelte/types/compile/render-ssr/index.d.ts
@@ -0,0 +1,3 @@
+import Component from '../Component';
+import { CompileOptions } from '../../interfaces';
+export default function ssr(component: Component, options: CompileOptions): string;
diff --git a/node_modules/svelte/types/compile/utils/CodeBuilder.d.ts b/node_modules/svelte/types/compile/utils/CodeBuilder.d.ts
new file mode 100644
index 0000000..162a284
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/CodeBuilder.d.ts
@@ -0,0 +1,27 @@
+interface Chunk {
+    parent?: BlockChunk;
+    type: 'root' | 'line' | 'condition';
+    children?: Chunk[];
+    line?: string;
+    block?: boolean;
+    condition?: string;
+}
+interface BlockChunk extends Chunk {
+    type: 'root' | 'condition';
+    children: Chunk[];
+    parent: BlockChunk;
+}
+export default class CodeBuilder {
+    root: BlockChunk;
+    last: Chunk;
+    current: BlockChunk;
+    constructor(str?: string);
+    add_conditional(condition: string, body: string): void;
+    add_line(line: string): void;
+    add_block(block: string): void;
+    is_empty(): boolean;
+    push_condition(condition: string): void;
+    pop_condition(): void;
+    toString(): string;
+}
+export {};
diff --git a/node_modules/svelte/types/compile/utils/__test__.d.ts b/node_modules/svelte/types/compile/utils/__test__.d.ts
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/__test__.d.ts
@@ -0,0 +1 @@
+export {};
diff --git a/node_modules/svelte/types/compile/utils/add_to_set.d.ts b/node_modules/svelte/types/compile/utils/add_to_set.d.ts
new file mode 100644
index 0000000..129b40f
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/add_to_set.d.ts
@@ -0,0 +1 @@
+export default function add_to_set<T>(a: Set<T>, b: Set<T> | Array<T>): void;
diff --git a/node_modules/svelte/types/compile/utils/deindent.d.ts b/node_modules/svelte/types/compile/utils/deindent.d.ts
new file mode 100644
index 0000000..05434c3
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/deindent.d.ts
@@ -0,0 +1 @@
+export default function deindent(strings: TemplateStringsArray, ...values: any[]): string;
diff --git a/node_modules/svelte/types/compile/utils/flatten_reference.d.ts b/node_modules/svelte/types/compile/utils/flatten_reference.d.ts
new file mode 100644
index 0000000..16e2ef9
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/flatten_reference.d.ts
@@ -0,0 +1,7 @@
+import { Node } from '../../interfaces';
+export default function flatten_reference(node: Node): {
+    name: any;
+    nodes: any[];
+    parts: any[];
+    keypath: string;
+};
diff --git a/node_modules/svelte/types/compile/utils/get_object.d.ts b/node_modules/svelte/types/compile/utils/get_object.d.ts
new file mode 100644
index 0000000..3c5b959
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/get_object.d.ts
@@ -0,0 +1,2 @@
+import { Node } from '../../interfaces';
+export default function get_object(node: Node): Node;
diff --git a/node_modules/svelte/types/compile/utils/get_slot_data.d.ts b/node_modules/svelte/types/compile/utils/get_slot_data.d.ts
new file mode 100644
index 0000000..e32bada
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/get_slot_data.d.ts
@@ -0,0 +1,2 @@
+import Attribute from '../nodes/Attribute';
+export default function get_slot_data(values: Map<string, Attribute>, is_ssr: boolean): string[];
diff --git a/node_modules/svelte/types/compile/utils/scope.d.ts b/node_modules/svelte/types/compile/utils/scope.d.ts
new file mode 100644
index 0000000..bd190c2
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/scope.d.ts
@@ -0,0 +1,18 @@
+import { Node } from '../../interfaces';
+export declare function create_scopes(expression: Node): {
+    map: WeakMap<object, any>;
+    scope: Scope;
+    globals: Map<string, Node>;
+};
+export declare class Scope {
+    parent: Scope;
+    block: boolean;
+    declarations: Map<string, Node>;
+    initialised_declarations: Set<string>;
+    constructor(parent: Scope, block: boolean);
+    add_declaration(node: Node): void;
+    find_owner(name: string): Scope;
+    has(name: string): boolean;
+}
+export declare function extract_names(param: Node): any[];
+export declare function extract_identifiers(param: Node): Node[];
diff --git a/node_modules/svelte/types/compile/utils/snip.d.ts b/node_modules/svelte/types/compile/utils/snip.d.ts
new file mode 100644
index 0000000..3d6a81b
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/snip.d.ts
@@ -0,0 +1 @@
+export declare function snip(expression: any): string;
diff --git a/node_modules/svelte/types/compile/utils/stringify.d.ts b/node_modules/svelte/types/compile/utils/stringify.d.ts
new file mode 100644
index 0000000..c1b97f8
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/stringify.d.ts
@@ -0,0 +1,6 @@
+export declare function stringify(data: string, options?: {}): string;
+export declare function escape(data: string, { only_escape_at_symbol }?: {
+    only_escape_at_symbol?: boolean;
+}): string;
+export declare function escape_html(html: any): string;
+export declare function escape_template(str: any): any;
diff --git a/node_modules/svelte/types/compile/utils/stringify_attribute.d.ts b/node_modules/svelte/types/compile/utils/stringify_attribute.d.ts
new file mode 100644
index 0000000..a44b1b8
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/stringify_attribute.d.ts
@@ -0,0 +1,2 @@
+import Attribute from '../nodes/Attribute';
+export declare function stringify_attribute(attribute: Attribute, is_ssr: boolean): string;
diff --git a/node_modules/svelte/types/compile/utils/stringify_props.d.ts b/node_modules/svelte/types/compile/utils/stringify_props.d.ts
new file mode 100644
index 0000000..602c0dc
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/stringify_props.d.ts
@@ -0,0 +1 @@
+export declare function stringify_props(props: string[]): string;
diff --git a/node_modules/svelte/types/compile/utils/tail.d.ts b/node_modules/svelte/types/compile/utils/tail.d.ts
new file mode 100644
index 0000000..69ef152
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/tail.d.ts
@@ -0,0 +1,2 @@
+export declare function new_tail(): string;
+export declare function attach_head(head: string, tail: string): string;
diff --git a/node_modules/svelte/types/compile/utils/unwrap_parens.d.ts b/node_modules/svelte/types/compile/utils/unwrap_parens.d.ts
new file mode 100644
index 0000000..8be5e94
--- /dev/null
+++ b/node_modules/svelte/types/compile/utils/unwrap_parens.d.ts
@@ -0,0 +1,2 @@
+import { Node } from '../../interfaces';
+export default function unwrap_parens(node: Node): Node;
diff --git a/node_modules/svelte/types/compiler.d.ts b/node_modules/svelte/types/compiler.d.ts
new file mode 100644
index 0000000..99fe8e0
--- /dev/null
+++ b/node_modules/svelte/types/compiler.d.ts
@@ -0,0 +1,5 @@
+export { default as compile } from './compile/index';
+export { default as parse } from './parse/index';
+export { default as preprocess } from './preprocess/index';
+export { walk } from 'estree-walker';
+export declare const VERSION = "__VERSION__";
diff --git a/node_modules/svelte/types/config.d.ts b/node_modules/svelte/types/config.d.ts
new file mode 100644
index 0000000..66cb4d4
--- /dev/null
+++ b/node_modules/svelte/types/config.d.ts
@@ -0,0 +1 @@
+export declare const test: string;
diff --git a/node_modules/svelte/types/easing.d.ts b/node_modules/svelte/types/easing.d.ts
new file mode 100644
index 0000000..1c1bbc4
--- /dev/null
+++ b/node_modules/svelte/types/easing.d.ts
@@ -0,0 +1,31 @@
+export { identity as linear } from 'svelte/internal';
+export declare function backInOut(t: any): number;
+export declare function backIn(t: any): number;
+export declare function backOut(t: any): number;
+export declare function bounceOut(t: any): number;
+export declare function bounceInOut(t: any): number;
+export declare function bounceIn(t: any): number;
+export declare function circInOut(t: any): number;
+export declare function circIn(t: any): number;
+export declare function circOut(t: any): number;
+export declare function cubicInOut(t: any): number;
+export declare function cubicIn(t: any): number;
+export declare function cubicOut(t: any): number;
+export declare function elasticInOut(t: any): number;
+export declare function elasticIn(t: any): number;
+export declare function elasticOut(t: any): number;
+export declare function expoInOut(t: any): any;
+export declare function expoIn(t: any): any;
+export declare function expoOut(t: any): any;
+export declare function quadInOut(t: any): number;
+export declare function quadIn(t: any): number;
+export declare function quadOut(t: any): number;
+export declare function quartInOut(t: any): number;
+export declare function quartIn(t: any): number;
+export declare function quartOut(t: any): number;
+export declare function quintInOut(t: any): number;
+export declare function quintIn(t: any): number;
+export declare function quintOut(t: any): number;
+export declare function sineInOut(t: any): number;
+export declare function sineIn(t: any): number;
+export declare function sineOut(t: any): number;
diff --git a/node_modules/svelte/types/index.d.ts b/node_modules/svelte/types/index.d.ts
new file mode 100644
index 0000000..fba3557
--- /dev/null
+++ b/node_modules/svelte/types/index.d.ts
@@ -0,0 +1 @@
+export { onMount, onDestroy, beforeUpdate, afterUpdate, setContext, getContext, tick, createEventDispatcher } from 'svelte/internal';
diff --git a/node_modules/svelte/types/interfaces.d.ts b/node_modules/svelte/types/interfaces.d.ts
new file mode 100644
index 0000000..5571946
--- /dev/null
+++ b/node_modules/svelte/types/interfaces.d.ts
@@ -0,0 +1,111 @@
+interface BaseNode {
+    start: number;
+    end: number;
+    type: string;
+    children?: Node[];
+    [prop_name: string]: any;
+}
+export interface Text extends BaseNode {
+    type: 'Text';
+    data: string;
+}
+export interface MustacheTag extends BaseNode {
+    type: 'MustacheTag';
+    expresion: Node;
+}
+export declare type DirectiveType = 'Action' | 'Animation' | 'Binding' | 'Class' | 'EventHandler' | 'Let' | 'Ref' | 'Transition';
+interface BaseDirective extends BaseNode {
+    type: DirectiveType;
+    expression: null | Node;
+    name: string;
+    modifiers: string[];
+}
+export interface Transition extends BaseDirective {
+    type: 'Transition';
+    intro: boolean;
+    outro: boolean;
+}
+export declare type Directive = BaseDirective | Transition;
+export declare type Node = Text | MustacheTag | BaseNode | Directive | Transition;
+export interface Parser {
+    readonly template: string;
+    readonly filename?: string;
+    index: number;
+    stack: Array<Node>;
+    html: Node;
+    css: Node;
+    js: Node;
+    meta_tags: {};
+}
+export interface Ast {
+    html: Node;
+    css: Node;
+    instance: Node;
+    module: Node;
+}
+export interface Warning {
+    start?: {
+        line: number;
+        column: number;
+        pos?: number;
+    };
+    end?: {
+        line: number;
+        column: number;
+    };
+    pos?: number;
+    code: string;
+    message: string;
+    filename?: string;
+    frame?: string;
+    toString: () => string;
+}
+export declare type ModuleFormat = 'esm' | 'cjs';
+export interface CompileOptions {
+    format?: ModuleFormat;
+    name?: string;
+    filename?: string;
+    generate?: string | false;
+    outputFilename?: string;
+    cssOutputFilename?: string;
+    sveltePath?: string;
+    dev?: boolean;
+    accessors?: boolean;
+    immutable?: boolean;
+    hydratable?: boolean;
+    legacy?: boolean;
+    customElement?: boolean;
+    tag?: string;
+    css?: boolean;
+    preserveComments?: boolean;
+    preserveWhitespace?: boolean;
+}
+export interface ParserOptions {
+    filename?: string;
+    customElement?: boolean;
+}
+export interface Visitor {
+    enter: (node: Node) => void;
+    leave?: (node: Node) => void;
+}
+export interface AppendTarget {
+    slots: Record<string, string>;
+    slot_stack: string[];
+}
+export interface Var {
+    name: string;
+    export_name?: string;
+    injected?: boolean;
+    module?: boolean;
+    mutated?: boolean;
+    reassigned?: boolean;
+    referenced?: boolean;
+    writable?: boolean;
+    global?: boolean;
+    internal?: boolean;
+    initialised?: boolean;
+    hoistable?: boolean;
+    subscribable?: boolean;
+    is_reactive_dependency?: boolean;
+}
+export {};
diff --git a/node_modules/svelte/types/internal/Component.d.ts b/node_modules/svelte/types/internal/Component.d.ts
new file mode 100644
index 0000000..2899ab2
--- /dev/null
+++ b/node_modules/svelte/types/internal/Component.d.ts
@@ -0,0 +1,30 @@
+interface T$$ {
+    dirty: null;
+    ctx: null | any;
+    bound: any;
+    update: () => void;
+    callbacks: any;
+    after_render: any[];
+    props: any;
+    fragment: null | any;
+    not_equal: any;
+    before_render: any[];
+    context: Map<any, any>;
+    on_mount: any[];
+    on_destroy: any[];
+}
+export declare function bind(component: any, name: any, callback: any): void;
+export declare function mount_component(component: any, target: any, anchor: any): void;
+export declare function init(component: any, options: any, instance: any, create_fragment: any, not_equal: any, prop_names: any): void;
+export declare let SvelteElement: any;
+export declare class SvelteComponent {
+    $$: T$$;
+    $destroy(): void;
+    $on(type: any, callback: any): () => void;
+    $set(): void;
+}
+export declare class SvelteComponentDev extends SvelteComponent {
+    constructor(options: any);
+    $destroy(): void;
+}
+export {};
diff --git a/node_modules/svelte/types/internal/animations.d.ts b/node_modules/svelte/types/internal/animations.d.ts
new file mode 100644
index 0000000..a7a75dc
--- /dev/null
+++ b/node_modules/svelte/types/internal/animations.d.ts
@@ -0,0 +1,3 @@
+import { noop } from './utils';
+export declare function create_animation(node: any, from: any, fn: any, params: any): typeof noop;
+export declare function fix_position(node: any): void;
diff --git a/node_modules/svelte/types/internal/await-block.d.ts b/node_modules/svelte/types/internal/await-block.d.ts
new file mode 100644
index 0000000..b8f689d
--- /dev/null
+++ b/node_modules/svelte/types/internal/await-block.d.ts
@@ -0,0 +1 @@
+export declare function handle_promise(promise: any, info: any): boolean;
diff --git a/node_modules/svelte/types/internal/dom.d.ts b/node_modules/svelte/types/internal/dom.d.ts
new file mode 100644
index 0000000..c71dc6b
--- /dev/null
+++ b/node_modules/svelte/types/internal/dom.d.ts
@@ -0,0 +1,40 @@
+export declare function append(target: Node, node: Node): void;
+export declare function insert(target: Node, node: Node, anchor?: Node): void;
+export declare function detach(node: Node): void;
+export declare function detach_between(before: Node, after: Node): void;
+export declare function detach_before(after: Node): void;
+export declare function detach_after(before: Node): void;
+export declare function destroy_each(iterations: any, detaching: any): void;
+export declare function element<K extends keyof HTMLElementTagNameMap>(name: K): HTMLElementTagNameMap[K];
+export declare function object_without_properties<T, K extends keyof T>(obj: T, exclude: K[]): Pick<T, Exclude<keyof T, K>>;
+export declare function svg_element(name: string): SVGElement;
+export declare function text(data: string): Text;
+export declare function space(): Text;
+export declare function empty(): Text;
+export declare function listen(node: Node, event: string, handler: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | EventListenerOptions): () => void;
+export declare function prevent_default(fn: any): (event: any) => any;
+export declare function stop_propagation(fn: any): (event: any) => any;
+export declare function attr(node: Element, attribute: string, value?: string): void;
+export declare function set_attributes(node: HTMLElement, attributes: {
+    [x: string]: string;
+}): void;
+export declare function set_custom_element_data(node: any, prop: any, value: any): void;
+export declare function xlink_attr(node: any, attribute: any, value: any): void;
+export declare function get_binding_group_value(group: any): any[];
+export declare function to_number(value: any): number;
+export declare function time_ranges_to_array(ranges: any): any[];
+export declare function children(element: any): {}[];
+export declare function claim_element(nodes: any, name: any, attributes: any, svg: any): any;
+export declare function claim_text(nodes: any, data: any): any;
+export declare function set_data(text: any, data: any): void;
+export declare function set_input_type(input: any, type: any): void;
+export declare function set_style(node: any, key: any, value: any): void;
+export declare function select_option(select: any, value: any): void;
+export declare function select_options(select: any, value: any): void;
+export declare function select_value(select: any): any;
+export declare function select_multiple_value(select: any): any;
+export declare function add_resize_listener(element: any, fn: any): {
+    cancel: () => void;
+};
+export declare function toggle_class(element: any, name: any, toggle: any): void;
+export declare function custom_event<T = any>(type: string, detail?: T): CustomEvent<T>;
diff --git a/node_modules/svelte/types/internal/index.d.ts b/node_modules/svelte/types/internal/index.d.ts
new file mode 100644
index 0000000..6487f04
--- /dev/null
+++ b/node_modules/svelte/types/internal/index.d.ts
@@ -0,0 +1,12 @@
+export * from './animations';
+export * from './await-block';
+export * from './dom';
+export * from './keyed-each';
+export * from './lifecycle';
+export * from './loop';
+export * from './scheduler';
+export * from './spread';
+export * from './ssr';
+export * from './transitions';
+export * from './utils';
+export * from './Component';
diff --git a/node_modules/svelte/types/internal/keyed-each.d.ts b/node_modules/svelte/types/internal/keyed-each.d.ts
new file mode 100644
index 0000000..83c716b
--- /dev/null
+++ b/node_modules/svelte/types/internal/keyed-each.d.ts
@@ -0,0 +1,5 @@
+export declare function destroy_block(block: any, lookup: any): void;
+export declare function outro_and_destroy_block(block: any, lookup: any): void;
+export declare function fix_and_outro_and_destroy_block(block: any, lookup: any): void;
+export declare function update_keyed_each(old_blocks: any, changed: any, get_key: any, dynamic: any, ctx: any, list: any, lookup: any, node: any, destroy: any, create_each_block: any, next: any, get_context: any): any[];
+export declare function measure(blocks: any): {};
diff --git a/node_modules/svelte/types/internal/lifecycle.d.ts b/node_modules/svelte/types/internal/lifecycle.d.ts
new file mode 100644
index 0000000..010e991
--- /dev/null
+++ b/node_modules/svelte/types/internal/lifecycle.d.ts
@@ -0,0 +1,10 @@
+export declare let current_component: any;
+export declare function set_current_component(component: any): void;
+export declare function beforeUpdate(fn: any): void;
+export declare function onMount(fn: any): void;
+export declare function afterUpdate(fn: any): void;
+export declare function onDestroy(fn: any): void;
+export declare function createEventDispatcher(): (type: any, detail: any) => void;
+export declare function setContext(key: any, context: any): void;
+export declare function getContext(key: any): any;
+export declare function bubble(component: any, event: any): void;
diff --git a/node_modules/svelte/types/internal/loop.d.ts b/node_modules/svelte/types/internal/loop.d.ts
new file mode 100644
index 0000000..ede18a3
--- /dev/null
+++ b/node_modules/svelte/types/internal/loop.d.ts
@@ -0,0 +1,6 @@
+export interface Task {
+    abort(): void;
+    promise: Promise<undefined>;
+}
+export declare function clear_loops(): void;
+export declare function loop(fn: (number: any) => void): Task;
diff --git a/node_modules/svelte/types/internal/scheduler.d.ts b/node_modules/svelte/types/internal/scheduler.d.ts
new file mode 100644
index 0000000..0cb3a69
--- /dev/null
+++ b/node_modules/svelte/types/internal/scheduler.d.ts
@@ -0,0 +1,10 @@
+export declare const dirty_components: any[];
+export declare const intros: {
+    enabled: boolean;
+};
+export declare function schedule_update(): void;
+export declare function tick(): Promise<void>;
+export declare function add_binding_callback(fn: any): void;
+export declare function add_render_callback(fn: any): void;
+export declare function add_flush_callback(fn: any): void;
+export declare function flush(): void;
diff --git a/node_modules/svelte/types/internal/spread.d.ts b/node_modules/svelte/types/internal/spread.d.ts
new file mode 100644
index 0000000..8bcd4fb
--- /dev/null
+++ b/node_modules/svelte/types/internal/spread.d.ts
@@ -0,0 +1 @@
+export declare function get_spread_update(levels: any, updates: any): {};
diff --git a/node_modules/svelte/types/internal/ssr.d.ts b/node_modules/svelte/types/internal/ssr.d.ts
new file mode 100644
index 0000000..d862e26
--- /dev/null
+++ b/node_modules/svelte/types/internal/ssr.d.ts
@@ -0,0 +1,28 @@
+export declare const invalid_attribute_name_character: RegExp;
+export declare function spread(args: any): string;
+export declare const escaped: {
+    '"': string;
+    "'": string;
+    '&': string;
+    '<': string;
+    '>': string;
+};
+export declare function escape(html: any): string;
+export declare function each(items: any, fn: any): string;
+export declare const missing_component: {
+    $$render: () => string;
+};
+export declare function validate_component(component: any, name: any): any;
+export declare function debug(file: any, line: any, column: any, values: any): string;
+export declare function create_ssr_component(fn: any): {
+    render: (props?: {}, options?: {}) => {
+        html: any;
+        css: {
+            code: string;
+            map: any;
+        };
+        head: string;
+    };
+    $$render: (result: any, props: any, bindings: any, slots: any) => any;
+};
+export declare function get_store_value(store: any): any;
diff --git a/node_modules/svelte/types/internal/style_manager.d.ts b/node_modules/svelte/types/internal/style_manager.d.ts
new file mode 100644
index 0000000..d10cc1f
--- /dev/null
+++ b/node_modules/svelte/types/internal/style_manager.d.ts
@@ -0,0 +1,3 @@
+export declare function create_rule(node: any, a: any, b: any, duration: any, delay: any, ease: any, fn: any, uid?: number): string;
+export declare function delete_rule(node: any, name?: any): void;
+export declare function clear_rules(): void;
diff --git a/node_modules/svelte/types/internal/transitions.d.ts b/node_modules/svelte/types/internal/transitions.d.ts
new file mode 100644
index 0000000..ed84a73
--- /dev/null
+++ b/node_modules/svelte/types/internal/transitions.d.ts
@@ -0,0 +1,15 @@
+export declare function group_outros(): void;
+export declare function check_outros(): void;
+export declare function on_outro(callback: any): void;
+export declare function create_in_transition(node: any, fn: any, params: any): {
+    start(): void;
+    invalidate(): void;
+    end(): void;
+};
+export declare function create_out_transition(node: any, fn: any, params: any): {
+    end(reset: any): void;
+};
+export declare function create_bidirectional_transition(node: any, fn: any, params: any, intro: any): {
+    run(b: any): void;
+    end(): void;
+};
diff --git a/node_modules/svelte/types/internal/utils.d.ts b/node_modules/svelte/types/internal/utils.d.ts
new file mode 100644
index 0000000..6f79966
--- /dev/null
+++ b/node_modules/svelte/types/internal/utils.d.ts
@@ -0,0 +1,21 @@
+export declare function noop(): void;
+export declare const identity: (x: any) => any;
+export declare function assign(tar: any, src: any): any;
+export declare function is_promise(value: any): boolean;
+export declare function add_location(element: any, file: any, line: any, column: any, char: any): void;
+export declare function run(fn: any): any;
+export declare function blank_object(): any;
+export declare function run_all(fns: any): void;
+export declare function is_function(thing: any): boolean;
+export declare function safe_not_equal(a: any, b: any): boolean;
+export declare function not_equal(a: any, b: any): boolean;
+export declare function validate_store(store: any, name: any): void;
+export declare function subscribe(component: any, store: any, callback: any): void;
+export declare function create_slot(definition: any, ctx: any, fn: any): any;
+export declare function get_slot_context(definition: any, ctx: any, fn: any): any;
+export declare function get_slot_changes(definition: any, ctx: any, changed: any, fn: any): any;
+export declare function exclude_internal_props(props: any): {};
+export declare let now: () => number;
+export declare let raf: typeof requestAnimationFrame | typeof noop;
+export declare function set_now(fn: any): void;
+export declare function set_raf(fn: any): void;
diff --git a/node_modules/svelte/types/motion/index.d.ts b/node_modules/svelte/types/motion/index.d.ts
new file mode 100644
index 0000000..ea6c646
--- /dev/null
+++ b/node_modules/svelte/types/motion/index.d.ts
@@ -0,0 +1,2 @@
+export * from './spring';
+export * from './tweened';
diff --git a/node_modules/svelte/types/motion/spring.d.ts b/node_modules/svelte/types/motion/spring.d.ts
new file mode 100644
index 0000000..33e6ec7
--- /dev/null
+++ b/node_modules/svelte/types/motion/spring.d.ts
@@ -0,0 +1,19 @@
+import { Readable } from 'svelte/store';
+interface SpringOpts {
+    stiffness?: number;
+    damping?: number;
+    precision?: number;
+}
+declare type SpringUpdateOpts = {
+    hard?: any;
+    soft?: string | number | boolean;
+};
+interface Spring<T = any> extends Readable<T> {
+    set: (new_value: T, opts?: SpringUpdateOpts) => (Promise<T> | Promise<T>);
+    precision: number;
+    update: (fn: any, opts: SpringUpdateOpts) => Promise<T>;
+    damping: number;
+    stiffness: number;
+}
+export declare function spring<T = any>(value: T, opts?: SpringOpts): Spring<any>;
+export {};
diff --git a/node_modules/svelte/types/motion/tweened.d.ts b/node_modules/svelte/types/motion/tweened.d.ts
new file mode 100644
index 0000000..b69a7a8
--- /dev/null
+++ b/node_modules/svelte/types/motion/tweened.d.ts
@@ -0,0 +1,5 @@
+export declare function tweened(value: any, defaults?: {}): {
+    set: (new_value: any, opts: any) => any;
+    update: (fn: any, opts: any) => any;
+    subscribe: (run: (value: any) => void, invalidate?: (value?: any) => void) => () => void;
+};
diff --git a/node_modules/svelte/types/motion/utils.d.ts b/node_modules/svelte/types/motion/utils.d.ts
new file mode 100644
index 0000000..36c36d2
--- /dev/null
+++ b/node_modules/svelte/types/motion/utils.d.ts
@@ -0,0 +1 @@
+export declare function is_date(obj: any): boolean;
diff --git a/node_modules/svelte/types/parse/acorn.d.ts b/node_modules/svelte/types/parse/acorn.d.ts
new file mode 100644
index 0000000..7120cc4
--- /dev/null
+++ b/node_modules/svelte/types/parse/acorn.d.ts
@@ -0,0 +1,3 @@
+import * as acorn from 'acorn';
+export declare const parse: (source: string) => acorn.Node;
+export declare const parse_expression_at: (source: string, index: number) => acorn.Node;
diff --git a/node_modules/svelte/types/parse/index.d.ts b/node_modules/svelte/types/parse/index.d.ts
new file mode 100644
index 0000000..50fa639
--- /dev/null
+++ b/node_modules/svelte/types/parse/index.d.ts
@@ -0,0 +1,28 @@
+import { Node, Ast, ParserOptions } from '../interfaces';
+export declare class Parser {
+    readonly template: string;
+    readonly filename?: string;
+    readonly customElement: boolean;
+    index: number;
+    stack: Array<Node>;
+    html: Node;
+    css: Node[];
+    js: Node[];
+    meta_tags: {};
+    constructor(template: string, options: ParserOptions);
+    current(): Node;
+    acorn_error(err: any): void;
+    error({ code, message }: {
+        code: string;
+        message: string;
+    }, index?: number): void;
+    eat(str: string, required?: boolean, message?: string): boolean;
+    match(str: string): boolean;
+    match_regex(pattern: RegExp): string;
+    allow_whitespace(): void;
+    read(pattern: RegExp): string;
+    read_identifier(): string;
+    read_until(pattern: RegExp): string;
+    require_whitespace(): void;
+}
+export default function parse(template: string, options?: ParserOptions): Ast;
diff --git a/node_modules/svelte/types/parse/read/context.d.ts b/node_modules/svelte/types/parse/read/context.d.ts
new file mode 100644
index 0000000..4e1e594
--- /dev/null
+++ b/node_modules/svelte/types/parse/read/context.d.ts
@@ -0,0 +1,26 @@
+import { Parser } from '../index';
+declare type Identifier = {
+    start: number;
+    end: number;
+    type: 'Identifier';
+    name: string;
+};
+declare type Property = {
+    start: number;
+    end: number;
+    type: 'Property';
+    kind: 'init' | 'rest';
+    shorthand: boolean;
+    key: Identifier;
+    value: Context;
+};
+declare type Context = {
+    start: number;
+    end: number;
+    type: 'Identifier' | 'ArrayPattern' | 'ObjectPattern' | 'RestIdentifier';
+    name?: string;
+    elements?: Context[];
+    properties?: Property[];
+};
+export default function read_context(parser: Parser): Context;
+export {};
diff --git a/node_modules/svelte/types/parse/read/expression.d.ts b/node_modules/svelte/types/parse/read/expression.d.ts
new file mode 100644
index 0000000..2f74b1a
--- /dev/null
+++ b/node_modules/svelte/types/parse/read/expression.d.ts
@@ -0,0 +1,3 @@
+import { Parser } from '../index';
+import { Node } from 'estree';
+export default function read_expression(parser: Parser): Node;
diff --git a/node_modules/svelte/types/parse/read/script.d.ts b/node_modules/svelte/types/parse/read/script.d.ts
new file mode 100644
index 0000000..ac791b8
--- /dev/null
+++ b/node_modules/svelte/types/parse/read/script.d.ts
@@ -0,0 +1,8 @@
+import { Parser } from '../index';
+import { Node } from '../../interfaces';
+export default function read_script(parser: Parser, start: number, attributes: Node[]): {
+    start: number;
+    end: number;
+    context: any;
+    content: any;
+};
diff --git a/node_modules/svelte/types/parse/read/style.d.ts b/node_modules/svelte/types/parse/read/style.d.ts
new file mode 100644
index 0000000..fdc9ca8
--- /dev/null
+++ b/node_modules/svelte/types/parse/read/style.d.ts
@@ -0,0 +1,13 @@
+import { Parser } from '../index';
+import { Node } from '../../interfaces';
+export default function read_style(parser: Parser, start: number, attributes: Node[]): {
+    start: number;
+    end: number;
+    attributes: Node[];
+    children: any;
+    content: {
+        start: number;
+        end: number;
+        styles: string;
+    };
+};
diff --git a/node_modules/svelte/types/parse/state/fragment.d.ts b/node_modules/svelte/types/parse/state/fragment.d.ts
new file mode 100644
index 0000000..ec6073b
--- /dev/null
+++ b/node_modules/svelte/types/parse/state/fragment.d.ts
@@ -0,0 +1,3 @@
+import tag from './tag';
+import { Parser } from '../index';
+export default function fragment(parser: Parser): typeof tag;
diff --git a/node_modules/svelte/types/parse/state/mustache.d.ts b/node_modules/svelte/types/parse/state/mustache.d.ts
new file mode 100644
index 0000000..8a4b8b5
--- /dev/null
+++ b/node_modules/svelte/types/parse/state/mustache.d.ts
@@ -0,0 +1,2 @@
+import { Parser } from '../index';
+export default function mustache(parser: Parser): void;
diff --git a/node_modules/svelte/types/parse/state/tag.d.ts b/node_modules/svelte/types/parse/state/tag.d.ts
new file mode 100644
index 0000000..1e0a29c
--- /dev/null
+++ b/node_modules/svelte/types/parse/state/tag.d.ts
@@ -0,0 +1,2 @@
+import { Parser } from '../index';
+export default function tag(parser: Parser): void;
diff --git a/node_modules/svelte/types/parse/state/text.d.ts b/node_modules/svelte/types/parse/state/text.d.ts
new file mode 100644
index 0000000..88f2671
--- /dev/null
+++ b/node_modules/svelte/types/parse/state/text.d.ts
@@ -0,0 +1,2 @@
+import { Parser } from '../index';
+export default function text(parser: Parser): void;
diff --git a/node_modules/svelte/types/parse/utils/entities.d.ts b/node_modules/svelte/types/parse/utils/entities.d.ts
new file mode 100644
index 0000000..41902a6
--- /dev/null
+++ b/node_modules/svelte/types/parse/utils/entities.d.ts
@@ -0,0 +1,2034 @@
+declare const _default: {
+    CounterClockwiseContourIntegral: number;
+    ClockwiseContourIntegral: number;
+    DoubleLongLeftRightArrow: number;
+    DiacriticalDoubleAcute: number;
+    NotSquareSupersetEqual: number;
+    CloseCurlyDoubleQuote: number;
+    DoubleContourIntegral: number;
+    FilledVerySmallSquare: number;
+    NegativeVeryThinSpace: number;
+    NotPrecedesSlantEqual: number;
+    NotRightTriangleEqual: number;
+    NotSucceedsSlantEqual: number;
+    CapitalDifferentialD: number;
+    DoubleLeftRightArrow: number;
+    DoubleLongRightArrow: number;
+    EmptyVerySmallSquare: number;
+    NestedGreaterGreater: number;
+    NotDoubleVerticalBar: number;
+    NotLeftTriangleEqual: number;
+    NotSquareSubsetEqual: number;
+    OpenCurlyDoubleQuote: number;
+    ReverseUpEquilibrium: number;
+    DoubleLongLeftArrow: number;
+    DownLeftRightVector: number;
+    LeftArrowRightArrow: number;
+    NegativeMediumSpace: number;
+    RightArrowLeftArrow: number;
+    SquareSupersetEqual: number;
+    leftrightsquigarrow: number;
+    DownRightTeeVector: number;
+    DownRightVectorBar: number;
+    LongLeftRightArrow: number;
+    Longleftrightarrow: number;
+    NegativeThickSpace: number;
+    PrecedesSlantEqual: number;
+    ReverseEquilibrium: number;
+    RightDoubleBracket: number;
+    RightDownTeeVector: number;
+    RightDownVectorBar: number;
+    RightTriangleEqual: number;
+    SquareIntersection: number;
+    SucceedsSlantEqual: number;
+    blacktriangleright: number;
+    longleftrightarrow: number;
+    DoubleUpDownArrow: number;
+    DoubleVerticalBar: number;
+    DownLeftTeeVector: number;
+    DownLeftVectorBar: number;
+    FilledSmallSquare: number;
+    GreaterSlantEqual: number;
+    LeftDoubleBracket: number;
+    LeftDownTeeVector: number;
+    LeftDownVectorBar: number;
+    LeftTriangleEqual: number;
+    NegativeThinSpace: number;
+    NotReverseElement: number;
+    NotTildeFullEqual: number;
+    RightAngleBracket: number;
+    RightUpDownVector: number;
+    SquareSubsetEqual: number;
+    VerticalSeparator: number;
+    blacktriangledown: number;
+    blacktriangleleft: number;
+    leftrightharpoons: number;
+    rightleftharpoons: number;
+    twoheadrightarrow: number;
+    DiacriticalAcute: number;
+    DiacriticalGrave: number;
+    DiacriticalTilde: number;
+    DoubleRightArrow: number;
+    DownArrowUpArrow: number;
+    EmptySmallSquare: number;
+    GreaterEqualLess: number;
+    GreaterFullEqual: number;
+    LeftAngleBracket: number;
+    LeftUpDownVector: number;
+    LessEqualGreater: number;
+    NonBreakingSpace: number;
+    NotRightTriangle: number;
+    NotSupersetEqual: number;
+    RightTriangleBar: number;
+    RightUpTeeVector: number;
+    RightUpVectorBar: number;
+    UnderParenthesis: number;
+    UpArrowDownArrow: number;
+    circlearrowright: number;
+    downharpoonright: number;
+    ntrianglerighteq: number;
+    rightharpoondown: number;
+    rightrightarrows: number;
+    twoheadleftarrow: number;
+    vartriangleright: number;
+    CloseCurlyQuote: number;
+    ContourIntegral: number;
+    DoubleDownArrow: number;
+    DoubleLeftArrow: number;
+    DownRightVector: number;
+    LeftRightVector: number;
+    LeftTriangleBar: number;
+    LeftUpTeeVector: number;
+    LeftUpVectorBar: number;
+    LowerRightArrow: number;
+    NotGreaterEqual: number;
+    NotGreaterTilde: number;
+    NotLeftTriangle: number;
+    OverParenthesis: number;
+    RightDownVector: number;
+    ShortRightArrow: number;
+    UpperRightArrow: number;
+    bigtriangledown: number;
+    circlearrowleft: number;
+    curvearrowright: number;
+    downharpoonleft: number;
+    leftharpoondown: number;
+    leftrightarrows: number;
+    nLeftrightarrow: number;
+    nleftrightarrow: number;
+    ntrianglelefteq: number;
+    rightleftarrows: number;
+    rightsquigarrow: number;
+    rightthreetimes: number;
+    straightepsilon: number;
+    trianglerighteq: number;
+    vartriangleleft: number;
+    DiacriticalDot: number;
+    DoubleRightTee: number;
+    DownLeftVector: number;
+    GreaterGreater: number;
+    HorizontalLine: number;
+    InvisibleComma: number;
+    InvisibleTimes: number;
+    LeftDownVector: number;
+    LeftRightArrow: number;
+    Leftrightarrow: number;
+    LessSlantEqual: number;
+    LongRightArrow: number;
+    Longrightarrow: number;
+    LowerLeftArrow: number;
+    NestedLessLess: number;
+    NotGreaterLess: number;
+    NotLessGreater: number;
+    NotSubsetEqual: number;
+    NotVerticalBar: number;
+    OpenCurlyQuote: number;
+    ReverseElement: number;
+    RightTeeVector: number;
+    RightVectorBar: number;
+    ShortDownArrow: number;
+    ShortLeftArrow: number;
+    SquareSuperset: number;
+    TildeFullEqual: number;
+    UpperLeftArrow: number;
+    ZeroWidthSpace: number;
+    curvearrowleft: number;
+    doublebarwedge: number;
+    downdownarrows: number;
+    hookrightarrow: number;
+    leftleftarrows: number;
+    leftrightarrow: number;
+    leftthreetimes: number;
+    longrightarrow: number;
+    looparrowright: number;
+    nshortparallel: number;
+    ntriangleright: number;
+    rightarrowtail: number;
+    rightharpoonup: number;
+    trianglelefteq: number;
+    upharpoonright: number;
+    ApplyFunction: number;
+    DifferentialD: number;
+    DoubleLeftTee: number;
+    DoubleUpArrow: number;
+    LeftTeeVector: number;
+    LeftVectorBar: number;
+    LessFullEqual: number;
+    LongLeftArrow: number;
+    Longleftarrow: number;
+    NotTildeEqual: number;
+    NotTildeTilde: number;
+    Poincareplane: number;
+    PrecedesEqual: number;
+    PrecedesTilde: number;
+    RightArrowBar: number;
+    RightTeeArrow: number;
+    RightTriangle: number;
+    RightUpVector: number;
+    SucceedsEqual: number;
+    SucceedsTilde: number;
+    SupersetEqual: number;
+    UpEquilibrium: number;
+    VerticalTilde: number;
+    VeryThinSpace: number;
+    bigtriangleup: number;
+    blacktriangle: number;
+    divideontimes: number;
+    fallingdotseq: number;
+    hookleftarrow: number;
+    leftarrowtail: number;
+    leftharpoonup: number;
+    longleftarrow: number;
+    looparrowleft: number;
+    measuredangle: number;
+    ntriangleleft: number;
+    shortparallel: number;
+    smallsetminus: number;
+    triangleright: number;
+    upharpoonleft: number;
+    DownArrowBar: number;
+    DownTeeArrow: number;
+    ExponentialE: number;
+    GreaterEqual: number;
+    GreaterTilde: number;
+    HilbertSpace: number;
+    HumpDownHump: number;
+    Intersection: number;
+    LeftArrowBar: number;
+    LeftTeeArrow: number;
+    LeftTriangle: number;
+    LeftUpVector: number;
+    NotCongruent: number;
+    NotLessEqual: number;
+    NotLessTilde: number;
+    Proportional: number;
+    RightCeiling: number;
+    RoundImplies: number;
+    ShortUpArrow: number;
+    SquareSubset: number;
+    UnderBracket: number;
+    VerticalLine: number;
+    blacklozenge: number;
+    exponentiale: number;
+    risingdotseq: number;
+    triangledown: number;
+    triangleleft: number;
+    CircleMinus: number;
+    CircleTimes: number;
+    Equilibrium: number;
+    GreaterLess: number;
+    LeftCeiling: number;
+    LessGreater: number;
+    MediumSpace: number;
+    NotPrecedes: number;
+    NotSucceeds: number;
+    OverBracket: number;
+    RightVector: number;
+    Rrightarrow: number;
+    RuleDelayed: number;
+    SmallCircle: number;
+    SquareUnion: number;
+    SubsetEqual: number;
+    UpDownArrow: number;
+    Updownarrow: number;
+    VerticalBar: number;
+    backepsilon: number;
+    blacksquare: number;
+    circledcirc: number;
+    circleddash: number;
+    curlyeqprec: number;
+    curlyeqsucc: number;
+    diamondsuit: number;
+    eqslantless: number;
+    expectation: number;
+    nRightarrow: number;
+    nrightarrow: number;
+    preccurlyeq: number;
+    precnapprox: number;
+    quaternions: number;
+    straightphi: number;
+    succcurlyeq: number;
+    succnapprox: number;
+    thickapprox: number;
+    updownarrow: number;
+    Bernoullis: number;
+    CirclePlus: number;
+    EqualTilde: number;
+    Fouriertrf: number;
+    ImaginaryI: number;
+    Laplacetrf: number;
+    LeftVector: number;
+    Lleftarrow: number;
+    NotElement: number;
+    NotGreater: number;
+    Proportion: number;
+    RightArrow: number;
+    RightFloor: number;
+    Rightarrow: number;
+    TildeEqual: number;
+    TildeTilde: number;
+    UnderBrace: number;
+    UpArrowBar: number;
+    UpTeeArrow: number;
+    circledast: number;
+    complement: number;
+    curlywedge: number;
+    eqslantgtr: number;
+    gtreqqless: number;
+    lessapprox: number;
+    lesseqqgtr: number;
+    lmoustache: number;
+    longmapsto: number;
+    mapstodown: number;
+    mapstoleft: number;
+    nLeftarrow: number;
+    nleftarrow: number;
+    precapprox: number;
+    rightarrow: number;
+    rmoustache: number;
+    sqsubseteq: number;
+    sqsupseteq: number;
+    subsetneqq: number;
+    succapprox: number;
+    supsetneqq: number;
+    upuparrows: number;
+    varepsilon: number;
+    varnothing: number;
+    Backslash: number;
+    CenterDot: number;
+    CircleDot: number;
+    Congruent: number;
+    Coproduct: number;
+    DoubleDot: number;
+    DownArrow: number;
+    DownBreve: number;
+    Downarrow: number;
+    HumpEqual: number;
+    LeftArrow: number;
+    LeftFloor: number;
+    Leftarrow: number;
+    LessTilde: number;
+    Mellintrf: number;
+    MinusPlus: number;
+    NotCupCap: number;
+    NotExists: number;
+    OverBrace: number;
+    PlusMinus: number;
+    Therefore: number;
+    ThinSpace: number;
+    TripleDot: number;
+    UnionPlus: number;
+    backprime: number;
+    backsimeq: number;
+    bigotimes: number;
+    centerdot: number;
+    checkmark: number;
+    complexes: number;
+    dotsquare: number;
+    downarrow: number;
+    gtrapprox: number;
+    gtreqless: number;
+    heartsuit: number;
+    leftarrow: number;
+    lesseqgtr: number;
+    nparallel: number;
+    nshortmid: number;
+    nsubseteq: number;
+    nsupseteq: number;
+    pitchfork: number;
+    rationals: number;
+    spadesuit: number;
+    subseteqq: number;
+    subsetneq: number;
+    supseteqq: number;
+    supsetneq: number;
+    therefore: number;
+    triangleq: number;
+    varpropto: number;
+    DDotrahd: number;
+    DotEqual: number;
+    Integral: number;
+    LessLess: number;
+    NotEqual: number;
+    NotTilde: number;
+    PartialD: number;
+    Precedes: number;
+    RightTee: number;
+    Succeeds: number;
+    SuchThat: number;
+    Superset: number;
+    Uarrocir: number;
+    UnderBar: number;
+    andslope: number;
+    angmsdaa: number;
+    angmsdab: number;
+    angmsdac: number;
+    angmsdad: number;
+    angmsdae: number;
+    angmsdaf: number;
+    angmsdag: number;
+    angmsdah: number;
+    angrtvbd: number;
+    approxeq: number;
+    awconint: number;
+    backcong: number;
+    barwedge: number;
+    bbrktbrk: number;
+    bigoplus: number;
+    bigsqcup: number;
+    biguplus: number;
+    bigwedge: number;
+    boxminus: number;
+    boxtimes: number;
+    capbrcup: number;
+    circledR: number;
+    circledS: number;
+    cirfnint: number;
+    clubsuit: number;
+    cupbrcap: number;
+    curlyvee: number;
+    cwconint: number;
+    doteqdot: number;
+    dotminus: number;
+    drbkarow: number;
+    dzigrarr: number;
+    elinters: number;
+    emptyset: number;
+    eqvparsl: number;
+    fpartint: number;
+    geqslant: number;
+    gesdotol: number;
+    gnapprox: number;
+    hksearow: number;
+    hkswarow: number;
+    imagline: number;
+    imagpart: number;
+    infintie: number;
+    integers: number;
+    intercal: number;
+    intlarhk: number;
+    laemptyv: number;
+    ldrushar: number;
+    leqslant: number;
+    lesdotor: number;
+    llcorner: number;
+    lnapprox: number;
+    lrcorner: number;
+    lurdshar: number;
+    mapstoup: number;
+    multimap: number;
+    naturals: number;
+    otimesas: number;
+    parallel: number;
+    plusacir: number;
+    pointint: number;
+    precneqq: number;
+    precnsim: number;
+    profalar: number;
+    profline: number;
+    profsurf: number;
+    raemptyv: number;
+    realpart: number;
+    rppolint: number;
+    rtriltri: number;
+    scpolint: number;
+    setminus: number;
+    shortmid: number;
+    smeparsl: number;
+    sqsubset: number;
+    sqsupset: number;
+    subseteq: number;
+    succneqq: number;
+    succnsim: number;
+    supseteq: number;
+    thetasym: number;
+    thicksim: number;
+    timesbar: number;
+    triangle: number;
+    triminus: number;
+    trpezium: number;
+    ulcorner: number;
+    urcorner: number;
+    varkappa: number;
+    varsigma: number;
+    vartheta: number;
+    Because: number;
+    Cayleys: number;
+    Cconint: number;
+    Cedilla: number;
+    Diamond: number;
+    DownTee: number;
+    Element: number;
+    Epsilon: number;
+    Implies: number;
+    LeftTee: number;
+    NewLine: number;
+    NoBreak: number;
+    NotLess: number;
+    Omicron: number;
+    OverBar: number;
+    Product: number;
+    UpArrow: number;
+    Uparrow: number;
+    Upsilon: number;
+    alefsym: number;
+    angrtvb: number;
+    angzarr: number;
+    asympeq: number;
+    backsim: number;
+    because: number;
+    bemptyv: number;
+    between: number;
+    bigcirc: number;
+    bigodot: number;
+    bigstar: number;
+    boxplus: number;
+    ccupssm: number;
+    cemptyv: number;
+    cirscir: number;
+    coloneq: number;
+    congdot: number;
+    cudarrl: number;
+    cudarrr: number;
+    cularrp: number;
+    curarrm: number;
+    dbkarow: number;
+    ddagger: number;
+    ddotseq: number;
+    demptyv: number;
+    diamond: number;
+    digamma: number;
+    dotplus: number;
+    dwangle: number;
+    epsilon: number;
+    eqcolon: number;
+    equivDD: number;
+    gesdoto: number;
+    gtquest: number;
+    gtrless: number;
+    harrcir: number;
+    intprod: number;
+    isindot: number;
+    larrbfs: number;
+    larrsim: number;
+    lbrksld: number;
+    lbrkslu: number;
+    ldrdhar: number;
+    lesdoto: number;
+    lessdot: number;
+    lessgtr: number;
+    lesssim: number;
+    lotimes: number;
+    lozenge: number;
+    ltquest: number;
+    luruhar: number;
+    maltese: number;
+    minusdu: number;
+    napprox: number;
+    natural: number;
+    nearrow: number;
+    nexists: number;
+    notinva: number;
+    notinvb: number;
+    notinvc: number;
+    notniva: number;
+    notnivb: number;
+    notnivc: number;
+    npolint: number;
+    nsqsube: number;
+    nsqsupe: number;
+    nvinfin: number;
+    nwarrow: number;
+    olcross: number;
+    omicron: number;
+    orderof: number;
+    orslope: number;
+    pertenk: number;
+    planckh: number;
+    pluscir: number;
+    plussim: number;
+    plustwo: number;
+    precsim: number;
+    quatint: number;
+    questeq: number;
+    rarrbfs: number;
+    rarrsim: number;
+    rbrksld: number;
+    rbrkslu: number;
+    rdldhar: number;
+    realine: number;
+    rotimes: number;
+    ruluhar: number;
+    searrow: number;
+    simplus: number;
+    simrarr: number;
+    subedot: number;
+    submult: number;
+    subplus: number;
+    subrarr: number;
+    succsim: number;
+    supdsub: number;
+    supedot: number;
+    suphsub: number;
+    suplarr: number;
+    supmult: number;
+    supplus: number;
+    swarrow: number;
+    topfork: number;
+    triplus: number;
+    tritime: number;
+    uparrow: number;
+    upsilon: number;
+    uwangle: number;
+    vzigzag: number;
+    zigrarr: number;
+    Aacute: number;
+    Abreve: number;
+    Agrave: number;
+    Assign: number;
+    Atilde: number;
+    Barwed: number;
+    Bumpeq: number;
+    Cacute: number;
+    Ccaron: number;
+    Ccedil: number;
+    Colone: number;
+    Conint: number;
+    CupCap: number;
+    Dagger: number;
+    Dcaron: number;
+    DotDot: number;
+    Dstrok: number;
+    Eacute: number;
+    Ecaron: number;
+    Egrave: number;
+    Exists: number;
+    ForAll: number;
+    Gammad: number;
+    Gbreve: number;
+    Gcedil: number;
+    HARDcy: number;
+    Hstrok: number;
+    Iacute: number;
+    Igrave: number;
+    Itilde: number;
+    Jsercy: number;
+    Kcedil: number;
+    Lacute: number;
+    Lambda: number;
+    Lcaron: number;
+    Lcedil: number;
+    Lmidot: number;
+    Lstrok: number;
+    Nacute: number;
+    Ncaron: number;
+    Ncedil: number;
+    Ntilde: number;
+    Oacute: number;
+    Odblac: number;
+    Ograve: number;
+    Oslash: number;
+    Otilde: number;
+    Otimes: number;
+    Racute: number;
+    Rarrtl: number;
+    Rcaron: number;
+    Rcedil: number;
+    SHCHcy: number;
+    SOFTcy: number;
+    Sacute: number;
+    Scaron: number;
+    Scedil: number;
+    Square: number;
+    Subset: number;
+    Supset: number;
+    Tcaron: number;
+    Tcedil: number;
+    Tstrok: number;
+    Uacute: number;
+    Ubreve: number;
+    Udblac: number;
+    Ugrave: number;
+    Utilde: number;
+    Vdashl: number;
+    Verbar: number;
+    Vvdash: number;
+    Yacute: number;
+    Zacute: number;
+    Zcaron: number;
+    aacute: number;
+    abreve: number;
+    agrave: number;
+    andand: number;
+    angmsd: number;
+    angsph: number;
+    apacir: number;
+    approx: number;
+    atilde: number;
+    barvee: number;
+    barwed: number;
+    becaus: number;
+    bernou: number;
+    bigcap: number;
+    bigcup: number;
+    bigvee: number;
+    bkarow: number;
+    bottom: number;
+    bowtie: number;
+    boxbox: number;
+    bprime: number;
+    brvbar: number;
+    bullet: number;
+    bumpeq: number;
+    cacute: number;
+    capand: number;
+    capcap: number;
+    capcup: number;
+    capdot: number;
+    ccaron: number;
+    ccedil: number;
+    circeq: number;
+    cirmid: number;
+    colone: number;
+    commat: number;
+    compfn: number;
+    conint: number;
+    coprod: number;
+    copysr: number;
+    cularr: number;
+    cupcap: number;
+    cupcup: number;
+    cupdot: number;
+    curarr: number;
+    curren: number;
+    cylcty: number;
+    dagger: number;
+    daleth: number;
+    dcaron: number;
+    dfisht: number;
+    divide: number;
+    divonx: number;
+    dlcorn: number;
+    dlcrop: number;
+    dollar: number;
+    drcorn: number;
+    drcrop: number;
+    dstrok: number;
+    eacute: number;
+    easter: number;
+    ecaron: number;
+    ecolon: number;
+    egrave: number;
+    egsdot: number;
+    elsdot: number;
+    emptyv: number;
+    emsp13: number;
+    emsp14: number;
+    eparsl: number;
+    eqcirc: number;
+    equals: number;
+    equest: number;
+    female: number;
+    ffilig: number;
+    ffllig: number;
+    forall: number;
+    frac12: number;
+    frac13: number;
+    frac14: number;
+    frac15: number;
+    frac16: number;
+    frac18: number;
+    frac23: number;
+    frac25: number;
+    frac34: number;
+    frac35: number;
+    frac38: number;
+    frac45: number;
+    frac56: number;
+    frac58: number;
+    frac78: number;
+    gacute: number;
+    gammad: number;
+    gbreve: number;
+    gesdot: number;
+    gesles: number;
+    gtlPar: number;
+    gtrarr: number;
+    gtrdot: number;
+    gtrsim: number;
+    hairsp: number;
+    hamilt: number;
+    hardcy: number;
+    hearts: number;
+    hellip: number;
+    hercon: number;
+    homtht: number;
+    horbar: number;
+    hslash: number;
+    hstrok: number;
+    hybull: number;
+    hyphen: number;
+    iacute: number;
+    igrave: number;
+    iiiint: number;
+    iinfin: number;
+    incare: number;
+    inodot: number;
+    intcal: number;
+    iquest: number;
+    isinsv: number;
+    itilde: number;
+    jsercy: number;
+    kappav: number;
+    kcedil: number;
+    kgreen: number;
+    lAtail: number;
+    lacute: number;
+    lagran: number;
+    lambda: number;
+    langle: number;
+    larrfs: number;
+    larrhk: number;
+    larrlp: number;
+    larrpl: number;
+    larrtl: number;
+    latail: number;
+    lbrace: number;
+    lbrack: number;
+    lcaron: number;
+    lcedil: number;
+    ldquor: number;
+    lesdot: number;
+    lesges: number;
+    lfisht: number;
+    lfloor: number;
+    lharul: number;
+    llhard: number;
+    lmidot: number;
+    lmoust: number;
+    loplus: number;
+    lowast: number;
+    lowbar: number;
+    lparlt: number;
+    lrhard: number;
+    lsaquo: number;
+    lsquor: number;
+    lstrok: number;
+    lthree: number;
+    ltimes: number;
+    ltlarr: number;
+    ltrPar: number;
+    mapsto: number;
+    marker: number;
+    mcomma: number;
+    midast: number;
+    midcir: number;
+    middot: number;
+    minusb: number;
+    minusd: number;
+    mnplus: number;
+    models: number;
+    mstpos: number;
+    nVDash: number;
+    nVdash: number;
+    nacute: number;
+    ncaron: number;
+    ncedil: number;
+    nearhk: number;
+    nequiv: number;
+    nesear: number;
+    nexist: number;
+    nltrie: number;
+    nprcue: number;
+    nrtrie: number;
+    nsccue: number;
+    nsimeq: number;
+    ntilde: number;
+    numero: number;
+    nvDash: number;
+    nvHarr: number;
+    nvdash: number;
+    nvlArr: number;
+    nvrArr: number;
+    nwarhk: number;
+    nwnear: number;
+    oacute: number;
+    odblac: number;
+    odsold: number;
+    ograve: number;
+    ominus: number;
+    origof: number;
+    oslash: number;
+    otilde: number;
+    otimes: number;
+    parsim: number;
+    percnt: number;
+    period: number;
+    permil: number;
+    phmmat: number;
+    planck: number;
+    plankv: number;
+    plusdo: number;
+    plusdu: number;
+    plusmn: number;
+    preceq: number;
+    primes: number;
+    prnsim: number;
+    propto: number;
+    prurel: number;
+    puncsp: number;
+    qprime: number;
+    rAtail: number;
+    racute: number;
+    rangle: number;
+    rarrap: number;
+    rarrfs: number;
+    rarrhk: number;
+    rarrlp: number;
+    rarrpl: number;
+    rarrtl: number;
+    ratail: number;
+    rbrace: number;
+    rbrack: number;
+    rcaron: number;
+    rcedil: number;
+    rdquor: number;
+    rfisht: number;
+    rfloor: number;
+    rharul: number;
+    rmoust: number;
+    roplus: number;
+    rpargt: number;
+    rsaquo: number;
+    rsquor: number;
+    rthree: number;
+    rtimes: number;
+    sacute: number;
+    scaron: number;
+    scedil: number;
+    scnsim: number;
+    searhk: number;
+    seswar: number;
+    sfrown: number;
+    shchcy: number;
+    sigmaf: number;
+    sigmav: number;
+    simdot: number;
+    smashp: number;
+    softcy: number;
+    solbar: number;
+    spades: number;
+    sqsube: number;
+    sqsupe: number;
+    square: number;
+    squarf: number;
+    ssetmn: number;
+    ssmile: number;
+    sstarf: number;
+    subdot: number;
+    subset: number;
+    subsim: number;
+    subsub: number;
+    subsup: number;
+    succeq: number;
+    supdot: number;
+    supset: number;
+    supsim: number;
+    supsub: number;
+    supsup: number;
+    swarhk: number;
+    swnwar: number;
+    target: number;
+    tcaron: number;
+    tcedil: number;
+    telrec: number;
+    there4: number;
+    thetav: number;
+    thinsp: number;
+    thksim: number;
+    timesb: number;
+    timesd: number;
+    topbot: number;
+    topcir: number;
+    tprime: number;
+    tridot: number;
+    tstrok: number;
+    uacute: number;
+    ubreve: number;
+    udblac: number;
+    ufisht: number;
+    ugrave: number;
+    ulcorn: number;
+    ulcrop: number;
+    urcorn: number;
+    urcrop: number;
+    utilde: number;
+    vangrt: number;
+    varphi: number;
+    varrho: number;
+    veebar: number;
+    vellip: number;
+    verbar: number;
+    wedbar: number;
+    wedgeq: number;
+    weierp: number;
+    wreath: number;
+    xoplus: number;
+    xotime: number;
+    xsqcup: number;
+    xuplus: number;
+    xwedge: number;
+    yacute: number;
+    zacute: number;
+    zcaron: number;
+    zeetrf: number;
+    AElig: number;
+    Acirc: number;
+    Alpha: number;
+    Amacr: number;
+    Aogon: number;
+    Aring: number;
+    Breve: number;
+    Ccirc: number;
+    Colon: number;
+    Cross: number;
+    Dashv: number;
+    Delta: number;
+    Ecirc: number;
+    Emacr: number;
+    Eogon: number;
+    Equal: number;
+    Gamma: number;
+    Gcirc: number;
+    Hacek: number;
+    Hcirc: number;
+    IJlig: number;
+    Icirc: number;
+    Imacr: number;
+    Iogon: number;
+    Iukcy: number;
+    Jcirc: number;
+    Jukcy: number;
+    Kappa: number;
+    OElig: number;
+    Ocirc: number;
+    Omacr: number;
+    Omega: number;
+    Prime: number;
+    RBarr: number;
+    Scirc: number;
+    Sigma: number;
+    THORN: number;
+    TRADE: number;
+    TSHcy: number;
+    Theta: number;
+    Tilde: number;
+    Ubrcy: number;
+    Ucirc: number;
+    Umacr: number;
+    Union: number;
+    Uogon: number;
+    UpTee: number;
+    Uring: number;
+    VDash: number;
+    Vdash: number;
+    Wcirc: number;
+    Wedge: number;
+    Ycirc: number;
+    acirc: number;
+    acute: number;
+    aelig: number;
+    aleph: number;
+    alpha: number;
+    amacr: number;
+    amalg: number;
+    angle: number;
+    angrt: number;
+    angst: number;
+    aogon: number;
+    aring: number;
+    asymp: number;
+    awint: number;
+    bcong: number;
+    bdquo: number;
+    bepsi: number;
+    blank: number;
+    blk12: number;
+    blk14: number;
+    blk34: number;
+    block: number;
+    boxDL: number;
+    boxDR: number;
+    boxDl: number;
+    boxDr: number;
+    boxHD: number;
+    boxHU: number;
+    boxHd: number;
+    boxHu: number;
+    boxUL: number;
+    boxUR: number;
+    boxUl: number;
+    boxUr: number;
+    boxVH: number;
+    boxVL: number;
+    boxVR: number;
+    boxVh: number;
+    boxVl: number;
+    boxVr: number;
+    boxdL: number;
+    boxdR: number;
+    boxdl: number;
+    boxdr: number;
+    boxhD: number;
+    boxhU: number;
+    boxhd: number;
+    boxhu: number;
+    boxuL: number;
+    boxuR: number;
+    boxul: number;
+    boxur: number;
+    boxvH: number;
+    boxvL: number;
+    boxvR: number;
+    boxvh: number;
+    boxvl: number;
+    boxvr: number;
+    breve: number;
+    bsemi: number;
+    bsime: number;
+    bsolb: number;
+    bumpE: number;
+    bumpe: number;
+    caret: number;
+    caron: number;
+    ccaps: number;
+    ccirc: number;
+    ccups: number;
+    cedil: number;
+    check: number;
+    clubs: number;
+    colon: number;
+    comma: number;
+    crarr: number;
+    cross: number;
+    csube: number;
+    csupe: number;
+    ctdot: number;
+    cuepr: number;
+    cuesc: number;
+    cupor: number;
+    cuvee: number;
+    cuwed: number;
+    cwint: number;
+    dashv: number;
+    dblac: number;
+    ddarr: number;
+    delta: number;
+    dharl: number;
+    dharr: number;
+    diams: number;
+    disin: number;
+    doteq: number;
+    dtdot: number;
+    dtrif: number;
+    duarr: number;
+    duhar: number;
+    eDDot: number;
+    ecirc: number;
+    efDot: number;
+    emacr: number;
+    empty: number;
+    eogon: number;
+    eplus: number;
+    epsiv: number;
+    eqsim: number;
+    equiv: number;
+    erDot: number;
+    erarr: number;
+    esdot: number;
+    exist: number;
+    fflig: number;
+    filig: number;
+    fllig: number;
+    fltns: number;
+    forkv: number;
+    frasl: number;
+    frown: number;
+    gamma: number;
+    gcirc: number;
+    gescc: number;
+    gimel: number;
+    gneqq: number;
+    gnsim: number;
+    grave: number;
+    gsime: number;
+    gsiml: number;
+    gtcir: number;
+    gtdot: number;
+    harrw: number;
+    hcirc: number;
+    hoarr: number;
+    icirc: number;
+    iexcl: number;
+    iiint: number;
+    iiota: number;
+    ijlig: number;
+    imacr: number;
+    image: number;
+    imath: number;
+    imped: number;
+    infin: number;
+    iogon: number;
+    iprod: number;
+    isinE: number;
+    isins: number;
+    isinv: number;
+    iukcy: number;
+    jcirc: number;
+    jmath: number;
+    jukcy: number;
+    kappa: number;
+    lAarr: number;
+    lBarr: number;
+    langd: number;
+    laquo: number;
+    larrb: number;
+    lbarr: number;
+    lbbrk: number;
+    lbrke: number;
+    lceil: number;
+    ldquo: number;
+    lescc: number;
+    lhard: number;
+    lharu: number;
+    lhblk: number;
+    llarr: number;
+    lltri: number;
+    lneqq: number;
+    lnsim: number;
+    loang: number;
+    loarr: number;
+    lobrk: number;
+    lopar: number;
+    lrarr: number;
+    lrhar: number;
+    lrtri: number;
+    lsime: number;
+    lsimg: number;
+    lsquo: number;
+    ltcir: number;
+    ltdot: number;
+    ltrie: number;
+    ltrif: number;
+    mDDot: number;
+    mdash: number;
+    micro: number;
+    minus: number;
+    mumap: number;
+    nabla: number;
+    napos: number;
+    natur: number;
+    ncong: number;
+    ndash: number;
+    neArr: number;
+    nearr: number;
+    ngsim: number;
+    nhArr: number;
+    nharr: number;
+    nhpar: number;
+    nlArr: number;
+    nlarr: number;
+    nless: number;
+    nlsim: number;
+    nltri: number;
+    notin: number;
+    notni: number;
+    nprec: number;
+    nrArr: number;
+    nrarr: number;
+    nrtri: number;
+    nsime: number;
+    nsmid: number;
+    nspar: number;
+    nsube: number;
+    nsucc: number;
+    nsupe: number;
+    numsp: number;
+    nwArr: number;
+    nwarr: number;
+    ocirc: number;
+    odash: number;
+    oelig: number;
+    ofcir: number;
+    ohbar: number;
+    olarr: number;
+    olcir: number;
+    oline: number;
+    omacr: number;
+    omega: number;
+    operp: number;
+    oplus: number;
+    orarr: number;
+    order: number;
+    ovbar: number;
+    parsl: number;
+    phone: number;
+    plusb: number;
+    pluse: number;
+    pound: number;
+    prcue: number;
+    prime: number;
+    prnap: number;
+    prsim: number;
+    quest: number;
+    rAarr: number;
+    rBarr: number;
+    radic: number;
+    rangd: number;
+    range: number;
+    raquo: number;
+    rarrb: number;
+    rarrc: number;
+    rarrw: number;
+    ratio: number;
+    rbarr: number;
+    rbbrk: number;
+    rbrke: number;
+    rceil: number;
+    rdquo: number;
+    reals: number;
+    rhard: number;
+    rharu: number;
+    rlarr: number;
+    rlhar: number;
+    rnmid: number;
+    roang: number;
+    roarr: number;
+    robrk: number;
+    ropar: number;
+    rrarr: number;
+    rsquo: number;
+    rtrie: number;
+    rtrif: number;
+    sbquo: number;
+    sccue: number;
+    scirc: number;
+    scnap: number;
+    scsim: number;
+    sdotb: number;
+    sdote: number;
+    seArr: number;
+    searr: number;
+    setmn: number;
+    sharp: number;
+    sigma: number;
+    simeq: number;
+    simgE: number;
+    simlE: number;
+    simne: number;
+    slarr: number;
+    smile: number;
+    sqcap: number;
+    sqcup: number;
+    sqsub: number;
+    sqsup: number;
+    srarr: number;
+    starf: number;
+    strns: number;
+    subnE: number;
+    subne: number;
+    supnE: number;
+    supne: number;
+    swArr: number;
+    swarr: number;
+    szlig: number;
+    theta: number;
+    thkap: number;
+    thorn: number;
+    tilde: number;
+    times: number;
+    trade: number;
+    trisb: number;
+    tshcy: number;
+    twixt: number;
+    ubrcy: number;
+    ucirc: number;
+    udarr: number;
+    udhar: number;
+    uharl: number;
+    uharr: number;
+    uhblk: number;
+    ultri: number;
+    umacr: number;
+    uogon: number;
+    uplus: number;
+    upsih: number;
+    uring: number;
+    urtri: number;
+    utdot: number;
+    utrif: number;
+    uuarr: number;
+    vBarv: number;
+    vDash: number;
+    varpi: number;
+    vdash: number;
+    veeeq: number;
+    vltri: number;
+    vprop: number;
+    vrtri: number;
+    wcirc: number;
+    wedge: number;
+    xcirc: number;
+    xdtri: number;
+    xhArr: number;
+    xharr: number;
+    xlArr: number;
+    xlarr: number;
+    xodot: number;
+    xrArr: number;
+    xrarr: number;
+    xutri: number;
+    ycirc: number;
+    Aopf: number;
+    Ascr: number;
+    Auml: number;
+    Barv: number;
+    Beta: number;
+    Bopf: number;
+    Bscr: number;
+    CHcy: number;
+    COPY: number;
+    Cdot: number;
+    Copf: number;
+    Cscr: number;
+    DJcy: number;
+    DScy: number;
+    DZcy: number;
+    Darr: number;
+    Dopf: number;
+    Dscr: number;
+    Edot: number;
+    Eopf: number;
+    Escr: number;
+    Esim: number;
+    Euml: number;
+    Fopf: number;
+    Fscr: number;
+    GJcy: number;
+    Gdot: number;
+    Gopf: number;
+    Gscr: number;
+    Hopf: number;
+    Hscr: number;
+    IEcy: number;
+    IOcy: number;
+    Idot: number;
+    Iopf: number;
+    Iota: number;
+    Iscr: number;
+    Iuml: number;
+    Jopf: number;
+    Jscr: number;
+    KHcy: number;
+    KJcy: number;
+    Kopf: number;
+    Kscr: number;
+    LJcy: number;
+    Lang: number;
+    Larr: number;
+    Lopf: number;
+    Lscr: number;
+    Mopf: number;
+    Mscr: number;
+    NJcy: number;
+    Nopf: number;
+    Nscr: number;
+    Oopf: number;
+    Oscr: number;
+    Ouml: number;
+    Popf: number;
+    Pscr: number;
+    QUOT: number;
+    Qopf: number;
+    Qscr: number;
+    Rang: number;
+    Rarr: number;
+    Ropf: number;
+    Rscr: number;
+    SHcy: number;
+    Sopf: number;
+    Sqrt: number;
+    Sscr: number;
+    Star: number;
+    TScy: number;
+    Topf: number;
+    Tscr: number;
+    Uarr: number;
+    Uopf: number;
+    Upsi: number;
+    Uscr: number;
+    Uuml: number;
+    Vbar: number;
+    Vert: number;
+    Vopf: number;
+    Vscr: number;
+    Wopf: number;
+    Wscr: number;
+    Xopf: number;
+    Xscr: number;
+    YAcy: number;
+    YIcy: number;
+    YUcy: number;
+    Yopf: number;
+    Yscr: number;
+    Yuml: number;
+    ZHcy: number;
+    Zdot: number;
+    Zeta: number;
+    Zopf: number;
+    Zscr: number;
+    andd: number;
+    andv: number;
+    ange: number;
+    aopf: number;
+    apid: number;
+    apos: number;
+    ascr: number;
+    auml: number;
+    bNot: number;
+    bbrk: number;
+    beta: number;
+    beth: number;
+    bnot: number;
+    bopf: number;
+    boxH: number;
+    boxV: number;
+    boxh: number;
+    boxv: number;
+    bscr: number;
+    bsim: number;
+    bsol: number;
+    bull: number;
+    bump: number;
+    cdot: number;
+    cent: number;
+    chcy: number;
+    cirE: number;
+    circ: number;
+    cire: number;
+    comp: number;
+    cong: number;
+    copf: number;
+    copy: number;
+    cscr: number;
+    csub: number;
+    csup: number;
+    dArr: number;
+    dHar: number;
+    darr: number;
+    dash: number;
+    diam: number;
+    djcy: number;
+    dopf: number;
+    dscr: number;
+    dscy: number;
+    dsol: number;
+    dtri: number;
+    dzcy: number;
+    eDot: number;
+    ecir: number;
+    edot: number;
+    emsp: number;
+    ensp: number;
+    eopf: number;
+    epar: number;
+    epsi: number;
+    escr: number;
+    esim: number;
+    euml: number;
+    euro: number;
+    excl: number;
+    flat: number;
+    fnof: number;
+    fopf: number;
+    fork: number;
+    fscr: number;
+    gdot: number;
+    geqq: number;
+    gjcy: number;
+    gnap: number;
+    gneq: number;
+    gopf: number;
+    gscr: number;
+    gsim: number;
+    gtcc: number;
+    hArr: number;
+    half: number;
+    harr: number;
+    hbar: number;
+    hopf: number;
+    hscr: number;
+    iecy: number;
+    imof: number;
+    iocy: number;
+    iopf: number;
+    iota: number;
+    iscr: number;
+    isin: number;
+    iuml: number;
+    jopf: number;
+    jscr: number;
+    khcy: number;
+    kjcy: number;
+    kopf: number;
+    kscr: number;
+    lArr: number;
+    lHar: number;
+    lang: number;
+    larr: number;
+    late: number;
+    lcub: number;
+    ldca: number;
+    ldsh: number;
+    leqq: number;
+    ljcy: number;
+    lnap: number;
+    lneq: number;
+    lopf: number;
+    lozf: number;
+    lpar: number;
+    lscr: number;
+    lsim: number;
+    lsqb: number;
+    ltcc: number;
+    ltri: number;
+    macr: number;
+    male: number;
+    malt: number;
+    mlcp: number;
+    mldr: number;
+    mopf: number;
+    mscr: number;
+    nbsp: number;
+    ncap: number;
+    ncup: number;
+    ngeq: number;
+    ngtr: number;
+    nisd: number;
+    njcy: number;
+    nldr: number;
+    nleq: number;
+    nmid: number;
+    nopf: number;
+    npar: number;
+    nscr: number;
+    nsim: number;
+    nsub: number;
+    nsup: number;
+    ntgl: number;
+    ntlg: number;
+    oast: number;
+    ocir: number;
+    odiv: number;
+    odot: number;
+    ogon: number;
+    oint: number;
+    omid: number;
+    oopf: number;
+    opar: number;
+    ordf: number;
+    ordm: number;
+    oror: number;
+    oscr: number;
+    osol: number;
+    ouml: number;
+    para: number;
+    part: number;
+    perp: number;
+    phiv: number;
+    plus: number;
+    popf: number;
+    prap: number;
+    prec: number;
+    prnE: number;
+    prod: number;
+    prop: number;
+    pscr: number;
+    qint: number;
+    qopf: number;
+    qscr: number;
+    quot: number;
+    rArr: number;
+    rHar: number;
+    race: number;
+    rang: number;
+    rarr: number;
+    rcub: number;
+    rdca: number;
+    rdsh: number;
+    real: number;
+    rect: number;
+    rhov: number;
+    ring: number;
+    ropf: number;
+    rpar: number;
+    rscr: number;
+    rsqb: number;
+    rtri: number;
+    scap: number;
+    scnE: number;
+    sdot: number;
+    sect: number;
+    semi: number;
+    sext: number;
+    shcy: number;
+    sime: number;
+    simg: number;
+    siml: number;
+    smid: number;
+    smte: number;
+    solb: number;
+    sopf: number;
+    spar: number;
+    squf: number;
+    sscr: number;
+    star: number;
+    subE: number;
+    sube: number;
+    succ: number;
+    sung: number;
+    sup1: number;
+    sup2: number;
+    sup3: number;
+    supE: number;
+    supe: number;
+    tbrk: number;
+    tdot: number;
+    tint: number;
+    toea: number;
+    topf: number;
+    tosa: number;
+    trie: number;
+    tscr: number;
+    tscy: number;
+    uArr: number;
+    uHar: number;
+    uarr: number;
+    uopf: number;
+    upsi: number;
+    uscr: number;
+    utri: number;
+    uuml: number;
+    vArr: number;
+    vBar: number;
+    varr: number;
+    vert: number;
+    vopf: number;
+    vscr: number;
+    wopf: number;
+    wscr: number;
+    xcap: number;
+    xcup: number;
+    xmap: number;
+    xnis: number;
+    xopf: number;
+    xscr: number;
+    xvee: number;
+    yacy: number;
+    yicy: number;
+    yopf: number;
+    yscr: number;
+    yucy: number;
+    yuml: number;
+    zdot: number;
+    zeta: number;
+    zhcy: number;
+    zopf: number;
+    zscr: number;
+    zwnj: number;
+    AMP: number;
+    Acy: number;
+    Afr: number;
+    And: number;
+    Bcy: number;
+    Bfr: number;
+    Cap: number;
+    Cfr: number;
+    Chi: number;
+    Cup: number;
+    Dcy: number;
+    Del: number;
+    Dfr: number;
+    Dot: number;
+    ENG: number;
+    ETH: number;
+    Ecy: number;
+    Efr: number;
+    Eta: number;
+    Fcy: number;
+    Ffr: number;
+    Gcy: number;
+    Gfr: number;
+    Hat: number;
+    Hfr: number;
+    Icy: number;
+    Ifr: number;
+    Int: number;
+    Jcy: number;
+    Jfr: number;
+    Kcy: number;
+    Kfr: number;
+    Lcy: number;
+    Lfr: number;
+    Lsh: number;
+    Map: number;
+    Mcy: number;
+    Mfr: number;
+    Ncy: number;
+    Nfr: number;
+    Not: number;
+    Ocy: number;
+    Ofr: number;
+    Pcy: number;
+    Pfr: number;
+    Phi: number;
+    Psi: number;
+    Qfr: number;
+    REG: number;
+    Rcy: number;
+    Rfr: number;
+    Rho: number;
+    Rsh: number;
+    Scy: number;
+    Sfr: number;
+    Sub: number;
+    Sum: number;
+    Sup: number;
+    Tab: number;
+    Tau: number;
+    Tcy: number;
+    Tfr: number;
+    Ucy: number;
+    Ufr: number;
+    Vcy: number;
+    Vee: number;
+    Vfr: number;
+    Wfr: number;
+    Xfr: number;
+    Ycy: number;
+    Yfr: number;
+    Zcy: number;
+    Zfr: number;
+    acd: number;
+    acy: number;
+    afr: number;
+    amp: number;
+    and: number;
+    ang: number;
+    apE: number;
+    ape: number;
+    ast: number;
+    bcy: number;
+    bfr: number;
+    bot: number;
+    cap: number;
+    cfr: number;
+    chi: number;
+    cir: number;
+    cup: number;
+    dcy: number;
+    deg: number;
+    dfr: number;
+    die: number;
+    div: number;
+    dot: number;
+    ecy: number;
+    efr: number;
+    egs: number;
+    ell: number;
+    els: number;
+    eng: number;
+    eta: number;
+    eth: number;
+    fcy: number;
+    ffr: number;
+    gEl: number;
+    gap: number;
+    gcy: number;
+    gel: number;
+    geq: number;
+    ges: number;
+    gfr: number;
+    ggg: number;
+    glE: number;
+    gla: number;
+    glj: number;
+    gnE: number;
+    gne: number;
+    hfr: number;
+    icy: number;
+    iff: number;
+    ifr: number;
+    int: number;
+    jcy: number;
+    jfr: number;
+    kcy: number;
+    kfr: number;
+    lEg: number;
+    lap: number;
+    lat: number;
+    lcy: number;
+    leg: number;
+    leq: number;
+    les: number;
+    lfr: number;
+    lgE: number;
+    lnE: number;
+    lne: number;
+    loz: number;
+    lrm: number;
+    lsh: number;
+    map: number;
+    mcy: number;
+    mfr: number;
+    mho: number;
+    mid: number;
+    nap: number;
+    ncy: number;
+    nfr: number;
+    nge: number;
+    ngt: number;
+    nis: number;
+    niv: number;
+    nle: number;
+    nlt: number;
+    not: number;
+    npr: number;
+    nsc: number;
+    num: number;
+    ocy: number;
+    ofr: number;
+    ogt: number;
+    ohm: number;
+    olt: number;
+    ord: number;
+    orv: number;
+    par: number;
+    pcy: number;
+    pfr: number;
+    phi: number;
+    piv: number;
+    prE: number;
+    pre: number;
+    psi: number;
+    qfr: number;
+    rcy: number;
+    reg: number;
+    rfr: number;
+    rho: number;
+    rlm: number;
+    rsh: number;
+    scE: number;
+    sce: number;
+    scy: number;
+    sfr: number;
+    shy: number;
+    sim: number;
+    smt: number;
+    sol: number;
+    squ: number;
+    sub: number;
+    sum: number;
+    sup: number;
+    tau: number;
+    tcy: number;
+    tfr: number;
+    top: number;
+    ucy: number;
+    ufr: number;
+    uml: number;
+    vcy: number;
+    vee: number;
+    vfr: number;
+    wfr: number;
+    xfr: number;
+    ycy: number;
+    yen: number;
+    yfr: number;
+    zcy: number;
+    zfr: number;
+    zwj: number;
+    DD: number;
+    GT: number;
+    Gg: number;
+    Gt: number;
+    Im: number;
+    LT: number;
+    Ll: number;
+    Lt: number;
+    Mu: number;
+    Nu: number;
+    Or: number;
+    Pi: number;
+    Pr: number;
+    Re: number;
+    Sc: number;
+    Xi: number;
+    ac: number;
+    af: number;
+    ap: number;
+    dd: number;
+    ee: number;
+    eg: number;
+    el: number;
+    gE: number;
+    ge: number;
+    gg: number;
+    gl: number;
+    gt: number;
+    ic: number;
+    ii: number;
+    in: number;
+    it: number;
+    lE: number;
+    le: number;
+    lg: number;
+    ll: number;
+    lt: number;
+    mp: number;
+    mu: number;
+    ne: number;
+    ni: number;
+    nu: number;
+    oS: number;
+    or: number;
+    pi: number;
+    pm: number;
+    pr: number;
+    rx: number;
+    sc: number;
+    wp: number;
+    wr: number;
+    xi: number;
+};
+export default _default;
diff --git a/node_modules/svelte/types/parse/utils/html.d.ts b/node_modules/svelte/types/parse/utils/html.d.ts
new file mode 100644
index 0000000..891c237
--- /dev/null
+++ b/node_modules/svelte/types/parse/utils/html.d.ts
@@ -0,0 +1 @@
+export declare function decode_character_references(html: string): string;
diff --git a/node_modules/svelte/types/preprocess/index.d.ts b/node_modules/svelte/types/preprocess/index.d.ts
new file mode 100644
index 0000000..6fd24ba
--- /dev/null
+++ b/node_modules/svelte/types/preprocess/index.d.ts
@@ -0,0 +1,29 @@
+import { SourceMap } from 'magic-string';
+export interface PreprocessorGroup {
+    markup?: (options: {
+        content: string;
+        filename: string;
+    }) => {
+        code: string;
+        map?: SourceMap | string;
+        dependencies?: string[];
+    };
+    style?: Preprocessor;
+    script?: Preprocessor;
+}
+export declare type Preprocessor = (options: {
+    content: string;
+    attributes: Record<string, string | boolean>;
+    filename?: string;
+}) => {
+    code: string;
+    map?: SourceMap | string;
+    dependencies?: string[];
+};
+export default function preprocess(source: string, preprocessor: PreprocessorGroup | PreprocessorGroup[], options?: {
+    filename?: string;
+}): Promise<{
+    code: string;
+    dependencies: any[];
+    toString(): string;
+}>;
diff --git a/node_modules/svelte/types/store.d.ts b/node_modules/svelte/types/store.d.ts
new file mode 100644
index 0000000..e758b22
--- /dev/null
+++ b/node_modules/svelte/types/store.d.ts
@@ -0,0 +1,64 @@
+/** Callback to inform of a value updates. */
+declare type Subscriber<T> = (value: T) => void;
+/** Unsubscribes from value updates. */
+declare type Unsubscriber = () => void;
+/** Callback to update a value. */
+declare type Updater<T> = (value: T) => T;
+/** Cleanup logic callback. */
+declare type Invalidater<T> = (value?: T) => void;
+/** Start and stop notification callbacks. */
+declare type StartStopNotifier<T> = (set: Subscriber<T>) => Unsubscriber | void;
+/** Readable interface for subscribing. */
+export interface Readable<T> {
+    /**
+     * Subscribe on value changes.
+     * @param run subscription callback
+     * @param invalidate cleanup callback
+     */
+    subscribe(run: Subscriber<T>, invalidate?: Invalidater<T>): Unsubscriber;
+}
+/** Writable interface for both updating and subscribing. */
+export interface Writable<T> extends Readable<T> {
+    /**
+     * Set value and inform subscribers.
+     * @param value to set
+     */
+    set(value: T): void;
+    /**
+     * Update value using callback and inform subscribers.
+     * @param updater callback
+     */
+    update(updater: Updater<T>): void;
+}
+/**
+ * Creates a `Readable` store that allows reading by subscription.
+ * @param value initial value
+ * @param {StartStopNotifier}start start and stop notifications for subscriptions
+ */
+export declare function readable<T>(value: T, start: StartStopNotifier<T>): Readable<T>;
+/**
+ * Create a `Writable` store that allows both updating and reading by subscription.
+ * @param {*=}value initial value
+ * @param {StartStopNotifier=}start start and stop notifications for subscriptions
+ */
+export declare function writable<T>(value: T, start?: StartStopNotifier<T>): Writable<T>;
+/** One or more `Readable`s. */
+declare type Stores = Readable<any> | [Readable<any>, ...Array<Readable<any>>];
+/** One or more values from `Readable` stores. */
+declare type StoresValues<T> = T extends Readable<infer U> ? U : {
+    [K in keyof T]: T[K] extends Readable<infer U> ? U : never;
+};
+/**
+ * Derived value store by synchronizing one or more readable stores and
+ * applying an aggregation function over its input values.
+ * @param {Stores} stores input stores
+ * @param {function(Stores=, function(*)=):*}fn function callback that aggregates the values
+ * @param {*=}initial_value when used asynchronously
+ */
+export declare function derived<T, S extends Stores>(stores: S, fn: (values: StoresValues<S>, set?: Subscriber<T>) => T | Unsubscriber | void, initial_value?: T): Readable<T>;
+/**
+ * Get the current value from a store by subscribing and immediately unsubscribing.
+ * @param store readable
+ */
+export declare function get<T>(store: Readable<T>): T;
+export {};
diff --git a/node_modules/svelte/types/transition.d.ts b/node_modules/svelte/types/transition.d.ts
new file mode 100644
index 0000000..557a30f
--- /dev/null
+++ b/node_modules/svelte/types/transition.d.ts
@@ -0,0 +1,59 @@
+import { cubicOut, cubicInOut } from 'svelte/easing';
+export declare function fade(node: any, { delay, duration }: {
+    delay?: number;
+    duration?: number;
+}): {
+    delay: number;
+    duration: number;
+    css: (t: any) => string;
+};
+export declare function fly(node: any, { delay, duration, easing, x, y, opacity }: {
+    delay?: number;
+    duration?: number;
+    easing?: typeof cubicOut;
+    x?: number;
+    y?: number;
+    opacity?: number;
+}): {
+    delay: number;
+    duration: number;
+    easing: typeof cubicOut;
+    css: (t: any, u: any) => string;
+};
+export declare function slide(node: any, { delay, duration, easing }: {
+    delay?: number;
+    duration?: number;
+    easing?: typeof cubicOut;
+}): {
+    delay: number;
+    duration: number;
+    easing: typeof cubicOut;
+    css: (t: any) => string;
+};
+export declare function scale(node: any, { delay, duration, easing, start, opacity }: {
+    delay?: number;
+    duration?: number;
+    easing?: typeof cubicOut;
+    start?: number;
+    opacity?: number;
+}): {
+    delay: number;
+    duration: number;
+    easing: typeof cubicOut;
+    css: (t: any, u: any) => string;
+};
+export declare function draw(node: any, { delay, speed, duration, easing }: {
+    delay?: number;
+    speed: any;
+    duration: any;
+    easing?: typeof cubicInOut;
+}): {
+    delay: number;
+    duration: any;
+    easing: typeof cubicInOut;
+    css: (t: any, u: any) => string;
+};
+export declare function crossfade({ fallback, ...defaults }: {
+    [x: string]: any;
+    fallback: any;
+}): ((node: any, params: any) => () => any)[];
diff --git a/node_modules/svelte/types/utils/error.d.ts b/node_modules/svelte/types/utils/error.d.ts
new file mode 100644
index 0000000..185145d
--- /dev/null
+++ b/node_modules/svelte/types/utils/error.d.ts
@@ -0,0 +1,8 @@
+export default function error(message: string, props: {
+    name: string;
+    code: string;
+    source: string;
+    filename: string;
+    start: number;
+    end?: number;
+}): void;
diff --git a/node_modules/svelte/types/utils/full_char_code_at.d.ts b/node_modules/svelte/types/utils/full_char_code_at.d.ts
new file mode 100644
index 0000000..f0d6763
--- /dev/null
+++ b/node_modules/svelte/types/utils/full_char_code_at.d.ts
@@ -0,0 +1 @@
+export default function full_char_code_at(str: string, i: number): number;
diff --git a/node_modules/svelte/types/utils/fuzzymatch.d.ts b/node_modules/svelte/types/utils/fuzzymatch.d.ts
new file mode 100644
index 0000000..6aa4e01
--- /dev/null
+++ b/node_modules/svelte/types/utils/fuzzymatch.d.ts
@@ -0,0 +1 @@
+export default function fuzzymatch(name: string, names: string[]): any;
diff --git a/node_modules/svelte/types/utils/get_code_frame.d.ts b/node_modules/svelte/types/utils/get_code_frame.d.ts
new file mode 100644
index 0000000..50943dc
--- /dev/null
+++ b/node_modules/svelte/types/utils/get_code_frame.d.ts
@@ -0,0 +1 @@
+export default function get_code_frame(source: string, line: number, column: number): string;
diff --git a/node_modules/svelte/types/utils/indentation.d.ts b/node_modules/svelte/types/utils/indentation.d.ts
new file mode 100644
index 0000000..33596e8
--- /dev/null
+++ b/node_modules/svelte/types/utils/indentation.d.ts
@@ -0,0 +1,4 @@
+import MagicString from 'magic-string';
+import { Node } from '../interfaces';
+export declare function remove_indentation(code: MagicString, node: Node): void;
+export declare function add_indentation(code: MagicString, node: Node, levels?: number): void;
diff --git a/node_modules/svelte/types/utils/list.d.ts b/node_modules/svelte/types/utils/list.d.ts
new file mode 100644
index 0000000..b61de69
--- /dev/null
+++ b/node_modules/svelte/types/utils/list.d.ts
@@ -0,0 +1 @@
+export default function list(items: string[], conjunction?: string): string;
diff --git a/node_modules/svelte/types/utils/names.d.ts b/node_modules/svelte/types/utils/names.d.ts
new file mode 100644
index 0000000..8d5b66f
--- /dev/null
+++ b/node_modules/svelte/types/utils/names.d.ts
@@ -0,0 +1,6 @@
+export declare const globals: Set<string>;
+export declare const reserved: Set<string>;
+export declare function is_void(name: string): boolean;
+export declare function quote_name_if_necessary(name: string): string;
+export declare function quote_prop_if_necessary(name: string): string;
+export declare function sanitize(name: string): string;
diff --git a/node_modules/svelte/types/utils/namespaces.d.ts b/node_modules/svelte/types/utils/namespaces.d.ts
new file mode 100644
index 0000000..90c790d
--- /dev/null
+++ b/node_modules/svelte/types/utils/namespaces.d.ts
@@ -0,0 +1,8 @@
+export declare const html = "http://www.w3.org/1999/xhtml";
+export declare const mathml = "http://www.w3.org/1998/Math/MathML";
+export declare const svg = "http://www.w3.org/2000/svg";
+export declare const xlink = "http://www.w3.org/1999/xlink";
+export declare const xml = "http://www.w3.org/XML/1998/namespace";
+export declare const xmlns = "http://www.w3.org/2000/xmlns";
+export declare const valid_namespaces: string[];
+export declare const namespaces: Record<string, string>;
diff --git a/node_modules/svelte/types/utils/nodes_match.d.ts b/node_modules/svelte/types/utils/nodes_match.d.ts
new file mode 100644
index 0000000..065e81b
--- /dev/null
+++ b/node_modules/svelte/types/utils/nodes_match.d.ts
@@ -0,0 +1 @@
+export declare function nodes_match(a: any, b: any): any;
diff --git a/node_modules/svelte/types/utils/patterns.d.ts b/node_modules/svelte/types/utils/patterns.d.ts
new file mode 100644
index 0000000..be6dcde
--- /dev/null
+++ b/node_modules/svelte/types/utils/patterns.d.ts
@@ -0,0 +1,2 @@
+export declare const whitespace: RegExp;
+export declare const dimensions: RegExp;
diff --git a/node_modules/svelte/types/utils/repeat.d.ts b/node_modules/svelte/types/utils/repeat.d.ts
new file mode 100644
index 0000000..a20ac93
--- /dev/null
+++ b/node_modules/svelte/types/utils/repeat.d.ts
@@ -0,0 +1 @@
+export default function repeat(str: string, i: number): string;
diff --git a/node_modules/svelte/types/utils/trim.d.ts b/node_modules/svelte/types/utils/trim.d.ts
new file mode 100644
index 0000000..7f8e282
--- /dev/null
+++ b/node_modules/svelte/types/utils/trim.d.ts
@@ -0,0 +1,2 @@
+export declare function trim_start(str: string): string;
+export declare function trim_end(str: string): string;
